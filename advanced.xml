<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS : 20070311 -->

 <chapter id="tutorial-advanced">
  <title>Fonctionnalités avancées</title>

  <sect1 id="tutorial-advanced-intro">
   <title>Introduction</title>

   <para>
    Le chapitre précédent couvre les bases de l'utilisation
    de <acronym>SQL</acronym> pour le stockage et l'accès aux données avec
    <productname>PostgreSQL</productname>. Il est temps d'aborder
    quelques fonctionnalités avancées du <acronym>SQL</acronym>
    qui simplifient la gestion et empêchent la perte ou la corruption des
    données. Quelques extensions de <productname>PostgreSQL</productname> sont
    également abordées.
   </para>

   <para>
    Ce chapitre fait occasionnellement référence aux exemples disponibles dans le
    <xref linkend="tutorial-sql"/> pour les modifier ou les améliorer. Il est donc
    préférable d'avoir lu ce chapitre. Quelques exemples de ce
    chapitre sont également disponibles dans <filename>advanced.sql</filename>
    situé dans le répertoire du tutoriel. Ce fichier contient, de plus, quelques
    données à charger pour utiliser l'exemple. Cela n'est pas repris ici 
    (on peut se référer à la <xref linkend="tutorial-sql-intro"/> pour savoir comment
    utiliser ce fichier).
   </para>
  </sect1>


  <sect1 id="tutorial-views">
   <title>Vues</title>

   <indexterm zone="tutorial-views">
    <primary>vue</primary>
    <secondary>view</secondary>
   </indexterm>

   <para>
    Se référer aux requêtes de la <xref linkend="tutorial-join"/>.
    Si la liste des enregistrements du temps et des villes est d'un
    intérêt particulier pour l'application considérée mais qu'il devient
    contraignant de saisir la requête à chaque utilisation, il est possible
    de créer une <firstterm>vue</firstterm> avec la requête. De ce fait, la
    requête est nommée et il peut y être fait référence de la même façon
    qu'il est fait référence à une table&nbsp;:

<programlisting>CREATE VIEW ma_vue AS
    SELECT ville, t_basse, t_haute, prcp, date, emplacement
        FROM temps, villes
        WHERE ville = nom;

SELECT * FROM ma_vue;</programlisting>
   </para>

   <para>
    L'utilisation des vues est un aspect clé d'une bonne
    conception des bases de données SQL. Les vues permettent
    d'encapsuler les détails de la structure des tables. Celle-ci peut
    alors changer avec l'évolution de l'application, tandis que l'interface reste
    constante.
   </para>

   <para>
    Les vues peuvent être utilisées dans quasiment toutes les situations
    où une vraie table est utilisable. Il n'est, de plus, pas
    inhabituel de construire des vues reposant sur d'autres vues.
   </para>
  </sect1>


  <sect1 id="tutorial-fk">
   <title>Clés étrangères</title>

   <indexterm zone="tutorial-fk">
    <primary>clé étrangère</primary>
    <secondary>foreign key</secondary>
   </indexterm>

   <indexterm zone="tutorial-fk">
    <primary>intégrité référentielle</primary>
    <secondary>referential integrity</secondary>
   </indexterm>

   <para>
    Soient les tables 
    <classname>temps</classname> et <classname>villes</classname> définies
    dans le <xref linkend="tutorial-sql"/>.
    Il s'agit maintenant de s'assurer que personne
    n'insère de ligne dans la table <classname>temps</classname> qui ne
    corresponde à une entrée dans la table <classname>villes</classname>.
    On appelle cela maintenir l'<firstterm>intégrité
    référentielle</firstterm> des données. Dans les systèmes de bases de
    données simplistes, lorsqu'au moins c'est possible, cela est parfois
    obtenu par la vérification préalable de l'existence d'un enregistrement
    correspondant dans la table <classname>villes</classname>, puis par
    l'insertion, ou l'interdiction, du nouvel enregistrement dans 
    <classname>temps</classname>. Puisque cette approche, peu pratique, 
    présente un certain nombre d'inconvénients, 
    <productname>PostgreSQL</productname> peut se charger du maintien de
    l'<firstterm>intégrité référentielle</firstterm>.
   </para>

   <para>
    La nouvelle déclaration des tables ressemble alors à ceci&nbsp;:

<programlisting>CREATE TABLE villes (
	ville       varchar(80) primary key,
	emplacement point
);

CREATE TABLE temps (
	ville      varchar(80) references villes,
	t_haute int,
	t_basse int,
	prcp       real,
	date       date
);</programlisting>

    Lors d'une tentative d'insertion d'enregistrement non valide&nbsp;:

<programlisting>INSERT INTO temps VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');</programlisting>

<screen>ERROR:  insert or update on table "temps" violates foreign key constraint "temps_ville_fkey"
DETAIL : Key (ville)=(a) is not present in table "villes".</screen>

<!-- SAS 20061109
Pourquoi ne pas traduire les messages d'erreur ?
<screen>ERROR:  insert or update on table "temps" violates foreign key constraint "temps_ville_fkey"
DETAIL:  Key (ville)=(Berkeley) is not present in table "villes".</screen>
-->
   </para>

<!-- SAS 20080225
Clé secondaire ? -->
   <para>
    Le comportement des clés étrangères peut être adapté très finement à
    une application particulière. Ce tutoriel ne va pas plus loin que cet exemple simple.
    De plus amples informations sont accessibles dans le <xref linkend="ddl"/>.
    Une utilisation efficiente des clés étrangères améliore la
    qualité des applications accédant aux bases de données. Il est donc
    fortement conseillé d'apprendre à les utiliser.
   </para>
  </sect1>


  <sect1 id="tutorial-transactions">
   <title>Transactions</title>

   <indexterm zone="tutorial-transactions">
    <primary>transaction</primary>
   </indexterm>

   <para>
    Les <firstterm>transactions</firstterm> sont un concept fondamental de tous les
    systèmes de bases de données. Une transaction assemble plusieurs étapes
    en une seule opération tout-ou-rien.
    Les états intermédiaires entre les étapes ne sont pas visibles par les
    transactions concurrentes. De plus, si un échec survient qui empêche le
    succès de la transaction, alors aucune des étapes n'affecte la base
    de données.
   </para>

   <para>
    Si l'on considère, par exemple, la base de données d'une banque qui
    contient le solde de différents comptes clients et le solde total des
    dépôts par branches et que l'on veuille enregistrer un virement de
    100 euros du compte d'Alice vers celui de Bob, 
    les commandes SQL peuvent ressembler à cela (après simplification)&nbsp;:

<programlisting>UPDATE comptes SET balance = balance - 100.00
    WHERE nom = 'Alice';
UPDATE branches SET balance = balance - 100.00
    WHERE nom = (SELECT nom_branche FROM comptes WHERE nom = 'Alice');
UPDATE comptes SET balance = balance + 100.00
    WHERE nom = 'Bob';
UPDATE branches SET balance = balance + 100.00
    WHERE nom = (SELECT nom_branche FROM comptes WHERE nom = 'Bob');</programlisting>
   </para>

   <para>
    Ce ne sont pas les détails des commandes qui importent ici&nbsp;; le point
    important est la nécessité de plusieurs mises à jour séparées pour
    accomplir cette opération assez simple. Les employés de la banque
    veulent être assurés que, soit toutes les commandes sont effectuées,
    soit aucune ne l'est. Il n'est pas envisageable que, suite à une erreur
    du système, Bob reçoive 100 euros qui n'ont pas été débités du compte
    d'Alice. De la même façon, Alice ne restera pas longtemps une cliente fidèle
    si elle est débitée du montant sans que celui-ci ne soit crédité sur le compte
    de Bob.
   </para>
   <para>
    Il est important de garantir que si quelque chose se
    passe mal, aucune des étapes déjà exécutées n'est prise en compte. Le
    regroupement des mises à jour au sein d'une <firstterm>transaction</firstterm>
    apporte cette garantie.
    Une transaction est dite <firstterm>atomique</firstterm>&nbsp;:
    du point de vue des autres transactions, elle passe complètement ou pas du tout.
   </para>

   <para>
    Il est également nécessaire de garantir qu'une fois la transaction
    terminée et validée par la base de données, les transactions sont
    enregistrées définitivement et ne peuvent être perdues, même si une
    panne survient peu après.
   </para>
   <para>
    Ainsi, si un retrait d'argent est effectué par Bob, il ne faut
    absolument pas que le débit de son compte disparaisse avec l'apparition
    d'une panne juste après son départ de la banque. 
   </para>
   <para>
    Une base de données transactionnelle garantit que toutes les mises à jour
    faites lors d'une transaction sont stockées de manière persistante
    (c'est-à-dire sur disque) avant que la transaction ne soit déclarée validée.
   </para>

   <para>
    Une autre propriété importante des bases de données transactionnelles est
    en relation étroite avec la notion de mises à jour atomiques&nbsp;: quand
    plusieurs transactions sont lancées en parallèle, aucune d'entre elles
    ne doit être capable de voir les modifications incomplètes effectuées
    par les autres.
   </para>
   <para>
    Ainsi, si une transaction calcule le total de toutes les branches,
    inclure le débit de la branche d'Alice sans le crédit de la branche de
    Bob, ou vice-versa, est une véritable erreur.
   </para>
   <para>
    Les transactions doivent donc être tout-ou-rien, non seulement pour leur
    effet persistant sur la base de données, mais aussi pour leur visibilité
    au moment de leur exécution. Les mises à jour faites jusque-là par une
    transaction ouverte sont invisibles aux autres transactions jusqu'à la fin
    de celle-là. À ce moment toutes les mises à jours deviennent
    simultanément visibles.
   </para>

   <para>
    Sous <productname>PostgreSQL</productname>, une transaction est déclarée 
    en entourant les commandes SQL de la transaction par les commandes
    <command>BEGIN</command> et <command>COMMIT</command>. 
   </para>
   <para>
    La transaction bancaire ressemble alors à ceci&nbsp;:

<programlisting>BEGIN;
UPDATE comptes SET balance = balance - 100.00
    WHERE nom = 'Alice';
-- etc etc
COMMIT;</programlisting>
   </para>

   <para>
    Si, au cours de la transaction, il est décidé de ne pas valider
    (peut-être la banque s'aperçoit-elle que la balance d'Alice passe en 
    négatif), la commande <command>ROLLBACK</command> peut être utilisée à
    la place de <command>COMMIT</command>. Toutes les mises à jour réalisées
    jusque-là sont alors annulées.
   </para>

   <para>
    En fait, <productname>PostgreSQL</productname> traite chaque instruction SQL comme
    si elle était exécutée dans une transaction. En l'absence de commande
    <command>BEGIN</command> explicite, chaque instruction individuelle se trouve
    implicitement entourée d'un <command>BEGIN</command> et (en cas de succès) d'un
    <command>COMMIT</command>. 
   </para>
   <para>
    Un groupe d'instructions entourées par 
    <command>BEGIN</command> et <command>COMMIT</command> est parfois appelé 
    <firstterm>bloc transactionnel</firstterm>.
   </para>

   <note>
    <para>
     Quelques bibliothèques clientes lancent les commandes
     <command>BEGIN</command> et <command>COMMIT</command> automatiquement.
     L'utilisateur bénéficie alors des effets des blocs transactionnels
     sans les demander. Ces informations se trouvent en général dans la
     documentation de l'interface utilisée.
    </para>
   </note>
   
   <para>
    Il est possible d'augmenter la granularité du contrôle des instructions
    au sein d'une transaction en utilisant des 
    <firstterm>points de retournement</firstterm>
    (<foreignphrase>savepoint</foreignphrase>). Ceux-ci permettent d'annuler des
    parties de la transaction tout en validant le reste.
   </para>
   <para>
    Après avoir défini un point de retournement à l'aide de
    <command>SAVEPOINT</command>, les instructions exécutées depuis ce point
    peuvent, au besoin, être annulées avec <command>ROLLBACK TO</command>. 
    Toutes les modifications de la base de données effectuées par la
    transaction entre le moment où le point de retournement a été défini et
    celui où l'annulation est demandée sont annulées mais les modifications
    antérieures à ce point sont conservées.
   </para> 

   <para>
    Le retour à un point de retournement ne l'annule pas. Il reste défini et
    peut donc être utilisé plusieurs fois. À l'inverse, lorsqu'il n'est plus
    nécessaire de revenir à un point de sauvegarde particulier, il peut être
    relâché, ce qui permet de libérer des ressources systèmes. Il faut
    savoir toutefois que relâcher un point de retournement, ou y revenir
    relâche tous les points de sauvegarde qui ont été définis après.
   </para> 

   <para>
    Tout ceci survient à l'intérieur du bloc de transaction, et n'est donc pas
    visible par les autres sessions en cours sur la base de données. Si le
    bloc est validé, et à ce moment-là seulement, toutes les actions validées
    deviennent immédiatement visibles par les autres sessions, tandis que
    les actions annulées ne le seront jamais.
   </para> 

   <para>
    Reconsidérant la base de données de la banque, on peut supposer vouloir
    débiter le compte d'Alice de $100.00, somme à créditer sur le compte de Bob,
    mais considérer plus tard que c'est le compte de Wally qu'il convient de
    créditer. À l'aide des points de retournement, cela peut-être réalisé
    ainsi&nbsp;:

<programlisting>BEGIN;
UPDATE comptes SET balance = balance - 100.00
    WHERE nom = 'Alice';
SAVEPOINT mon_pointdesauvegarde;
UPDATE comptes SET balance = balance + 100.00
    WHERE nom = 'Bob';
-- oups ... oublions ça et créditons le compte de Wally
ROLLBACK TO mon_pointdesauvegarde;
UPDATE comptes SET balance = balance + 100.00
    WHERE nom = 'Wally';
COMMIT;</programlisting>
   </para>

   <para>
    Cet exemple est bien sûr très simplifié mais de nombreux contrôles sont
    réalisables au sein d'un bloc de transaction grâce à l'utilisation des points de
    retournement. Qui plus est, <command>ROLLBACK TO</command> est le seul moyen
    de regagner le contrôle d'un bloc de transaction placé dans un état
    d'annulation par le système du fait d'une erreur. C'est plus rapide que
    de tout annuler pour tout recommencer.
   </para>
  </sect1>


  <sect1 id="tutorial-window">
   <title id="tutorial-window-title">Fonctions window</title>

   <indexterm zone="tutorial-window">
    <primary>fonction window</primary>
   </indexterm>

<!-- SAS:20091109
  window function : fonction de fenêtrage ? -->
   <para>
    Une <firstterm>fonction window</firstterm> effectue un calcul sur un jeu 
    d'enregistrements liés d'une certaine façon à
    l'enregistrement courant. On peut les rapprocher des calculs réalisables par
    une fonction d'agrégation mais, contrairement à une fonction d'agrégation,
    l'utilisation d'une fonction <foreignphrase>window</foreignphrase> n'entraîne
    pas le regroupement des
    enregistrements traités en un seul &mdash; chaque enregistrement
    garde son identité propre. En coulisse, la fonction
    <foreignphrase>window</foreignphrase> est capable
    d'accéder à d'autres enregistrements que l'enregistrement courant du résultat
    de la requête.
   </para>

   <para>
    Comment comparer le salaire d'un employé avec
    le salaire moyen de sa division&nbsp;:

<programlisting>
SELECT nomdep, noemp, salaire, avg(salaire) OVER (PARTITION BY nomdep) FROM salaireemp;
</programlisting>

<screen>
  nomdep   | noemp | salaire |          avg          
-----------+-------+---------+-----------------------
 develop   |    11 |   5200  | 5020.0000000000000000
 develop   |     7 |   4200  | 5020.0000000000000000
 develop   |     9 |   4500  | 5020.0000000000000000
 develop   |     8 |   6000  | 5020.0000000000000000
 develop   |    10 |   5200  | 5020.0000000000000000
 personnel |     5 |   3500  | 3700.0000000000000000
 personnel |     2 |   3900  | 3700.0000000000000000
 ventes    |     3 |   4800  | 4866.6666666666666667
 ventes    |     1 |   5000  | 4866.6666666666666667
 ventes    |     4 |   4800  | 4866.6666666666666667
(10 rows)
</screen>

    Les trois premières colonnes viennent directement de la table 
    <structname>salaireemp</structname>, et il y a une ligne de sortie pour chaque
    ligne de la table. La quatrième colonne représente une moyenne calculée sur
    tous les enregistrements de la table qui ont la même valeur de 
    <structfield>nomdep</structfield> que la ligne courante. (Il s'agit
    effectivement de la même fonction que la fonction d'agrégat classique
    <function>avg</function>, mais la clause <literal>OVER</literal> entraîne
    son exécution en tant que fonction <foreignphrase>window</foreignphrase> et
    son calcul sur le jeu approprié d'enregistrements.)
    </para>

   <para>
    Un appel à une fonction <foreignphrase>window</foreignphrase> contient toujours une clause 
    <literal>OVER</literal> qui suit le nom et les arguments de la fonction.
    C'est ce qui permet de la distinguer syntaxiquement d'une fonction simple
    ou d'une fonction de regroupement. La clause <literal>OVER</literal>
    détermine précisément comment les lignes de la requête sont éclatées pour 
    être traitées par la fonction <foreignphrase>window</foreignphrase>. La liste
    <literal>PARTITION BY</literal> contenue dans la clause
    <literal>OVER</literal> spécifie comment répartir les enregistrements en
    groupes, ou partitions, qui partagent les mêmes valeurs pour la (les)
    expression(s) contenue(s) dans <literal>PARTITION BY</literal>. Pour chaque
    enregistrement, la fonction <foreignphrase>window</foreignphrase> est calculée
    sur les enregistrements qui se retrouvent dans la même partition que l'enregistrement courant.
   </para>

   <para>
    Bien que la fonction <function>avg</function> produise le même résultat
    quel que soit l'ordre dans lequel elle traite les enregistrements de la
    partition, ceci n'est pas généralisable à toutes les fonctions
    <foreignphrase>window</foreignphrase>.
    Lorsque cela s'avère nécessaire, l'ordre peut être contrôlé à l'aide d'une
    clause <literal>ORDER BY</literal> à l'intérieur de 
    <literal>OVER</literal>. Exemple&nbsp;:

<programlisting>
SELECT nomdep, noemp, salaire, rank() OVER (PARTITION BY nomdep ORDER BY salaire DESC) FROM salaireemp;
</programlisting>

<screen>
  nomdep   | noemp | salaire| rank 
-----------+-------+--------+------
 develop   |     8 |   6000 |    1
 develop   |    10 |   5200 |    2
 develop   |    11 |   5200 |    2
 develop   |     9 |   4500 |    4
 develop   |     7 |   4200 |    5
 personnel |     2 |   3900 |    1
 personnel |     5 |   3500 |    2
 ventes    |     1 |   5000 |    1
 ventes    |     4 |   4800 |    2
 ventes    |     3 |   4800 |    2
(10 rows)
</screen>

    On remarque que la fonction <function>rank</function>
    produit un rang numérique dans la partition de l'enregistrement pour chaque
    valeur différente de l'<literal>ORDER BY</literal>, dans l'ordre défini
    par la clause <literal>ORDER BY</literal>. <function>rank</function> n'a pas
    besoin de paramêtre explicite, puisque son comportement est totalement
    déterminé par la clause <literal>OVER</literal>.
   </para>

   <para>
    Les lignes prises en compte par une fonction
    <foreignphrase>window</foreignphrase> sont celles de la 
    <quote>table virtuelle</quote> produite par la clause <literal>FROM</literal>
    de la requête filtrée par ses clauses <literal>WHERE</literal>,
    <literal>GROUP BY</literal> et <literal>HAVING</literal>, s'il y en a.
    Par exemple, une ligne rejetée parce qu'elle ne satisfait pas à la condition
    <literal>WHERE</literal> n'est vue par aucune fonction
    <foreignphrase>window</foreignphrase>.
    Une requête peut contenir plusieurs de ces fonctions
    <foreignphrase>window</foreignphrase> qui découpent
    les données de façons différentes, par le biais de clauses
    <literal>OVER</literal> différentes, mais elles travaillent toutes sur le
    même jeu d'enregistrements, défini par cette table virtuelle.
   </para>

   <para>
    <literal>ORDER BY</literal> peut être omis lorsque
    l'ordre des enregistrements est sans importance. Il est aussi possible
    d'omettre <literal>PARTITION BY</literal>, auquel cas il n'y a qu'une
    partition, contenant tous les enregistrements.
   </para>

   <para>
    Il y a un autre concept important associé aux fonctions
    <foreignphrase>window</foreignphrase>&nbsp;:
    pour chaque enregistrement, il existe un jeu d'enregistrements dans sa partition
    appelé son <firstterm>window frame</firstterm> (cadre de fenêtre).
    Beaucoup (mais pas toutes) de fonctions
    <foreignphrase>window</foreignphrase> travaillent uniquement sur les
    enregistrements du <foreignphrase>window frame</foreignphrase>, plutôt que
    sur l'ensemble de la partition.
    Par défaut, si on a précisé une clause <literal>ORDER BY</literal>, la
    <foreignphrase>window frame</foreignphrase> contient tous les enregistrements
    du début de la partition
    jusqu'à l'enregistrement courant, ainsi que tous les enregistrements
    suivants qui sont égaux à l'enregistrement courant au sens de la clause 
    <literal>ORDER BY</literal>. Quand <literal>ORDER BY</literal> est omis,
    la <foreignphrase>window frame</foreignphrase> par défaut contient tous les
    enregistrements de la partition.
     <footnote>
      <para>
       Il existe des options pour définir la <foreignphrase>window
       frame</foreignphrase> autrement, mais ce
       tutoriel ne les présente pas. Voir
       <xref linkend="syntax-window-functions"/> pour les détails.
      </para>
     </footnote>
    Exemple utilisant <function>sum</function>&nbsp;:
   </para>

<programlisting>
SELECT salaire, sum(salaire) OVER () FROM salaireemp;
</programlisting>

<screen>
 salaire|  sum  
--------+-------
   5200 | 47100
   5000 | 47100
   3500 | 47100
   4800 | 47100
   3900 | 47100
   4200 | 47100
   4500 | 47100
   4800 | 47100
   6000 | 47100
   5200 | 47100
(10 rows)
</screen>

   <para>
    Dans l'exemple Ci-dessus, puisqu'il n'y a pas d'<literal>ORDER BY</literal> dans la clause
    <literal>OVER</literal>, la <foreignphrase>window frame</foreignphrase> est
    égale à la partition&nbsp;; en d'autres
    termes, chaque somme est calculée sur toute la table, ce qui fait qu'on a le
    même résultat pour chaque ligne du résultat. Mais si on ajoute une clause
    <literal>ORDER BY</literal>, on a un résultat très différent&nbsp;:
   </para>

<programlisting>
SELECT salaire, sum(salaire) OVER (ORDER BY salaire) FROM salaireemp;
</programlisting>

<screen>
 salaire|  sum  
--------+-------
   3500 |  3500
   3900 |  7400
   4200 | 11600
   4500 | 16100
   4800 | 25700
   4800 | 25700
   5000 | 30700
   5200 | 41100
   5200 | 41100
   6000 | 47100
(10 rows)
</screen>

   <para>
    Ici, sum est calculé à partir du premier salaire (c'est-à-dire le plus bas)
    jusqu'au salaire courant, en incluant tous les doublons du salaire courant
    (remarquez les valeurs pour les salaires identiques).
   </para>

   <para>
    Les fonctions window ne sont autorisées que dans la liste
    <literal>SELECT</literal> et la clause <literal>ORDER BY</literal> de la
    requête. Elles sont interdites ailleurs, comme par exemple dans les clauses
    <literal>GROUP BY</literal>,<literal>HAVING</literal> et 
    <literal>WHERE</literal>. La raison en est qu'elles sont exécutées après le
    traitement de ces clauses. Par ailleurs, les fonctions
    <foreignphrase>window</foreignphrase> s'exécutent
    après les fonctions d'agrégat classiques. Cela signifie qu'il est permis
    d'inclure une fonction d'agrégat dans les arguments d'une fonction
    <foreignphrase>window</foreignphrase>,
    mais pas l'inverse.
   </para>

   <para>
    S'il y a besoin de filtrer ou de grouper les enregistrements
    après le calcul des fonctions <foreignphrase>window</foreignphrase>, un
    sous-select peut être utilisé. Par exemple&nbsp;:

<programlisting>
SELECT nomdep, noemp, salaire, date_embauche
FROM
  (SELECT nomdep, noemp, salaire, date_embauche,
          rank() OVER (PARTITION BY nomdep ORDER BY salaire DESC, noemp) AS pos
     FROM salaireemp
  ) AS ss
WHERE pos &lt; 3;
</programlisting>

    La requête ci-dessus n'affiche que les enregistrements de la requête interne
    ayant un rang inférieur à 3.
   </para>

   <para>
    Quand une requête met en jeu plusieurs fonctions
    <foreignphrase>window</foreignphrase>, il est possible
    d'écrire chacune avec une clause <literal>OVER</literal> différente,
    mais cela entraîne des duplications de code et augmente les risques d'erreurs
    si on souhaite le même comportement pour plusieurs fonctions
    <foreignphrase>window</foreignphrase>. À la place,
    chaque comportement <foreignphrase>window</foreignphrase> peut être associé à un nom dans une clause
    <literal>WINDOW</literal> et ensuite être référencé dans <literal>OVER</literal>.
    Par exemple&nbsp;:

<programlisting>
SELECT sum(salaire) OVER w, avg(salaire) OVER w
  FROM salaireemp
  WINDOW w AS (PARTITION BY nomdep ORDER BY salaire DESC);
</programlisting>
   </para>

   <para>
    Plus de détails sur les fonctions window peuvent être trouvés dans
    
    <xref linkend="syntax-window-functions"/>,
    <xref linkend="queries-window"/>, et la page de référence
    <xref linkend="sql-select" endterm="sql-select-title"/>.
   </para>
  </sect1>


  <sect1 id="tutorial-inheritance">
   <title>Héritage</title>

   <indexterm zone="tutorial-inheritance">
    <primary>héritage</primary>
    <secondary>inheritance</secondary>
   </indexterm>

   <para>
    L'héritage est un concept issu des bases de données orientées objet.
    Il ouvre de nouvelles possibilités intéressantes en conception de
    bases de données.
   </para>

   <para>
    Soient deux tables&nbsp;: une table <classname>villes</classname> et une
    table <classname>capitales</classname>. Les capitales étant également
    des villes, il est intéressant d'avoir la possibilité d'afficher
    implicitement les capitales lorsque les villes sont listées. Un
    utilisateur particulièrement brillant peut écrire ceci&nbsp;

<programlisting>CREATE TABLE capitales (
  nom        text,
  population real,
  altitude   int,    -- (en pied)
  etat       char(2)
);

CREATE TABLE non_capitales (
  nom        text,
  population real,
  altitude   int     -- (en pied)
);

CREATE VIEW villes AS
  SELECT nom, population, altitude FROM capitales
    UNION
  SELECT nom, population, altitude FROM non_capitales;</programlisting>

    Cela fonctionne bien pour les requêtes, mais la mise à jour d'une même
    donnée sur plusieurs lignes devient vite un horrible casse-tête.
   </para>

   <para>
    Une meilleure solution peut être&nbsp;:

<programlisting>CREATE TABLE villes (
  nom        text,
  population real,
  altitude   int     -- (en pied)
);

CREATE TABLE capitales (
  etat      char(2)
) INHERITS (villes);</programlisting>
   </para>

   <para>
    Dans ce cas, une ligne de <classname>capitales</classname>
    <firstterm>hérite</firstterm> de toutes les colonnes (<structfield>nom</structfield>,
    <structfield>population</structfield> et <structfield>altitude</structfield>) de son
    <firstterm>parent</firstterm>, <classname>villes</classname>. Le type de la
    colonne <structfield>nom</structfield> est <type>text</type>, un type natif
    de <productname>PostgreSQL</productname> pour les chaînes de caractères à
    longueur variable. Les capitales d'état ont une colonne supplémentaire,
    <structfield>etat</structfield>, qui affiche l'état dont elles sont la
    capitale. Sous <productname>PostgreSQL</productname>,
    une table peut hériter de zéro à plusieurs autres tables.
   </para>

   <para>
    La requête qui suit fournit un exemple de récupération des noms de
    toutes les villes, en incluant les capitales des états, situées à une
    altitude de plus de 500 pieds&nbsp;:

<programlisting>SELECT nom, altitude
  FROM villes
  WHERE altitude &gt; 500;</programlisting>

    ce qui renvoie&nbsp;:

<screen>   nom     | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
 Madison   |      845
(3 rows)</screen>
   </para>

   <para>
    À l'inverse, la requête qui suit récupère toutes les villes qui ne sont pas des
    capitales et qui sont situées à une altitude d'au moins 500 pieds&nbsp;:

<programlisting>SELECT nom, altitude
    FROM ONLY villes
    WHERE altitude &gt; 500;</programlisting>

<screen>   nom     | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
(2 rows)</screen>
   </para>

   <para>
    Ici, <literal>ONLY</literal> avant <literal>villes</literal>
    indique que la requête ne doit être exécutée que sur la table
    <classname>villes</classname>, et non pas sur les tables en dessous de
    <classname>villes</classname> dans la hiérarchie des héritages. La plupart
    des commandes déjà évoquées &mdash;
    <command>SELECT</command>, <command>UPDATE</command> et
    <command>DELETE</command> &mdash; supportent cette
    notation (<literal>ONLY</literal>).
   </para>

   <note>
    <para>
     Bien que l'héritage soit fréquemment utile, il n'a pas été intégré avec
     les contraintes d'unicité et les clés étrangères, ce qui limite son utilité.
     Voir la <xref linkend="ddl-inherit"/> pour plus de détails.
    </para>
   </note>
  </sect1>


  <sect1 id="tutorial-conclusion">
   <title>Conclusion</title>
 
   <para>
    <productname>PostgreSQL</productname> dispose d'autres fonctionnalités
    non décrites dans ce tutoriel d'introduction orienté vers
    les nouveaux utilisateurs de <acronym>SQL</acronym>. Ces fonctionnalités
    sont discutées plus en détails dans le reste de ce livre.
   </para>

   <para>
    Si une introduction plus approfondie est nécessaire, le lecteur peut
    visiter le <ulink url="http://www.postgresql.org">site web</ulink>
    de PostgreSQL qui fournit des liens vers d'autres ressources.
   </para>
  </sect1>
 </chapter>

