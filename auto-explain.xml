<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date: 2009-04-20 23:21:57 +0200 (lun 20 avr 2009) $
     par      $Author: gleu $
     révision $Revision: 1300 $ -->

<sect1 id="auto-explain">
	<title>auto_explain</title>
	
	<indexterm zone="auto-explain">
		<primary>auto_explain</primary>
	</indexterm>
	
	<para>
		Le module <filename>auto_explain</filename> fournit un moyen de tracer les
		plans d'exécution des requêtes lentes automatiquement, sans devoir lancer
		<xref linkend="sql-explain" endterm="sql-explain-title"/>
		manuellement. C'est particulièrement utile pour repérer les requêtes
		non optimisées sur de grosses applications.
	</para>
	
	<para>
		Le module ne fournit pas de fonctions accessibles par SQL.
		Pour l'utiliser, chargez-le simplement sur le serveur.
		Vous pouvez le charger dans une session individuelle&nbsp;:
		
		<programlisting>
			LOAD 'auto_explain';
		</programlisting>
		
		(Vous devez être le super-utilisateur pour faire cela.)
		Un usage plus caractéristique est de le précharger dans toutes les sessions
		en incluant <literal>auto_explain</literal> dans
		<xref linkend="guc-shared-preload-libraries"/> dans le fichier
		<filename>postgresql.conf</filename>.  Ensuite vous pouvez pister les requêtes
		étonnament lentes, quel que soit le moment où cela se produit. Évidemment, il y a un prix
		à payer pour cela.
	</para>
	
	<sect2>
		<title>Paramètres de configuration</title>
		
		<para>
			Il y a plusieurs paramètres de configuration qui contrôlent le comportement
			d'<filename>auto_explain</filename>. Notez que le comportement par défaut est
			de ne rien faire. Vous devez donc préciser au moins
			<varname>auto_explain.log_min_duration</varname> si vous voulez un résultat.
		</para>
		
		<variablelist>
			<varlistentry>
				<term>
					<varname>auto_explain.log_min_duration</varname> (<type>integer</type>)
				</term>
				<indexterm>
					<primary>paramètre de configuration <varname>auto_explain.log_min_duration</varname></primary>
				</indexterm>
				<listitem>
					<para>
						<varname>auto_explain.log_min_duration</varname> est la durée minimale
						d'exécution de requête à partir de laquelle le plan d'exécution
						sera tracé. Son unité est la millisecondes. Le positionner à zéro trace
						tous les plans. -1 (la valeur par défaut) désactive l'écriture des plans. Par
						exemple, si vous le positionnez à <literal>250ms</literal>, alors
						tous les ordres qui durent 250&nbsp;ms ou plus seront tracés. Seuls les
						super-utilisateurs peuvent modifier ce paramétrage.
					</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>
					<varname>auto_explain.log_analyze</varname> (<type>boolean</type>)
				</term>
				<indexterm>
					<primary>paramètre de configuration <varname>auto_explain.log_analyze</varname></primary>
				</indexterm>
				<listitem>
					<para>
						<varname>auto_explain.log_analyze</varname> entraîne
						l'écriture du résultat de <command>EXPLAIN ANALYZE</command>,
						à la place du résultat de <command>EXPLAIN</command>,
						lorsqu'un plan d'exécution est tracé.
						Ce paramètre est désactivé par défaut.
						Seuls les super-utilisateurs peuvent modifier ce paramètre.
					</para>
					<note>
						<para>
							Lorsque ce paramètre est activé, un chronométrage par
							n&oelig;ud du plan est calculé pour 
							tous les ordres exécutés, qu'ils durent suffisamment longtemps pour être réellement tracés, ou non.
							Ceci peut avoir des conséquences très négatives sur les performances.
						</para>
					</note>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>
					<varname>auto_explain.log_verbose</varname> (<type>boolean</type>)
				</term>
				<indexterm>
					<primary>paramètre de configuration <varname>auto_explain.log_verbose</varname></primary>
				</indexterm>
				<listitem>
					<para>
						<varname>auto_explain.log_verbose</varname> entraîne l'écriture
						du résultat de <command>EXPLAIN VERBOSE</command>
						au lieu du résultat de la commande simple <command>EXPLAIN</command>
						lorsqu'un plan d'exécution
						est tracé. Ce paramètre est désactivé par défaut. Seuls les
						superutilisateurs peuvent modifier ce paramètre.
					</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>
					<varname>auto_explain.log_nested_statements</varname> (<type>boolean</type>)
				</term>
				<indexterm>
					<primary>paramètre de configuration <varname>auto_explain.log_nested_statements</varname></primary>
				</indexterm>
				<listitem>
					<para>
						<varname>auto_explain.log_nested_statements</varname> entraîne
						la prise en compte des ordres imbriqués
						(les requêtes exécutées dans une fonction) dans la trace.
						Quand il est désactivé, seuls les plans d'exécution
						de plus haut niveau sont tracés. Ce paramètre est désactivé par
						défaut. Seuls les super-utilisateurs peuvent modifier ce paramètre.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		
		<para>
			Afin de positionner ces paramètres dans votre fichier
			<filename>postgresql.conf</filename>,
			vous devez ajouter <literal>auto_explain</literal> à
			<xref linkend="guc-custom-variable-classes"/>.  Un usage classique serait&nbsp;:
		</para>
		
		<programlisting>
			# postgresql.conf
			shared_preload_libraries = 'auto_explain'
			
			custom_variable_classes = 'auto_explain'
			auto_explain.log_min_duration = '3s'
		</programlisting>
	</sect2>
	
	<sect2>
		<title>Exemple</title>
		
		<programlisting>
			postgres=# LOAD 'auto_explain';
			postgres=# SET auto_explain.log_min_duration = 0;
			postgres=# SELECT count(*)
			FROM pg_class, pg_index
			WHERE oid = indrelid AND indisunique;
		</programlisting>
		
		<para>
			Ceci devrait produire un résultat de ce style dans les journaux applicatifs&nbsp;:
		</para>
		
		<programlisting><![CDATA[  LOG:  duration: 0.986 ms  plan:
          Aggregate  (cost=14.90..14.91 rows=1 width=0)
            ->  Hash Join  (cost=3.91..14.70 rows=81 width=0)
                  Hash Cond: (pg_class.oid = pg_index.indrelid)
                  ->  Seq Scan on pg_class  (cost=0.00..8.27 rows=227 width=4)
                  ->  Hash  (cost=2.90..2.90 rows=81 width=4)
                        ->  Seq Scan on pg_index  (cost=0.00..2.90 rows=81 width=4)
                              Filter: indisunique
  STATEMENT:  SELECT count(*)
            FROM pg_class, pg_index
           WHERE oid = indrelid AND indisunique;]]>
		</programlisting>
	</sect2>
	
	<sect2>
		<title>Auteur</title>
		
		<para>
			Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>
		</para>
	</sect2>
	
</sect1>
