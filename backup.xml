<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Header: /var/lib/cvs/pgsql-fr/sgml/backup.sgml,v 1.17 2005/09/15 07:03:14 guillaume Exp $ -->
<chapter id="backup">
 <title>Sauvegardes et restaurations</title>

 <indexterm zone="backup"><primary>backup</primary></indexterm>

 <para>
  Comme avec tout ce qui contient des données importantes, les bases de données
  <productname>PostgreSQL</productname> doivent être sauvegardées régulièrement.
  Bien que la procédure soit plutôt simple, il est important de comprendre les
  techniques sous-jacentes ainsi que les hypothèses prises.
 </para>

 <para>
  Il y a trois approches fondamentalement différentes pour sauvegarder les 
  données de <productname>PostgreSQL</productname>&nbsp;:
  <itemizedlist>
   <listitem><para><acronym>La sauvegarde SQL&nbsp;;</acronym></para></listitem>
   <listitem><para>La sauvegarde de niveau système de
    fichiers&nbsp;;</para></listitem>
   <listitem><para>L'archivage continue.</para></listitem>
  </itemizedlist>
  Chacune a ses avantages et inconvénients.
 </para>

 <sect1 id="backup-dump">
  <title>Sauvegarde <acronym>SQL</acronym></title>

  <para>
   Le principe est de générer un fichier texte de commandes SQL (appelé 
   <quote>fichier dump</quote>), qui, si on le renvoie au serveur, recrée une
   base de données identique à celle sauvegardée.
   <productname>PostgreSQL</productname> propose pour cela le programme utilitaire
   <xref linkend="app-pgdump"/>. L'usage basique est&nbsp;:
<synopsis>pg_dump <replaceable class="parameter">base_de_donnees</replaceable> &gt; <replaceable class="parameter">fichier_de_sortie</replaceable></synopsis>
   Comme vous le voyez, <application>pg_dump</application> écrit son résultat sur la
   sortie standard. Nous verrons plus loin que cela peut être pratique.
  </para>

  <para>
   <application>pg_dump</application> est un programme client <productname>PostgreSQL</productname>
   classique (mais plutôt intelligent). Ceci veut dire que vous pouvez 
   faire une sauvegarde depuis n'importe quel ordinateur ayant accès à la base.
   Mais rappelez-vous que <application>pg_dump</application> n'a pas de droits spéciaux.
   En particulier, il doit avoir accès en lecture à toutes les tables que 
   vous voulez sauvegarder, si bien qu'il doit être lancé pratiquement
   toujours en tant que super-utilisateur de la base.
  </para>

  <para>
   Pour préciser quel serveur de bases de données <application>pg_dump</application> doit
   contacter, utilisez les options de ligne de commande <option>-h
   <replaceable>serveur</replaceable></option> et <option>-p <replaceable>port</replaceable></option>.
   Le serveur par défaut est le serveur local, ou bien celui spécifié par la 
   variable d'environnement <envar>PGHOST</envar>.
   De la même façon, le port par défaut est indiqué par la variable d'environnement
   <envar>PGPORT</envar> ou, en son absence, par la valeur par défaut précisée 
   à la compilation. Heureusement, la serveur a normalement la même valeur par
   défaut à la compilation.
  </para>

  <para>
   Comme tout programme client <productname>PostgreSQL</productname>, <application>pg_dump</application>
   se connecte par défaut avec l'utilisateur de base de données de même nom que 
   l'utilisateur système courant. Pour passer outre, précisez l'option 
   <option>-U</option> ou donnez une valeur à la variable d'environnement
   <envar>PGUSER</envar>. Rappelez-vous que les connexions de
   <application>pg_dump</application> sont soumises aux mécanismes normaux
   d'authentification des programmes clients (qui sont décrits dans le <xref
   linkend="client-authentication"/>).
  </para>

  <para>
   Les sauvegardes créées par <application>pg_dump</application> sont cohérentes, ce
   qui veut dire que les modifications effectuées alors que <application>pg_dump</application>
   est en cours de fonctionnement ne sont pas dans le fichier de résultat.
   <application>pg_dump</application> ne bloque pas les autres opérations sur la base 
   lorsqu'il fonctionne (sauf celles qui ont besoin d'un verrou exclusif, comme 
   <command>VACUUM FULL</command>.)
  </para>

  <important>
   <para>
    Si votre base de données dépend des OID (par exemple en tant que clés 
    étrangères), vous devez indiquer à <application>pg_dump</application> de sauvegarder
    aussi les OID. Pour cela, utilisez l'option <option>-o</option> sur la ligne
    de commande.
   </para>
  </important>

  <sect2 id="backup-dump-restore">
   <title>Restaurer la sauvegarde</title>

   <para>
    Les fichiers texte créés par <application>pg_dump</application> sont prévus pour être 
    lus par le programme <application>psql</application>. La syntaxe générale 
    d'une commande de restauration est
<synopsis>psql <replaceable class="parameter">base_de_donnees</replaceable> &lt; <replaceable class="parameter">fichier_d_entree</replaceable></synopsis>
    où <replaceable class="parameter">fichier_d_entree</replaceable> est ce que 
    vous avez précisé comme <replaceable class="parameter">fichier_de_sortie</replaceable>
    à la commande <application>pg_dump</application>. La base de données 
    <replaceable class="parameter">base_de_donnees</replaceable> n'est pas créée par cette 
    commande. Vous devez la créer vous-même à partir de <literal>template0</literal>
    avant d'exécuter <application>psql</application> (par exemple avec <literal>createdb -T
    template0 <replaceable class="parameter">base_de_donnees</replaceable></literal>).
    <application>psql</application> propose des options similaires à celles de
    <application>pg_dump</application> pour spécifier le serveur de bases de
    données sur lequel se connecter et le nom d'utilisateur à utiliser. Voyez la
    page de référence de <xref linkend="app-psql"/> pour plus d'informations.
    </para>

   <para>
    Avant de restaurer une sauvegarde SQL, tous les utilisateurs possédant les
    objets ou ayant certains droits sur les objets de la base sauvegardée
    doivent déjà exister. S'ils n'existent pas, la
    restauration échouera pour la création des objets dont ils sont
    propriétaires ou pour lesquels ils ont des droits (quelque fois, cela
    correspond à ce que vous souhaitez mais ce n'est pas le cas habituellement).
   </para>

   <para>
    Par défaut, le script <application>psql</application> continuera de
    s'exécuter après la détection d'une erreur SQL. Vous pouvez utiliser
    la commande suivante au début du script pour modifier ce comportement
    en faisant en sorte que <application>psql</application> quitte avec un
    code d'erreur 3 si une erreur SQL survient&nbsp;:
<programlisting>\set ON_ERROR_STOP
</programlisting>
    De toute façon, vous obtiendrez une sauvegarde partiellement restaurée.
    Sinon, vous pouvez indiquer que la sauvegarde complète doit être
    restaurée dans une seule transaction, pour que la restauration soit
    complètement terminée ou complètement annulée. Ce mode est choisi
    en passant l'option <option>-1</option> ou <option>--single-transaction</option>
    en ligne de commande à <application>psql</application>. Lors de l'utilisation
    de ce mode, la plus petite erreur peut annuler une restauration qui pouvait
    être en cours de restauration depuis plusieurs heures. Néanmoins, ceci peut
    être préférable à nettoyer manuellement une base complexe à cause d'une
    sauvegarde partiellement restaurée.
   </para>

   <para>
    La capacité de <application>pg_dump</application> et <application>psql</application> à écrire
    et à lire dans des tubes permet de sauvegarder une base de données 
    directement d'un serveur sur un autre. Par exemple&nbsp;:
<programlisting>pg_dump -h <replaceable>serveur1</replaceable> <replaceable>base_de_donnees</replaceable> | psql -h <replaceable>serveur2</replaceable> <replaceable>base_de_donnees</replaceable></programlisting>
   </para>

   <important>
    <para>
     Les fichiers de sauvegarde produits par <application>pg_dump</application> sont
     relatifs à <literal>template0</literal>. Cela signifie que chaque langage,
     procédure, etc. ajoutés à <literal>template1</literal> seront aussi sauvegardés
     par <application>pg_dump</application>. En conséquence, si vous utilisez une base
     <literal>template1</literal> modifiée, vous devez créer la base vide à partir de
     <literal>template0</literal>, comme dans l'exemple précédent.
    </para>
   </important>

   <para>
    Après la restauration d'une sauvegarde, il est conseillé d'exécuter <xref
    linkend="sql-analyze" endterm="sql-analyze-title"/> sur chaque base de
    données pour que l'optimiseur de requêtes dispose de statistiques utiles.
    Un moyen simple de le faire est d'exécuter <command>vacuumdb -a -z</command>&nbsp;;
    c'est équivalent à exécuter <command>VACUUM ANALYZE</command> sur chaque
    base manuellement.
    Pour plus de conseils sur le chargement efficace de grosses quantités de
    données dans <productname>PostgreSQL</productname>, référez-vous à la <xref
    linkend="populate"/>.
   </para>
   
  </sect2>

  <sect2 id="backup-dump-all">
   <title>Utilisation de <application>pg_dumpall</application></title>

   <para>
    Le mécanisme précédent est peu pratique pour sauvegarder un serveur de bases
    de données complet. <xref linkend="app-pg-dumpall"/> est prévu pour cela.
    <application>pg_dumpall</application> sauvegarde toutes les bases de données d'un
    groupe de bases de données <productname>PostgreSQL</productname> (appelé cluster) et
    préserve les données communes au groupe de bases comme les utilisateurs et
    les groupes. L'utilisation basique de cette commande est&nbsp;:
<synopsis>pg_dumpall &gt; <replaceable>fichier_de_sortie</replaceable></synopsis>
    Le fichier de sauvegarde résultant peut être restauré avec <application>psql</application>&nbsp;:
<synopsis>psql -f <replaceable class="parameter">fichier_d_entree</replaceable> postgres</synopsis>
    (Vous pouvez utiliser n'importe quelle base de données pour vous 
    connecter mais si vous êtes en train de recharger un serveur vide, 
    <literal>postgres</literal> devrait habituellement être utilisée.)
    Il faut obligatoirement être le super-utilisateur de la base pour restaurer
    une sauvegarde faite avec <application>pg_dumpall</application>, pour pouvoir restaurer
    les informations sur les utilisateurs et les groupes.
   </para>
  </sect2>

  <sect2 id="backup-dump-large">
   <title>Gérer les grosses bases de données</title>

   <para>
    Comme <productname>PostgreSQL</productname> permet que des tables soient plus
    grandes que la taille maximale d'un fichier sur votre système de fichiers,
    sauvegarder une telle table en fichier peut poser des problèmes. 
    Comme <application>pg_dump</application> peut écrire sur la sortie standard, vous pouvez
    utiliser des outils standard d'Unix pour contourner ce problème éventuel.
   </para>

   <formalpara>
    <title>Compresser le fichier de sauvegarde</title>
    <para>
     Vous pouvez utiliser votre programme de compression habituel. Par exemple
     <application>gzip</application>.

<programlisting>pg_dump <replaceable class="parameter">base_de_donnees</replaceable> | gzip &gt; <replaceable class="parameter">nom_fichier</replaceable>.gz</programlisting>

     Pour restaurer&nbsp;:

<programlisting>createdb <replaceable class="parameter">base_de_donnees</replaceable>
gunzip -c <replaceable class="parameter">nom_fichier</replaceable>.gz | psql <replaceable class="parameter">base_de_donnees</replaceable></programlisting>

     ou

<programlisting>cat <replaceable class="parameter">nom_fichier</replaceable>.gz | gunzip | psql <replaceable class="parameter">base_de_donnees</replaceable></programlisting>
    </para>
   </formalpara>

   <formalpara>
    <title>Couper le fichier avec <command>split</command></title>
    <para>
     La commande <command>split</command> vous permet de découper le fichier en
     morceaux d'une taille acceptable pour le système de fichiers sous-jacent.
     Par exemple, pour faire des morceaux de 1&nbsp;Mo&nbsp;:
 
<programlisting>pg_dump <replaceable class="parameter">base_de_donnees</replaceable> | split -b 1m - <replaceable class="parameter">nom_fichier</replaceable></programlisting>

     Pour restaurer&nbsp;:

<programlisting>createdb <replaceable class="parameter">base_de_donnees</replaceable>
cat <replaceable class="parameter">nom_fichier</replaceable>* | psql <replaceable class="parameter">base_de_donnees</replaceable></programlisting>
    </para>
   </formalpara>

   <formalpara>
    <title>Utilisation du format de sauvegarde spécial</title>
    <para>
     Si <productname>PostgreSQL</productname> est installé sur un système où la 
     bibliothèque de compression <application>zlib</application> est disponible, ce format
     de sauvegarde spécial peut être utilisé. Pour les grandes bases de données,
     cela produira un fichier de sauvegarde d'une taille comparable à celle de
     <command>gzip</command>, avec l'avantage supplémentaire de permettre de
     restaurer des tables sélectivement. La commande qui suit sauvegarde une
     base de données en utilisant le format de sauvegarde spécial&nbsp;:
 
<programlisting>pg_dump -Fc <replaceable class="parameter">base_de_donnees</replaceable> &gt; <replaceable class="parameter">nom_fichier</replaceable></programlisting>

     Un format personnalisé de la sauvegarde n'est pas un script pour
     <application>psql</application> mais doit, à la place, être restauré avec
     <application>pg_restore</application>. Voir les pages de référence de <xref
     linkend="app-pgdump"/> et <xref linkend="app-pgrestore"/> pour quelques
     détails.
    </para>
   </formalpara>

  </sect2>
 </sect1>

 <sect1 id="backup-file">
  <title>Sauvegarde de niveau système de fichiers</title>

  <para>
   Une autre stratégie de sauvegarde est de copier les fichiers
   utilisés par <productname>PostgreSQL</productname> pour enregistrer les données.
   Dans la <xref linkend="creating-cluster"/>, l'emplacement de ces
   fichiers sont donnés mais vous les avez probablement déjà trouvés si vous
   vous intéressez à cette méthode. Vous pouvez utiliser n'importe quelle
   méthode de sauvegarde, par exemple&nbsp;:
 
<programlisting>tar -cf sauvegarde.tar /usr/local/pgsql/data</programlisting>
  </para>

  <para>
   Cependant, il y a deux restrictions qui rendent cette méthode inutilisable
   ou en tout cas inférieure à la méthode <application>pg_dump</application>.
 
   <orderedlist>
    <listitem>
     <para>
      Le serveur de base de données <emphasis>doit</emphasis> être arrêté pour obtenir
      une sauvegarde utilisable. Toutes les demi-mesures, comme supprimer
      toutes les connexions, ne fonctionneront <emphasis>pas</emphasis>
      (principalement parce que <command>tar</command> et les outils similaires
      ne font pas une image atomique de l'état du système de fichiers à un
      moment spécifique). Vous trouverez des informations sur la façon d'arrêter
      le serveur <productname>PostgreSQL</productname> dans la <xref
      linkend="server-shutdown"/>.
    </para>

     <para>
      Il va sans dire que vous devez aussi éteindre le serveur avant de 
      restaurer les données.
      </para>
    </listitem>

    <listitem>
     <para>
      Si vous vous êtes aventurés dans les détails de l'organisation de la 
      base de données, vous pouvez être tentés de ne sauvegarder et 
      de ne restaurer que certaines tables ou bases de données particulières. 
      Ceci ne fonctionnera <emphasis>pas</emphasis> parce que les informations
      contenues dans ces fichiers ne sont qu'à moitié vraies. L'autre moitié
      est dans les fichiers journaux de validation
      <filename>pg_clog/*</filename>, qui 
      contiennent l'état de la validation de chaque transaction. Un fichier de 
      table n'est utilisable qu'avec cette information. Bien entendu, il est 
      impossible de ne restaurer qu'une table et les données <filename>pg_clog</filename>
      associées car cela rendrait toutes les autres tables du serveur 
      inutilisables. Donc, les sauvegardes du système de fichiers fonctionnent
      seulement pour les restaurations complètes d'un groupe entier de bases de
      données.
     </para>
    </listitem>
   </orderedlist>
  </para>

  <para>
   Une autre approche à la sauvegarde du système de fichiers est de réaliser
   une <quote>image cohérente</quote> du répertoire des données si le système
   de fichiers supporte cette fonctionnalité (et que vous avez confiance
   en sa bonne implémentation). La procédure typique est de faire une
   <quote>image gelée</quote> du volume contenant la base de données, et enfin de
   copier le répertoire data complètement (pas seulement quelques parties,
   voir ci-dessus) de l'image sur un périphérique de sauvegarde, puis de
   libérer l'image gelé. Ceci fonctionnera même si le serveur de la base de
   données est en cours d'exécution. Néanmoins, une sauvegarde créée de cette
   façon sauvegarde les fichiers de la base de données dans un état où le
   serveur n'était pas correctement arrêté&nbsp;; du coup, au lancement du
   serveur à partir des données sauvegardées, PostgreSQL pensera que le
   serveur s'est stoppé brutalement et rejouera les journaux WAL. Ceci n'est
   pas un problème, soyez-en juste conscient (et assurez-vous d'inclure les
   fichiers WAL dans votre sauvegarde).
  </para>

  <para>
   Si votre base de données est répartie sur plusieurs systèmes de fichiers,
   il pourrait ne pas y avoir de moyens pour obtenir des images gelées
   exactement simultanément de tous les disques. Par exemple, si vos fichiers
   de données et vos journaux WAL sont sur des disques différents ou si les
   espaces logiques sont sur des systèmes de fichiers différents, il pourrait
   ne pas être possible d'utiliser une sauvegarde par image parce que ces
   dernières doivent être simultanées.
   Lisez la documentation de votre système
   de fichiers avec attention avant de faire confiance à la technique d'images
   cohérentes dans de telles situations. L'approche la plus sûre est d'arrêter
   le serveur de bases de données assez longtemps pour créer toutes les images
   gelées.
  </para>

  <para>
   Une autre option est d'utiliser <application>rsync</application> pour réaliser une
   sauvegarde du système de fichiers. Ceci se fait tout d'abord en lançant
   <application>rsync</application> alors que le serveur de bases de données est en cours
   d'exécution, puis en arrêtant le serveur juste assez longtemps pour lancer
   <application>rsync</application> une deuxième fois. Le deuxième
   <application>rsync</application> sera beaucoup plus rapide que le premier car il aura
   relativement peu de données à transférer et le résultat final sera cohérent
   parce que le serveur était arrêté. Cette méthode permet de réaliser une
   sauvegarde du système de fichiers avec un arrêt minimal.
  </para>

  <para>
   Notez aussi qu'une sauvegarde des fichiers de données ne sera pas forcément 
   moins grosse qu'une sauvegarde SQL. Au contraire, elle sera très certainement
   plus  grande (<application>pg_dump</application> ne sauvegarde pas le 
   contenu des index, mais la commande pour les recréer).
  </para>

 </sect1>

 <sect1 id="continuous-archiving">
  <title>Archivage en continue et récupération à un instant (PITR)</title>

  <indexterm zone="backup">
   <primary>archivage en continue</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>récupération à un instant</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>PITR</primary>
  </indexterm>

  <para>
   En permanence, <productname>PostgreSQL</productname> maintient des journaux WAL
   (<firstterm>write ahead log</firstterm>) dans le sous-répertoire
   <filename>pg_xlog/</filename> du répertoire des données du groupe. Ces journaux
   décrivent chaque modification effectuée sur les fichiers de données des
   bases. Ils existent principalement pour des raisons de sécurité suite à un
   arrêt brutal&nbsp;: si le système s'arrête brutalement, la base de données
   peut être restaurée pour avoir une cohérence des données en
   <quote>rejouant</quote> les entrées des journaux enregistrées depuis le dernier
   point de vérification. Néanmoins, l'existence de ces journaux rend possible
   l'utilisation d'une troisième stratégie pour la sauvegarde des bases de
   données&nbsp;: nous pouvons combiner une sauvegarde au niveau système de
   fichiers avec la sauvegarde des fichiers WAL. Si la récupération est
   nécessaire, nous restaurons la sauvegarde, puis rejouons à partir des
   fichiers WAL sauvegardés pour amener la sauvegarde jusqu'à la date
   actuelle. Cette approche est plus complexe à administrer que toutes les
   autres approches mais elle apporte des bénéfices significatifs&nbsp;:
  <itemizedlist>
   <listitem>
    <para>
     Nous n'avons pas besoin de faire une sauvegarde parfaitement cohérente
     comme point de départ. Toute incohérence dans la sauvegarde sera corrigée
     par la ré-exécution des journaux (ceci n'est pas significativement
     différent de ce qu'il se passe lors d'une récupération après un arrêt
     brutal). Donc, nous n'avons pas besoin d'une fonctionnalité d'image
     système du système de fichiers, simplement <application>tar</application> ou un
     autre outil d'archivage.
    </para>
   </listitem>
   <listitem>
    <para>
     Comme nous pouvons assembler une longue séquence de fichiers à WAL pour
     les rejouer, la sauvegarde continue est possible en continuant
     simplement d'archiver les fichiers WAL. Ceci est particulièrement
     intéressant pour les grosses bases de données où il pourrait ne pas
     être facile de réaliser une sauvegarde complète fréquemment.
    </para>
   </listitem>
   <listitem>
    <para>
     Rien ne dit que nous devons rejouer les entrées WAL jusqu'à la fin. Nous
     pouvons stopper la ré-exécution à un certain point et avoir une image
     cohérente de la base de données à ce moment-là. Du coup, cette technique
     supporte la <firstterm>récupération à un instant t</firstterm> (PITR)&nbsp;: il est
     possible de restaurer la base de données à n'importe quel point dans le
     temps depuis la dernière sauvegarde de base.
    </para>
   </listitem>
   <listitem>
    <para>
     Si nous remplissons en continue la série de fichiers WAL dans une autre
     machine qui a été chargée avec le même fichier de sauvegarde de base,
     nous avons un système <quote>à jour en permanence</quote>&nbsp;: à tout
     moment, nous pouvons monter la deuxième machine et avoir une copie quasi
     complète de la base de données.
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <para>
   Comme avec la technique de sauvegarde standard du système de fichiers,
   cette méthode supporte la restauration d'un groupe de bases de données
   complet, pas un sous-ensemble. De plus, il requiert beaucoup d'espace
   d'archivage&nbsp;: la sauvegarde de base peut être légère mais un système
   très utilisé générera beaucoup de mégaoctets de trafic WAL qui seront à
   archiver. Malgré tout, c'est la technique de sauvegarde préférée dans
   beaucoup de situations où la haute fiabilité est nécessaire.
  </para>

  <para>
   Pour récupérer avec succès suite à l'utilisation de l'archivage continu
   (aussi appelé sauvegarde à chaud par certains vendeurs de SGBD),
   vous avez besoin d'une séquence continue de fichiers WAL archivés qui
   s'étendent au moins jusqu'au point de départ de votre sauvegarde. Pour
   commencer, vous devriez configurer et tester votre procédure d'archivage
   des journaux WAL <emphasis>avant</emphasis> de faire votre première sauvegarde de
   base. Il nous faut donc commencer par vous présenter les mécanismes
   d'archivage des fichiers WAL.
  </para>

  <sect2 id="backup-archiving-wal">
   <title>Configurer l'archivage WAL</title>

   <para>
    Dans un sens abstrait, un système <productname>PostgreSQL</productname> fonctionnel
    produit une séquence indéfiniment longue d'enregistrements WAL. Le système
    divise physiquement cette séquence en <firstterm>fichiers segment</firstterm>
    WAL, qui font normalement 16&nbsp;Mo chaque (bien que la taille puisse
    être modifiée lors de la construction de <productname>PostgreSQL</productname>). Les
    fichiers segment se voient donnés des noms numériques pour refléter leur
    position dans la séquence abstraite des WAL. Lorsque le système n'utilise
    pas l'archivage des WAL, il crée seulement quelques fichiers segment, puis
    les <quote>recycle</quote> en renommant les fichiers segment devenus inutiles.
    Il est supposé qu'un fichier segment dont le contenu précède le
    dernier point de vérification n'a plus d'intérêt et peut être recyclé.
   </para>

   <para>
    Lors de l'archivage des données WAL, nous voulons capturer le contenu de
    chaque fichier segment une fois qu'il est rempli et sauvegarder les
    données quelque part avant que le fichier segment ne soit recyclé pour
    être réutilisé. Suivant l'application et le matériel disponible, 
    <quote>sauvegarder les données quelque part</quote> peut se faire de plusieurs
    façons&nbsp;: nous pouvons copier les fichiers segment dans un répertoire
    NFS monté sur une autre machine, les écrire sur une cartouche (en vous
    assurant que vous avez un moyen de restaurer le fichier avec son nom
    d'origine) ou le grouper pour les graver sur un CD, ou encore autre chose.
    Pour fournir autant de flexibilité que possible à l'administrateur de la
    base de données, <productname>PostgreSQL</productname> essaie de ne faire aucune
    supposition sur la façon dont l'archivage est réalisé. À la place,
    <productname>PostgreSQL</productname> vous laisse spécifier une commande
    shell à exécuter pour copier le fichier segment rempli là où vous le
    souhaitez. La commande pourrait être aussi simple qu'un
    <literal>cp</literal> ou il pourrait impliquer un shell complexe &mdash;
    à vous de voir.
   </para>

   <para>
    La commande shell à utiliser est spécifiée par le paramètre de
    configuration <xref linkend="guc-archive-command"/> qui, en pratique, sera
    toujours placé dans le fichier <filename>postgresql.conf</filename>. Dans
    cette chaîne, tout <literal>%p</literal> est remplacé par le chemin absolu de
    l'archive alors que tout <literal>%f</literal> est remplacé seulement par le
    nom du fichier. Écrivez <literal>%%</literal> si vous avez besoin d'écrire le
    vrai caractère <literal>%</literal> dans la commande. La commande utile la plus
    simple est quelque chose comme
<programlisting>archive_command = 'cp -i %p /mnt/serveur/repertoire_archive/%f &lt;/dev/null'</programlisting>
    qui copiera les segments WAL archivables dans le répertoire
    <filename>/mnt/serveur/repertoire_archive</filename>. (Ceci est un exemple, pas
    une recommandation, et pourrait ne pas fonctionner sur toutes les
    plateformes.)
   </para>

   <para>
    La commande d'archivage sera exécutée en tant qu'utilisateur 
    propriétaire du serveur <productname>PostgreSQL</productname>. Comme la série de
    fichiers WAL en cours d'archivage contient réellement tout ce qui se
    trouve dans votre base de données, vous vous assurerez que les
    données archivées sont protégées des autres utilisateurs&nbsp;; par
    exemple, si les archives sont stockées dans un répertoire où se trouvent
    des droits de lecture pour le groupe ou pour les autres.
   </para>

   <para>
    Il est important que la commande d'archivage renvoie le code de sortie
    zéro si et seulement si l'exécution a réussi. En obtenant un résultat
    zéro, <productname>PostgreSQL</productname> supposera que le fichier segment WAL a
    été archivé avec succès et qu'il peut le supprimer ou le recycler.
    Néanmoins, un statut différent de zéro indique à  
    <productname>PostgreSQL</productname> que le fichier n'a pas été archivé&nbsp;; il
    essaiera périodiquement jusqu'à ce qu'il y arrive.
   </para>

   <para>
    La commande d'archivage devrait être généralement conçue pour refuser
    d'écraser tout fichier archive déjà existant. Ceci est une fonctionnalité
    de sécurité importante pour préserver l'intégrité de votre archive dans le
    cas d'une erreur de l'administrateur (comme l'envoi de la sortie de deux
    serveurs différents dans le même répertoire d'archivage). Il est
    conseillé de tester votre commande d'archivage proposée pour vous
    assurer qu'en effet il n'écrase pas un fichier existant <emphasis>et qu'il
    renvoie un statut différent de zéro dans ce cas</emphasis>. Nous avons découvert
    que <literal>cp -i</literal> travaille correctement sur certaines plateformes,
    mais pas sur toutes. Si la commande choisie ne gère pas elle-même ce
    cas, vous pouvez ajouter une commande pour tester l'existence du fichier
    d'archivage. Par exemple, quelque chose comme
<programlisting>archive_command = 'test ! -f .../%f &amp;&amp; cp %p .../%f'</programlisting>
    fonctionne correctement sur la plupart des variantes Unix.
   </para>

   <para>
    Lors de la conception de votre configuration d'archivage, considérez ce
    qui se passerait si la commande d'archivage échouait de façon répétée parce
    que certains aspects demanderaient une intervention de l'opérateur ou
    à cause d'un manque d'espace dans le répertoire d'archivage. Par exemple,
    ceci pourrait arriver si vous écrivez sur une cartouche sans changeur 
    automatique&nbsp;; quand la cartouche est remplie, rien ne peut être
    archivé tant que la cassette n'est pas changée. Vous devez vous assurer
    que toute erreur ou requête à un opérateur humain est rapportée de façon
    approprié pour que la situation puisse être résolue relativement
    rapidement. Le répertoire <filename>pg_xlog/</filename> continuera à se remplir
    de fichiers segment WAL jusqu'à la résolution de la situation.
   </para>

   <para>
    La vitesse de la commande d'archivage n'est pas importante, tant qu'elle
    est au même rythme que la génération de données WAL du serveur. Les
    opérations normales continuent même si le processus d'archivage est un peu
    plus lent. Si l'archivage est significativement plus lent, alors la
    quantité de données qui pourrait être perdue va croître. Cela signifie
    aussi que le répertoire <filename>pg_xlog/</filename> contiendra un grand nombre
    de fichiers segment non archivés, qui finiront éventuellement par
    dépasser l'espace disque disponible. Il vous est conseillé de surveiller
    le processus d'archivage pour vous assurer que tout fonctionne
    normalement.
   </para>

   <para>
    En écrivant votre commande d'archivage, vous devez vous assurer que les
    noms de fichier à archiver auront 64 caractères maximum et peuvent
    contenir toute combinaison de lettres ASCII, de chiffres et de points.
    Il n'est pas nécessaire de rappeler le chemin complet original
    (<literal>%p</literal>) mais il est nécessaire de rappeler le nom du fichier
    (<literal>%f</literal>).
   </para>

   <para>
    Notez que, bien que l'archivage WAL vous autorisera à restaurer toute
    modification réalisée sur les données de votre base 
    <productname>PostgreSQL</productname>, il ne restaurera pas les modifications
    effectuées sur les fichiers de configuration (c'est-à-dire
    <filename>postgresql.conf</filename>, <filename>pg_hba.conf</filename> et
    <filename>pg_ident.conf</filename>) car ceux-ci sont édités manuellement plutôt
    qu'au travers d'opérations SQL. Vous pourriez souhaiter conserver les
    fichiers de configuration à un endroit où ils seront sauvegardés avec vos
    procédures standards de sauvegarde du système de fichiers. Voir la
    <xref linkend="runtime-config-file-locations"/> pour savoir comment
    modifier l'emplacement des fichiers de configuration.
   </para>

   <para>
    La commande d'archivage est seulement appelée sur les segments WAL complets.
    Du coup, si votre serveur génère peu de trafic WAL (ou qu'il y a des périodes
    de calme où le trafic WAL est léger), il pourrait y avoir une longue période
    entre la fin d'une transaction et son enregistrement sûr dans le stockage
    d'archive. Pour placer une limite sur l'ancienneté des données archivées,
    vous pouvez configurer <xref linkend="guc-archive-timeout"/> pour forcer le
    serveur à changer de fichier segment WAL suivant ce délai. Notez que les
    fichiers archivés à cause d'une demande d'archivage forcée sont toujours de
    la même taille que les fichiers complets. Il est donc déconseillé de configurer
    un délai <varname>archive_timeout</varname> trop court &mdash; cela grossirait
    anormalement votre stockage. Une minute pour <varname>archive_timeout</varname>
    est généralement raisonnable.
   </para>

   <para>
    De plus, vous pouvez forcer manuellement le changement d'un segment avec
    <function>pg_switch_xlog</function>, si vous voulez vous assurer qu'une
    transaction tout juste terminée est archivée immédiatement. D'autres
    fonctions utilitaires relatives à la gestion des WAL sont disponibles dans
    <xref linkend="functions-admin-backup-table"/>.
   </para>
  </sect2>

  <sect2 id="backup-base-backup">
   <title>Réaliser une sauvegarde de base</title>

   <para>
    La procédure pour réaliser une sauvegarde de base est relativement
    simple&nbsp;:
  <orderedlist>
   <listitem>
    <para>
     Assurez-vous que l'archivage WAL est activée et fonctionnelle.
    </para>
   </listitem>
   <listitem>
    <para>
     Connectez-vous à la base de données en tant que superutilisateur et
     lancez la commande
<programlisting>SELECT pg_start_backup('label');</programlisting>
     où <literal>label</literal> est toute chaîne que vous voulez utiliser pour
     identifier de façon unique l'opération de sauvegarde (une bonne pratique
     est d'utiliser le chemin complet où vous avez l'intention de placer le
     fichier de sauvegarde). <function>pg_start_backup</function> crée un fichier
     <firstterm>label de sauvegarde</firstterm> nommé <filename>backup_label</filename> dans
     le répertoire du groupe avec des informations sur votre sauvegarde.
    </para>

    <para>
     Peu importe la base de données à laquelle vous vous connectez pour lancer
     cette commande. Vous pouvez ignorer le résultat renvoyé par la
     fonction mais, si elle rapporte une erreur, gérez-la avant de
     continuer.
    </para>
   </listitem>
   <listitem>
    <para>
     Lancez la sauvegarde en utilisant n'importe quel outil de sauvegarde du
     système de fichiers comme <application>tar</application> ou <application>cpio</application>. Il
     n'est ni nécessaire ni désirable de stopper les opérations normales de
     la base de données lorsque vous faites cela.
    </para>
   </listitem>
   <listitem>
    <para>
     Connectez-vous de nouveau sur la base de données en tant que
     superutilisateur et lancez la commande
<programlisting>SELECT pg_stop_backup();</programlisting>
     Elle devrait réussir. Néanmoins, la sauvegarde n'est pas encore entièrement
     valide. Un basculement automatique du prochain segment WAL survient, donc
     tous les fichiers segment WAL en relation avec l'archivage seront maintenant
     marqués à archiver.
    </para>
   </listitem>
   <listitem>
    <para>
     Une fois que les fichiers des segments WAL utilisées lors de la sauvegarde
     sont archivées, vous avez terminé. Le fichier identifié par le résultat de
     <function>pg_stop_backup</function> est le dernier segment à archiver pour
     terminer la sauvegarde. L'archivage de ces fichiers survient automatiquement
     car vous avez déjà configuré <varname>archive_command</varname>. Dans de
     nombreux cas, ceci arrive assez rapidement mais il est conseillé de
     surveiller votre système d'archivage pour vous assurer qu'il s'effectue
     correctement et que vous avez une sauvegarde valide.
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>
    Certains outils de sauvegarde que vous souhaiteriez utiliser émettent des
    messages d'avertissements ou d'erreurs si les fichiers qu'ils essaient de
    copier changent lors de la copie. Cette situation est normale, ce n'est pas
    une erreur, lors de la création de la sauvegarde de base d'une base de
    données active&nbsp;; vous devez donc vous assurer que vous pouvez
    distinguer les messages de cette sorte des autres messages. Par exemple,
    certaines versions de <application>rsync</application> renvoient un code de sortie
    séparé pour des <quote>fichiers source disparus</quote>, et vous pouvez écrire
    un script qui accepte ce code de sortie comme un cas normal. De plus,
    certaines versions de GNU <application>tar</application> considèrent que la modification
    d'un fichier lors de sa copie par <application>tar</application> est une erreur. Il
    ne semble pas exister de moyen simple pour distinguer cette erreur des autres
    types d'erreurs, autrement qu'en inspectant manuellement les messages de
    <application>tar</application>. Du coup, GNU <application>tar</application> n'est pas le meilleur
    outil pour réaliser des sauvegardes de base.
   </para>

   <para>
    Il n'est pas nécessaire d'être très concerné sur le temps passé entre
    <function>pg_start_backup</function> et le début réel de la sauvegarde, pas plus
    qu'entre la fin de la sauvegarde et <function>pg_stop_backup</function>&nbsp;; un
    délai de quelques minutes ne posera pas de problème. Néanmoins, si vous exécutez
    normalement le serveur en désactivant <varname>full_page_writes</varname>, vous
    pouvez noter une perte de performances entre <function>pg_start_backup</function>
    et <function>pg_stop_backup</function>. Vous devez vous assurer que ces
    opérations de sauvegarde sont effectuées en séquence sans croisement possible.
    Dans le ca contraire, vous invaliderez la sauvegarde.
   </para>

   <para>
    Assurez-vous que votre sauvegarde inclut tous les fichiers du répertoire
    du groupe de bases de données (c'est-à-dire
    <filename>/usr/local/pgsql/data</filename>). Si vous utilisez des espaces logiques
    qui ne se trouvent pas dans ce répertoire, faites attention à bien les
    inclure (et assurez-vous que votre sauvegarde archive les liens
    symboliques comme des liens, sinon la restauration posera problème pour
    les espaces logiques).
   </para>

   <para>
    Néanmoins, vous devriez omettre de sauvegarder les fichiers du
    sous-répertoire <filename>pg_xlog/</filename> contenu dans le répertoire du
    groupe. Cette petite complication est intéressante parce qu'elle réduit le
    risque d'erreurs lors de la restauration. Ceci est facile à arranger si
    <filename>pg_xlog/</filename> est un lien symbolique pointant quelque part à
    l'extérieur du répertoire du groupe, ce qui est une configuration commune
    pour des raisons de performance.
   </para>

   <para>
    Pour utiliser cette sauvegarde, vous aurez besoin de conserver les
    fichiers segments WAL générés pendant ou après le lancement de la
    sauvegarde. Pour vous aider dans ce travail, la fonction 
    <function>pg_stop_backup</function> crée un <firstterm>fichier historique de la
    sauvegarde</firstterm> qui est immédiatement stocké dans l'aire des archives WAL.
    Ce fichier est nommé d'après le nom du premier fichier segment WAL dont
    vous avez besoin pour utiliser la sauvegarde. Par exemple, si le fichier
    WAL du début est <literal>0000000100001234000055CD</literal>, le fichier
    historique sera nommé quelque chose comme
    <literal>0000000100001234000055CD.007C9330.backup</literal> (le deuxième nombre
    dans le nom de ce fichier contient la position exacte à l'intérieur du fichier
    WAL et peut être habituellement ignorée). Une fois que vous avez archivé de
    façon sûre la sauvegarde du système de fichiers et les segments WAL utilisés
    pendant la sauvegarde (comme spécifié dans le fichier d'historique des
    sauvegardes), tous les segments WAL archivés avec des noms numériquement plus
    petits ne sont plus nécessaires pour la récupération de la sauvegarde du
    système de fichiers et pourraient être supprimés. Néanmoins, vous devriez
    penser à conserver plusieurs ensembles de sauvegarde pour être absolument
    certain de pouvoir récupérer vos données.
   </para>

   <para>
    Le fichier d'historique de la sauvegarde est un simple fichier texte. Il
    contient le label que vous avez donné à <function>pg_start_backup</function>,
    ainsi que l'heure de début et de fin, et les segments WAL de la sauvegarde.
    Si vous utilisez le label pour identifier où le fichier de sauvegarde associé
    est conservé, alors le fichier historique archivé est suffisant pour vous
    dire quel fichier de sauvegarde restaurer, si vous en avez besoin.
   </para>

   <para>
    Comme vous devez conserver tous les fichiers WAL archivés depuis votre
    dernière sauvegarde de base, l'intervalle entre les sauvegardes de base
    devrait habituellement être choisie suivant la quantité de stockage que
    vous voulez consommer en fichiers archives WAL. Vous devriez aussi
    considérer combien de temps vous êtes prêt à dépenser pendant la
    récupération, si celle-ci est nécessaire &mdash; le système devra rejouer
    tous les segments WAL et ceci peut prendre beaucoup de temps si la
    dernière sauvegarde de base est ancienne.
   </para>

   <para>
    Il est aussi important de noter que la fonction
    <function>pg_start_backup</function> crée un fichier nommé 
    <filename>backup_label</filename> dans le répertoire du groupe de bases de données
    qui est ensuite supprimé de nouveau par <function>pg_stop_backup</function>. Ce
    fichier sera bien sûr archivé comme faisant parti du fichier de
    sauvegarde. Le fichier label de la sauvegarde inclut la chaîne label que
    vous avez donné à <function>pg_start_backup</function>, ainsi que l'heure à
    laquelle <function>pg_start_backup</function> a été exécuté et le nom du fichier
    WAL du début. En cas de confusion, il sera du coup possible de regarder
    dans le fichier sauvegarde et de déterminer exactement de quelle session
    de sauvegarde provient ce fichier.
   </para>

   <para>
    Il est aussi possible de faire une sauvegarde alors que le serveur est
    arrêté. Dans ce cas, vous ne pouvez évidemment pas utiliser
    <function>pg_start_backup</function> ou <function>pg_stop_backup</function> et vous serez
    donc contraint à garder trace vous-même des fichiers de sauvegarde et de
    jusqu'où vont les fichiers WAL associés. Il est généralement mieux de
    suivre la procédure d'archivage continu ci-dessus.
   </para>
  </sect2>

  <sect2 id="backup-pitr-recovery">
   <title>Récupérer à partir d'une sauvegarde de l'archivage continu</title>

   <para>
    OK, le pire est arrivé et vous avez besoin de récupérer votre sauvegarde.
    Voici la procédure&nbsp;:
  <orderedlist>
   <listitem>
    <para>
     Arrêtez le serveur s'il est en cours d'exécution.
    </para>
   </listitem>
   <listitem>
    <para>
     Si vous avez de la place pour le faire, copiez le répertoire entier des
     données du groupe et tout espace logique dans un emplacement temporaire
     au cas où vous en auriez besoin plus tard. Notez que cette précaution
     demandera que vous ayez assez de place libre sur votre système pour
     contenir deux copies de votre base de données existante. Si vous n'avez
     pas assez de place, vous devez au moins copier le contenu du
     sous-répertoire <filename>pg_xlog</filename> du répertoire des données car il
     pourrait contenir des journaux qui n'ont pas été archivés avant l'arrêt
     du serveur.
    </para>
   </listitem>
   <listitem>
    <para>
     Effacez tous les fichier et sous-répertoires existants sous le
     répertoire des données du groupe et sous les répertoires racines des
     espaces logiques que vous utilisez.
    </para>
   </listitem>
   <listitem>
    <para>
     Restaurez les fichiers de la base de données à partir de votre
     sauvegarde. Faites attention à ce qu'ils soient restaurés avec le bon
     propriétaire (l'utilisateur système de la base de données, et non pas
     root&nbsp;!) et avec les bons droits. Si vous utilisez les espaces
     logiques, vous vérifirez que les liens symboliques dans
     <filename>pg_tblspc/</filename> ont été correctement restaurés.
    </para>
   </listitem>
   <listitem>
    <para>
     Supprimez tout fichier présent dans <filename>pg_xlog/</filename>&nbsp;; ils
     proviennent de la sauvegarde et sont du coup probablement obsolètes.
     Si vous n'avez pas archivé <filename>pg_xlog/</filename> du tout, alors
     re-créez ce répertoire ainsi que le sous-répertoire
     <filename>pg_xlog/archive_status/</filename>.
    </para>
   </listitem>
   <listitem>
    <para>
     Si vous aviez des fichiers segments WAL non archivés que vous avez
     sauvegardé dans l'étape 2, copiez-les dans <filename>pg_xlog/</filename> (il
     est mieux de les copier, pas de les déplacer, car vous aurez toujours les
     fichiers non modifiés si un problème survient et que vous devez
     recommencer).
    </para>
   </listitem>
   <listitem>
    <para>
     Créez un fichier de commandes de récupération 
     <filename>recovery.conf</filename> dans le répertoire des données du groupe
     (voir <xref linkend="recovery-config-settings"/>). De plus, vous pourriez
     vouloir modifier temporairement <filename>pg_hba.conf</filename> pour empêcher
     les utilisateurs ordinaires de se connecter tant que vous n'êtes pas
     certain que la récupération a réussi.
    </para>
   </listitem>
   <listitem>
    <para>
     Lancez le serveur. Le serveur se trouvera en mode récupération et
     commencera la lecture des fichiers WAL archivés dont il a besoin. Si la
     récupération se termine avec une erreur externe, le serveur peut être
     tout simplement relancé et il continuera la récupération. À la
     fin du processus de récupération, le serveur renommera
     <filename>recovery.conf</filename> en <filename>recovery.done</filename> (pour empêcher
     de retourner accidentellement en mode de récupération dans le cas d'un
     arrêt brutal un peu plus tard), puis commencera les opérations normales
     de la base de données.
    </para>
   </listitem>
   <listitem>
    <para>
     Inspectez le contenu de la base de données pour vous assurer que vous
     avez récupéré ce que vous vouliez. Sinon, retournez à l'étape 1. Si
     tout va bien, laissez vos utilisateurs venir en restaurant le fichier
     <filename>pg_hba.conf</filename> à son état normal.
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>
    La partie clé de tout ceci est de configurer le fichier de commandes de
    récupération. Il décrit comment vous voulez récupérer et à quel point la
    récupération doit fonctionner. Vous pouvez utiliser 
    <filename>recovery.conf.sample</filename> (normalement présent dans le
    répertoire d'installation <filename>share/</filename>) comme prototype. La seule
    chose que vous devez absolument spécifier dans
    <filename>recovery.conf</filename> est <varname>restore_command</varname> indiquant à
    <productname>PostgreSQL</productname> comment récupérer les fichiers segments WAL
    archivés. Comme <varname>archive_command</varname>, ceci est une chaîne contenant
    le nom de la commande. Elle pourrait contenir <literal>%f</literal>, qui est
    remplacé par le nom du journal souhaité, et <literal>%p</literal>, qui est
    remplacé par le chemin absolu où copier le journal. Écrivez 
    <literal>%%</literal> si vous avez besoin d'embarquer un vrai caractère
    <literal>%</literal> dans la commande. La commande utile la plus simple est
    quelque chose comme
<programlisting>restore_command = 'cp /mnt/serveur/répertoire_archive/%f %p'</programlisting>
    qui copiera les segments WAL précédemment archivés à partir du répertoire
    <filename>/mnt/serveur/répertoire_archive</filename>.  Vous pourriez bien sûr
    utiliser quelque chose de plus compliqué, peut-être même un script shell
    qui demandera à l'utilisateur de monter la cassette appropriée.
   </para>

   <para>
    Il est important que la commande renvoie un code de sortie différent de
    zéro en cas d'échec. La commande <emphasis>se verra demander</emphasis> les
    journaux absents de l'archive&nbsp;; il doit renvoyer autre chose que
    zéro dans ce cas. Ceci n'est pas une condition d'erreur. Soyez conscient
    que le nom de base du chemin <literal>%p</literal> sera différent de
    <literal>%f</literal>&nbsp;; ne vous attendez pas à ce qu'ils soient
    interchangeables.
   </para>

   <para>
    Les segments WAL qui n'ont pas pu être trouvés dans l'archive seront
    recherchés dans <filename>pg_xlog/</filename>&nbsp;; cela autorise l'utilisation
    des segments non archivés. Néanmoins, les segments disponibles à partir de
    l'archive seront utilisés de préférence par rapport aux fichiers dans
    <filename>pg_xlog/</filename>. Le système ne surchargera pas le contenu existant
    de <filename>pg_xlog/</filename> lors de la récupération des fichiers archivés.
   </para>

   <para>
    Normalement, la récupération traitera tous les segments WAL disponibles,
    restaurant du coup la base de données à cet instant (ou aussi proche que
    nous le pouvons suivant les segments WAL disponibles). Mais, si vous
    voulez récupérer à un instant particulier (disons, juste avant que
    l'administrateur junior ait supprimé votre table principale de
    transaction), spécifiez simplement le point d'arrêt requis dans
    <filename>recovery.conf</filename>. Vous pouvez spécifier le point d'arrêt, connu
    sous le nom de <quote>cible de récupération</quote>, soit par la date/heure
    soit par l'ID de la dernière transaction. Au moment où nous écrivons ceci,
    seule l'option date/heure est tout à fait utilisable car il n'existe pas
    d'outils pour vous aider à identifier avec une certaine précision l'ID de
    transaction à utiliser.
   </para>

   <note>
     <para>
      Le point d'arrêt doit se situer après l'heure de fin de la sauvegarde
      de base (le moment de <function>pg_stop_backup</function>). Vous ne pouvez pas
      utiliser une sauvegarde de base pour récupérer à un tel instant où la
      sauvegarde était encore en cours (pour récupérer jusqu'à cet instant,
      vous devez récupérer votre sauvegarde de base précédente et recommencer
      à partir de là).
     </para>
    </note>

   <para>
    Si la récupération découvre une corruption dans les données WAL,
    elle se termine à ce point et le serveur ne se lancera pas. Le processus
    de récupération pourra être ré-exécuté à partir du début en précisant un
    <quote>recovery target</quote> de façon à ce que la récupération puisse
    se terminer normalement. Si la récupération échoue pour une raison
    externe comme un arrêt brutal du système ou que l'archive WAL devient
    inaccessible, alors la récupération peut être simplement relancée
    et elle redémarrera pratiquement là où elle a échoué. La récupération
    relançable fonctionne en écrivant un enregistrement restartpoint dans le
    fichier de contrôle au premier enregistrement d'un point de contrôle
    trouvé après <varname>checkpoint_timeout</varname> secondes.
   </para>

    <sect3 id="recovery-config-settings" xreflabel="Configuration de la récupération">
     <title>Configuration de la récupération</title>

     <para>
      Ces configurations peuvent seulement être placées dans le fichier
      <filename>recovery.conf</filename> et s'appliquent seulement pour la durée de la
      récupération. Ils doivent être réinitialisés pour toute récupération
      ultérieure que vous souhaitez réaliser. Ils ne peuvent pas être modifiés
      une fois que la récupération a commencé.
     </para>

     <variablelist>

     <varlistentry id="restore-command" xreflabel="restore_command">
      <term><varname>restore_command</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        La commande shell à exécuter pour récupérer un segment archivé de la
        série de fichiers WAL. Ce paramètre est requis. Tout <literal>%f</literal>
        dans la chaîne est remplacé par le nom du fichier à récupérer à
        partir de l'archive et tout <literal>%p</literal> est remplacé par le chemin
        absolu pour le copier sur le serveur. Écrivez <literal>%%</literal> pour
        embarquer un vrai caractère <literal>%</literal> dans la commande 
       </para>
       <para>
        Il est important que la commande renvoie un code de sortie zéro si et
        seulement si elle a réussi. La commande <emphasis>se verra
        demander</emphasis> les noms des fichiers absents dans l'archive&nbsp;; elle
        doit renvoyer une valeur différente de zéro dans ce cas.
        Exemples&nbsp;:
<programlisting>restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy /mnt/server/archivedir/%f "%p"'  # Windows</programlisting>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname> 
           (<type>timestamp</type>)
      </term>
      <listitem>
       <para>
        Ce paramètre spécifie le temps à partir duquel le serveur doit
        arrêter la récupération. Au plus un entre
        <varname>recovery_target_time</varname> et <xref
        linkend="recovery-target-xid"/> peut être spécifié. Par défaut, la
        récupération se passe jusqu'à la fin du journal WAL. Le point
        d'arrêt précis est aussi influencé par <xref
        linkend="recovery-target-inclusive"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        Ce paramètre spécifie l'ID de transaction où arrêter la récupération.
        Gardez en tête qu'alors que les ID de transactions sont affectés
        séquentiellement au début de la transaction, les transactions peuvent
        se terminer dans un ordre numérique différent. Les transactions qui
        seront récupérées sont celles qui ont été validées avant celle
        spécifiée (et quelque fois en l'incluant). Au plus un entre
        <varname>recovery_target_xid</varname> et <xref
        linkend="recovery-target-time"/> peut être spécifié. La valeur par
        défaut est de récupérer jusqu'à la fin du journal WAL. Le point
        d'arrêt précis est aussi influencé par
        <xref linkend="recovery-target-inclusive"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-inclusive" 
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname> 
        (<type>boolean</type>)
      </term>
      <listitem>
       <para>
        Spécifie si nous stoppons tout de suite après la cible de
        récupération spécifiée (<literal>true</literal>) ou tout juste avant
        (<literal>false</literal>). S'applique à <xref
        linkend="recovery-target-time"/> et <xref
        linkend="recovery-target-xid"/>, quelque soit celui qui est spécifié
        pour cette récupération. Ceci indique si les transactions ayant
        exactement l'instant de validation cible ou l'ID, respectivement,
        seront inclus dans la récupération. La valeur par défaut est
        <literal>true</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-timeline" 
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname> 
        (<type>string</type>)
      </term>
      <listitem>
       <para>
        Spécifie la récupération à un timeline particulier. La valeur par
        défaut est de récupérer suivant le timeline en cours au moment où la
        sauvegarde de base a été effectuée. Vous aurez seulement besoin de
        configurer ce paramètre dans les situations complexes de récupération
        où le besoin de retourner à un état qui a été atteint après une
        récupération à un temps donné. Voir la <xref
        linkend="backup-timelines"/> pour des informations.
       </para>
      </listitem>
     </varlistentry>

   </variablelist>

   </sect3>

  </sect2>

  <sect2 id="backup-timelines">
   <title>Timelines</title>

  <indexterm zone="backup">
   <primary>timelines</primary>
  </indexterm>

   <para>
    La possibilité de restaurer la base de données à un instant précédent
    crée une complexité qui sont la base des histoires de science-fiction sur
    le voyage dans le temps et les univers parallèles. Dans l'historique
    original de la base de données, vous avez peut-être supprimé une table
    critique à 17h15 mardi soir. Imperturbable, vous récupérez votre
    sauvegarde, la restaurez jusqu'à 17h14 mardi soir et êtes de nouveau
    fonctionnel. Dans <emphasis>cette</emphasis> histoire de l'univers de la base de
    données, vous n'avez jamais supprimé la table. Mais, supposez que vous
    réalisez plus tard qu'après tout, ce n'était pas une si grande idée et
    que vous voudriez revenir à un point plus lointain dans l'historique
    original. Vous ne serez plus capable de le faire si, une fois que votre
    base de donnée était de nouveau fonctionnelle, elle a écrit par dessus
    certaines des séquences de fichiers segments WAL qui vous aurait permis
    de récupérer à cet instant. Donc, vous voulez réellement distinguer les
    séries d'enregistrements WAL générées après la récupération à un instant
    donné de celles générées dans l'historique originale de la base de
    données.
   </para>

   <para>
    Pour gérer ces problèmes, <productname>PostgreSQL</productname> comprends la notion
    de <firstterm>timelines</firstterm>. Chaque fois que vous récupérez à un certain
    instant précédant la fin de la séquence WAL, un nouveau timeline est
    créé pour identifier les séries d'enregistrements WAL générées après la
    récupération (néanmoins, si la récupération continue jusqu'à la fin des
    WAL, nous ne commençons pas une nouvelle timeline&nbsp;: nous étendons
    celle qui existe). Le numéro d'identifiant de la timeline fait partie 
    des noms des fichiers segment WAL et, du coup, une nouvelle timeline
    ne réécrit pas sur les données générées par des timelines précédentes.
    En fait, il est possible d'archiver plusieurs timelines différentes.
    Bien que cela semble être une fonctionnalité inutile, parfois, cela vous
    sauve la vie. Considérez la situation où vous n'êtes plus sûr de l'instant
    jusqu'où récupérer. Du coup, vous devez tester des récupérations à
    différents instants jusqu'à trouver le meilleur moment dans l'ancien
    historique. Sans les timelines, ce processus génèrerait un incroyable
    bazar. Avec les timelines, vous pouvez récupérer à <emphasis>n'importe
    quel</emphasis> état précédent, ceci incluant les états dans les branches de
    timelines que vous abandonnerez plus tard.
   </para>

   <para>
    Chaque fois qu'une nouvelle timeline est créée,
    <productname>PostgreSQL</productname> crée un fichier d'<quote>historique des
    timeline</quote> qui montre les timelines, leur branchement et le moment
    auquel c'est arrivé. Ces fichiers historiques sont requis pour permettre
    au système de récupérer les bons fichiers segment WAL lors de la
    récupération à partir d'une archive contenant plusieurs timelines. Du
    coup, elles sont archivées dans l'aire des WAL comme tous les fichiers
    segment WAL. Les fichiers historiques sont de simples fichiers texte,
    donc il est peu coûteux et approprié de les conserver indéfiniment
    (contrairement aux fichiers segments qui sont gros). Vous pouvez, si
    vous le souhaitez, ajouter des commentaires au fichier historique pour
    ajouter vos propres notes sur comment et pourquoi cette timeline
    est particulièrement intéressante. De tels commentaires seront
    particulièrement utiles quand vous avez un ticket des différentes
    timelines comme résultat de l'expérimentation.
   </para>

   <para>
    Le comportement par défaut de la récupération est de récupérer parmi la
    timeline en cours au moment où la sauvegarde de base a été effectuée. Si
    vous voulez récupérer à une timeline enfant (c'est-à-dire si vous voulez
    retourner à un état qui a été enregistré après la tentative de
    récupération), vous avez besoin de spécifier l'ID cible de la timeline
    dans <filename>recovery.conf</filename>. Vous ne pouvez pas récupérer des
    timelines qui ont effectué leur branchement plus tôt que le moment où
    a été effectuée la sauvegarde de base.
   </para>
  </sect2>

  <sect2 id="backup-incremental-updated">
   <title>Incrementally Updated Backups</title>

  <indexterm zone="backup">
   <primary>incrementally updated backups</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>change accumulation</primary>
  </indexterm>

   <para>
    Restartable Recovery can also be utilised to offload the expense of
    taking periodic base backups from a main server, by instead backing
    up a Standby server's files.  This concept is also generally known as 
    incrementally updated backups, log change accumulation or more simply,
    change accumulation.
   </para>

   <para>
    If we take a backup of the server files whilst a recovery is in progress,
    we will be able to restart the recovery from the last restart point. 
    That backup now has many of the changes from previous WAL archive files,
    so this version is now an updated version of the original base backup.
    If we need to recover, it will be faster to recover from the 
    incrementally updated backup than from the base backup.
   </para>

   <para>
    To make use of this capability you will need to setup a Standby database
    on a second system, as described in <xref linkend="warm-standby"/>. By
    taking a backup of the Standby server while it is running you will
    have produced an incrementally updated backup. Once this configuration
    has been implemented you will no longer need to produce regular base 
    backups of the Primary server: all base backups can be performed on the 
    Standby server. If you wish to do this, it is not a requirement that you
    also implement the failover features of a Warm Standby configuration,
    though you may find it desirable to do both.
   </para>

  </sect2>

  <sect2 id="continuous-archiving-caveats">
   <title>Avertissements</title>

   <para>
    Au moment où nous écrivons ces lignes, il existe plusieurs limitations
    sur la technique de l'achivage continu. Elles seront probablement
    corrigées dans une prochaine version&nbsp;:

  <itemizedlist>
   <listitem>
    <para>
     Les opérations sur des index hachés
     ne sont pas tracées actuellement dans les WAL, donc ces index
     ne seront pas mis à jour. Le contournement recommandé est de
     <xref linkend="sql-reindex" endterm="sql-reindex-title">er manuellement
     chacun de ces index après avoir terminé une opération de récupération.
    </para>
   </listitem>

   <listitem>
    <para>
     Si une commande <xref linkend="sql-createdatabase" endterm="sql-createdatabase-title">
     est exécutée alors qu'une sauvegarde est en cours, alors la base de données
     modèle que l'instruction <command>CREATE DATABASE</command> a copié est
     modifiée alors que la sauvegarde de la base est toujours en cours, il est
     possible que la récupération sera la cause de la propagation des modifications
     dans la base de données créée. Pour éviter ce risque, il est préférable de
     ne pas modifier les bases de données modèles lors d'une sauvegarde de base.
    </para>
   </listitem>

   <listitem>
    <para>
     Les commandes <xref linkend="sql-createtablespace" endterm="sql-createtablespace-title">
     sont tracées dans WAL avec le chemin absolu littéral et seront donc rejouées
     en tant que créations d'espaces logiques avec le même chemin absolu. Ceci
     pourrait être indésirable si la trace est rejouée sur la même machine mais
     dans un nouveau répertoire de données&nbsp;: la ré-exécution surchargera
     toujours le contenu de l'espace logique original. Pour éviter des problèmes
     potentiels de cette sorte, la meilleure pratique est de prendre une
     nouvelle sauvegarde de base après la création ou la suppression d'espaces
     logiques.
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <para>
    De plus, il devrait être noté que le format actuel des <acronym>WAL</acronym>
    est extrêmement difficile à gérer car il inclut de nombreuses images des
    pages disques. Ces images de page sont conçues pour supporter la
    récupération après un arrêt brutal car nous pouvons avoir besoin de
    corriger des pages disque partiellement écrites. Suivant le matériel et
    le logiciel de votre système, le risque d'écriture partielle pourrait être
    assez faible pour être ignoré, auquel cas vous pouvez réduire
    significativement le volume total des traces archivées en désactivat les
    images de page grâce au paramètre <xref linkend="guc-full-page-writes"/>
    (lire les notes et avertissements dans <xref linkend="wal"/> avant
    de le faire). Désactiver les images de page n'empêche pas l'utilisation des
    traces pour les opérations PITR. Un développement possible serait de
    compresser les données des WAL archivées en supprimant les copies
    inutiles de pages même si <varname>full_page_writes</varname> est actif. Entre
    temps, les administrateurs pourraient souhaiter réduire le nombre
    d'images de pages inclus dans WAL en augmentant autant que possible les
    paramètres d'intervalle des points de vérification.
   </para>
  </sect2>
 </sect1>

 <sect1 id="warm-standby">
  <title>Serveurs <quote>Warm Standby</quote> pour la haute disponibilité</title>

  <indexterm zone="backup">
   <primary>Warm Standby</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>PITR Standby</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>Standby Server</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>Log Shipping</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>Witness Server</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>STONITH</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>High Availability</primary>
  </indexterm>

  <para>
   L'archivage continue peut être utilisé pour créer une configuration
   de cluster de haute disponibilité avec un ou plusieurs serveurs en
   attente, prêt à prendre en main les opérations au cas où le serveur
   principal aurait un problème. Cette capacité est surtout connue sous
   le nom de <foreignphrase>Warm Standby Log Shipping</foreignphrase>.
  </para>

  <para>
   Le serveur principal et le serveur en attente travaillent ensemble pour
   fournir cette capacité, bien que les serveurs sont très faiblement couplés.
   Le serveur primaire opère dans le mode de l'archivage continu alors que le
   serveur en attente opère dans un mode de récupération continue en lisant
   les fichiers WAL du serveur primaire. Aucune modification des tables
   de la base n'est requise pour activer cette capacité, donc elle coûte peu
   en administration supplémentaire en comparaison à d'autres approches de
   réplication. Cette configuration a aussi un impact très faible sur les
   performances du serveur primaire.
  </para>

  <para>
   Déplacer directement les enregistrements des WAL (ou journaux) d'une base à
   une autre est typiquement décrit comme <foreignphrase>Log Shipping</foreignphrase>.
   <productname>PostgreSQL</productname> l'implemente à partir de fichiers,
   signifiant que les enregistrements
   WAL sont gérés un fichier à la fois. Les fichiers WAL peuvent être envoyés
   facilement et sans surcoût quelque soit la distance, que ce soit sur un
   système adjacent, sur un autre système du même site ou sur un autre système
   de l'autre côté du globe. La bande passante requise par cette technique
   varie suivant le taux de transaction du serveur principal.
   <foreignphrase>Record-based Log Shipping</foreignphrase> est aussi possible
   avec des procédures personnalisées, discutées dans une section suivante.
   Des futures développements devraient inclure des options pour les
   <foreignphrase>synchronous and/or integrated record-based log
   shipping</foreignphrase>.
  </para>

  <para>
   Il devrait être noté que l'envoi des journaux est asynchrone, c'est-à-dire
   que les enregistrements WAL sont envoyés après une validation de la
   transaction. Comme résultat, il y a un petit risque de perte de données,
   si le serveur principal souffre d'un problème catastrophique.
   Ce problème est minimisé grâce à l'utilisation du paramètre
   <varname>archive_timeout</varname> qui peut être configuré à quelques secondes
   si nécessaire. Un paramètrage très bas peut augmenter les besoins de bande
   passante pour l'envoi des journaux.
  </para>

  <para>
   Le serveur en attente n'est pas disponible en accès car il est en permanence
   dans le traitement de la récupération. Les performances de récupération
   sont suffisamment bonnes pour que l'attente ne soit typiquement que de
   quelques minutes avant une disponibilité complète une fois qu'il a été
   activé. Nous appelons cela une configuration <foreignphrase>Warm
   Standby</foreignphrase> qui offre la haute disponibilité. Restaurer un serveur
   à partir d'une sauvegarde archivée de la base et rejouer les journaux
   prendront considérablement plus de temps. Seule cette technique offre
   réellement une solution à la récupération suite à un désastre, mais pas
   de la haute disponibilité.
  </para>

  <para>
   When running a Standby Server, backups can be performed on the Standby
   rather than the Primary, thereby offloading the expense of
   taking periodic base backups. (See 
   <xref linkend="backup-incremental-updated"/>)
  </para>

  <para>
   D'autres mécanismes de réplication pour haute disponibilité sont disponibles,
   solutions commerciales et libre.
  </para>

  <para>
   En général, l'envoi des journaux entre serveurs fonctionnant avec des
   niveaux de version différents n'est pas possible. La politique des
   développeurs PostgreSQL de ne pas faire de modification sur les formats
   disque lors de mises à jour mineures fait qu'il est possible d'utiliser des
   serveurs primaire et d'attente fonctionnant à partir de niveaux de
   versions mineures différents. Néanmoins, aucun support formel n'est offert
   pour cela et vous êtes avertis de na pas autoriser ceco pendant de longues
   périodes.
  </para>

  <sect2 id="warm-standby-planning">
   <title>Planification</title>

   <para>
    Sur le serveur en attente, tous les espaces logiques et chemins référeront
    aux points de montage noméms de façon similaire. Il est donc important de
    créer les serveurs primaire et d'attente de façon identique, au moins
    en ce qui concerne le serveur de bases de données. De puis, tout commande
    CREATE TABLESPACE sera passée ainsi, donc tout nouveau point de montage
    doit être créé sur les deux serveurs avant de pouvoir être utilisé sur
    le serveur principal. Le matériel n'a pas besoin d'être identique mais
    l'expérience a montré que maintenir deux systèmes identiques est plus
    facile que maintenir deux systèmes différents sur la durée de vie
    des applications et du système.
   </para>

   <para>
    Il n'existe pas de mode spécial requis pour activer un serveur d'attente.
    Les opérations qui surviennent sur les serveurs principal et d'attente
    sont entièrement des tâches d'archivage et de récupération continues.
    Le point principal de contacte entre les deux serveurs de base est
    l'archive des fichiers WAL qu'ils partagent&nbsp;: le principal les
    écrit, le serveur en attente les lit. Il faut aussi s'assurer que les
    archives WAL de serveurs différents ne soient pas mélangées.
   </para>

   <para>
    Ce qui fait que les deux serveurs faiblement liés travaillent ensemble
    est simplement un <varname>restore_command</varname> qui attend l'archivage
    du prochain fichier WAL à partir du serveur principal.
    <varname>restore_command</varname> est indiqué
    dans le fichier <filename>recovery.conf</filename> du serveur en attente.
    Le traitement de la récupération normale demandera un fichier sur le serveur
    en attente, occasionnant une erreur si le fichier n'est pas disponible.
    Pour le traitement du serveur en attente, il est normal que le prochain
    fichier soit indisponible, donc nous devons être patient et attendre
    son arrivée. Un restore_command en attente peut être écrit avec un
    script personnalisé qui attend l'arrivée du prochain fichier WAL. Il
    doit aussi y avoir un moyen pour déclencher le
    <foreignphrase>failover</foreignphrase>, ce qui interrompra le
    restore_command, cassera la boucle et renverra une erreur de fichier
    non trouvé sur le serveur en attente. Puis, cela arrêtera la
    récupération et le serveur en attente deviendra un serveur normal.
   </para>

   <para>
    Un exemple de code pour une version C de <varname>restore_command</varname>
    serait&nbsp;:
<programlisting>triggered = false;
while (!NextWALFileReady() &amp;&amp; !triggered)
{
    sleep(100000L);         /* wait for ~0.1 sec */
    if (CheckForExternalTrigger())
        triggered = true;
}
if (!triggered)
        CopyWALFileForRecovery();
</programlisting>
   </para>

   <para>
    <productname>PostgreSQL</productname> ne fournit pas de logiciel requis pour
    identifier un échec sur le serveur principal et pour notifier le serveur en
    attente. De nombreux outils de ce type existent et sont bien intégrés avec
    d'autres aspects dun système en <foreignphrase>failover</foreignphrase>,
    comme la migration d'une adresse IP.
   </para>

   <para>
    Déclencher le <foreignphrase>failover</foreignphrase> est une partie
    importante de la planification et de la conception. <varname>restore_command</varname> est
    exécuté complètement une fois pour chaque fichier WAL. Le processus
    exécutant <varname>restore_command</varname> est du coup créé et meurt pour chaque fichier,
    donc il n'y a pas de démon ou de processus serveur. Du coup, nous ne
    pouvons pas utiliser les signaux et un gestionnaire de signal. Une
    notification plus permanente est requise pour déclencher l'opération
    de <foreignphrase>failover</foreignphrase>. Il est possible d'utiliser
    un simple délai, spécialement s'il est utilisé en conjonction avec un
    paramètre <varname>archive_timeout</varname> connu sur le principal. Ceci peut porter à erreur
    car un réseau ou un serveur principal occupé pourrait suffire à provoquer
    un <foreignphrase>failover</foreignphrase>. Un mécanisme de notificaton
    comme la création explicite d'un fichier déclencheur est moins sujet à
    l'erreur si cela peut être arrangé.
   </para>
  </sect2>

  <sect2 id="warm-standby-config">
   <title>Implémentation</title>

   <para>
    Une procédure courte pour configurer un serveur en attente suit. Pour
    des détails complets de chaque étape, référez-vous aux sections précédentes.
    <orderedlist>
     <listitem>
      <para>
       Configurer les serveurs principal et d'attente de façon quasi identique,
       ceci incluant deux copies identiques de <productname>PostgreSQL</productname>,
       avec la même version.
      </para>
     </listitem>
     <listitem>
      <para>
       Configurer l'archivage continue sur le principal vers une archive locale
       situé dansun répertoire sur le serveur d'attente. Assurez-vous que les deux
       paramètres <xref linkend="guc-archive-command"/> et <xref
       linkend="guc-archive-timeout"/> sont configurés (voir
       <xref linkend="backup-archiving-wal"/>)
      </para>
     </listitem>
     <listitem>
      <para>
       Faites une sauvegarde de base du serveur principal (voir <xref
       linkend="backup-base-backup"/>)
      </para>
     </listitem>
     <listitem>
      <para>
       Commencer la récupération sur le serveur en attente à partir de l'archive
       WAL locale en utilisant un fichier <filename>recovery.conf</filename>
       spécifiant un <varname>restore_command</varname> qui attend (voir
       <xref linkend="backup-pitr-recovery"/>).
      </para>
     </listitem>
    </orderedlist>
   </para>

   <para>
    La récupération traite l'archive WAL en lecture seule, donc une fois
    qu'un fichier WAL a été copié sur le système en attente, il peut être
    copié sur une cassette en même temps qu'il est utilisé par le système
    en attente pour la récupération. Du coup, exécuter un serveur en
    attente pour la haute disponibilité peut se réaliser au même temps
    que le stockage des fichiers à plus long terme en cas de récupération
    après un désastre.
   </para>

   <para>
    Dans un but de tests, il est possible d'exécuter les serveurs principal
    et d'attente sur le même système. Ceci ne fournit aucune amélioration
    sur la robustesse du système pas plus qu'il ne pourra être décrit comme
    de la haute disponibilité.
   </para>
  </sect2>

  <sect2 id="warm-standby-failover">
   <title>Failover</title>

   <para>
    Si le serveur principal a un problème, le serveur en attente doit commencer
    la procédure de <foreignphrase>failover</foreignphrase>.
   </para>

   <para>
    Si le serveur en attente échoue, alors aucun <foreignphrase>failover</foreignphrase>
    n'a pas besoin de prendre place. Si le serveur en attente peut être
    redémarré, même quelques temps après, alors le processus de récupération
    peut aussi être immédiatement relancé en prenant avantage du
    <foreignphrase>Restartable Recovery</foreignphrase>. Si le serveur en
    attente ne peut être redémarré, alors un nouveau serveur en attente
    devra être créé.
   </para>

   <para>
    Si le serveur principal échoue et est immédiatement redémarré, vous devez
    avoir un mécanisme l'informant qu'il n'est plus le serveur principal. Ceci
    est connu sous l'acronyme <acronym>STONITH</acronym> (<foreignphrase>Shoot
    the Other Node In The Head</foreignphrase>), qui est nécessaire pour éviter
    les situations où les deux systèmes pensent qu'ils sont le principal, ce
    qui peut amener une certaine confusion et des pertes de données.
   </para>

   <para>
    Un grand nombre de systèmes <foreignphrase>failover</foreignphrase>
    utilisent simplement deux systèmes, le principal et celui en attente,
    connectés par un mécanisme appelé heartbeat pour vérifier la connexion
    entre les deux et la viabilité du principal. Il est aussi possible
    d'utiliser un troisième système appelé serveur témoin pour éviter
    des problèmes de <foreignphrase>failover</foreignphrase> inapproprié
    mais la complexité supplémentaire pourrait être inutile sauf s'ils
    sont configurés avec suffisamment d'attention et testés rigoureusement.
   </para>

   <para>
    Au moment où le <foreignphrase>failover</foreignphrase> prend place sur le
    serveur en attente, nous avons seulement un serveur en opération. C'est
    connu sous le terme d'état dégénéré. L'ancien serveur en attente est
    devenu le serveur principal. L'ancien serveur principal est arrêté
    et pourrait le rester. 
    Nous devons maintenant recréer un serveur en attente, soit sur l'ancien
    système principal soit sur un troisième système. Une fois terminé,
    nous pouvons considérer avoir changer de serveur principal et de
    serveur d'attente. Certaines personnes choisissent un troisième serveur
    pour fournir une protection supplémentaire au travers de l'interval du
    <foreignphrase>failover</foreignphrase> bien que cela complique à coup
    sûr la configuration du système et les processus opérationnelles
    (et il peut aussi agir en tant que serveur témoin).
   </para>

   <para>
    Donc, basculer du principal ou serveur d'attente peut être rapide
    mais requiert du temps pour re-préparer le cluster en
    <foreignphrase>failover</foreignphrase>. Un basculement régulier entre
    le serveur principal et celui d'attente est encouragé bien que cela
    permette un arrêt habituel pour chaque système qui requiert un HA.
    Cela agit aussi en tant que test des mécanismes de
    <foreignphrase>failover</foreignphrase> pour s'assurer que cela
    fonctionnera toujours quand vous en aurez besoin.
   </para>
  </sect2>

  <sect2 id="warm-standby-record">
   <title>Implémenter le <foreignphrase>Record-based Log Shipping</foreignphrase></title>

   <para>
    Les principales fonctionnalités de <foreignphrase>Log Shipping</foreignphrase>
    dans cette version sont basées autour du <foreignphrase>Log Shipping</foreignphrase>.
    décrit ci -dessus. Ils est aussi possibles d'implémenter
    <foreignphrase>Log Shipping</foreignphrase> en utilisant la fonction
    <function>pg_xlogfile_name_offset()</function> (voir <xref
    linkend="functions-admin"/>), bien que ceci requiert un développement
    personnalisé.
   </para>

   <para>
    Un programme externe peut appeler <function>pg_xlogfile_name_offset()</function>
    pour trouver le nom du fichier et le décalage en octets du dernier pointeur WAL.
    Si le programme externe demande régulièrement au serveur, il peut savoir.
    Si le programme externe interroge souvent le serveur, elle peut trouver
    comment le pointeur a été déplacé&nbsp;; ensuite, il peut accéder au
    fichier WAL et copie ces octets. Il peut accèder aux fichiers qui a une copie
    pas mis à jour) sur un serveur en attente.
   </para>
  </sect2>
 </sect1>

 <sect1 id="migration">
  <title>Migration entre les différentes versions</title>

  <indexterm zone="migration">
   <primary>mise à jour</primary>
  </indexterm>

  <indexterm zone="migration">
   <primary>version</primary>
   <secondary>compatibilité</secondary>
  </indexterm>

  <para>
   Cette section discute de la façon de migrer vos données de la base à partir
   d'une version de <productname>PostgreSQL</productname> vers une autre, plus récente. La
   procédure d'installation du logiciel <foreignphrase>per se</foreignphrase> n'est pas le
   sujet de cette section&nbsp;; ces détails sont dans le <xref
   linkend="installation"/>.
  </para>

  <para>
   En règle générale, le format interne des données est modifié entre les 
   différentes versions de <productname>PostgreSQL</productname> (quand le nombre après le
   deuxième point change). Ceci ne s'applique pas entre les différentes sorties
   mineures ayant le même numéro de version majeur (quand le nombre après le
   deuxième point change)&nbsp;; elles ont toujours un format de stockage
   compatible.
   Par exemple, les versions 7.2.1, 7.3.2 et 7.4 ne sont pas compatibles, alors
   que les versions 7.2.1 et 7.2.2 le sont. Lorsque vous mettez à jour entre 
   des versions compatibles, vous pouvez simplement remplacer les exécutables et
   ré-utiliser le répertoire des données sur le disque. Sinon, vous avez besoin
   de sauvegarder vos données et de les restaurer sur le nouveau serveur. Ceci
   doit se faire en utilisant <application>pg_dump</application>&nbsp;; les méthodes de
   sauvegarde au niveau système de fichiers ne fonctionneront évidemment pas. Il
   existe des vérifications en place pour vous empêcher d'utiliser un répertoire
   de données d'une version incompatible version de
   <productname>PostgreSQL</productname>, donc aucun mal ne sera fait si vous
   essayez de lancer un serveur d'une mauvaise version dans un répertoire de
   données.
  </para>

  <para>
   Il est recommandé d'utiliser les programmes <application>pg_dump</application> et
   <application>pg_dumpall</application> à partir de la nouvelle version de
   <productname>PostgreSQL</productname>, pour utiliser les avantages de toutes
   améliorations effectuées sur ces programmes. Les versions actuelles des
   programmes de sauvegarde peuvent lire des données à partir des serveurs
   d'anciennes versions, jusqu'à la 7.0.
  </para>

  <para>
   Vous minimiserez la durée d'indisponibilité en installant le nouveau serveur
   dans un répertoire différent et en lançant l'ancien et le nouveau serveur en 
   parallèle sur des ports différents, puis en utilisant des commandes comme
 
<programlisting>pg_dumpall -p 5432 | psql -d postgres -p 6543</programlisting>

   pour transférer les données. Ou utilisez un fichier intermédiaire si vous
   voulez. Vous pouvez alors éteindre le nouveau serveur et démarrer le nouveau
   sur le port que l'ancien utilisait. Vous devez vous assurer que l'ancienne
   base de données n'est pas modifiée après que vous ayez lancé 
   <application>pg_dumpall</application>, sans quoi ces modifications seraient évidemment 
   perdues. Référez vous au <xref linkend="client-authentication"/> pour savoir 
   comment interdire l'accès.
  </para>
  
  <para>
   En pratique, vous voudrez certainement tester votre application sur le
   nouveau serveur avant de basculer définitivement. C'est une autre raison
   pour configurer des installations concurrentes avec l'ancienne et la nouvelle
   version.
  </para>

  <para>
   Si vous ne pouvez pas ou ne voulez pas lancer les deux serveurs en 
   parallèle, vous pouvez faire l'étape de sauvegarde avant d'installer la 
   nouvelle version, éteindre le serveur, déplacer l'ancienne version à un autre
   endroit, installer la nouvelle, la démarrer et enfin restaurer les données. Par
   exemple&nbsp;:
   
<programlisting>pg_dumpall &gt; sauvegarde.sql
pg_ctl stop
mv /usr/local/pgsql /usr/local/pgsql.old
cd ~/postgresql-&version;
gmake install
initdb -D /usr/local/pgsql/data
postgres -D /usr/local/pgsql/data
psql -f sauvegarde.sql postgres</programlisting>

   Vous trouverez les méthodes pour arrêter et démarrer les serveurs, ainsi que 
   d'autres détails dans le <xref linkend="runtime"/>.
   Les instructions d'installation vous donneront des conseils sur les endroits 
   stratégiques pour réaliser ces opérations.
  </para>

  <note>
   <para>
    Quand vous <quote>déplacez l'ancienne version à un autre endroit</quote>, 
    l'ancienne installation pourrait ne plus être tout à fait utilisable.
    Certains des exécutables contiennent les chemins absolus vers les
    différents programmes et fichiers de données installés. Ceci n'est
    habituellement pas un gros problème mais si vous planifiez d'utiliser deux
    installations en parallèle pendant un moment, vous devez leur affecter des
    répertoires d'installation différents au moment de la construction. (Ce
    problème est rectifié pour <productname>PostgreSQL</productname> 8.0 et ultérieurs mais
    vous devez faire bien attention à déplacer les anciennes installations.)
   </para>
  </note>
 </sect1>
</chapter>
