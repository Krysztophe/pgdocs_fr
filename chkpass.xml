<sect1 id="chkpass">
 <title>chkpass</title> 

 <indexterm zone="chkpass">
  <primary>chkpass</primary>
 </indexterm>

 <para>
  This module implements a data type <type>chkpass</type> that is
  designed for storing encrypted passwords.
  Each password is automatically converted to encrypted form upon entry,
  and is always stored encrypted.  To compare, simply compare against a clear
  text password and the comparison function will encrypt it before comparing.
 </para>

 <para>
  There are provisions in the code to report an error if the password is
  determined to be easily crackable.  However, this is currently just
  a stub that does nothing.
 </para>

 <para>
  Si vous faites précéder la chaîne d'un symbole deux-points, elle est supposée
  être déjà chiffrée et stockée sans autre traitement.. Ceci permet la saisie
  des mots de passe précédemment chiffrés.
 </para>

 <para>
  En sortie, le symbole deux-points est ajouté en préfixe. Cela rend possible
  la sauvegarde et la restauration des mots de passe sans les chiffrer de
  nouveau. Si vous voulez le mot de passe (chiffré) sans le symbole deux-points,
  utilisez la fonction <function>raw()</function>. Ceci vous permet d'utiliser
  le type avec d'autres
  choses comme, par exemple, le module Auth_PostgreSQL d'Apache.
 </para>

 <para>
  Le chiffrement utilise la fonction <function>crypt()</function> du standard
  Unix. Il souffre donc
  des limitations habituelles de cette fonction, notamment le fait que seuls
  les huit premiers caractères d'un mot de passe sont pris en compte.
 </para>

 <para>
  Notez que le type de données n'est pas indexable.
  <!--
  I haven't worried about making this type indexable.  I doubt that anyone
  would ever need to sort a file in order of encrypted password.
  -->
 </para>

 <para>
  Voici un exemple d'utilisation:
 </para>

 <programlisting>
test=# create table test (p chkpass);
CREATE TABLE
test=# insert into test values ('hello');
INSERT 0 1
test=# select * from test;
       p
----------------
 :dVGkpXdOrE3ko
(1 row)

test=# select raw(p) from test;
      raw
---------------
 dVGkpXdOrE3ko
(1 row)

test=# select p = 'hello' from test;
 ?column?
----------
 t
(1 row)

test=# select p = 'goodbye' from test;
 ?column?
----------
 f
(1 row)
 </programlisting>

 <sect2>
  <title>Auteur</title>
  <para>
   D'Arcy J.M. Cain <email>darcy@druid.net</email>
  </para>
 </sect2>
</sect1>

