<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $PostgreSQL: pgsql/doc/src/sgml/config.sgml,v 1.17 2005/09/13 15:24:56 neilc Exp $ -->
<!-- SAS : 20070423, PG824 -->

  <chapter id="runtime-config">
   <title>Configuration du serveur</title>

   <indexterm>
    <primary>configuration</primary>
    <secondary>du serveur</secondary>
   </indexterm>

   <para>
    Il existe un grand nombre de paramètres de configuration affectant le
    comportement du système de bases de données. Dans la première section de ce
    chapitre, les méthodes de configuration de ces paramètres sont décrites&nbsp;; les
    sections suivantes discutent de chaque paramètre en détail.
   </para>

  <sect1 id="config-setting">
   <title>Paramètres de configuration</title>

   <para>
    Tous les noms de paramètres sont insensibles à la casse. Chaque
    paramètre prend une valeur d'un de ces quatre types&nbsp;: booléen, entier,
    nombre à virgule flottante ou chaîne de caractères. Les unités par défaut
    peuvent être récupérées en référençant <literal>pg_settings.unit</literal>.
    Les valeurs booléennes peuvent être <literal>ON</literal>, <literal>OFF</literal>,
    <literal>TRUE</literal>, <literal>FALSE</literal>, <literal>YES</literal>,
    <literal>NO</literal>, <literal>1</literal>, <literal>0</literal>
    ou tout préfixe non ambigu de ceux-ci (toutes ces écriture sont
    insensibles à la casse).
   </para>

   <para>
    Certains paramètres indiquant une valeur de taille mémoire ou de durée.
    Ils ont chacun une unité implicite, soit Ko, soit blocs (typiquement
    8&nbsp;Ko), soit millisecondes, soit secondes, soit minutes. Pour
    simplifier la saisie, une unité différente peut être indiquée
    de façon explicite. Les unités mémoire valides sont <literal>kB</literal>
    (kilo-octets), <literal>MB</literal> (Méga-octets) et
    <literal>GB</literal> (Giga-octets)&nbsp;; les
    unités de temps valides sont <literal>ms</literal>
    (millisecondes), <literal>s</literal> (secondes),
    <literal>min</literal> (minutes), <literal>h</literal> (heures),
    and <literal>d</literal> (jours). Les unités de mémoire sont des
    multiples de 1024, pas de 1000.
   </para>

   <para>
    Une façon d'initialiser ces paramètres est d'éditer le fichier
    <filename>postgresql.conf</filename>
    <indexterm><primary>postgresql.conf</primary></indexterm>
    qui est normalement placé dans le répertoire data
    (<application>initdb</application> y installe une copie par défaut).
    Un exemple de son contenu peut être&nbsp;:
<programlisting># Ceci est un commentaire
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB</programlisting>
    Un paramètre est indiqué par ligne. Le signe égal entre le nom et la
    valeur est optionnel. Les espaces n'ont pas de signification et les
    lignes vides sont ignorées. Les marques de hachage (<literal>#</literal>)
    introduisent des commentaires. Les valeurs des paramètres qui ne
    sont pas des identifieurs simples ou des nombres doivent être placées entre
    guillemets simples. Pour intégrer un guillemet simple dans la valeur d'un
    paramètre, on écrit soit deux guillemets (c'est la méthode préférée) soit
    un antislash suivi du guillemet.
   </para>

   <para>
    <indexterm>
     <primary><literal>include</literal></primary>
     <secondary>dans le fichier de configuration</secondary>
    </indexterm>
    En plus de la configuration des paramètres, le fichier
    <filename>postgresql.conf</filename> peut contenir des
    <firstterm>directives d'inclusion</firstterm> indiquant un autre fichier à
    lire et dont le contenu doit être traité à ce niveau comme partie intégrante du
    fichier de configuration. Les directives d'inclusion ressemblent simplement à
<programlisting>
include 'nom_fichier'
</programlisting>
    Si le nom du fichier n'est pas un chemin absolu, il est pris comme relatif
    au répertoire contenant le fichier de configuration le référençant. Les
    inclusions peuvent être imbriquées.
   </para>

   <para>
    <indexterm>
     <primary>SIGHUP</primary>
    </indexterm>
    Le fichier de configuration est relu à chaque fois que le processus
    serveur principal reçoit un signal <systemitem>SIGHUP</systemitem> 
    (<literal>pg_ctl reload</literal> est le moyen le plus simple de
    l'envoyer). Le
    processus serveur principal propage aussi ce signal aux processus serveur
    en cours d'exécution de façon à ce que les sessions existantes
    obtiennent aussi la nouvelle valeur. Il est également possible d'envoyer
    le signal directement à un seul processus serveur. Quelques paramètres
    ne peuvent être initialisés qu'au lancement du serveur&nbsp;; tout changement
    de leur valeur dans le fichier de configuration est ignoré jusqu'au prochain
    démarrage du serveur.
   </para>

   <para>
    Une autre façon de configurer ces paramètres est de les passer comme
    option de la commande <command>postgres</command>&nbsp;:
<programlisting>postgres -c log_connections=yes -c log_destination='syslog'</programlisting>
    Les options de la ligne de commande surchargent le paramétrage 
    effectué dans le fichier <filename>postgresql.conf</filename>. 
    Ce qui signifie que la valeur d'un paramètre passé en ligne de commande
    ne peut plus être modifiée et rechargée à la volée par le fichier
    <filename>postgresql.conf</filename>. C'est pourquoi, bien que la méthode
    de la ligne de commande paraisse pratique, elle peut coûter en
    flexibilité par la suite.
   </para>

   <para>
    Il est parfois utile de donner une option en ligne de
    commande pour une unique session particulière. La variable d'environnement
    <envar>PGOPTIONS</envar> est utilisée côté client à ce propos&nbsp;:
<programlisting>env PGOPTIONS='-c geqo=off' psql</programlisting>
    (Ceci fonctionne pour toute application client
    fondée sur <application>libpq</application>, et non pas seulement pour
    <application>psql</application>.) Cela ne fonctionne pas pour
    les paramètres fixés au démarrage du serveur ou qui doivent être
    précisés dans <filename>postgresql.conf</filename>.
   </para>

   <para>
    De plus, il est possible d'affecter un ensemble de paramètres à un
    utilisateur ou à une base de données. Quand une session est lancée, les
    paramètres par défaut de l'utilisateur et de la base de données
    impliqués sont chargés. Les commandes
    <xref linkend="sql-alteruser" endterm="sql-alteruser-title"/> et
    <xref linkend="sql-alterdatabase" endterm="sql-alterdatabase-title"/>
    sont respectivement utilisées pour configurer ces paramètres. Les
    paramètres par base de données surchargent
    ceux passés sur la ligne de commande de <command>postgres</command> ou
    du fichier de configuration et sont à leur tour surchargés par ceux de
    l'utilisateur&nbsp;; les deux sont surchargés par les paramètres de session.
   </para>

   <para>
    Quelques paramètres peuvent être modifiés dans les sessions
    <acronym>SQL</acronym> individuelles avec la commande
    <xref linkend="sql-set" endterm="sql-set-title"/>, par exemple&nbsp;:
<screen>SET ENABLE_SEQSCAN TO OFF;</screen>
    Si <command>SET</command> est autorisé, il surcharge toutes les autres sources de
    valeurs pour le paramètre. Quelques paramètres ne peuvent pas être changés
    via <command>SET</command>&nbsp;: s'ils contrôlent un comportement qui
    ne peut pas être modifié sans relancer le serveur
    <productname>PostgreSQL</productname>, par exemple. De plus, quelques
    paramètres peuvent être modifiés via <command>SET</command> ou
    <command>ALTER</command> par les superutilisateurs, mais pas par les
    utilisateurs ordinaires.
   </para>

   <para>
    La commande <xref linkend="sql-show" endterm="sql-show-title"/> permet
    d'inspecter les valeurs courantes de tous les paramètres.
   </para>

   <para>
    La table virtuelle <structname>pg_settings</structname> (décrite dans la
    <xref linkend="view-pg-settings"/>) autorise aussi l'affichage et la mise à jour de
    paramètres de session à l'exécution. Elle est équivalente à <command>SHOW</command>
    et <command>SET</command> mais peut être plus facile à utiliser parce qu'elle
    peut être jointe avec d'autres tables et que ses lignes peuvent être
    sélectionnées en utilisant des conditions personnalisées.
   </para>
   </sect1>
    
   <sect1 id="runtime-config-file-locations">
     <title>Emplacement des fichiers</title>
     
     <para>
       En plus du fichier <filename>postgresql.conf</filename> déjà mentionné,
       <productname>PostgreSQL</productname> utilise deux autres fichiers de
       configuration éditables manuellement. Ces fichiers contrôlent
       l'authentification du client (leur utilisation est discuté dans le
       <xref linkend="client-authentication"/>). Par défaut, les trois fichiers de
       configuration sont stockés dans le répertoire data du cluster de bases
       de données. Les paramètres décrits dans cette section permettent de
       déplacer les fichiers de configuration. Ce qui peut en faciliter
       l'administration. Il est, en particulier, souvent plus facile de
       s'assurer que les fichiers de configuration sont correctement sauvegardés
       quand ils sont conservés à part.
     </para>
       
       <variablelist>
         <varlistentry id="guc-data-directory" xreflabel="data_directory">
           <term><varname>data_directory</varname> (<type>string</type>)</term>
           <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>data_directory</varname></primary>
           </indexterm>
             <para>
               Indique le répertoire à utiliser pour le stockage des données.
               Ce paramètre ne peut être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>
       
         <varlistentry id="guc-config-file" xreflabel="config_file">
           <term><varname>config_file</varname> (<type>string</type>)</term>
           <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>config_file</varname>
               </primary>
           </indexterm>
             <para>
               Indique le fichier de configuration principal du serveur
	       (appelé <filename>postgresql.conf</filename>). Ce paramètre
	       ne peut être initialisé que sur la ligne de commande de
               <command>postgres</command>.
             </para>
           </listitem>
         </varlistentry>
   
         <varlistentry id="guc-hba-file" xreflabel="hba_file">
           <term><varname>hba_file</varname> (<type>string</type>)</term>
	   <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>hba_file</varname></primary>
           </indexterm>
             <para>
               Indique le fichier de configuration de l'authentification
               fondée sur l'hôte (appelé <filename>pg_hba.conf</filename>).
	       Ce paramètre ne peut être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>

         <varlistentry id="guc-ident-file" xreflabel="ident_file">
           <term><varname>ident_file</varname> (<type>string</type>)</term>
	   <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>ident_file</varname></primary>
           </indexterm>
             <para>
               Indique le fichier de configuration de l'authentification
               <application>ident</application> (appelé <filename>pg_ident.conf</filename>).
               Ce paramètre ne peut seulement être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>

         <varlistentry id="guc-external-pid-file"
           xreflabel="external_pid_file">
           <term><varname>external_pid_file</varname> (<type>string</type>)</term>
           <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>external_pid_file</varname></primary>
           </indexterm>
             <para>
               Indique le nom d'un fichier supplémentaire d'identifiant de
               processus (PID) créé par le serveur à l'intention des
	       programmes d'administration du serveur.
               Ce paramètre ne peut être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>
       </variablelist>

     <para>
       Dans une installation par défaut, aucun des paramètres ci-dessus n'est
       configuré explicitement. À la place, le répertoire des données est
       spécifié par l'option <option>-D</option> en ligne de commande ou par
       la variable d'environnement <envar>PGDATA</envar>. Les fichiers de
       configuration sont alors tous disponibles dans le répertoire des données.
     </para>

     <para>
       Pour conserver les fichiers de configuration dans un répertoire
       différent de data, l'option <option>-D</option> de la ligne de
       commande <command>postgres</command>
       ou la variable d'environnement <envar>PGDATA</envar> doit pointer sur le
       répertoire contenant les fichiers de configuration. Le paramètre
       <varname>data_directory</varname> doit alors être configuré dans le
       fichier <filename>postgresql.conf</filename> (ou sur la ligne de commande) pour
       préciser où est réellement situé le répertoire des données. 
       <varname>data_directory</varname> surcharge <option>-D</option> et
       <envar>PGDATA</envar> pour l'emplacement du répertoire des données,
       mais pas pour l'emplacement des fichiers de configuration.
     </para>

     <para>
       les noms des fichiers de configuration et leur emplacement peuvent
       être indiqués individuellement en utilisant les
       paramètres <varname>config_file</varname>, <varname>hba_file</varname> et/ou
       <varname>ident_file</varname>. <varname>config_file</varname> ne peut être
       indiqué que sur la ligne de commande de <command>postgres</command>
       mais les autres peuvent être placés dans le fichier de configuration
       principal. Si les trois paramètres et <varname>data_directory</varname> sont
       configurés explicitement, alors il n'est pas nécessaire d'indiquer
       <option>-D</option> ou <envar>PGDATA</envar>.
     </para>

     <para>
       Lors de la configuration de ces paramètres, un chemin relatif est
       interprété d'après le répertoire d'où est lancé <command>postgres</command>.
     </para>

   </sect1>

   <sect1 id="runtime-config-connection">
    <title>Connexions et authentification</title>

    <sect2 id="runtime-config-connection-settings">
     <title>Paramètres de connexion</title>

     <variablelist>
     
       <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
         <term><varname>listen_addresses</varname> (<type>string</type>)</term>
         <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>listen_addresses</varname>
             </primary>
         </indexterm>
           <para>
             Indique les adresses TCP/IP sur lesquelles le serveur écoute
             les connexions des applications client. La valeur prend la forme
             d'une liste de noms d'hôte ou d'adresses IP numériques séparés
             par des virgules. L'entrée spéciale <literal>*</literal> correspond
             à toutes les interfaces IP disponibles. Si la liste est vide, le
             serveur n'écoute aucune interface IP, auquel cas seuls les
             sockets de domaine Unix peuvent être utilisés pour s'y connecter.
             La valeur par défaut est
	     <systemitem class="systemname">localhost</systemitem>, ce qui
	     n'autorise que les
             connexions locales de type <quote>loopback</quote>. Ce
	     paramètre ne peut être configuré qu'au lancement du serveur.
           </para>
         </listitem>
       </varlistentry>

       <varlistentry id="guc-port" xreflabel="port">
         <term><varname>port</varname> (<type>integer</type>)</term>
	 <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>port</varname></primary>
         </indexterm>
           <para>
             Le port TCP sur lequel le serveur écoute&nbsp;; 5432 par défaut.
             Le même numéro de port est utilisé pour toutes les
             adresses IP que lesquelles le serveur écoute. Ce paramètre ne peut
             être configuré qu'au lancement du serveur.
           </para>
         </listitem>
       </varlistentry>

       <varlistentry id="guc-max-connections" xreflabel="max_connections">
         <term><varname>max_connections</varname> (<type>integer</type>)</term>
      <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>max_connections</varname>
             </primary>
         </indexterm>
       <para>
	Indique le nombre maximum de connexions concurrentes au serveur de
	base de données. La valeur par défaut typique est de 100 connexions
	mais peut être moindre si les paramètres du noyau ne le supportent pas
	(ce qui est déterminé lors du <application>initdb</application>). Ce
	paramètre ne peut être initialisé qu'au lancement du serveur.
       </para>

       <para>
        Augmenter ce paramètre peut obliger <productname>PostgreSQL</productname>
        à réclamer plus de mémoire partagée
	<systemitem class="osname">System V</systemitem>
        ou de sémaphores que ne le permet la configuration par défaut du système
        d'exploitation. Voir la <xref linkend="sysvipc"/> pour plus
        d'informations sur la façon d'ajuster ces paramètres, si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-superuser-reserved-connections" xreflabel="superuser_reserved_connections">
      <term><varname>superuser_reserved_connections</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>superuser_reserved_connections</varname></primary>
      </indexterm>
       <para>
        Indique le nombre de connecteurs (<quote>slots</quote>) réservés
	aux connexions des superutilisateurs <productname>PostgreSQL</productname>.
	Au plus <xref linkend="guc-max-connections"/> connexions peuvent être
	actives simultanément. À chaque fois que le nombre de connexions
	simultanément actives atteint <varname>max_connections</varname> moins
	<varname>superuser_reserved_connections</varname>, les nouvelles
	connexions ne sont acceptées que pour les superutilisateurs.
       </para>

       <para>
	La valeur par défaut est de trois connexions. La valeur doit être plus
	petite que la valeur de <varname>max_connections</varname>. Ce paramètre
	ne peut être configuré qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-directory" xreflabel="unix_socket_directory">
       <term><varname>unix_socket_directory</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>unix_socket_directory</varname></primary>
       </indexterm>
         <para>
           Indique le répertoire du socket de domaine Unix sur lequel le
           serveur écoute les connexions des applications client. Par défaut,
           il s'agit de <filename>/tmp</filename> mais cela peut être
           modifié au moment de la construction. Ce paramètre ne peut
           être configuré qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
       <term><varname>unix_socket_group</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>unix_socket_group</varname>
           </primary>
       </indexterm>
         <para>
           Configure le groupe propriétaire du socket de domaine Unix
           (l'utilisateur propriétaire de la socket est toujours l'utilisateur
           qui lance le serveur). En combinaison avec le paramètre
           <varname>unix_socket_permissions</varname>, ceci peut être
           utilisé comme un mécanisme de contrôle d'accès supplémentaire pour
           les connexions de domaine Unix. Par défaut, il s'agit d'une
           chaîne vide, ce qui sélectionne le groupe par défaut de l'utilisateur
           courant. Ce paramètre n'est disponible qu'au lancement du
           serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
       <term><varname>unix_socket_permissions</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>unix_socket_permissions</varname></primary>
       </indexterm>
         <para>
           Configure les droits d'accès au socket de domaine Unix. Ce socket
           utilise l'ensemble habituel des droits du système de fichiers
           Unix. La spécification du paramètre est attendue dans le mode
           numérique avec la forme acceptée par les appels système
           <function>chmod</function> et <function>umask</function> (pour
           utiliser le format octal, ce nombre doit commencer avec un
           <literal>0</literal> (zéro)).
         </para>
  
         <para>
           Les droits par défaut sont <literal>0777</literal>, signifiant que
           tout le monde peut se connecter. Les alternatives raisonnables sont
           <literal>0770</literal> (utilisateur et groupe uniquement, voir
           aussi <varname>unix_socket_group</varname>) et
           <literal>0700</literal> (utilisateur uniquement) (pour un
           socket de domaine Unix, seul le droit d'accès en écriture
	   importe&nbsp;; il n'est donc pas nécessaire de donner ou de révoquer les
           droits de lecture ou d'exécution).
         </para>
  
         <para>
           Ce mécanisme de contrôle d'accès est indépendant de celui décrit
           dans le <xref linkend="client-authentication"/>.
         </para>
    
         <para>
           Ce paramètre n'est positionnable qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
      <term><varname>bonjour_name</varname> (<type>string</type>)</term>
       <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>bonjour_name</varname></primary>
      </indexterm>
         <para>
           Indique le nom du broadcast <productname>Bonjour</productname>.
           Le nom de l'ordinateur est utilisé si ce paramètre est configuré avec
           une chaîne vide (ce qui est la valeur par défaut). Ce paramètre est
	   ignoré si le serveur n'est pas compilé avec le support
	   <productname>Bonjour</productname>.
           Cette option n'est configurable qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
      <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>tcp_keepalives_idle</varname></primary>
      </indexterm>
       <para>
	Sur les systèmes supportant l'option de socket <symbol>TCP_KEEPIDLE</symbol>,
	indique le nombre de secondes avant l'envoi de signaux
	<quote>keepalives</quote> sur une connexion silencieuse
	(<foreignphrase>idle</foreignphrase>). La valeur de zéro permet d'utiliser
	celle par défaut du système. Si <symbol>TCP_KEEPIDLE</symbol> n'est pas
	supporté, ce paramètre doit valoir zéro. Ce paramètre est ignoré pour
	les connexions réalisées via un socket de domaine Unix.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
      <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>tcp_keepalives_interval</varname></primary>
      </indexterm>
       <para>
        Sur les systèmes supportant l'option de socket <symbol>TCP_KEEPINTVL</symbol>,
	indique le temps, en secondes, d'attente d'une réponse à un
	<quote>keepalive</quote> avant de retransmettre. La valeur de zéro permet
	d'utiliser celle par défaut du système. Si <symbol>TCP_KEEPINTVL</symbol>
	n'est pas supporté, ce paramètre doit valoir zéro. Ce paramètre est ignoré
	pour les connexions réalisées via un socket de domaine Unix.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
      <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>tcp_keepalives_count</varname></primary>
      </indexterm>
       <para>
        Sur les systèmes supportant l'option socket <symbol>TCP_KEEPCNT</symbol>,
	indique le nombre de <quote>keepalive</quote> qui peuvent être perdus avant
	de considérer que la connexion est tombée. La valeur zéro permet d'utiliser
	celle par défaut du système. Si <symbol>TCP_KEEPCNT</symbol> n'est
	pas supporté, ce paramètre doit valoir zéro. Ce paramètre est ignoré pour
	les connexions réalisées via un socket de domaine Unix.
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
     </sect2>
     <sect2 id="runtime-config-connection-security">
     <title>Sécurité et authentification</title>
     
     <variablelist>
     <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
      <term><varname>authentication_timeout</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm><primary>délai</primary><secondary>authentification client</secondary></indexterm>
      <indexterm><primary>authentification client</primary><secondary>délai lors de</secondary></indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>authentication_timeout</varname></primary>
      </indexterm>
       <para>
        Temps maximum pour terminer l'authentification du client en
        secondes. Si un client n'a pas terminé le protocole d'authentification
        dans ce délai, le serveur rompt la connexion. Ceci protège le serveur
	des clients bloqués occupant une connexion indéfiniment. La valeur par
	défaut est d'une minute.
	Cette option est configurable au lancement du serveur et dans le fichier
        <filename>postgresql.conf</filename>. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl" xreflabel="ssl">
       <term><varname>ssl</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>ssl</varname></primary>
       </indexterm>
         <para>
          Active les connexions <acronym>SSL</acronym>. Lire la
	  <xref linkend="ssl-tcp"/> avant de l'utiliser. Désactivé par défaut.
          Ce paramètre n'est configurable qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-password-encryption"
       xreflabel="password_encryption">
       <term><varname>password_encryption</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>password_encryption</varname> 
           </primary>
       </indexterm>
         <para>
           Ce paramètre détermine si le mot de passe doit être chiffré quand un
	   mot de passe est indiqué dans
	   <xref linkend="sql-createuser" endterm="sql-createuser-title"/> ou
	   <xref linkend="sql-alteruser" endterm="sql-alteruser-title"/> sans
	   qu'il soit précisé <literal>ENCRYPTED</literal> ou
	   <literal>UNENCRYPTED</literal>. Actif par défaut (chiffre le mot de passe).
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
       <term><varname>krb_server_keyfile</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>krb_server_keyfile</varname>
           </primary>
       </indexterm>
         <para>
           Configure l'emplacement du fichier contenant la clé secrète du
           serveur Kerberos. Voir la <xref linkend="kerberos-auth"/> pour les
           détails. Ce paramètre ne peut être configuré qu'au lancement
	   du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-srvname" xreflabel="krb_srvname">
      <term><varname>krb_srvname</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>krb_srvname</varname></primary>
      </indexterm>
       <para>
        Configure le nom du service Kerberos. Voir la <xref linkend="kerberos-auth"/>
        pour les détails. Ce paramètre ne peut être configuré qu'au lancement
	du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-hostname" xreflabel="krb_server_hostname">
      <term><varname>krb_server_hostname</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>krb_server_hostname</varname></primary>
      </indexterm>
       <para>
        Configure la partie du nom de l'hôte du service principal.
        Ceci, combiné avec <varname>krb_srvname</varname>, est utilisé pour
	engendrer le service principal complet, c'est-à-dire
        <varname>krb_srvname</varname><literal>/</literal><varname>krb_server_hostname</varname><literal>@</literal>REALM.
        Sans configuration, le comportement par défaut autorise tout service
        principal correspondant à une entrée dans la table des clés. Voir la
	<xref linkend="kerberos-auth"/> pour les détails. Ce paramètre ne peut
        être configuré qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>krb_caseins_users</varname></primary>
      </indexterm>
       <para>
        Indique si les noms des utilisateurs Kerberos doivent être traités en
	respectant la casse. Désactivé par défaut (insensible à la casse, valeur
	<literal>off</literal>), ce paramètre ne peut être configuré qu'au
	lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
       <term><varname>db_user_namespace</varname> (<type>boolean</type>)</term>
      <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>db_user_namespace</varname></primary>
       </indexterm>
       <para>
        Active les noms d'utilisateur par base de données. Désactivé par défaut.
	Ce paramètre ne peut être configuré que dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>

       <para>
        Si ce paramètre est activé, les utilisateurs doivent être créés sous
	la forme <literal>nomutilisateur@nom_base</literal>. Quand
	<literal>nomutilisateur</literal> est passé pour un client se
	connectant, <literal>@</literal> et le nom
        de la base de données sont ajoutés au nom de l'utilisateur et ce nom
        d'utilisateur spécifique à la base de données est recherché par le
        serveur. Lorsque des utilisateurs dont le nom contient un
	<literal>@</literal> est créé dans l'environnement SQL, ce nom doit
	être placé guillemets.
       </para>

       <para>
        Ce paramètre activé, il rest possible de créer des utilisateurs
        globaux ordinainres. Il suffit pour cela d'ajouter
	<literal>@</literal> au nom du client. Le <literal>@</literal> est
	supprimé avant que le serveur ne recherche ce nom.
       </para>

       <note>
        <para>
         Cette fonctionnalité, temporaire, sera supprimée lorsqu'une
	 solution complète sera trouvée.
        </para>
       </note>
      </listitem>
     </varlistentry>

    </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-resource">
    <title>Consommation des ressources</title>

    <sect2 id="runtime-config-resource-memory">
     <title>Mémoire</title>

     <variablelist>
     <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
      <term><varname>shared_buffers</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>shared_buffers</varname></primary>
      </indexterm>
       <para>
        Initialise la quantité de mémoire que le serveur de bases de données
	utilise comme mémoire partagée. La valeur par défaut, en général 32&nbsp;Mo,
        peut être plus faible si la configuration du noyau ne la supporte
        pas (déterminé lors de l'exécution d'<application>initdb</application>).
        Ce paramètre doit être à au moins 128&nbsp;Ko et au moins 16&nbsp;Ko par
	<xref linkend="guc-max-connections"/>. (Des valeurs personnalisées de
        <symbol>BLCKSZ</symbol> peuvent changer ce minimum.) Des
        valeurs significativement plus importantes que ce minimum sont
        généralement nécessaires pour de bonnes performances. Plusieurs dizaines de
	méga-octets sont recommandées pour des installations de
        production. Ce paramètre n'est initialisable qu'au lancement du serveur.
       </para>

       <para>
        L'augmentation de ce paramètre peut obliger
        <productname>PostgreSQL</productname> à réclamer plus de mémoire
	partagée <systemitem class="osname">System V</systemitem> que ce
	que la configuration par défaut du système d'exploitation ne peut
	gérer. Voir la <xref linkend="sysvipc"/> pour de plus amples
	informations sur l'ajustement de ces paramètres, si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
      <term><varname>temp_buffers</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>temp_buffers</varname></primary>
      </indexterm>
       <para>
        Configure le nombre maximum de tampons temporaires utilisés par chaque
	session de la base de données. Ce sont des tampons locaux à
	la session utilisés uniquement pour accéder aux tables temporaires. La
	valeur par défaut est de 8&nbsp;Mo. Ce paramètre peut être modifié à l'intérieur
	de sessions individuelles mais seulement jusqu'à la première
	utilisation des tables temporaires dans une session&nbsp;; les tentatives
	suivantes de changement de cette valeur n'ont aucun effet sur cette
	session.
       </para>

       <para>
        Une session alloue des tampons temporaires en fonction des besoins jusqu'à atteindre
	la limite donnée par <varname>temp_buffers</varname>. Positionner
	une valeur importante pour les sessions qui ne le nécessitent pas ne
	coûte qu'un descripteur de tampon, soit
	environ 64 octets, par incrément de <varname>temp_buffers</varname>. Néanmoins,
	si un tampon est réellement utilisé, 8192 autres octets sont consommés
	pour celui-ci (ou, plus généralement, <symbol>BLCKSZ</symbol> octets).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
      <term><varname>max_prepared_transactions</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_prepared_transactions</varname></primary>
      </indexterm>
       <para>
	Configure le nombre maximum autorisé de transactions simultanément dans
	l'état <quote>préparées</quote> (voir <xref
	linkend="sql-prepare-transaction" endterm="sql-prepare-transaction-title"/>).
	Configurer ce paramètre à zéro désactive la fonctionnalité de
	transactions préparées. La valeur par défaut est de cinq transactions.
	Ce paramètre ne peut être configurée qu'au lancement du serveur.
       </para>

       <para>
        Si les transactions préparées ne sont pas utilisées, ce paramètre peut
	être positionné à zéro. Au contraire, si elles sont utilisées, il
	peut être intéressant de positionner 
	<varname>max_prepared_transactions</varname> au minimum à
	<xref linkend="guc-max-connections"/> pour
	éviter d'indésirables échecs lors de l'étape de préparation.
       </para>

       <para>
        Augmenter ce paramètre peut conduire <productname>PostgreSQL</productname>
	à réclamer plus de mémoire partagée
	<systemitem class="osname">System V</systemitem> que ne
	le permet la configuration par défaut du système d'exploitation.
	Voir la <xref linkend="sysvipc"/> pour les informations concernant la façon
	d'ajuster ces paramètres, si nécessaire.
       </para>
      </listitem>
     </varlistentry>

<!-- SAS 200701019 : Dans le reste du fichier 
     j'ai traduit hash join par jointure de fusion...
     Si jointure d'assemblage est préféré, ne pas oublié de corriger le
     reste du document.
     Idem pour hachage et découpage. -->
     <varlistentry id="guc-work-mem" xreflabel="work_mem">
       <term><varname>work_mem</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>work_mem</varname></primary>
       </indexterm>
         <para>
           Indique la quantité de mémoire que les opérations de tri interne
           et les tables de hachage peuvent utiliser avant de basculer sur
	   des fichiers disque temporaires. La valeur par défaut est de
           1&nbsp;Mo. Pour une requête complexe,
           plusieurs opérations de tri ou de hachage peuvent être exécutées en
           parallèle&nbsp;; chacune peut utiliser de la mémoire à hauteur de
	   cette valeur avant de commencer à placer les données dans des
	   fichiers temporaires. De plus, différentes sessions peuvent
	   exécuter de telles opérations simultanément. La mémoire totale
	   utilisée peut, de ce fait, atteindre plusieurs fois la valeur 
           de <varname>work_mem</varname>&nbsp;;
           il est nécessaire de garder cela à l'esprit lors du choix de cette
           valeur. Les opérations de tri sont utilisées pour <literal>ORDER
           BY</literal>, <literal>DISTINCT</literal> et les jointures de
	   fusion. Les tables de hachage sont utilisées dans les jointures
	   de hachage, les agrégations fondées sur le hachage et le traitement des
           sous-requêtes <literal>IN</literal>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-maintenance-work-mem" 
       xreflabel="maintenance_work_mem">
       <term><varname>maintenance_work_mem</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration 
           <varname>maintenance_work_mem</varname></primary>
       </indexterm>
         <para>
           Indique la quantité maximale de mémoire que peuvent utiliser les 
	   opérations de maintenance telles que <command>VACUUM</command>,
	   <command>CREATE INDEX</command> et
	   <command>ALTER TABLE ADD FOREIGN KEY</command>. La valeur par
	   défaut est de 16&nbsp;Mo.
	   Puisque seule une de ces opérations peut être exécutée à la fois
	   dans une session et que, dans le cadre d'un fonctionnement
	   normal, peu d'opérations de ce genre sont exécutées
	   concurrentiellement sur une même installation, il est possible d'initialiser
           cette variable à une valeur bien plus importante que 
           <varname>work_mem</varname>. Une grande valeur peut
           améliorer les performances des opérations VACUUM et de la
           restauration des sauvegardes.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
       <term><varname>max_stack_depth</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_stack_depth</varname>
           </primary>
         </indexterm>
         <para>
           Indique la profondeur maximale de la pile d'exécution du serveur.
           La configuration idéale pour ce paramètre est la limite réelle
           de la pile assurée par le noyau (configurée par
	   <literal>ulimit -s</literal> ou équivalent local) à laquelle est
	   soustraite une marge de sécurité d'un Mo environ. La marge de
	   sécurité est nécessaire parce que la profondeur de la pile n'est pas
	   vérifiée dans chaque routine du serveur mais uniquement dans les
	   routines clés potentiellement récursives telles que l'évaluation
	   d'une expression. Le paramétrage par défaut est de 2&nbsp;Mo, valeur
	   faible qui implique peu de risques.
	   Néanmoins, elle peut s'avérer trop petite pour autoriser l'exécution
	   de fonctions complexes. Seuls les superutilisateurs peuvent modifier
	   ce paramètre.
         </para>

         <para>
           Configurer ce paramètre à une valeur plus importante que la limite
	   réelle du noyau signifie qu'une fonction récursive peut
	   occasionner un arrêt brutal d'un processus serveur particulier.
	   Sur les plateformes où
           <productname>PostgreSQL</productname> peut déterminer la limite du
           noyau, il interdit de positionner cette variable à une valeur
           inadéquate. Néanmoins, toutes les plateformes ne fournissent pas
           cette information, et une grande attention doit être portée au
	   choix de cette valeur.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-resource-fsm">
     <title>Carte de l'espace libre (<foreignphrase>Free Space Map</foreignphrase>)</title>

     <indexterm>
      <primary>carte de l'espace libre</primary>
     </indexterm>

     <para>
      Ces paramètres contrôlent la taille de la
      <firstterm>carte de l'espace libre</firstterm> partagé. Cette carte 
      conserve la trace des emplacements inutilisés dans
      la base de données. Une carte trop petite peut conduire la base de données
      à consommer de plus en plus d'espace disque car l'espace libre qui n'est pas dans
      la carte ne peut pas être réutilisé&nbsp;; de ce fait, 
      <productname>PostgreSQL</productname> réclame de l'espace disque
      supplémentaire au système d'exploitation lorsqu'il stocke de nouvelles données.
     </para>
     <para>
      Les dernières lignes affichées par la commande
      <command>VACUUM VERBOSE</command> sur la base entière peuvent
      aider à déterminer si
      les paramètres courants sont adéquats. Un message <literal>NOTICE</literal> est
      également affiché lors d'une telle opération si le paramétrage est
      trop faible.
     </para>

     <para>
      Augmenter ce paramètre peut toutefois conduire
      <productname>PostgreSQL</productname> à réclamer plus de mémoire
      partagée <systemitem class="osname">System V</systemitem>
      ou de sémaphores que ne le permet la configuration par défaut du système
      d'exploitation. Voir la <xref linkend="sysvipc"/> pour plus
      d'informations sur la façon d'ajuster ces paramètres si nécessaire.
     </para>

     <variablelist>
     <varlistentry id="guc-max-fsm-pages" xreflabel="max_fsm_pages">
      <term><varname>max_fsm_pages</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>max_fsm_pages</varname></primary>
      </indexterm>
       <para>
        Initialise le nombre maximum de pages disque pour lesquelles
	l'espace libre est tracé dans la carte partagée de l'espace libre.
        Six octets de mémoire partagée sont consommés par emplacement
        de page. Ce paramétrage doit valoir au moins
	16&nbsp;*&nbsp;<varname>max_fsm_relations</varname>. La valeur par
	défaut est choisie par <application>initdb</application> en fonction
	de la quantité de mémoire disponible et peut s'étendre de 20000 à 200000.
        Ce paramètre n'est configurable qu'au démarrage du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-fsm-relations" xreflabel="max_fsm_relations">
      <term><varname>max_fsm_relations</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>max_fsm_relations</varname></primary>
      </indexterm>
       <para>
        Initialise le nombre maximum de relations (tables et index) pour
	lesquelles l'espace libre est tracé dans la carte partagée. Environ
	70 octets de mémoire partagée sont consommés par emplacement. La valeur
	par défaut est de 1000 relations. Ce paramètre n'est configurable qu'au
	démarrage du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-resource-kernel">
     <title>Usage des ressources du noyau</title>
     <variablelist>

     <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
      <term><varname>max_files_per_process</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>max_files_per_process</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Positionne le nombre maximum de fichiers simultanément ouverts par
	sous-processus serveur. La valeur par défaut est de 1000 fichiers. Si le
	noyau assure une limite par processus, il n'est pas nécessaire de
	s'intéresser à ce paramètre. Toutefois, sur certaines plateformes
	(notamment les systèmes BSD) le noyau autorise les processus
	individuels à ouvrir plus de fichiers que le système ne peut
	effectivement en supporter lorsqu'un grand nombre de processus
	essayent tous d'ouvrir ce nombre de fichiers. Si le message
	<quote>Too many open files</quote> apparaît, il faut essayer de
	réduire ce paramètre. Il ne peut être positionné qu'au démarrage du
	serveur.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>shared_preload_libraries</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Indique les bibliothèques partagées à
	précharger au démarrage du serveur. S'il faut précahrger plusieurs
	bibliothèques, leurs noms doivent être séparés par des
	virgules. Par exemple,
        <literal>'$libdir/malib'</literal> implique le préchargement de 
	<literal>malib.so</literal> (ou, sur certaines plateformes,
	<literal>malib.sl</literal>) depuis le répertoire d'installation
	des bibliothèques standard. Ce paramètre ne peut être positionné
	qu'au démarrage du serveur.
       </para>

       <para>
        Les bibliothèques des langages procéduraux de
	<productname>PostgreSQL</productname> peuvent être préchargées ainsi,
	typiquement en utilisant la syntaxe <literal>'$libdir/plXXX'</literal>
	où <literal>XXX</literal> est <literal>pgsql</literal>, <literal>perl</literal>,
	<literal>tcl</literal> ou <literal>python</literal>.
       </para>

       <para>
        Le préchargement d'une bibliothèque partagée permet d'éviter le temps
	de chargement de la bibliothèque à sa première utilisation.
	Toutefois, la durée de démarrage de chaque nouveau processus serveur
	peut augmenter légèrement, même si aucun de ces processus n'utilise
	la bibliothèque.
	Ce paramètre n'est réellement recommandé que pour les bibliothèques
	utilisées dans la plupart des sessions.
       </para>

       <note>
        <para>
         Sur un hôte Windows, le préchargement d'une bibliothèque au lancement du
	 serveur ne réduit pas le temps nécessaire au lancement de chaque nouveau
	 processus serveur&nbsp;; chaque processus serveur recharge toutes
	 les bibliothèques déjà chargées. Néanmoins, 
	 <varname>shared_preload_libraries</varname> est toujours utile sur
	 les hôtes Windows car certaines
	 bibliothèques partagées peuvent nécessiter certaines
	 opérations qui ne peuvent avoir lieu qu'au lancement du serveur (par
	 exemple, une bibliothèque partagée peut réserver
	 des verrous légers ou de la mémoire partagée, ce qui ne peut être
	 fait une fois le serveur démarré).
        </para>
       </note>

       <para>
        Si une bibliothèque indiquée est introuvable, le démarrage du serveur
	échoue.
       </para>

       <para>
        Chaque bibliothèque supportée par PostgreSQL possède un
	<quote>bloc magique</quote> qui est vérifié pour garantir la compatibilité. Pour
	cette raison, seules les bibliothèques PostgreSQL peuvent être
	chargées de cette façon.
       </para>
      </listitem>
     </varlistentry>

<!-- SAS 20070119 :
     Il semble que la partie suivante n'existe plus dans les sources de
     PG8.1...
     -->
<!--     
     <varlistentry id="guc-preload-libraries" xreflabel="preload_libraries">
      <term><varname>preload_libraries</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>preload_libraries</varname></primary>
      </indexterm>
       <para>
        Cette variable spécifie une ou plusieurs bibliothèques préchargées au
        lancement du serveur. Une fonction d'initialisation sans paramètre peut
        être appelée pour chaque bibliothèque. Pour cela, ajouter un caractère 
        deux points et le nom de la fonction d'initialisation après le nom de la
        bibliothèque. Par exemple, <literal>'$libdir/malib:malib_init'</literal>
        causerait le préchargement de <literal>malib</literal> et l'exécution de
        <literal>malib_init</literal>. Si plus d'une bibliothèque doit être chargée,
        séparez leur nom par des virgules.
       </para>

       <para>
        Si une bibliothèque spécifique ou une fonction d'initialisation sont
	introuvables, le serveur échouera au lancement.
       </para>

       <para>
        Les bibliothèques des langages de procédure de
        <productname>PostgreSQL</productname> peuvent être préchargées de
        cette façon, typiquement en utilisant la syntaxe
        <literal>'$libdir/plXXX:plXXX_init'</literal> où
        <literal>XXX</literal> est soit <literal>pgsql</literal> soit
        <literal>perl</literal> soit <literal>tcl</literal> soit <literal>python</literal>.
       </para>

       <para>
        En préchargeant une bibliothèque partagée (et en l'initialisant dans
        les cas applicables), le temps de lancement de la bibliothèque est
        évité à la première utilisation de la bibliothèque. Néanmoins, le temps
        de lancer chaque nouveau processus pourrait augmenter légèrement même si
	le processus n'utilise pas la bibliothèque. Donc, ce paramètre est
	seulement recommandé pour les bibliothèques qui seront utilisées par
	la majorité des sessions.
       </para>
      </listitem>
    </varlistentry>
-->

   </variablelist>
</sect2>

<!-- SAS 20070119 : La traduction de cost-based vacuum delay n'est
probablement pas très heureuse, mais l'idée est bien de dire que le vacuum
est interrompu un certain temps (donc reporté) en fonction du coût estimé
des opération du vacuum. -->
    <sect2 id="runtime-config-resource-vacuum-cost">
     <title id="runtime-config-resource-vacuum-cost-title">
      Report du VACUUM en fonction de son coût
     </title>

     <para>
      Lors de l'exécution des commandes 
      <xref linkend="sql-vacuum" endterm="sql-vacuum-title"/> et 
      <xref linkend="sql-analyze" endterm="sql-analyze-title"/>, le système
      maintient un compteur interne qui conserve la trace du coût estimé
      des différentes opérations d'entrée/sortie réalisées. Quand le coût
      accumulé atteint une limite (indiquée par
      <varname>vacuum_cost_limit</varname>), le processus traitant l'opération
      s'arrête un moment (précisé par <varname>vacuum_cost_delay</varname>).
      Puis, il réinitialise le compteur et continue l'exécution.
     </para>

      <para>
	Le but de cette fonctionnalité est d'autoriser les administrateurs à
	réduire l'impact des entrées/sorties de ces commandes en fonction de
	l'activité des bases de données. Il existe un grand nombre de situations pour
	lesquelles il n'est pas très important que les commandes de
	maintenance telles que <command>VACUUM</command> et
	<command>ANALYZE</command> se finissent rapidement&nbsp;;
	néanmoins, il est généralement très
	important que ces commandes n'interfèrent pas de façon significative
	avec la capacité du système à réaliser d'autres opérations sur les bases
	de données. Le report du VACUUM en fonction de son coût fournit aux
	administrateurs un moyen d'y parvenir.
      </para>

      <para>
        Cette fonctionnalité est désactivée par défaut. Pour l'activer,
	la variable <varname>vacuum_cost_delay</varname>  doit être
	initialisée à une valeur différente de zéro.
      </para>

      <variablelist>
        <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
          <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_delay</varname></primary>
          </indexterm>
            <para>
              Indique le temps, en millisecondes, de repos du processus quand la limite
	      de coût a été atteinte. La valeur par défaut est de zéro, ce qui
	      désactive la fonctionnalité de report du VACUUM en fonction de
	      son coût. Une valeur positive active cette fonctionnalité. Sur
	      de nombreux systèmes, la résolution réelle des délais de repos est de
	      10&nbsp;millisecondes&nbsp;; configurer <varname>vacuum_cost_delay</varname>
	      à une valeur qui n'est pas un multiple de 10 conduit alors au
	      même résultat que de le configurer au multiple de 10 supérieur.
            </para>
          </listitem>
        </varlistentry>
      
        <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
          <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_hit</varname></primary>
          </indexterm>
            <para>
              Indique Le coût estimé du nettoyage par VACUUM d'un tampon trouvé dans le
	      cache des tampons partagés. Cela représente le coût de
	      verrouillage de la réserve de tampons, la recherche au sein de la table de
	      hachage partagée et le parcours du contenu de la page. La valeur
	      par défaut est de un.
            </para>
          </listitem>
        </varlistentry>
    
        <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
          <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_miss</varname></primary>
          </indexterm>
            <para>
              Indique le coût estimé du nettoyage par VACUUM d'un tampon qui doit être lu
	      sur le disque. Ceci représente l'effort à fournir pour
	      verrouiller la réserve de tampons, rechercher dans la table de
	      hachage partagée, lire le bloc désiré sur le disque et
	      parcourir son contenu. La valeur par défaut est 10.
            </para>
          </listitem>
        </varlistentry>
  
<!-- dirty block : sale est-il le terme adéquat ? 
Ne s'agit-il pas plutôt d'un bloc non encore écrit sur le disque ? Clean
block : bloc vidé,  dirty bloc : bloc à vider ?
-->
        <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
          <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_dirty</varname></primary>
          </indexterm>
            <para>
              Indique le coût estimé de modification par VACUUM d'un bloc
	      précédemment vide (<foreignphrase>clean block</foreignphrase>).
	      Cela représente les entrées/sorties
	      supplémentaires nécessaires pour vider à nouveau le bloc
	      modifié (<foreignphrase>dirty block</foreignphrase>) sur le
	      disque. La valeur par défaut est 20.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
          <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_limit</varname></primary>
          </indexterm>
            <para>
              Indique Le coût cumulé qui provoque l'endormissement du processus de
	      VACUUM. La valeur par défaut est 200.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>
          Certaines opérations détiennent des verrous critiques et doivent
	  donc se terminer le plus vite possible. Les reports de
	  VACUUM en fonction du coût ne surviennent pas pendant ces opérations.
	  De ce fait, il
	  est possible que le coût cumulé soit bien plus important que la
	  limite indiquée. Pour éviter des délais inutilement longs dans de
	  tels cas, le délai réel est calculé de la façon suivante&nbsp;:
	  <varname>vacuum_cost_delay</varname> * <varname>accumulated_balance</varname> /
	  <varname>vacuum_cost_limit</varname> avec un maximum de
	  <varname>vacuum_cost_delay</varname> * 4.
        </para>
      </note>

    </sect2>

<!-- Scripteur d'arrière-plan ? -->
    <sect2 id="runtime-config-resource-background-writer">
      <title>Processus d'écriture en arrière-plan</title>
  
      <para>
        Avec <productname>PostgreSQL</productname> 8.0 est apparu un processus
        serveur distinct, nommé
	<firstterm>processus d'écriture en arrière-plan</firstterm>
	(<foreignphrase>background writer</foreignphrase>), dont la
        seule fonction est d'écrire les tampons partagés
	<quote>modifiés</quote> 
	(<foreignphrase>dirty shared buffers</foreignphrase>).
	Le but est d'éviter aux processus serveur qui gèrent les
        requêtes utilisateur d'attendre les écritures, le processus
	d'écriture en arrière-plan se chargeant de celles-ci. Cela réduit
	également l'impact sur les performances des points de vérification.
	Le processus d'écriture en arrière-plan décharge en permanence sur
	le disque les pages modifiées, de telle sorte que seul un petit
	nombre de pages doit être écrit sur disque lorsque survient un point
	de vérification. Il n'y a alors plus le déluge d'écritures de
	tampons modifiés qui survenait précédemment à chaque point de
	vérification. Cependant, la charge des entrées/sorties augmente
	considérablement, parce que si une page fréquemment modifiée n'était
	auparavant écrite qu'une seule fois par point de vérification, le
	processus d'écriture en arrière-plan peut l'écrire plusieurs fois
	dans le même intervalle. Dans la plupart des situations, une faible
	charge continue est préférable à un pic périodique, mais les
	paramètres décrits dans cette sous-section permettent d'ajuster ce
	comportement pour des besoins particuliers.
      </para>

      <variablelist>
        <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
          <term><varname>bgwriter_delay</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>bgwriter_delay</varname></primary>
          </indexterm>
            <para>
              Indique le délai entre les tours d'activité du processus
	      d'écriture en arrière-plan. À chaque tour, le processus
	      écrit un certain nombre de tampons modifiés (contrôlable par les
	      paramètres qui suivent). Puis, il s'endort pour
	      <varname>bgwriter_delay</varname> millisecondes et recommence.
	      La valeur par défaut est de 200 millisecondes.
	      Sur de nombreux systèmes, la résolution réelle des
	      délais de sommeil est de 10&nbsp;millisecondes&nbsp;;
	      positionner
	      <varname>bgwriter_delay</varname> à une valeur qui n'est pas un multiple
	      de 10 peut avoir le même résultat que de le positionner au
	      multiple de 10 supérieur.
	      Ce paramètre ne peut qu'être configuré dans le fichier
	      <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
            </para>
          </listitem>
        </varlistentry>

      <varlistentry id="guc-bgwriter-lru-percent" xreflabel="bgwriter_lru_percent">
       <term><varname>bgwriter_lru_percent</varname> (<type>floating point</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_lru_percent</varname></primary>
       </indexterm>
        <para>
         Pour réduire la probabilité que les processus serveur aient besoin
	 de lancer leurs propres écritures, le processus en arrière-plan
	 tente d'écrire les tampons qui risquent d'être rapidement recyclés.
	 À chaque tour, il examine jusqu'à <varname>bgwriter_lru_percent</varname>
	 des tampons les plus proches du recyclage et écrit ceux qui ont été
	 modifiés. La valeur par défaut est 1.0 (1&nbsp;% est le nombre total
	 de tampons partagés).
	 Ce paramètre ne peut qu'être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
       <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_lru_maxpages</varname></primary>
       </indexterm>
        <para>
         À chaque tour, au plus ce nombre de tampons est écrit en résultat
	 de la recherche des tampons à recycler prochainement. La valeur par
	 défaut est de cinq tampons.
	 Ce paramètre ne peut qu'être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-all-percent" xreflabel="bgwriter_all_percent">
       <term><varname>bgwriter_all_percent</varname> (<type>floating point</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_all_percent</varname></primary>
       </indexterm>
        <para>
         Pour réduire la quantité de travail nécessaire à chaque point de
	 vérification, le processus d'écriture en arrière-plan effectue
	 aussi un parcours circulaire de l'ensemble des tampons écrivant les tampons
	 modifiés. À chaque tour, il examine au plus
         <varname>bgwriter_all_percent</varname> des tampons dans ce but. La valeur par
	 défaut est 0.333 (0,333&nbsp;% est le nombre total de tampons
	 partagés). Combiné à la valeur par défaut de <varname>bgwriter_delay</varname>,
	 ceci permet de parcourir l'ensemble des tampons environ une fois par minute.
	 Ce paramètre ne peut qu'être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-all-maxpages" xreflabel="bgwriter_all_maxpages">
       <term><varname>bgwriter_all_maxpages</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_all_maxpages</varname></primary>
       </indexterm>
        <para>
         À chaque tour, au maximum ce nombre de tampons est écrit en
	 résultat du parcours de tous les tampons. (Si cette limite est atteinte, le
	 parcours s'arrête et reprend au tampon suivant au prochain tour.)
	 La valeur par défaut est de cinq tampons.
	 Ce paramètre ne peut qu'être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>
      </variablelist>

      <para>
        Des valeurs plus faibles de <varname>bgwriter_all_percent</varname> et
        <varname>bgwriter_all_maxpages</varname> permettent de réduire la
	charge supplémentaire des entrées/sorties causée par le processus
	d'écriture en arrière-plan mais laissent plus de travail lors des
	points de vérification. Pour réduire les pointes de charge lors des
	points de vérification, ces deux valeurs peuvent être augmentées.
	Pour désactiver totalement ce processus, il suffit de positionner les
	valeurs	<varname>maxpages</varname> et/ou les valeurs
	<varname>percent</varname> à zéro.
      </para>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-wal">
    <title>Write Ahead Log</title>

   <para>
    Voir aussi la <xref linkend="wal-configuration"/> pour les détails
    concernant l'optimisation des des WAL.
   </para>

    <sect2 id="runtime-config-wal-settings">
     <title>Paramètres</title>
     <variablelist>
     
     <varlistentry id="guc-fsync" xreflabel="fsync">
      <term><varname>fsync</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>fsync</varname></primary>
      </indexterm>
       <para>
        Si ce paramètre est activé, le serveur <productname>PostgreSQL</productname>
        tente de s'assurer que les mises à jour sont écrites physiquement
        sur le disque en exécutant des appels système <function>fsync()</function>
        ou toute autre méthode équivalente (voir
	<xref linkend="guc-wal-sync-method"/>). Ceci permet de s'assurer que
	le cluster de bases de données peut revenir à un état cohérent après
	une panne matérielle ou du système d'exploitation.
       </para>

       <para>
        Toutefois, l'utilisation de <varname>fsync()</varname> a un impact
	sur les performances&nbsp;: lorsqu'une transaction est validée,
        <productname>PostgreSQL</productname> doit attendre que le système
        d'exploitation vide les WAL sur disque. Lorsque <varname>fsync</varname>
        est désactivé, le système d'exploitation est autorisé à faire de son
        mieux dans la mise en tampons, l'ordonnancement et le report des
	écritures. Cependant, en cas de panne système, les résultats des
	dernières transactions validées peuvent être en partie, voire 
	complètement, perdus. Dans le pire des cas,
        une corruption irrécupérable des données peut survenir.
	(Une panne du serveur de bases de données lui-même ne représente
	<emphasis>pas</emphasis> ici un facteur de risque. Seul une panne
	système engendre un risque de corruption.)
       </para>

       <para>
        Du fait des risques encourus, il n'existe pas de paramétrage universel
        pour <varname>fsync</varname>. Certains administrateurs désactivent en
        permanence <varname>fsync</varname> alors que d'autres ne le 
        désactivent que pour les chargements initiaux importants de données
	puisqu'il existe un point de redémarrage clairement défini si quelque chose se
        passe mal. D'autres laissent <varname>fsync</varname> en permanence
        activé. Par défaut, il est préférable d'activer
	<varname>fsync</varname> pour une bénéficier d'une sécurité maximale. Si
        le système d'exploitation, le matériel et la compagnie délectricité (ou la
        sauvegarde sur batterie) sont dignes de confiance, la désactivation de
        <varname>fsync</varname> peut être envisagée.
       </para>

       <para>
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Si ce paramètre est désactivé (<literal>off</literal>), il est
	intéressant de désactiver aussi <xref linkend="guc-full-page-writes"/>.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
      <term><varname>wal_sync_method</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_sync_method</varname></primary>
      </indexterm>
       <para>
        Méthode utilisée pour forcer les mises à jour des WAL sur le disque.
        Si <varname>fsync</varname> est désactivé, alors ce paramètre est
        inapplicable car les mises à jour ne sont pas du tout forcées. Les
        valeurs possibles sont&nbsp;:
       </para>
       <itemizedlist>
        <listitem>
        <para>
         <literal>open_datasync</literal> (écrit les fichiers WAL avec l'option 
         <symbol>O_DSYNC</symbol> de <function>open()</function>)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fdatasync</literal> (appelle <function>fdatasync()</function> à chaque
         validation)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fsync_writethrough</literal> (appelle <function>fsync()</function> à chaque
         validation, forçant une écriture de tous les caches disque en
	 écriture)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fsync</literal> (appelle <function>fsync()</function> à chaque validation)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>open_sync</literal> (écrit les fichiers WAL avec l'option
         <symbol>O_SYNC</symbol> de <function>open()</function>)
        </para>
        </listitem>
       </itemizedlist>
       <para>
        Toutes ces options ne sont pas disponibles sur toutes les plateformes.
        La valeur par défaut est la première méthode de la liste ci-dessus
	supportée par la plateforme.
        Les options <literal>open_</literal>* utilisent aussi
	<literal>O_DIRECT</literal> s'il est disponible.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
      <term><varname>full_page_writes</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>full_page_writes</varname></primary>
      </indexterm>
       <para>
        Quand ce paramètre est activé, le serveur
	<productname>PostgreSQL</productname>
        écrit l'intégralité du contenu de chaque page disque dans les WAL lors de la
        première modification de cette page intervenant après un point de
        vérification. Ceci est nécessaire car une écriture de page en cours
	alors que survient une panne du système d'exploitation peut n'être
	que partiellement effectuée, ce qui conduit à à une page sur disque
	qui contient un mélange d'anciennes et de nouvelles données.
	Les données de modification de niveau ligne stockées
	habituellement dans les WAL ne sont pas suffisantes pour restaurer
	complètement une telle page lors de la récupération d'après panne.
	Le stockage l'image de la page complète garantit une restauration
	correcte de la page, mais au prix d'un accroissement de la quantité
	de données à écrire dans les WAL. (Parce que la relecture des WAL
	démarre toujours à un point de vérification, il est suffisant de
	faire cela lors de la première modification de chaque page survenant
	après un point de vérification. De ce fait, une façon de réduire le
	coût d'écriture de pages complètes consiste à augmenter le paramètre
	réglant les intervalles entre points de vérification.)
       </para>

       <para>
	La désactivation de ce paramètre accélère les opérations normales,
	mais peut aboutir à la corruption de la base de données après une
	panne du système d'exploitation ou une coupure de courant. Les risques
	sont similaires à la désactivation de <varname>fsync</varname>, bien
	que moindres. Ce paramètre peut être désactiver sans risque si le
	matériel (contrôleur disque sur batterie) ou le logiciel de gestion
	du système de fichiers (ReiserFS 4) réduit le risque d'écritures
	partielles de pages à un niveau suffisament bas.
       </para>

       <para>
        La désactivation de ce paramètre n'affecte pas l'utilisation de l'archivage des
	WAL pour la récupération d'un instantané, aussi appelé <acronym>PITR</acronym>
        (voir <xref linkend="continuous-archiving"/>).
       </para>

       <para>
        Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
       <term><varname>wal_buffers</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>wal_buffers</varname></primary>
       </indexterm>
         <para>
         Quantité de mémoire utilisée en mémoire partagée pour les
	 données WAL. La valeur par défaut est de 64&nbsp;Ko. Ce paramètre nécessite
	 uniquement d'être assez important pour contenir toutes les données WAL
	 engendrées par une transaction typique, car les données sont
	 écrites sur le disque à chaque validation de transaction.
	 Ce paramètre n'est ajustable qu'au lancement du serveur.
         </para>

       <para>
        L'augmentation de ce paramètre peut conduire
	<productname>PostgreSQL</productname> à réclamer plus de
	tampons partagés <systemitem class="osname">System V</systemitem> que
	ne le permet la configuration par défaut du système d'exploitation.
	Voir la <xref linkend="sysvipc"/> pour les informations sur la façon
	d'ajuster ces paramètres, si nécessaire.
       </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
       <term><varname>commit_delay</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>commit_delay</varname>
           </primary>
       </indexterm>
         <para>
           Délai entre l'enregistrement d'une validation dans le tampon WAL
           et le vidage du tampon sur le disque, en microsecondes. Un délai
           différent de zéro peut autoriser la validation de plusieurs
           transactions en un seul appel système 
           <function>fsync()</function> si la charge système est assez
           importante pour que des transactions supplémentaires soient prêtes
           dans l'intervalle donné. Mais le délai est perdu si aucune autre
           transaction n'est prête à être validée. Du coup, le délai n'est
           traité que si au moins
           <varname>commit_siblings</varname> autres transactions sont actives
           au moment où le processus serveur a écrit son enregistrement de
           validation. La valeur par défaut est zéro, soit pas de délai.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
       <term><varname>commit_siblings</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>commit_siblings</varname>
           </primary>
       </indexterm>
         <para>
           Nombre minimum de transactions concurrentes ouvertes en même
	   temps nécessaires avant
           d'attendre le délai <varname>commit_delay</varname>. Une valeur plus
           importante rend plus probable le fait qu'au moins une autre
           transaction soit prête à valider pendant le délai. La
           valeur par défaut est de cinq transactions.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     
     <sect2 id="runtime-config-wal-checkpoints">
     <title>Points de vérification</title>

    <variablelist>
     <varlistentry id="guc-checkpoint-segments" xreflabel="checkpoint_segments">
      <term><varname>checkpoint_segments</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>checkpoint_segments</varname></primary>
      </indexterm>
       <para>
        Distance maximale entre deux points de vérification automatique
        des WAL, en segments de fichier de traces (chaque segment fait
	normalement 16&nbsp;Mo). La valeur par défaut est de trois segments.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>checkpoint_timeout</varname></primary>
      </indexterm>
       <para>
        Temps maximum entre deux points de vérification automatique des
	WAL, en secondes. La valeur par défaut est de cinq minutes.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
      <term><varname>checkpoint_warning</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>checkpoint_warning</varname></primary>
      </indexterm>
       <para>
	Si deux points de vérification imposés par le remplissage des
	fichiers segment interviennent dans un délai plus court que celui
	indiqué par ce paramètre (ce qui laisse supposer qu'il faut augmenter la
	valeur du paramètre <varname>checkpoint_segments</varname>), un message
	est écrit dans le fichier de traces du serveur. Par défaut, 30 secondes.
	Une valeur nulle (0) désactive cet avertissement.
        Ce paramètre ne peut qu'être configuré dans le fichier
        <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

   </variablelist>
  </sect2>

  <sect2 id="runtime-config-wal-archiving">
  <title>Archivage</title>

  <variablelist>
    <varlistentry id="guc-archive-command" xreflabel="archive_command">
      <term><varname>archive_command</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>archive_command</varname></primary>
      </indexterm>
        <para>
          La commande shell à exécuter pour archiver un segment complet de
	  la série des fichiers WAL. Si cette chaîne est vide (valeur par défaut),
          l'archivage des WAL est désactivé. Tout <literal>%p</literal> dans la
          chaîne est remplacé par le chemin du fichier à archiver
          et tout <literal>%f</literal> par le seul nom du fichier.
          (Le chemin est relatif au répertoire de travail du serveur,
	  c'est-à-dire le répertoire de données du cluster.) 
	  <literal>%%</literal> est utilisé pour intégrer un caractère
	  <literal>%</literal> dans la commande. Pour plus d'informations, voir
	  la <xref linkend="backup-archiving-wal"/>.
	  Ce paramètre ne peut qu'être configuré dans le fichier
	  <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>

        <para>
          Il est important que la commande ne renvoie un code de sortie nul
	  que si, et seulement si, elle réussit. Exemples&nbsp;:
<programlisting>archive_command = 'cp "%p" /mnt/server/archivedir/"%f"'
archive_command = 'copy "%p" /mnt/server/archivedir/"%f"'  # Windows</programlisting>
        </para>
      </listitem>
    </varlistentry>

     <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
      <term><varname>archive_timeout</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>archive_timeout</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Le <xref linkend="guc-archive-command"/> n'est appelé que pour les
	segments WAL complets. De ce fait, si le serveur n'engendre que peu de trafic
	WAL (ou que cela arrive parfois), il se peut qu'un long moment
	s'écoule entre la fin d'une transaction et son archivage sécurisé.
	Pour limiter l'âge des données non encore archivées, 
        <varname>archive_timeout</varname> peut être configuré pour forcer le
	serveur à basculer périodiquement sur un nouveau segment WAL.
	Lorsque ce paramètre est positif, le serveur bascule sur un nouveau
	segment à chaque fois que <varname>archive_timeout</varname> secondes
	se sont écoulées depuis le dernier changement de segment.
	Les fichiers archivés clos par anticipation suite à une 
	bascule imposée sont toujours de la même taille que les fichiers
	complets. Il est donc déconseillé de configurer un temps très
	court pour <varname>archive_timeout</varname> &mdash; cela va faire exploser
	la taille du stockage des archives. Un paramétrage
	d'<varname>archive_timeout</varname> de l'ordre de la minute est
	habituellement raisonnable.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>
     
   </variablelist>
   </sect2>

   </sect1>

   <sect1 id="runtime-config-query">
    <title>Planification des requêtes</title>

    <sect2 id="runtime-config-query-enable">
     <title>Configuration de la méthode du planificateur</title>

      <para>
       Ces paramètres de configuration fournissent une méthode brutale pour
       influencer les plans de requête choisis par l'optimiseur de requêtes. Si
       le plan choisi par défaut par l'optimiseur pour une requête particulière
       n'est pas optimal, une solution temporaire peut provenir de
       l'utilisation de l'un de ces paramètres de configuration pour forcer l'optimiseur
       à choisir un plan différent. Désactiver un de ces paramètres de façon
       permanente n'est toutefois pas une bonne idée. De meilleures
       façons d'améliorer la qualité des
       plans choisis par l'optimiseur passent par l'ajustement de
       <xref linkend="runtime-config-query-constants" endterm="runtime-config-query-constants-title"/>,
       le lancement plus fréquent de
       <xref linkend="sql-analyze" endterm="sql-analyze-title"/>,
       l'augmentation de la valeur du paramètre de configuration
       <xref linkend="guc-default-statistics-target"/> et l'augmentation du nombre
       de statistiques récupérées pour des colonnes spécifiques en utilisant
       <command>ALTER TABLE SET STATISTICS</command>.
      </para>

     <variablelist>
      <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
       <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>parcours bitmap</primary>
       </indexterm>
       <indexterm>
        <primary>paramètre de configuration <varname>enable_bitmapscan</varname></primary>
       </indexterm>
        <para>
         Active ou désactive l'utilisation des plans de parcours de bitmap par
         le planificateur de requêtes. Activé par défaut (<literal>on</literal>).
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
       <term><varname>enable_hashagg</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>enable_hashagg</varname></primary>
       </indexterm>
       <para>
        Active ou désactive l'utilisation des plan d'agrégation hachée par le
        planificateur. Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_hashjoin</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des jointures de hachage par le
        planificateur. Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

      <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_indexscan</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des parcours d'index par le
        planificateur. Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_mergejoin</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des jointures de fusion par le
        planificateur. Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_nestloop</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des jointures de boucles imbriquées
        par le planificateur. Il n'est pas possible de supprimer
	complètement les jointures de boucles imbriquées mais la
	désactivation de cette variable décourage le planificateur d'en
	utiliser une si d'autres méthodes sont disponibles.
	Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>parcours séquentiel</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_seqscan</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des parcours séquentiels par le
        planificateur. Il n'est pas possible de supprimer complètement les
        parcours séquentiels mais la désactivation de cette variable décourage le
        planificateur d'n utiliser un si d'autres méthodes sont disponibles.
        Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
      <term><varname>enable_sort</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_sort</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des étapes de tri explicite par le 
        planificateur. Il n'est pas possible de supprimer complètement ces tris
        mais la désactivation de cette variable décourage le planificateur
	d'en utiliser un si d'autres méthodes sont disponibles. Activé par défaut
	(<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_tidscan</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des parcours de <acronym>TID</acronym> par
        le planificateur. Activé par défaut (<literal>on</literal>). 
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-query-constants">
     <title id="runtime-config-query-constants-title">
      Constantes de coût du planificateur
     </title>

    <para>
     Les variables de <firstterm>coût</firstterm> décrites dans cette section
     sont mesurées sur une échelle arbitraire. Seules leurs valeurs relatives
     ont un intérêt. De ce fait, augmenter ou diminuer leurs valeurs d'un même facteur
     n'occasione aucun changement dans les choix du planificateur.
     Traditionnellement, ces variables sont indexées sur le coût de
     récupération séquentiel d'une page&nbsp;; c'est-à-dire que
     <varname>seq_page_cost</varname> est, par convention, positionné à 
     <literal>1.0</literal> et les autres variables de coût sont configurées
     relativement à cette référence. Il est toutefois possible d'utiliser
     une autre échelle, comme les temps d'exécution réels en millisecondes sur
     une machine particulière.
    </para>

   <note>
    <para>
     Il n'existe malheureuresement pas de méthode bien définie pour
     déterminer les valeurs idéales des variables de coût.
     Il est préférable de les considérer comme moyennes sur un jeu complet
     de requêtes d'une installation particulière. Cela signifie que
     modifier ces paramètres sur la seule base de quelques expériences est très risqué.
    </para>
   </note>

     <variablelist>

     <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary><varname>seq_page_cost</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation faite par le planificateur du coût de récupération
	d'une page disque incluse dans une série de récupérations
	séquentielles. La valeur par défaut est 1.0.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
      <term><varname>random_page_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>random_page_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation faite par le planificateur du coût de
	récupération non-séquentielle d'une page disque. Mesurée comme un
        multiple du coût de récupération d'une page séquentielle, sa valeur
	par défaut est 4.0.
	Réduire cette valeur par rapport à <varname>seq_page_cost</varname>
        incite le système à privilégier les parcours d'index&nbsp;;
	l'augmenter donne l'impression de parcours d'index plus
	coûteux. Les deux valeurs peuvent être augmentée ou diminuée
	concomitament pour modifier l'importance des coûts d'entrées/sorties disque
	par rapport aux coûts CPU, décrits par les paramètres qui suivent.
       </para>

       <tip>
        <para>
         Bien que le système permette de configurer
	 <varname>random_page_cost</varname> à une valeur inférieure à celle
	 de <varname>seq_page_cost</varname>, cela n'a aucun intérêt.
	 En revanche, les configurer à des valeurs identiques prend tout son
	 sens si la base tient entièrement dans le cache en RAM. En effet, dans ce
	 cas il n'est pas pénalisant d'atteindre des pages qui ne se suivent
	 pas. De plus, dans une base presque entièrement dans le cache, ces valeurs
	 peuvent être abaisser relativement aux paramètres CPU car le coût de
	 récupération d'une page déjà en RAM est bien moindre à celui de sa 
	 récupération sur disque.
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_tuple_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation faite par le planificateur du coût de 
        traitement de chaque ligne lors d'une requête. La valeur
        par défaut est 0.01.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_index_tuple_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation faite par le planificateur du coût de 
        traitement de chaque entrée de l'index lors d'un parcours d'index.
        La valeur par défaut est 0.005.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_operator_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation faite par le planificateur du coût de
        traitement de chaque opérateur ou fonction exécutée dans une requête.
	La valeur par défaut est 0.0025.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
      <term><varname>effective_cache_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>effective_cache_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation faite par le planificateur de la taille
	réelle du cache disque disponible pour une requête. Ce paramètre est
	lié à l'estimation du coût d'utilisation d'un index&nbsp;; une valeur
	importante favorise les parcours d'index, une valeur faible les
	parcours séquentiels. Pour configurer ce parmètre, il est important
	de considérer à la fois les tampons partagés de
	<productname>PostgreSQL</productname> et la portion de cache disque
	du noyau utilisée pour les fichiers de données de
	<productname>PostgreSQL</productname>. Il faut également tenir
	compte du nombre attendu de requêtes concurrentes sur des tables
	différentes car elles partagent l'espace disponible. Ce paramètre n'a
	pas d'inluence sur la taille de la mémoire partagée allouée par
	<productname>PostgreSQL</productname>, et ne réserve pas non plus le
	cache disque du noyau&nbsp;; il n'a qu'un rôle estimatif. La valeur
	par défaut est de 128&nbsp;Mo.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-query-geqo">
     <title>Optimiseur génétique de requêtes</title>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
      <term><varname>geqo</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>optimisation génétique des requêtes</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>optimisation génétique des requêtes</see>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>geqo</varname></primary>
      </indexterm>
       <para>
	Active ou désactive l'optimisation génétique des requêtes, algorithme
	de planification de requêtes sans recherche exhaustive. Activé par défaut.
	La variable <varname>geqo_threshold</varname> fournit un moyen plus
	granulaire de désactiver le GEQO pour certaines classes de requêtes.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
      <term><varname>geqo_threshold</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>geqo_threshold</varname></primary>
      </indexterm>
       <para>
        L'optimisation génétique des requêtes est utilisée pour planifier les
        requêtes si au minimum ce nombre d'éléments est impliqué dans la clause
        <literal>FROM</literal> (une construction <literal>FULL OUTER JOIN</literal>
        ne compte que pour un élément du <literal>FROM</literal>). La valeur par
        défaut est 12. Il est généralement préférable d'utiliser le
	planificateur déterministe, exhaustif, pour les requêtes plus simples,
	mais pour les requêtes impliquant autant de tables, celui-ci
        prend trop de temps.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
       <term><varname>geqo_effort</varname>
         (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_effort</varname></primary>
       </indexterm>
         <para>
           Contrôle le compromis entre le temps de planification et l'efficacité
           du plan de requête dans GEQO. Cette variable est un entier
           entre 1 et 10. La valeur par défaut est de cinq. Des valeurs plus
           importantes augmentent le temps passé à la planification de
           la requête mais aussi la probabilité qu'un plan de
           requête efficace soit choisi.
         </para>
       
         <para>
           <varname>geqo_effort</varname> n'a pas d'action directe&nbsp;;
	   il est simplement utilisé pour calculer les
           valeurs par défaut des autres variables influençant le
           comportement de GEQO (décrites ci-dessous). Il est également
	   possible de les configurer manuellement.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
       <term><varname>geqo_pool_size</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_pool_size</varname>
           </primary>
       </indexterm>
         <para>
	 <!-- Taille de la queue, hum... Il s'agir plutôt d'un ensemble
	 d'individus -->
           Contrôle la taille de l'ensemble utilisé par GEQO. C'est-à-dire
           le nombre d'individus au sein d'une population génétique. Elle
           doit être au minimum égale à deux, les valeurs utiles étant
	   généralement comprises entre 100 et 1000. Si elle est configurée
	   à zéro (valeur par défaut), alors une valeur convenable est choisie
	   en fonction de <varname>geqo_effort</varname> et du nombre de
	   tables dans la requête.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
       <term><varname>geqo_generations</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_generations</varname>
           </primary>
       </indexterm>
         <para>
           Contrôle le nombre de générations utilisées par GEQO.
	   C'est-à-dire le nombre d'itérations de l'algorithme. Il doit être au
           minimum de un, les valeurs utiles se situent dans la même plage que la
           taille de l'ensemble. S'il est configuré à zéro (valeur par
           défaut), alors une valeur convenable est choisie en fonction de 
           <varname>geqo_pool_size</varname>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
       <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_selection_bias</varname>
           </primary>
       </indexterm>
         <para>
           Contrôle le biais de sélection utilisé par GEQO. C'est-à-dire la
	   pression de sélectivité au sein de la population. Les valeurs
	   s'étendent de 1.50 à 2.00 (valeur par défaut).
         </para>
       </listitem>
     </varlistentry>
     
     </variablelist>
    </sect2>
     <sect2 id="runtime-config-query-other">
     <title>Autres options du planificateur</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
      <term><varname>default_statistics_target</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>default_statistics_target</varname></primary>
      </indexterm>
       <para>
        Initialise la cible de statistiques par défaut pour les colonnes de
        table qui n'ont pas une cible de colonne spécifique configurée via
        <command>ALTER TABLE SET STATISTICS</command>. Des valeurs élevées
        accroissent le temps nécessaire à l'exécution 
	d'<command>ANALYZE</command> mais peuvent permettre d'améliorer la
	qualité des estimations du planificateur. La valeur par
	défaut est 10. Pour plus d'informations sur l'utilisation des
	statistiques par le planificateur de requêtes, se référer à la
	<xref linkend="planner-stats"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
      <term><varname>constraint_exclusion</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>constraint exclusion</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>constraint_exclusion</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation par le planificateur des contraintes
	de table pour optimiser les requêtes. Désactivé par défaut
	(<literal>off</literal>).
       </para>

       <para>
        Si ce paramètre est activé (<literal>on</literal>), le planificateur compare
	les conditions de la requête avec les contraintes <literal>CHECK</literal> de
	la table et se dispense de parcourir les tables dont les conditions sont en
	contradiction avec les contraintes. Par exemple&nbsp;:

<programlisting>CREATE TABLE parent(clef integer, ...);
CREATE TABLE fils1000(check (clef between 1000 and 1999)) INHERITS(parent);
CREATE TABLE fils2000(check (clef between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;</programlisting>

	Avec l'activation de l'exclusion de contrainte, ce <command>SELECT</command>
	ne parcourt pas <structname>fils1000</structname>. Cela peut améliorer
	les performances lorsque l'héritage est utilisé pour construire des tables
	partitionnées.
       </para>

       <para>
        Actuellement, <varname>constraint_exclusion</varname> est désactivé par défaut
        (<literal>off</literal>) car il existe un risque de résultats incorrects si les
	plans de requêtes sont en cache &mdash; si une contrainte de table est
	modifiée ou supprimée, le plan précédemment engendré peut s'évérer
	désormais faux&nbsp;; il n'existe pas de mécanisme intégré pour forcer une
	nouvelle planification (ce problème sera probablement résolu dans une
	prochaine version de <productname>PostgreSQL</productname>). Une autre
	raison de le conserver désactivé est le coût relativement élevé des
	vérifications de contraintes, qui, dans de nombreux cas, ne font pas
	gagner de temps. Il est recommandé de ne l'activer que si des tables
	partitionées conçues pour tirer parti de cette fonctionnalité sont
	utilisées.
       </para>

       <para>
        Se référer à la <xref linkend="ddl-partitioning"/> pour plus d'informations
        sur l'utilisation des exclusion de contraintes et du partitionement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>from_collapse_limit</varname></primary>
      </indexterm>
       <para>
        Le planificateur assemble les sous-requêtes dans des requêtes
	supérieures si la liste <literal>FROM</literal> résultante 
	contient au plus ce nombre d'éléments. Des valeurs faibles réduisent le
	temps de planification mais conduisent à des plans de requêtes inférieurs.
	La valeur par défaut est de huit. Il est généralement conseillé de conserver
	cette valeur inférieure à <xref linkend="guc-geqo-threshold"/>.
	Pour plus d'informations, voir <xref linkend="explicit-joins"/>.
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>join_collapse_limit</varname></primary>
      </indexterm>
        <para>
          Le planificateur réécrit les constructions <literal>JOIN</literal>
	  explicites (à l'exception de <literal>FULL JOIN</literal>) en une
	  liste d'éléments <literal>FROM</literal> à chaque fois qu'il n'en
	  résulte qu'une liste ne contenant pas plus de ce nombre
	  d'éléments. Des valeurs faibles réduisent le temps de
	  planification mais conduisent à des plans de requêtes inférieurs.
        </para>

        <para>
	  Par défaut, cette variable a la même valeur que
	  <varname>from_collapse_limit</varname>, valeur qui convient à la
	  plupart des utilisations. Configurer cette variable à 1
	  empêche le réordonnancement des <literal>JOIN</literal>tures explicites.
	  De ce fait, l'ordre des jointures explicites indiqué dans la requête
	  est l'ordre réel dans lequel les relations
	  sont jointes. Le planificateur de la requête ne choisit pas toujours
	  l'ordre de jointure optimal&nbsp;; les utilisateurs aguerris peuvent
	  choisir d'initialiser temporairement cette variable à 1 et
	  d'indiquer explicitement l'ordre de jointure souhaité.
	  Pour plus d'informations, voir <xref linkend="explicit-joins"/>.
        </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-logging">
    <title>Remonter et tracer les erreurs</title>

    <indexterm zone="runtime-config-logging">
     <primary>traces serveur</primary>
    </indexterm>

    <sect2 id="runtime-config-logging-where">
     <title>Où tracer</title>

     <indexterm zone="runtime-config-logging-where">
      <primary>où tracer</primary>
     </indexterm>

     <variablelist>

       <varlistentry id="guc-log-destination" xreflabel="log_destination">
         <term><varname>log_destination</varname> (<type>string</type>)</term>
       <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>log_destination</varname></primary>
       </indexterm>
         <para>
           <productname>PostgreSQL</productname> supporte plusieurs méthodes
           pour la journalisation des messages du serveur, dont
           <systemitem>stderr</systemitem> et
           <systemitem>syslog</systemitem>. Sur Windows, 
           <systemitem>eventlog</systemitem> est aussi supporté. Ce
	   paramètre se configure avec la liste des destinations souhaitées
	   séparées par des virgules. Par défaut, les traces ne sont
	   dirigées que vers <systemitem>stderr</systemitem>.
	   Ce paramètre ne peut qu'être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-redirect-stderr" xreflabel="redirect_stderr">
       <term><varname>redirect_stderr</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>redirect_stderr</varname>
           </primary>
       </indexterm>
         <para>
           Ce paramètre permet de capturer les messages envoyés vers 
	   <application>stderr</application> et de les diriger dans des
	   journaux de traces. Combinée aux traces 
	   <application>stderr</application>, cette méthode est souvent plus
	   utile que de tracer dans <application>syslog</application> car
	   certains types de messages peuvent ne pas apparaître dans la sortie
	   <application>syslog</application> (un exemple
           habituel concerne les messages d'échecs de l'éditeur de liens).
           Ce paramètre ne peut être positionné qu'au démarrage du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-directory" xreflabel="log_directory">
       <term><varname>log_directory</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_directory</varname>
           </primary>
       </indexterm>
         <para>
           Lorsque <varname>redirect_stderr</varname> est activé, ce paramètre
           détermine le répertoire dans lequel les fichiers de trace sont
           créés. Il peut s'agir d'un chemin absolu ou d'un chemin
	   relatif au répertoire des données du cluster.
	   Ce paramètre ne peut qu'être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-filename" xreflabel="log_filename">
       <term><varname>log_filename</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_filename</varname>
           </primary>
       </indexterm>
         <para>
           Lorsque <varname>redirect_stderr</varname> est activé, ce paramètre
	   indique les noms des fichiers des journaux créés. La valeur est
	   traitée comme un motif <systemitem>strftime</systemitem>. Ainsi
	   les échappements <literal>%</literal> peuvent être utilisés pour
	   indiquer des noms de fichiers horodatés. Si aucun
	   échappement <literal>%</literal> n'est présent,
	   <productname>PostgreSQL</productname> ajoute l'époque
	   (<foreignphrase>epoch</foreignphrase>)
	   d'ouverture du nouveau journal. Par exemple, si
	   <varname>log_filename</varname> vaut <literal>server_log</literal>,
	   alors le nom de fichier est
	   <literal>server_log.1093827753</literal> pour un journal commençant
	   le dimanche 29 août à 19:02:33 2004 MST.
	   Ce paramètre ne peut qu'être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
       <term><varname>log_rotation_age</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_rotation_age</varname>
           </primary>
       </indexterm>
         <para>
           Lorsque <varname>redirect_stderr</varname> est activé, ce paramètre
	   détermine la durée de vie maximale (en minutes) d'un journal individuel.
	   Passé ce délai, un nouveau journal est créé.
	   Initialiser ce paramètre à zéro désactive la création en temps
	   compté de nouveaux journaux. Ce paramètre ne peut qu'être
	   configuré dans le fichier <filename>postgresql.conf</filename> ou
	   indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
       <term><varname>log_rotation_size</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_rotation_size</varname></primary>
       </indexterm>
         <para>
           Lorsque <varname>redirect_stderr</varname> est activé, ce paramètre
	   détermine la taille maximale (en kilooctets) d'un journal individuel.
	   Passé cette taille, un nouveau journal est créé. Initialiser cette taille à
	   zéro désactive la création en taille comptée de nouveaux journaux.
	   Ce paramètre ne peut qu'être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
       <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_truncate_on_rotation</varname></primary>
       </indexterm>
         <para>
           Lorsque <varname>redirect_stderr</varname> est activé, ce paramètre
	   impose à <productname>PostgreSQL</productname> de tronquer
	   (surcharger), plutôt qu'ajouter à, tout fichier journal dont le
	   nom existe déjà.
	   Toutefois, ce surchargement ne survient qu'à partir du moment où
	   un nouveau fichier doit être ouvert du fait d'une rotation par
	   temps compté, et non pas à la suite du démarrage du serveur ou d'une
	   rotation par taille comptée. Si ce paramètre est désactivé (off),
	   les traces sont, dans tous les cas ajoutées aux fichiers qui
	   existent déjà. 
	 </para>
	 <para>
	  Par exemple, si ce paramètres est utilisé en combinaison avec un 
	  <varname>log_filename</varname> tel que 
	  <literal>postgresql-%H.log</literal>, il en résulte la génération
	   de 24 journaux (un par heure) écrasés de façon cyclique.
	 </para>
	 <para>
	   Ce paramètre ne peut qu'être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
         <para>
           Exemple&nbsp;: pour conserver sept jours de traces, un fichier par
	   jour nommé <literal>server_log.Mon</literal>,
	   <literal>server_log.Tue</literal>, etc. et surcharger automatiquement
	   les traces de la semaine précédente avec celles de la semaine
	   courante, on positionne <varname>log_filename</varname> à
	   <literal>server_log.%a</literal>,
	   <varname>log_truncate_on_rotation</varname> à <literal>on</literal>
	   et <varname>log_rotation_age</varname> à <literal>1440</literal>.
         </para>
         <para>
           Exemple&nbsp;: pour conserver 24 heures de traces, un journal par
	   heure, toute en effectuant la rotation plus tôt si le journal dépasse
	   1&nbsp;Go, on positionne
	   <varname>log_filename</varname> à <literal>server_log.%H%M</literal>, 
	   <varname>log_truncate_on_rotation</varname> à <literal>on</literal>, 
	   <varname>log_rotation_age</varname> à <literal>60</literal> et
	   <varname>log_rotation_size</varname> à <literal>1000000</literal>.
	   Inclure <literal>%M</literal> dans
	   <varname>log_filename</varname> permet à toute rotation par taille
	   comptée qui survient d'utiliser un nom de fichier distinct du nom
	   initial horodaté.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
       <term><varname>syslog_facility</varname> (<type>string</type>)</term>
       <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>syslog_facility</varname></primary>
         </indexterm>
        <para>
          Lorsque les traces <application>syslog</application> sont activées, ce
	  paramètre fixe le niveau (<quote>facility</quote>) utilisé par
          <application>syslog</application>. Les différentes possibilités
	  sont <literal>LOCAL0</literal>, <literal>LOCAL1</literal>,
          <literal>LOCAL2</literal>, <literal>LOCAL3</literal>,
	  <literal>LOCAL4</literal>, <literal>LOCAL5</literal>,
	  <literal>LOCAL6</literal>, <literal>LOCAL7</literal>&nbsp;;
          <literal>LOCAL0</literal> étant la valeur par défaut. Voir aussi la
          documentation du démon <application>syslog</application> du
	  serveur.
	  Ce paramètre ne peut qu'être configuré dans le fichier
	  <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
      <term><varname>syslog_ident</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>syslog_identity</varname></primary>
      </indexterm>
        <para>
         Si <application>syslog</application> est activé, ce paramètre fixe le nom
         du programme utilisé pour identifier les messages
         <productname>PostgreSQL</productname> dans les traces de
         <application>syslog</application>. La valeur par défaut est
	 <literal>postgres</literal>.
	 Ce paramètre ne peut qu'être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>
      
      </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-when">
     <title>Quand tracer</title>

     <variablelist>

     <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
      <term><varname>client_min_messages</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>client_min_messages</varname></primary>
      </indexterm>
       <para>
        Contrôle les niveaux de message envoyés au client. Les valeurs
        valides sont <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>, <literal>DEBUG2</literal>,
        <literal>DEBUG1</literal>, <literal>LOG</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>, <literal>FATAL</literal>,
        et <literal>PANIC</literal>. Chaque niveau inclut tous les
        niveaux qui le suivent. Plus on progresse dans la liste,
	plus le nombre de messages envoyés est faible. <literal>NOTICE</literal>
	est la valeur par défaut. <literal>LOG</literal> a ici une portée
	différente à celle de <varname>log_min_messages</varname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
      <term><varname>log_min_messages</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_messages</varname></primary>
      </indexterm>
       <para>
        Contrôle les niveaux de message écrits dans les traces du serveur.
        Les valeurs valides sont <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
        <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>, <literal>WARNING</literal>,
        <literal>ERROR</literal>, <literal>LOG</literal>, <literal>FATAL</literal> et
        <literal>PANIC</literal>. Chaque niveau inclut tous les niveaux qui le
        suivent. Plus on progresse dans la liste, plus le nombre de messages
	envoyés est faible. <literal>NOTICE</literal> est la valeur par
	défaut. <literal>LOG</literal> a ici une portée différente à celle
	de <varname>client_min_messages</varname>. Seuls les superutilisateurs peuvent
        modifier la valeur de ce paramètre.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
      <term><varname>log_error_verbosity</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_error_verbosity</varname></primary>
      </indexterm>
       <para>
        Contrôle le niveau de détail des traces de chaque message. Les valeurs
	valides sont <literal>TERSE</literal>, <literal>DEFAULT</literal> et
	<literal>VERBOSE</literal>, chacune ajoutant plus de
	champs aux messages affichés. Seuls les superutilisateurs peuvent
        modifier ce paramétrage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
      <term><varname>log_min_error_statement</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_error_statement</varname></primary>
      </indexterm>
       <para>
        Contrôle si l'instruction SQL à l'origine d'une une erreur doit être
        enregistrée dans les traces du serveur. L'instruction SQL en cours est
	incluse dans les traces pour tout message de sévérité indiquée ou 
	supérieure. Les valeurs valides sont
        <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>FATAL</literal> et <literal>PANIC</literal>.
	<literal>ERROR</literal> est la valeur par défaut, ce qui signifie que
	les instructions à l'origine d'erreurs, d'erreurs fatales ou de
	paniques sont tracées. Pour réellement désactiver le traçage des
	instructions échouées, ce paramètre doit être positionné à 
	<literal>PANIC</literal>. Seuls les superutilisateurs peuvent
	modifier la valeur de ce paramètre.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_duration_statement</varname></primary>
      </indexterm>
        <para>
         Trace la durée de toute instruction terminée dont le temps d'exécution
	 égale ou dépasse ce nombre de millisecondes. Positionné à zéro,
	 les durées de toutes les instructions sont tracées. -1 (valeur par défaut)
	 désactive ces traces. 
	</para>
	<para>
	 Par exemple, si le paramètre est positionné à <literal>250ms</literal>,
	 alors toutes les instructions SQL dont la durée est supérieure ou
	 égale à 250&nbsp;ms sont tracées.
	</para>
	<para>
	 Il est utile d'activer ce paramètre pour tracer les requêtes non
	 optimisées des applications. Seuls les superutilisateurs peuvent
	 modifier cette configuration.
        </para>

        <para>
         Pour les clients utilisant le protocole de requêtage étendu, les durées
	 des étapes Parse (analyse), Bind (lien) et Execute (exécution) sont
	 tracées indépendamment.
        </para>

       <note>
        <para>
         Lorsque cette option est utilisée avec
         <xref linkend="guc-log-statement"/>, le texte des instructions tracées
	 du fait de <varname>log_statement</varname> n'est pas répété dans le
	 message de trace de la durée. Si <application>syslog</application>
	 n'est pas utilisé, il est recommandé de tracer le PID
	 ou l'ID de session à l'aide de <xref linkend="guc-log-line-prefix"/>
         de façon à pouvoir lier le message de l'instruction au message de
	 durée par cet ID.
        </para>
       </note>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-silent-mode" xreflabel="silent_mode">
       <term><varname>silent_mode</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>silent_mode</varname></primary>
       </indexterm>
        <para>
         Exécute le serveur silencieusement. Si ce paramètre est configuré, le
	 serveur démarre automatiquement en tâche de fond et tout terminal
	 de contrôle est dissocié. La sortie standard et l'erreur standard
	 sont redirigées vers <literal>/dev/null</literal>, donc
	 tout message qui leur est adressé est perdu. À moins que
	 <application>syslog</application> ne soit sélectionné ou que
	 <varname>redirect_stderr</varname> soit activé, l'utilisation de ce
	 paramètre est fortement déconseillé car il empêche de voir les
	 messages d'erreurs.
	 Ce paramètre ne peut être configuré qu'au démarrage du serveur. 
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

       <para>
        Liste des niveaux de sévérité des messages utilisés pour ces
	paramètres&nbsp;:
        <variablelist>
         <varlistentry>
          <term><literal>DEBUG[1-5]</literal></term>
          <listitem>
           <para>
            Fournit des informations utiles aux développeurs.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>INFO</literal></term>
          <listitem>
           <para>
            Fournit des informations implicitement demandées par l'utilisateur,
            par exemple lors d'un <command>VACUUM VERBOSE</command>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>NOTICE</literal></term>
          <listitem>
           <para>
            Fournit des informations éventuellement utiles aux
            utilisateurs, par exemple lors de la troncature d'identifiants longs ou
            la création d'index de clés primaires.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>WARNING</literal></term>
          <listitem>
           <para>
            Fournit des avertissements aux utilisateurs, par exemple un
            <command>COMMIT</command> en dehors d'un bloc de transactions.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>ERROR</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a causé l'annulation de la commande en cours.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>LOG</literal></term>
          <listitem>
           <para>
            Rapporte des informations intéressant les administrateurs, par
            exemple l'activité des points de vérification.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>FATAL</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a causé l'annulation de la session en
	    cours.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>PANIC</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a causé l'annulation de toutes les sessions.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>

    </sect2>
     <sect2 id="runtime-config-logging-what">
     <title>Que tracer</title>
     
     <variablelist>
     
     <varlistentry>
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)</term>
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_parse</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_rewritten</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_plan</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_pretty_print</varname></primary>
      </indexterm>
       <para>
        Ces paramètres activent plusieurs sorties de débogage. Pour chaque requête
        exécutée, elles affichent l'arbre d'analyse résultant.
        <varname>debug_pretty_print</varname> indente ces affichages pour
        produire un format de sortie plus lisible mais plus long. 
        <varname>client_min_messages</varname> ou
        <varname>log_min_messages</varname> doivent valoir au maximum
        <literal>DEBUG1</literal> pour que cette sortie soit effectivement
	envoyée vers le client ou les traces du serveur, respectivement. Ces
	paramètres sont désactivés par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-connections" xreflabel="log_connections">
      <term><varname>log_connections</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_connections</varname></primary>
      </indexterm>
       <para>
        Affiche une ligne dans les traces du serveur détaillant chaque
        connexion réussie. Bien que désactivé par défaut, ce paramètre est
	probablement très utile.
       </para>
       <para>
        Certains programmes client, comme <application>psql</application>, tentent
	de se connecter deux fois pour déterminer si un mot de passe est requis,
	donc des messages <quote>connection received</quote> dupliqués n'indiquent
	pas nécessairement un problème.
       </para>
       <para>
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
       <term><varname>log_disconnections</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_disconnections</varname></primary>
       </indexterm>
         <para>
	  Affiche dans les traces du serveur une ligne similaire à
          <varname>log_connections</varname> mais à la fin d'une session, en
	  incluant la durée de la session. Désactivé par défaut,
	  ce paramètre ne peut qu'être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>


     <varlistentry id="guc-log-duration" xreflabel="log_duration">
       <term><varname>log_duration</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_duration</varname></primary>
       </indexterm>
       <para>
        Trace la durée de toute instruction exécutée. Désactivé par défaut
	(<literal>off</literal>), seuls les superutilisateurs peuvent
	modifier ce paramètre.
       </para>

       <para>
        Pour les clients utilisant le protocole de requêtage étendu, les durées
	des étapes Parse (analyse), Bind (lien) et Execute (exécution) sont
	tracées indépendamment.
       </para>

       <note>
        <para>
         À la différence de
	 <xref linkend="guc-log-min-duration-statement"/>, ce paramètre ne
	 force pas le traçage du texte des requêtes. 
	 De ce fait, si <varname>log_duration</varname> est activé
	 (<literal>on</literal>) et que
	 <varname>log_min_duration_statement</varname> a une valeur positive,
         toutes les durées sont tracées mais le texte de la requête n'est inclus
	 que pour les instructions qui dépassent la limite. Ce comportement
	 peut être utile pour récupérer des statistiques sur les installations
	 à forte charge.
        </para>
       </note>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
       <term><varname>log_line_prefix</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_line_prefix</varname></primary>
       </indexterm>
       <para>
         Chaîne de style <function>printf</function> affichée au début
	 de chaque ligne de trace. La valeur par défaut est une chaîne vide.
	 Chaque échappement reconnu est remplacé comme indiqué ci-dessous - tout
	 ce qui reste et qui ressemble à un échappement est ignoré. Les autres
	 caractères sont copiés directement sur la ligne. Certains échappements
	 ne sont reconnus que par les processus de session et ne s'appliquent
	 pas aux processus en tâche de fond comme le processus serveur principal.
	 <application>Syslog</application> produit ses propres estampilles
	 temporelles et informations d'ID de processus. Il n'est donc pas
	 forcément utile d'utiliser ces échappements avec 
	 <application>syslog</application>.
	 Ce paramètre ne peut qu'être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.

<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colwidth="0.5*"/>
    <colspec colnum="2" colwidth="2*"/>
    <colspec colnum="3" colwidth="0.5*"/>
    <thead>
      <row>
        <entry>Échappement</entry>
        <entry>Produit</entry>
        <entry>Session seulement</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry><literal>%u</literal></entry>
        <entry>Nom de l'utilisateur</entry>
        <entry>oui</entry>
      </row>
      <row>
        <entry><literal>%d</literal></entry>
        <entry>Nom de la base de données</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%r</literal></entry>
        <entry>Nom ou adresse IP de l'hôte distant et port distant</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%h</literal></entry>
        <entry>Nom d'hôte distant ou adresse IP</entry>
        <entry>yes</entry>
      </row>
      <row>
        <entry><literal>%p</literal></entry>
        <entry>ID du processus</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%t</literal></entry>
        <entry>Estampille temporelle (sans milliseconde, pas de fuseau horaire sous
	 Windows)</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%m</literal></entry>
        <entry>Estampille temporelle avec millisecondes</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%i</literal></entry>
        <entry>Balise de commande&nbsp;: la commande qui a engendré la trace.</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%c</literal></entry>
        <entry>ID de session&nbsp;: un identifiant unique pour chaque session.
          Il s'agit de deux numéros hexadécimaux sur quatre octets (sans
	  zéro initial)
          séparés par un point. Les nombres représentent l'heure de début de session et
	  l'ID de son processus. C'est un moyen concis d'écrire ces éléments.</entry>
        <entry>oui</entry>
      </row>
      <row>
        <entry><literal>%l</literal></entry>
        <entry>Numéro de la ligne de trace de chaque processus, commençant à 1</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%s</literal></entry>
        <entry>Estampille temporelle du début de session</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%x</literal></entry>
        <entry>ID de la transaction</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%q</literal></entry>
        <entry>Ne produit aucune sortie, mais indique aux autres processus
	  de stopper à cet endroit de la chaîne. Ignoré par les processus
          de session.</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%%</literal></entry>
        <entry><literal>%</literal></entry>
        <entry>non</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement" xreflabel="log_statement">
       <term><varname>log_statement</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_statement</varname></primary>
       </indexterm>
         <para>
           Contrôle les instructions SQL à tracer. Les valeurs valides sont 
	   <literal>none</literal>, <literal>ddl</literal>, <literal>mod</literal>
	   et <literal>all</literal>. <literal>ddl</literal> trace toutes les
	   commandes de définition comme <command>CREATE</command>,
	   <command>ALTER</command> et <command>DROP</command>.
	   <literal>mod</literal> trace toutes les instructions
	   <literal>ddl</literal> ainsi que les instructions de modification
	   de données <command>INSERT</command>, <command>UPDATE</command>,
	   <command>DELETE</command>, <command>TRUNCATE</command> et
	   <command>COPY FROM</command>. Les instructions <command>PREPARE</command>,
	   <command>EXECUTE</command> et <command>EXPLAIN ANALYZE</command> sont
	   aussi tracées si la commande qui les contient est d'un type approprié.
	   Pour les clients utilisant le protocole de requêtage étendu, la trace
	   survient quand un message Execute est reçu et les valeurs des paramètres
	   de Bind sont incluses (avec doublement de tout guillemet simple embarqué).
         </para>

         <para>
           La valeur par défaut est <literal>none</literal>. Seuls les superutilisateurs
	   peuvent changer ce paramétrage.
	</para>

	<note>
	 <para>
          Les instructions qui contiennent de simples erreurs de syntaxe ne sont pas
          tracées même si <varname>log_statement</varname> est positionné à
          <literal>all</literal> car la trace n'est émise qu'après qu'une analyse
	  basique soit réalisée pour déterminer le type
          d'instruction. Dans le cas du protocole de requêtage étendu, ce paramètre
          ne trace pas les instructions qui échoue avant la phase Execute
          (c'est-à-dire pendant l'analyse et la planification).
	  <varname>log_min_error_statement</varname> doit être positionné à
          <literal>ERROR</literal> pour tracer ce type d'instructions.
	 </para>
	</note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
       <term><varname>log_hostname</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_hostname</varname></primary>
       </indexterm>
         <para>
           Par défaut, les messages de traces de connexion n'affichent que
	   l'adresse IP de l'hôte d'où émane la tentative de connexion.
	   L'activation de ce paramètre permet de tracer également le nom de
	   l'hôte. En fonction de la configuration de la
	   résolution de nom d'hôte, ceci peut entraîner une baisse de
	   performance non négligeable.
	   Ce paramètre ne peut qu'être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-statistics">
    <title>Statistiques d'exécution</title>

    <sect2 id="runtime-config-statistics-collector">
     <title>Collecteur de statistiques sur les requêtes et les index</title>

     <para>
      Ces paramètres contrôlent la collecte de statistiques de niveau serveur.
      Lorsque celle-ci est activée, les données produites peuvent être
      visualisées à travers la
      famille de vues systèmes <structname>pg_stat</structname> et
      <structname>pg_statio</structname>. On peut se reporter à
      <xref linkend="monitoring"/> pour plus d'informations.
     </para>

     <note>
     <para>
      À partir de <productname>PostgreSQL</productname> 8.2,
      <varname>stats_command_string</varname> contrôle un mécanisme distinct de
      collecte de données qui peut être activé et désactivé que le
      sous-processus de collecte des statistiques soit actif ou pas.
      Ce dernier n'est nécessaire que pour la collecte des statistiques 
      de niveau bloc et de niveau ligne.
     </para>
     </note>

     <variablelist>

     <varlistentry id="guc-stats-command-string" xreflabel="stats_command_string">
      <term><varname>stats_command_string</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_command_string</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Active la collecte d'informations sur la commande en cours d'exécution
	dans chaque session, avec l'heure de démarrage de la commande. Ce paramètre
	est activé par défaut. Même si le paramètre est activé, cette information
	n'est pas visible par tous les utilisateurs, mais uniquement par les
	superutilisateurs et l'utilisateur possédant la session
	traitée&nbsp;; de ce fait, cela ne représente pas une faille de
	sécurité. Seuls les superutilisateurs peuvent modifier ce paramètre.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
      <term><varname>update_process_title</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>update_process_title</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Active la mise à jour du titre du processus à chaque fois qu'une nouvelle
	commande SQL est reçue par le serveur. Le titre du processus est
	affiché par la commande <command>ps</command> ou, sous
	Windows, dans le <application>Process Explorer</application>.
	Seuls les superutilisateurs peuvent modifier ce paramètre.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-start-collector" xreflabel="stats_start_collector">
      <term><varname>stats_start_collector</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_start_collector</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle si le serveur doit exécuter le sous-processus de collecte
	des statistiques. Activé par défaut, il peut être désactivé si les
	statistiques ou l'autovacuum ne présentent pas d'intérêt. Ce paramètre
	n'est configurable qu'au démarrage du serveur car le sous-processus
	de collecte ne peut pas être lancé ou arrêté à la volée. (Néanmoins,
	si le sous-processus existe, l'étendue des statistiques collectées
	peut être modifiée serveur démarré.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-block-level" xreflabel="stats_block_level">
      <term><varname>stats_block_level</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_block_level</varname></primary>
      </indexterm>
       <para>
        Active la collecte des statistiques de niveau bloc. Ce paramètre est
	désactivé par défaut. Seuls les	superutilisateurs peuvent le modifier.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-row-level" xreflabel="stats_row_level">
      <term><varname>stats_row_level</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_row_level</varname></primary>
      </indexterm>
       <para>
        Active la collecte des statistiques de niveau ligne. Ce paramètre est
	désactivé par défaut. Seuls les	superutilisateurs peuvent le modifier.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-reset-on-server-start" xreflabel="stats_reset_on_server_start">
      <term><varname>stats_reset_on_server_start</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_reset_on_server_start</varname></primary>
      </indexterm>
       <para>
        Si positionné à <foreignphrase>on</foreignphrase>, les statistiques
	collectées de niveau bloc et de niveau ligne sont réinitialisées au
	redémarrage du serveur. Positionné à
	<foreignphrase>off</foreignphrase>, les statistiques sont cumulées
	au-delà des redémarrages. Ce paramètre est positionné à
	<foreignphrase>off</foreignphrase> par défaut. Il ne peut être
	positionné qu'au démarrage du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-statistics-monitor">
     <title>Statistics Monitoring</title>
     <variablelist>

     <varlistentry>
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>log_statement_stats</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>log_parser_stats</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>log_planner_stats</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>log_executor_stats</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Écrit, pour chaque requête, les statistiques de performance du
	module respectif dans les traces du serveur. C'est un outil de profilage très
	simpliste. <varname>log_statement_stats</varname> rapporte les
	statistiques d'instructions globales, tandis que les autres
	fournissent un rapport par module.
	<varname>log_statement_stats</varname> ne peut pas être
	activé conjointement à une option de module. Par défaut, toutes
	ces options sont désactivées. Seuls les superutilisateurs peuvent modifier ces
	paramètres.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-autovacuum">
    <title>Nettoyage automatique</title>

    <indexterm>
     <primary>autovacuum</primary>
     <secondary>paramètres de configuration</secondary>
    </indexterm>

     <para>
      Ces paramètres contrôlent le comportement de la fonctionnalité appelée
      <firstterm>autovacuum</firstterm>. On peut se référerer à la
      <xref linkend="autovacuum"/> pour plus de détails.
     </para>

    <variablelist>

     <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
      <term><varname>autovacuum</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum</varname></primary>
      </indexterm>
       <para>
        Contrôle si le serveur doit démarrer le démon d'autovacuum.
	Celui-ci est désactivé par défaut. <varname>stats_start_collector</varname> et
	<varname>stats_row_level</varname> doivent être activés pour que ce
	démon soit démarré. Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
      <term><varname>autovacuum_naptime</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_naptime</varname></primary>
      </indexterm>
       <para>
        Indique le délai entre les tours d'activité du démon
	autovacuum. À chaque tour, le démon examine une base de données
	et lance les commandes <command>VACUUM</command> et <command>ANALYZE</command>
	nécessaires aux tables de cette base. Le délai, mesuré en
	secondes, vaut, par défaut, une minute (1m).
	Ce paramètre ne qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
       <para>
        Note that even when this parameter is disabled, the system
        will periodically launch autovacuum processes in order to
        prevent transaction ID wraparound.  See <xref
        linkend="vacuum-for-wraparound"> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
      <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_threshold</varname></primary>
      </indexterm>
       <para>
        Indique le nombre minimum de lignes mises à jour ou supprimées
	nécessaires pour déclencher un <command>VACUUM</command> sur une table.
	La valeur par défaut est de 500 lignes.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Il est possible de surcharger ce paramètre pour toute table par
	l'insertion de données dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
      <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_analyze_threshold</varname></primary>
      </indexterm>
       <para>
        Indique le nombre minimum de lignes insérées, mises à jour ou supprimées
	nécessaires pour déclencher un <command>ANALYZE</command> sur une table. La valeur
	par défaut est de 250 lignes.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Il est possible de surcharger ce paramètre pour toute table par
        l'insertion de données dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
      <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_scale_factor</varname></primary>
      </indexterm>
       <para>
        Indique une fraction de la taille de la table à ajouter à
        <varname>autovacuum_vacuum_threshold</varname> pour décider du moment
	auquel déclencher un <command>VACUUM</command>. La valeur par défaut est de 0,2
	(20&nbsp;% de la taille de la table).
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Il est possible de surcharger ce paramètre pour toute table par
	l'insertion de données dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
      <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_analyze_scale_factor</varname></primary>
      </indexterm>
       <para>
        Indique une fraction de la taille de la table à ajouter à
        <varname>autovacuum_analyze_threshold</varname> pour décider du
	moment auquel déclencher une commande <command>ANALYZE</command>.
	La valeur par défaut est de 0,1 (10&nbsp;% de la taille de la table).
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Il est possible de surcharger ce paramètre pour toute table par
	l'insertion de données dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
      <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_freeze_max_age</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Indique l'âge maximum (en transactions) que le champ
        <structname>pg_class</structname>.<structfield>relfrozenxid</structfield>
	d'une table peut atteindre avant qu'une opération
	<command>VACUUM</command> ne soit forcée pour empêcher la réinitialisation
	de l'ID de transaction sur cette table. Le système lance les
	processus autovacuum pour éviter ce bouclage même si l'autovacuum est désactivé. La
	valeur par défaut est de 200 millions de transactions. Ce paramètre
	n'est lu qu'au démarrage du serveur mais il peut être diminué pour
	toute table en ajoutant des entrées dans
	<structname>pg_autovacuum</structname>. Pour plus d'information, voir
	<xref linkend="vacuum-for-wraparound"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
      <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_cost_delay</varname></primary>
      </indexterm>
       <para>
        Indique la valeur du coût de délai utilisée dans les opérations de
        <command>VACUUM</command>. Si <literal>-1</literal> est indiqué (la valeur par défaut),
        la valeur habituelle de <xref linkend="guc-vacuum-cost-delay"/> est
	utilisée.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Il est possible de le surcharger pour toute table par
	l'insertion de données dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
      <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_cost_limit</varname></primary>
      </indexterm>
       <para>
        Indique la valeur de coût limite utilisée dans les opérations de
        <command>VACUUM</command> automatiques. Si <literal>-1</literal> est
	indiqué (valeur par défaut), la valeur courante de
	<xref linkend="guc-vacuum-cost-limit"/> est utilisée.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Il est possible de le surcharger pour toute table par l'insertion de
	données dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-client">
    <title>Valeurs par défaut des connexions client</title>

    <sect2 id="runtime-config-client-statement">
     <title>Comportement des instructions</title>
     <variablelist>

     <varlistentry id="guc-search-path" xreflabel="search_path">
      <term><varname>search_path</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>search_path</varname></primary>
      </indexterm>
      <indexterm><primary>path</primary><secondary>pour schémas</secondary></indexterm>
       <para>
        Cette variable précise l'ordre dans lequel les schémas sont parcourus
        lorsqu'un objet (table, type de données, fonction, etc.) est référencé
        par un simple nom sans sa composante schéma. Lorsque des objets de
	noms identiques existent dans plusieurs schémas, c'est le premier trouvé
	dans le chemin de recherche qui est utilisé. Il ne peut être fait
	référence à un objet qui ne fait partie d'aucun des schémas indiqués
	dans le chemin de recherche qu'en précisant son schéma conteneur
	avec un nom qualifié (avec un point).
       </para>

       <para>
        <varname>search_path</varname> doit contenir une liste de noms
        de schémas séparés par des virgules. Si un des éléments de la liste est
        la valeur spéciale <literal>$user</literal>, alors le schéma dont le
	nom correspond à la valeur retournée par
	<function>SESSION_USER</function> est substitué, s'il existe
	(sinon <literal>$user</literal> est ignoré).
       </para>

       <para>
        Le schéma du catalogue système, <literal>pg_catalog</literal>, est toujours
        parcouru, qu'il soit ou non mentionné dans le chemin. Mentionné, il
	est alors parcouru dans l'ordre indiqué. Dans le cas contraire, il
	est parcouru <emphasis>avant</emphasis> tout autre élément du chemin.
       </para>

       <para>
	De même, la recherche des schémas passe toujours par le schéma des
	tables temporaires,
	<literal>pg_temp_<replaceable>nnn</replaceable></literal>, s'il existe.
	Il peut être explicitement ajouté au chemin
	à l'aide de l'alias <literal>pg_temp</literal>. S'il n'en fait pas
	partie, la recherche commence par lui (avant même
	<literal>pg_catalog</literal>). Néanmoins, seuls les noms de relation
	(table, vue, séquence, etc.) et de type de données sont recherchés dans
	le schéma temporaire. Aucune fonction et aucun opérateur n'y est
	jamais recherché.
       </para>

       <para>
        Lorsque des objets sont créés sans précision de schéma cible
        particulier, ils sont placés dans le premier schéma listé dans le chemin
        de recherche. Une erreur est rapportée si le chemin de recherche est
        vide.
       </para>

       <para>
        La valeur par défaut de ce paramètre est
	<literal>'"$user", public'</literal> (la deuxième partie est ignorée s'il n'existe pas
        de schéma nommé <literal>public</literal>). Elle permet l'utilisation
        partagée d'une base de données (dans laquelle aucun utilisateur n'a de schéma
        privé et tous partagent l'utilisation de <literal>public</literal>),
	les schémas privés d'utilisateur ainsi qu'une combinaison de ces
	deux modes. D'autres effets peuvent être obtenus en modifiant le chemin de
	recherche par défaut, globalement ou par utilisateur.
       </para>

       <para>
        La valeur courante réelle du chemin de recherche peut être examinée via
        la fonction <acronym>SQL</acronym> <function>current_schemas()</function>. 
        Elle n'est pas identique à la valeur de <varname>search_path</varname>,
        car <function>current_schemas()</function> affiche la façon dont les
	requêtes apparaissant dans <varname>search_path</varname> sont
	résolues.
       </para>

       <para>
        Pour plus d'informations sur la gestion des schémas, voir la
	<xref linkend="ddl-schemas"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
       <term><varname>default_tablespace</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>default_tablespace</varname></primary>
       </indexterm>
       <indexterm><primary>tablespace</primary><secondary>par défaut</secondary></indexterm>
         <para>
           Cette variable indique le
	   <foreignphrase>tablespace</foreignphrase> par défaut dans lequel
	   sont créés les objets (tables et index) quand une commande
	   <command>CREATE</command> ne l'explicite pas.
	</para>

	<para>
	  La valeur est soit le nom d'un
	  <foreignphrase>tablespace</foreignphrase> soit une chaîne vide pour
	  indiquer l'utilisation du
	  <foreignphrase>tablespace</foreignphrase> par défaut de la base de
	  données courante. Si la valeur ne correspond pas au nom d'une base de
	  données existante, <productname>PostgreSQL</productname> utilise automatiquement
	  le <foreignphrase>tablespace</foreignphrase> par défaut de la base de données
	  courante.
	</para>

	<para>
	  Pour plus d'informations sur les
	  <foreignphrase>tablespaces</foreignphrase>, voir la
	  <xref linkend="manage-ag-tablespaces"/>.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>check_function_bodies</varname></primary>
      </indexterm>
        <para>
          Ce paramètre est habituellement positionné à
	  <literal>on</literal>. Positionné à <literal>off</literal>, il
	  désactive la validation du corps de la fonction lors de
	  <xref linkend="sql-createfunction" endterm="sql-createfunction-title"/>.
	  Désactiver la validation est parfois utile. Cela permet, par
	  exemple, d'éviter des problèmes de références lors de la restauration
	  de définitions de fonctions à partir d'une sauvegarde.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
      <term><varname>default_transaction_isolation</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
        <primary>niveau d'isolation de la transaction</primary>
      </indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>default_transaction_isolation</varname></primary>
      </indexterm>
        <para>
          Chaque transaction SQL a un niveau d'isolation. Celui-ci peut être
	  <quote>read uncommitted</quote>, <quote>read committed</quote>,
	  <quote>repeatable read</quote> ou <quote>serializable</quote>.
	  Ce paramètre contrôle le niveau d'isolation par défaut de chaque
	  nouvelle transaction. Par défaut, <quote>read committed</quote>.
        </para>

        <para>
          Consulter le <xref linkend="mvcc"/> et
	  <xref linkend="sql-set-transaction" endterm="sql-set-transaction-title"/>
          pour plus d'informations.
        </para>
      </listitem>
    </varlistentry>

     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>transaction en lecture seule</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>default_transaction_read_only</varname></primary>
      </indexterm>

       <para>
        Une transaction SQL en lecture seule ne peut pas modifier les 
        tables permanentes. Ce paramètre contrôle le statut de lecture seule
        par défaut de chaque nouvelle transaction. La valeur par défaut est
	<literal>off</literal> (lecture/écriture).
       </para>

       <para>
        Consulter
	<xref linkend="sql-set-transaction" endterm="sql-set-transaction-title"/>
	pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
      <term><varname>statement_timeout</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>statement_timeout</varname></primary>
      </indexterm>
       <para>
        Interrompt toute instruction qui dure plus lontemps que ce nombre
	(indiqué en millisecondes). Le temps est décompté à partir du moment
	où la commande en provenance du client arrive sur le serveur.
	Si <varname>log_min_error_statement</varname> est configuré
	à <literal>ERROR</literal>, ou plus bas, l'instruction en cause
	est tracée. La valeur zéro (par défaut) désactive le décompte.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
      <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
	Indique l'âge limite (en transactions) que <command>VACUUM</command>
        doit utiliser pour décider de remplacer les ID de transaction par
        <literal>FrozenXID</literal> lors du parcours d'une table.
        La valeur par défaut est de 100 millions. Bien que les
	utilisateurs puissent configurer une valeur quelconque comprise entre zéro et
        1 milliard, <command>VACUUM</command> limite silencieusement la
	valeur réelle à la moitié de la valeur de
	<xref linkend="guc-autovacuum-freeze-max-age"/> afin que la valeur
	entre deux autovacuums forcés ne soit pas déraisonnablement courte.
        Pour plus d'informations, voir <xref linkend="vacuum-for-wraparound"/>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-client-format">
     <title>Locale et formatage</title>

     <variablelist>

       <varlistentry id="guc-datestyle" xreflabel="datestyle">
         <term><varname>datestyle</varname> (<type>string</type>)</term>
	 <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>datestyle</varname></primary>
       </indexterm>
         <para>
           Configure le format d'affichage des valeurs de type date et
           heure, ainsi que les règles d'interprétation des valeurs ambiguës
	   de dates saisies. Pour des raisons historiques, cette variable
           contient deux composantes indépendantes&nbsp;: la spécification du
           format en sortie (<literal>ISO</literal>, <literal>Postgres</literal>,
           <literal>SQL</literal> ou <literal>German</literal>) et la spécification en
           entrée/sortie de l'ordre année/mois/jour (<literal>DMY</literal>,
           <literal>MDY</literal> ou <literal>YMD</literal>). Elles peuvent être
           configurées séparément ou ensemble. Les mots clés <literal>Euro</literal>
           et <literal>European</literal> sont des synonymes de
           <literal>DMY</literal>&nbsp;; les mots clés <literal>US</literal>,
           <literal>NonEuro</literal> et <literal>NonEuropean</literal> sont des synonymes
           de <literal>MDY</literal>. Voir la <xref linkend="datatype-datetime"/> pour
           plus d'informations. La valeur par défaut est <literal>ISO, MDY</literal>,
	   mais <application>initdb</application> initialise le fichier de
	   configuration avec une valeur qui correspond au comportement de la locale
	   <varname>lc_time</varname> choisie.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="timezone">
       <term><varname>timezone</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>timezone</varname></primary>
       </indexterm>
       <indexterm><primary>fuseau horaire</primary></indexterm>
         <para>
           Configure le fuseau horaire pour l'affichage et l'interprétation
           de la date et de l'heure. Par défaut, <literal>'unknown'</literal>, ce qui
           signifie le fuseau horaire utilisé est celui défini par
	   le système. Voir la <xref linkend="datatype-datetime"/>
           pour plus d'informations.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>timezone_abbreviations</varname></primary>
      </indexterm>
      <indexterm><primary>time zone names</primary></indexterm>
      <listitem>
       <para>
       <!-- collection ? -->
        Configure la liste des abréviations de fuseaux horaires
	acceptés par le serveur pour la saisie de données de type datetime. La
	valeur par défaut est <literal>'Default'</literal>, qui est une liste qui fonctionne
	presque dans le monde entier&nbsp;; il y a aussi 'Australia' et 'India'.
	D'autres listes peuvent être définies pour une installation
	particulière. Voir <xref linkend="datetime-appendix"/> pour plus
	d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
      <term><varname>extra_float_digits</varname> (<type>integer</type>)</term>

      <listitem>
      <indexterm>
       <primary>chiffres significatifs</primary>
      </indexterm>
      <indexterm>
       <primary>nombre à virgule flottante</primary>
       <secondary>affichage</secondary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>extra_float_digits</varname></primary>
      </indexterm>

       <para>
        Ce paramètre ajuste le nombre de chiffres affichés par les valeurs à
        virgule flottante, ce qui inclue <type>float4</type>, <type>float8</type> et les
        types de données géométriques. La valeur du paramètre est ajoutée au
        nombre standard de chiffres (<literal>FLT_DIG</literal> ou
	<literal>DBL_DIG</literal>). La valeur peut être initialisée à une valeur maximum
        de 2 pour inclure les chiffres partiellement significatifs&nbsp;; c'est
        tout spécialement utile pour sauvegarder les données à virgule flottante
        qui ont besoin d'être restaurées exactement. Cette variable peut aussi
        être négative pour supprimer les chiffres non souhaités.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
      <term><varname>client_encoding</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>client_encoding</varname></primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
       <para>
        Initialise l'encodage client (jeu de caractères). Par défaut,
        il s'agit de celui de la base de données.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
      <term><varname>lc_messages</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_messages</varname></primary>
      </indexterm>
       <para>
        Initialise la langue d'affichage des messages. Les
        valeurs acceptables dépendent du système&nbsp;; voir
	<xref linkend="locale"/> pour plus d'informations. Si cette variable est
        initialisée à une chaîne vide (valeur par défaut),
        alors la valeur est héritée de l'environnement d'exécution du serveur.
       </para>

       <para>
        Avec certains systèmes, cette catégorie de locale n'existe pas.
        Initialiser cette variable fonctionne toujours mais n'a aucun
        effet. De même, il est possible qu'il n'existe pas de traduction des
	messages dans la langue sélectionnée. Dans ce cas, les messages sont
	affichés en anglais.
       </para>

       <para>
        Seuls les superutilisateurs peuvent modifier ce paramètre car il
	affecte aussi bien les messages envoyés dans les traces du serveur
	que ceux envoyés au client.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
      <term><varname>lc_monetary</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_monetary</varname></primary>
      </indexterm>
       <para>
        Initialise la locale à utiliser pour le formatage des montants monétaires (pour la
	famille de fonctions <function>to_char</function>, par exemple).
        Les valeurs acceptables dépendent du système&nbsp;; voir la
	<xref linkend="locale"/> pour plus d'informations. Si cette variable
	est initialisée à une chaîne vide (valeur par défaut), alors la valeur
	est héritée de l'environnement d'exécution du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
      <term><varname>lc_numeric</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_numeric</varname></primary>
      </indexterm>
       <para>
        Initialise la locale à utiliser pour le formatage des nombres (pour la famille de
	fonctions <function>to_char</function>, par exemple). Les valeurs
        acceptables dépendent du système&nbsp;; voir la <xref linkend="locale"/>
        pour plus d'informations. Si cette variable est initialisée à une chaîne
	vide (valeur par défaut), alors la valeur est héritée de l'environnement
	d'exécution du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
      <term><varname>lc_time</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_time</varname></primary>
      </indexterm>
       <para>
        Initialise la locale à utiliser pour le formatage des valeurs de date et
        d'heure (actuellement, ce paramétrage est sans effet, mais il pourrait
        en avoir un dans le futur). Les valeurs acceptables dépendent du système&nbsp;; voir
        la <xref linkend="locale"/> pour plus d'informations. Si cette variable est
        initialisée à une chaîne vide (valeur par défaut), alors la valeur est héritée de
        l'environnement d'exécution du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-client-other">
     <title>Autres valeurs par défaut</title>

     <variablelist>

     <varlistentry id="guc-explain-pretty-print" xreflabel="explain_pretty_print">
      <term><varname>explain_pretty_print</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>explain_pretty_print</varname></primary>
      </indexterm>
       <para>
        Détermine si <command>EXPLAIN VERBOSE</command> utilise le format indenté ou
        non pour l'affichage des arbres détaillés des requêtes. Positionné à
	<literal>on</literal> par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
       <term><varname>dynamic_library_path</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>dynamic_library_path</varname></primary>
       </indexterm>
       <indexterm><primary>chargement dynamique</primary></indexterm>
         <para>
           Si un module chargeable dynamiquement doit être ouvert et
           que le nom de fichier indiqué dans la commande
	   <command>CREATE FUNCTION</command> ou <command>LOAD</command>
	   ne contient pas d'indication de répertoire (c'est-à-dire que
	   le nom ne contient pas de slash), le
           système recherche le fichier requis dans ce chemin.
         </para>
  
         <para>
           La valeur de <varname>dynamic_library_path</varname> doit être
           une liste de chemins absolus séparés par des virgules (ou des
           points virgules sous Windows).  Si un élément de la liste commence
           avec la chaîne spéciale <literal>$libdir</literal>, le répertoire
           des bibliothèques internes du paquetage
           <productname>PostgreSQL</productname> est substitué à
           <literal>$libdir</literal>. C'est l'emplacement où sont installés
           les modules fournis par la distribution
           <productname>PostgreSQL</productname> standard. (La commande
           <literal>pg_config --pkglibdir</literal> permet de connaître le nom de
           ce répertoire.) Par exemple&nbsp;:
<programlisting>dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'</programlisting>
           ou dans un environnement Windows&nbsp;:
<programlisting>dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'</programlisting>
         </para>

       <para>
        La valeur par défaut de ce paramètre est <literal>'$libdir'</literal>.
        Si la valeur est une chaîne vide, la recherche automatique du chemin est
        désactivée.
       </para>

       <para>
        Ce paramètre peut être modifié à l'exécution par les
	superutilisateurs, mais un tel paramétrage ne persiste que pour la
        durée de la connexion du client. Il est donc préférable de ne
	réserver cette méthode qu'à des fins de développement. Il est
	recommandé d'initialiser ce paramètre dans le fichier de configuration
        <filename>postgresql.conf</filename>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>gin_fuzzy_search_limit</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Limite haute souple de la taille d'un ensemble renvoyé par un index GIN.
        Pour plus d'informations, voir <xref linkend="gin-tips"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
      <term><varname>local_preload_libraries</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>local_preload_libraries</varname></primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</filename></primary>
      </indexterm>
      <listitem>
       <para>
        Indique les bibliothèques partagées à charger à l'initialisation
	d'une connexion. Si plusieurs bibliothèques doivent
	être chargées, leurs noms sont séparés par des virgules. Ce paramètre
	ne peut pas être modifié après le démarrage de la session.
       </para>

       <para>
        Comme il ne s'agit pas d'une option réservée aux superutilisateurs,
	les bibliothèques pouvant être chargées sont restreintes à celles
	du sous-répertoire <filename>plugins</filename> du répertoire standard
	des bibliothèques. (Il est de
	la responsabilité de l'administrateur de bases de données de s'assurer
	que seules des bibliothèques <quote>saines</quote> s'y trouvent.)
	Les entrées dans <varname>local_preload_libraries</varname> peuvent
	indiquer ce répertoire explicitement, par exemple
        <literal>$libdir/plugins/ma_lib</literal>, ou n'indiquer que le
	nom de la bibliothèque &mdash; <literal>ma_lib</literal> a le même
	effet que <literal>$libdir/plugins/ma_lib</literal>.
       </para>

       <para>
        Il n'y a pas de gain de performance à charger une bibliothèque au
	démarrage d'une session ou à sa première utilisation. Le but de cette fonctionnalité
	est d'autoriser le chargement de bibliothèques de débogage ou de mesure
	de performance dans certaines sessions spécifiques sans commande
	<command>LOAD</command> explicite. Par exemple, le débogage
	peut être activé pour toutes les sessions d'un nom d'utilisateur
	donné en configurant ce paramètre avec <command>ALTER USER SET</command>.
       </para>

       <para>
        Si une bibliothèque indiquée n'est pas trouvée, la tentative de
	connexion échoue.
       </para>

       <para>
        Toute bibliothèque supportée par PostgreSQL contient un <quote>bloc magique</quote>
	qui permet d'en garantir la compatibilité. Pour cette raison, les
	bibliothèques non PostgreSQL ne peuvent pas être chargées de cette façon.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
    <title>Gestion des verrous</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)</term>

      <listitem>
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>deadlock_timeout</varname></primary>
      </indexterm>

       <para>
        Temps total, en millisecondes, d'attente d'un verrou avant de
	tester une condition de verrou mort
	(<foreignphrase>deadlock</foreignphrase>). Le test de verrou mort
	est assez lent, le serveur ne l'effectue donc pas à chaque fois qu'il
	attend un verrou. Les développeurs supposent (de
        façon optimiste) que les verrous morts sont rares dans les
        applications en production et attendent simplement un verrou
        pendant un certain temps avant de lancer une recherche de blocage.
        Augmenter cette valeur réduit le temps perdu en recherche inutile de
        verrous morts mais retarde la détection de vraies erreurs de verrous
        morts. La valeur par défaut est une seconde (<literal>1s</literal>),
        ce qui est probablement la plus petite valeur pratique. Sur un serveur
	en pleine charge, elle peut être augmentée. Idéalement, ce paramétrage
	peut dépasser le temps typique d'une transaction de façon à
	augmenter la probabilité qu'un verrou soit relâché avant que le
	processus en attente ne décide de lancer une recherche de verrous morts.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_locks_per_transaction</varname></primary>
      </indexterm>
       <para>
        La table des verrous partagés est créée pour tracer les verrous sur
	<varname>max_locks_per_transaction</varname> *
	(<xref linkend="guc-max-connections"/> +
        <xref linkend="guc-max-prepared-transactions"/>) objets (c'est-à-dire
	des tables)&nbsp;; de ce fait, au maximum ce nombre d'objets distincts
	peuvent être verrouillés simultanéments. Ce paramètre contrôle le nombre moyen
	de verrous d'objets alloués pour chaque transaction&nbsp;; des
	transactions individuelles peuvent verrouiller plus d'objets tant
	que l'ensemble des verrous de toutes les transactions tient dans la table
	des verrous. Il <emphasis>ne</emphasis> s'agit <emphasis>pas</emphasis> 
	du nombre de lignes qui peuvent être verrouillées&nbsp;; cette valeur
	n'a pas de limite. La valeur par défaut,
	64, s'est toujours avérée suffisante par le passé, mais il est
	possible de l'augmenter si des clients accèdent à de nombreuses
	tables différentes au sein d'une unique transaction.
	Ce paramètre ne peut être initialisé qu'au lancement du serveur.
       </para>

       <para>
        Augmenter ce paramètre peut obliger <productname>PostgreSQL</productname>
        à réclamer plus de mémoire partagée <systemitem class="osname">System V</systemitem>
        ou de sémaphores que ne le permet la configuration par défaut du
	système d'exploitation. Voir la <xref linkend="sysvipc"/> pour plus
        d'informations sur la façon d'ajuster ces paramètres, si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
    <title>Compatibilité de version et de plateforme</title>

    <sect2 id="runtime-config-compatible-version">
     <title>Versions précédentes de PostgreSQL</title>
     <variablelist>

     <varlistentry id="guc-add-missing-from" xreflabel="add_missing_from">
      <term><varname>add_missing_from</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>FROM</primary><secondary>manquant</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>add_missing_from</varname></primary>
      </indexterm>
       <para>
        Lorsque ce paramètre est activé (<literal>on</literal>), les tables
	référencées par une requête sont
	automatiquement ajoutées à la clause <literal>FROM</literal> si elles n'y sont
	pas déjà présentes. Ce comportement n'est pas compatible avec le
	standard SQL et beaucoup de personnes ne l'aiment pas car elle masque
	les erreurs (comme de faire référence à une table à la place de son
	alias). Désactivé par défaut (<literal>off</literal>), ce paramètre peut
	être activé pour des raisons de compatibilité avec les versions
	antérieures à <productname>PostgreSQL</productname> 8.1, pour
	lesquelles ce comportement était activé par défaut.
       </para>

       <para>
        Même lorsque cette variable est activée, un message
	d'avertissement est émis pour chaque entrée <literal>FROM</literal> implicite
	référencée par une requête. Les utilisateurs sont encouragés à mettre à
	jour leurs applications pour qu'elles ne s'appuient pas sur ce
	comportement. Il suffit pour cela d'ajouter toutes les tables référencées
	par une requête dans la clause <literal>FROM</literal> de cette requête
	(ou dans sa clause <literal>USING</literal> dans le cas d'un
	<command>DELETE</command>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
      <term><varname>array_nulls</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>array_nulls</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle si l'analyseur de saisie de tableau reconnaît les
	<literal>NULL</literal> sans guillemets comme des éléments de tableaux
	NULL. Activé par défaut (<literal>on</literal>), il autorise la saisie
	de valeurs NULL dans un tableau. Néanmoins, les versions de
	<productname>PostgreSQL</productname> antérieures à la 8.2 ne supportaient
	pas les valeurs NULL dans les tableaux. De ce fait, ces versions
	traitent <literal>NULL</literal> comme une
	chaîne dont le contenu est <quote>NULL</quote>. Pour une compatibilité
	ascendante avec les applications nécessitant l'ancien comportement, ce
	paramètre peut être désactivé (<literal>off</literal>).
       </para>

       <para>
        Il est possible de créer des valeurs de tableau contenant des
	valeurs NULL même quand cette variable est à <literal>off</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm><primary>strings</primary><secondary>backslash quotes</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>backslash_quote</varname></primary>
      </indexterm>
       <para>
        Contrôle si un guillemet simple peut être représenté par un
	<literal>\'</literal> dans une chaîne. La façon préférée, conforme au standard
	SQL, de représenter un guillemet est de le doubler (<literal>''</literal>) mais,
	historiquement, <productname>PostgreSQL</productname> a aussi
	accepté <literal>\'</literal>. Néanmoins, l'utilisation de
	<literal>\'</literal> présente des problèmes de sécurité car
	certains encodages client contiennent des caractères multi-octets
	dans lesquels le dernier octet est l'équivalent ASCII numérique d'un
	<literal>\</literal>. Si le code côté
	client ne fait pas un échappement correct, alors une attaque par injection
	SQL est possible. Ce risque peut être évité en s'assurant que le 
	serveur rejette les requêtes dans lesquelles apparait un guillemet
	échappé avec un antislash. Les valeurs autorisées de
	<varname>backslash_quote</varname> sont
        <literal>on</literal> (autorise <literal>\'</literal> en permanence),
	<literal>off</literal> (le rejette en permanence) et
	<literal>safe_encoding</literal> (ne l'autorise que si l'encodage client
	n'autorise pas l'ASCII <literal>\</literal> dans un caractère multioctet).
	<literal>safe_encoding</literal> est le paramétrage par défaut.
       </para>

       <para>
        Dans une chaîne litérale conforme au standard,
	<literal>\</literal> ne signifie que <literal>\</literal>. Ce paramètre
	affecte la gestion des chaînes non conformes, incluant la syntaxe de chaînes
	d'échappement (<literal>E'...'</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-with-oids" xreflabel="default_with_oids">
       <term><varname>default_with_oids</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>default_with_oids</varname>
           </primary>
       </indexterm>
         <para>
           Contrôle si les commandes <command>CREATE TABLE</command> et
           <command>CREATE TABLE AS</command> incluent une colonne OID dans
           les tables nouvellement créées, si ni <literal>WITH OIDS</literal>
           ni <literal>WITHOUT OIDS</literal> ne sont précisées. Ce
	   paramètre détermine aussi si les OID sont inclus dans les tables créés par
           <command>SELECT INTO</command>. Dans <productname>PostgreSQL</productname> 8.1, 
           <varname>default_with_oids</varname> est désactivée
	   (<literal>off</literal>) par défaut, contrairement aux versions précédentes.
         </para>
       
         <para>
           L'utilisation d'OID dans les tables utilisateur est considérée comme
           obsolète. Il est donc préférable pour la plupart des installations
	   de laisser ce paramètre désactivé. Les applications qui requièrent des OID pour
           une table particulière doivent préciser <literal>WITH OIDS</literal>
	   lors de la création de la table. Cette variable peut
           être activée pour des raisons de compatibilité avec les anciennes
           applications qui ne suivent pas ce comportement.
         </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>strings</primary><secondary>escape warning</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>escape_string_warning</varname></primary>
      </indexterm>
       <para>
        S'il est activé (<literal>on</literal>), un message d'avertissement est
	affiché si un antislash (<literal>\</literal>) apparaît dans une
	chaîne litérale ordinaire (syntaxe
	<literal>'...'</literal>) et que <varname>standard_conforming_strings</varname>
	est désactivé. Il est activé par défaut (<literal>on</literal>).
       </para>
       <para>
        Les applications qui souhaitent utiliser l'antislash comme échappement
	doivent être modifiées pour utiliser la syntaxe de chaîne d'échappement
	(<literal>E'...'</literal>) car le comportement par défaut des chaînes
	ordinaires changera dans une prochaine version pour des raisons de
	compatibilité avec le standard SQL. Cette variable peut être activée
	pour aider à la détection des applications non conformes.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-regex-flavor" xreflabel="regex_flavor">
      <term><varname>regex_flavor</varname> (<type>string</type>)</term>
      <indexterm><primary>regular expressions</primary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>regex_flavor</varname></primary>
      </indexterm>
      <listitem>
       <para>
        La <quote>flaveur</quote> des expressions rationnelles peut être configurée à
	<literal>advanced</literal> (avancée), <literal>extended</literal>
	(étendue) ou <literal>basic</literal> (basique). La valeur par défaut est
	<literal>advanced</literal>. La configuration <literal>extended</literal>
	peut être utile pour une compatibilité ascendante avec les versions
	antérieures à <productname>PostgreSQL</productname> 7.4.
	Voir <xref linkend="posix-syntax-details"/> pour plus de détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sql-inheritance" xreflabel="sql_inheritance">
      <term><varname>sql_inheritance</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>sql_inheritance</varname></primary>
      </indexterm>
      <indexterm><primary>inheritance</primary></indexterm>
      <listitem>
       <para>
        Contrôle la sémantique de l'héritage. Désactivé
	(<literal>off</literal>), les sous-tables ne sont pas incluses par
	défaut dans les différentes commandes&nbsp;; généralement le mot
	clé <literal>ONLY</literal> est nécessaire. Ceci a été ajouté pour
	la compatibilité avec les versions antérieures à la 7.1. Voir
        <xref linkend="ddl-inherit"/> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)</term>
      <indexterm><primary>strings</primary><secondary>standard conforming</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>standard_conforming_strings</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle si les chaînes ordinaires (<literal>'...'</literal>)
	traitent les antislashs litéralement, comme cela est indiqué dans le standard
	SQL. Désactivé par défaut (<literal>off</literal>), ce paramètre
	ramène <productname>PostgreSQL</productname> à son comportement historique
	pour le traitement des antislashs comme caractères d'échappement.
	La valeur par défaut sera passée à <literal>on</literal> dans une
	prochaine version pour améliorer la compatibilité avec le standard. Les
	applications peuvent vérifier ce paramètre pour déterminer la façon dont
	elles doivent traiter les chaînes litérales. La présence de ce
	paramètre indique aussi que la syntaxe de chaîne d'échappement
	(<literal>E'...'</literal>) est supportée. La syntaxe de chaîne d'échappement
	doitt être utilisée pour les applications traitant les
	antislashs comme des caractères d'échappement.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-compatible-clients">
     <title>Compatibilité entre la plateforme et le client</title>
     <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>IS NULL</primary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>transform_null_equals</varname></primary>
      </indexterm>
       <para>
        Lorsque ce paramètre est activé (<literal>on</literal>), les expressions de la forme
        <literal><replaceable>expr</replaceable> = NULL</literal> 
	(ou <literal>NULL = <replaceable>expr</replaceable></literal>) sont traitées comme
        <literal><replaceable>expr</replaceable> IS NULL</literal>, c'est-à-dire qu'elles
        renvoient vrai si <replaceable>expr</replaceable> s'évalue à la valeur NULL, et
        faux sinon. Le bon comportement, compatible avec le standard SQL, de
	<literal><replaceable>expr</replaceable> = NULL</literal> est de toujours renvoyer
	NULL (inconnu). De ce fait, ce paramètre est désactivé par défaut.
       </para>

       <para>
        Toutefois, les formulaires filtrés dans <productname>Microsoft
        Access</productname> engendrent des requêtes qui utilisent
        <literal><replaceable>expr</replaceable> = NULL</literal> pour tester les valeurs
        NULL. Il peut donc être souhaitable, lorsque cette intarface est
	utilisée pour accéder à une base de données, d'activer ce paramètre. Comme les
        expressions de la forme <literal><replaceable>expr</replaceable> = NULL</literal>
        renvoient toujours la valeur NULL (en utilisant la bonne
        interprétation), elles ne sont pas très utiles et n'apparaissent pas
	souvent dans les applications normales. De ce fait, ce paramètre a peu
        d'utilité en pratique. Mais la sémantique des expressions impliquant
	des valeurs NULL est souvent source de confusion pour les nouveaux
	utilisateurs. C'est pourquoi ce paramètre n'est pas activé par défaut.
       </para>

       <para>
        Ce paramètre n'affecte que la forme exacte
        <literal>= NULL</literal>, et pas les autres opérateurs de comparaison ou 
	expressions équivalents en terme de calcul à des expressions
        qui impliquent l'opérateur égal (tels que <literal>IN</literal>). De
	ce fait, ce paramètre ne doit pas être considéré comme un correctif général
	à une mauvaise programmation.
       </para>

       <para>
        De plus amples informations sont disponibles dans la
	<xref linkend="functions-comparison"/>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-preset">
     <title>Options préconfigurées</title>

     <para>
       Les <quote>paramètres</quote> qui suivent sont en lecture seule. Ils sont
       déterminés à la compilation ou à l'installation de
       <productname>PostgreSQL</productname>. De ce fait, ils sont exclus du
       fichier <filename>postgresql.conf</filename> d'exemple. Ces
       paramètres décrivent différents aspects du comportement de
       <productname>PostgreSQL</productname> qui peuvent s'avérer
       intéressants pour pour certaines applications, en 
       particulier pour les interfaces d'administration.
     </para>

     <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
       <term><varname>block_size</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>block_size</varname></primary>
       </indexterm>
         <para>
           Informe sur la taille d'un bloc disque. Celle-ci est déterminée par la valeur
           de <literal>BLCKSZ</literal> à la construction du serveur. La valeur par
           défaut est de 8192&nbsp;octets. La signification de diverses variables
	   de configuration (<xref linkend="guc-shared-buffers"/>, par
	   exemple) est influencée par <varname>block_size</varname>. Voir la
	   <xref linkend="runtime-config-resource"/> pour plus d'informations.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
       <term><varname>integer_datetimes</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>integer_datetimes</varname></primary>
       </indexterm>
         <para>
           Informe sur la construction de <productname>PostgreSQL</productname>
	   avec le support des dates et heures sur des entiers de 64 bits.
	   Ce paramètre est configuré par <literal>--enable-integer-datetimes</literal>
	   au moment de la construction de <productname>PostgreSQL</productname>.
	   La valeur par défaut est <literal>off</literal>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
       <term><varname>lc_collate</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>lc_collate</varname></primary>
       </indexterm>
         <para>
           Affiche la locale utilisée pour le tri des données de type texte.
	   Voir la <xref linkend="locale"/> pour plus d'informations. La valeur est
	   déterminée lors de l'initialisation du cluster de bases de données.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
       <term><varname>lc_ctype</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>lc_ctype</varname></primary>
       </indexterm>
         <para>
           Affiche la locale qui détermine les classifications de caractères.
	   Voir la <xref linkend="locale"/> pour plus d'informations. La valeur
	   est déterminée lors de l'initialisation du cluster de bases de
	   données. Elle est habituellement identique à
	   <varname>lc_collate</varname>. Elle peut, toutefois, pour des
	   applications particulières, être configurée différemment.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
       <term><varname>max_function_args</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_function_args</varname></primary>
       </indexterm>
         <para>
           Affiche le nombre maximum d'arguments des fonctions. Ce nombre est
	   déterminé par la valeur de <literal>FUNC_MAX_ARGS</literal> lors de la
	   construction du serveur. La valeur par défaut est de 100 arguments.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
       <term><varname>max_identifier_length</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_identifier_length</varname></primary>
       </indexterm>
         <para>
           Affiche la longueur maximale d'un identifiant. Elle est déterminée comme
	   valant <literal>NAMEDATALEN</literal> moins un lors de la construction du
	   serveur. La valeur par défaut de <literal>NAMEDATALEN</literal> est 64&nbsp;;
	   la valeur par défaut de <varname>max_identifier_length</varname>
	   est, de ce fait, de 63 octets.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
       <term><varname>max_index_keys</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_index_keys</varname></primary>
       </indexterm>
         <para>
           Affiche le nombre maximum de clés d'index. Ce nombre est déterminé
	   par la valeur de <literal>INDEX_MAX_KEYS</literal> lors de la construction
	   du serveur. La valeur par défaut est de 32 clés.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
       <term><varname>server_encoding</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>server_encoding</varname></primary>
       </indexterm>
       <indexterm><primary>jeu de caractères</primary></indexterm>
       <indexterm><primary>encodage</primary></indexterm>
         <para>
           Affiche l'encodage de la base de données (jeu de caractères).
	   Celui-ci est déterminé lors de la création de la base de données.
	   Les clients ne sont généralement concernés que par la valeur
	   de <xref linkend="guc-client-encoding"/>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
       <term><varname>server_version</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>server_version</varname></primary>
       </indexterm>
         <para>
           Affiche le numéro de version du serveur. Celui-ci est déterminé par la
	   valeur de <literal>PG_VERSION</literal> lors de la construction du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
      <term><varname>server_version_num</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>server_version_num</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Affiche le numéro de version du serveur sous la forme d'un entier.
	Celui-ci est déterminé par la valeur de
	<literal>PG_VERSION_NUM</literal> lors de la construction du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-custom">
    <title>Options personnalisées</title>

    <para>
      Cette fonctionnalité a été conçue pour permettre l'ajout de paramètres
      habituellement inconnus de <productname>PostgreSQL</productname> 
      par des modules complémentaires (comme les langages procéduraux).
      Cela permet de configurer ces modules de façon standard.
    </para>

  <variablelist>

    <varlistentry id="guc-custom-variable-classes" xreflabel="custom_variable_classes">
      <term><varname>custom_variable_classes</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>custom_variable_classes</varname></primary>
      </indexterm>
        <para>
          Cette variable indique les noms de classe à utiliser
	  pour les variables personnalisées, sous la forme d'une liste séparée par
	  des virgules. Une variable personnalisée est une variable habituellement
	  inconnue de <productname>PostgreSQL</productname> mais
	  utilisée par certains modules complémentaires. Les noms de ces
	  variables doivent être constitués d'un nom de classe, d'un point et
	  d'un nom de variable. <varname>custom_variable_classes</varname>
	  indique tous les noms
	  de classe utilisés dans une installation particulière.
	  Ce paramètre ne peut qu'être configuré dans le fichier
	  <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

     <para>
       La difficulté de configurer des variables personnalisées dans
       <filename>postgresql.conf</filename> se situe dans le fait que
       le fichier doit être lu avant que
       les modules complémentaires ne soient chargés. De ce fait, les variables
       sont habituellement rejetées parce qu'inconnues. Lorsque
       <varname>custom_variable_classes</varname> est initialisé, le serveur accepte
       les définitions de variables arbitraires à l'intérieur de chaque classe
       indiquée. Ces variables sont traitées comme des emplacements et
       n'ont aucune fonction tant que le module qui les définit n'est pas
       chargé. Quand un module d'une classe spécifique est chargé, il ajoute les
       bonnes définitions de variables pour son nom de classe, convertit les
       valeurs des emplacements en fonction de leurs définitions et émet des messages
       d'avertissement pour tout emplacement de la classe restant
       (probablement des noms de variables mal saisis).
     </para>

     <para>
       Voici un exemple de ce que peut contenir <filename>postgresql.conf</filename>
       si les variables personnalisées sont utilisées&nbsp;:

<programlisting>custom_variable_classes = 'plr,plperl'
plr.path = '/usr/lib/R'
plperl.use_strict = true
plruby.use_strict = true        # generates error, unknown class name</programlisting>
     </para>
   </sect1>

   <sect1 id="runtime-config-developer">
    <title>Options pour les développeurs</title>

    <para>
     Les paramètres suivants permettent de travailler sur les sources de
     <productname>PostgreSQL</productname> et, dans certains cas,
     fournissent une aide à la récupération de bases de données sévèrement
     endommagées. Il n'y a aucune raison de les utiliser en configuration de
     production. En tant que tel, ils sont exclus du fichier d'exemple de
     <filename>postgresql.conf</filename>. Un certain nombre d'entre eux
     requièrent des options de compilation spéciales pour fonctionner.
    </para>

    <variablelist>
     <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>allow_system_table_mods</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Autorise la modification de la structure des tables systèmes.
        Ce paramètre, utilisé par <command>initdb</command>, 
        n'est modifiable qu'au démarrage du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
      <term><varname>debug_assertions</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_assertions</varname></primary>
      </indexterm>
       <para>
        Active différentes vérifications d'affectations. C'est une aide au
        débogage. En cas de problèmes étranges ou d'arrêts
	brutaux, ce paramètre peut être activé car il permet de remonter des
	erreurs de programmation. Pour utiliser ce paramètre, la
	macro <symbol>USE_ASSERT_CHECKING</symbol> doit être définie lors de
        la construction de <productname>PostgreSQL</productname> (à l'aide
        de l'option <option>--enable-cassert</option> de
        <command>configure</command>). Ce paramètre est activé par défaut si
        <productname>PostgreSQL</productname> a été construit avec
	l'activation des assertions.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>ignore_system_indexes</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Ignore les index système lors de la lecture des tables système (mais
	continue de les mettre à jour lors de modifications des tables).
	Cela s'avère utile lors de la récupération d'index système endommagés. Ce
	paramètre ne peut pas être modifié après le démarrage de la session.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
      <term><varname>post_auth_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>post_auth_delay</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Si ce paramètre est différent de zéro, un délai de ce nombre de secondes
	intervient, après l'étape d'authentification, lorsqu'un nouveau
	processus serveur est lancé.
	Ceci a pour but de donner l'opportunité d'attacher un débogueur au
	processus serveur. Ce paramètre ne peut pas être modifié après le
	démarrage de la session.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>pre_auth_delay</varname></primary>
      </indexterm>
       <para>
        Si ce paramètre est différent de zéro, un délai de ce nombre de secondes
	intervient juste après la création d'un nouveau processus, avant le processus
        d'authentification. Ceci a pour but de donner une opportunité d'attacher
        un débogueur au processus serveur pour tracer les mauvais comportements
        pendant l'authentification.
	Ce paramètre ne peut qu'être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
      <term><varname>trace_notify</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_notify</varname></primary>
      </indexterm>
       <para>
        Produit un grand nombre de sorties de débogage pour les commandes
        <command>LISTEN</command> et <command>NOTIFY</command>.
	<xref linkend="guc-client-min-messages"/> ou
        <xref linkend="guc-log-min-messages"/> doivent être positionnées à
        <literal>DEBUG1</literal> ou plus bas pour envoyer cette sortie sur les
        traces client ou serveur, respectivement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
      <term><varname>trace_sort</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_sort</varname></primary>
      </indexterm>
       <para>
        Si ce paramètre est actif, des informations concernant l'utilisation
	des ressources lors des opérations de tri sont émises. Ce paramètre
	n'est disponible que si la
	macro <symbol>TRACE_SORT</symbol> a été définie lors de la
	compilation de <productname>PostgreSQL</productname> (néanmoins,
        <symbol>TRACE_SORT</symbol> est actuellement définie par défaut).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_locks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lock_oidmin</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lock_table</varname> (<type>boolean</type>)</term>
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)</term>
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        D'autres paramètres de trace et de débogage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
      <term><varname>wal_debug</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_debug</varname></primary>
      </indexterm>
       <para>
        Si ce paramètre est positionné à <literal>on</literal>, une sortie
	de débogage relative aux WAL est émise.
	Ce paramètre n'est disponible que si la macro <symbol>WAL_DEBUG</symbol>
	a été définie au moment de la compilation de <productname>PostgreSQL</productname>.
       </para>
      </listitem>
     </varlistentry>

      <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
       <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>zero_damaged_pages</varname></primary>
       </indexterm>
       <para>
        La détection d'une en-tête de page endommagée cause généralement le
        rapport d'une erreur par <productname>PostgreSQL</productname>
	et l'annulation de la commande courante. Initialiser
	<varname>zero_damaged_pages</varname> à <literal>on</literal>
        oblige le système à remonter un avertissement, à vider la page
	endommagée et à continuer le traitement. Ce comportement
        <emphasis>détruit les données</emphasis> (à savoir, toutes les lignes de la
        page endommagée). Mais cela permet de passer outre l'erreur et de
        récupérer les lignes des pages non endommagées qui peuvent être
        présentes dans la table. Ce paramètre s'avère donc utile pour
	récupérer les données si la corruption est due à une erreur
	matérielle ou logicielle. Il est généralement préférable de ne
	pas configurer ce paramètre à <literal>on</literal>,
	sauf à abandonner l'espoir de récupérer les données des pages
	endommagées d'une table. Par défaut ce paramètre est désactivé.
	Seul un superutilisateur peut modifier cette configuration.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </sect1>

  <sect1 id="runtime-config-short">
   <title>Options courtes</title>

   <para>
    Pour des raisons pratiques, il existe également des commutateurs en
    ligne de commandes sur une seule lettre pour certains paramètres.
    Ceux-ci sont décrits dans
    le <xref linkend="runtime-config-short-table"/>. Certaines des options existent
    pour des raisons historiques et leur présence en tant qu'option courte
    ne doit pas être vue comme une incitation à son utilisation massive.
   </para>

    <table id="runtime-config-short-table">
     <title>Clé d'option courte</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Option courte</entry>
        <entry>Équivalent</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><option>-A <replaceable>x</replaceable></option></entry>
        <entry><literal>debug_assertions = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-e</option></entry>
	<entry><literal>datestyle = euro</literal></entry>
       </row>
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</literal>,
	  <literal>enable_hashjoin = off</literal>,
	  <literal>enable_indexscan = off</literal>,
	  <literal>enable_mergejoin = off</literal>,
	  <literal>enable_nestloop = off</literal>,
	  <literal>enable_seqscan = off</literal>,
	  <literal>enable_tidscan = off</literal>
         </entry>
       </row>
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</literal></entry>
       </row>
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-i</option></entry>
	<entry><literal>listen_addresses = '*'</literal></entry>
       </row>
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directory = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</literal></entry>
       </row>
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-O</option></entry>
	<entry><literal>allow_system_table_mods = on</literal></entry>
       </row>
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-P</option></entry>
	<entry><literal>ignore_system_indexes = on</literal></entry>
       </row>
       <row>
        <entry><option>-s</option></entry>
	<entry><literal>log_statement_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
	<entry><literal>work_mem = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
	<entry><literal>log_parser_stats = on</literal>,
        <literal>log_planner_stats = on</literal>, 
	<literal>log_executor_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
	<entry><literal>post_auth_delay = <replaceable>x</replaceable></literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>
 </chapter>
