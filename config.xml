<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $PostgreSQL: pgsql/doc/src/sgml/config.sgml,v 1.17 2005/09/13 15:24:56 neilc Exp $ -->
  <chapter id="runtime-config">
   <title>Configuration du serveur</title>

   <indexterm>
    <primary>configuration</primary>
    <secondary>du serveur</secondary>
   </indexterm>

   <para>
    Il existe un grand nombre de paramètres de configuration affectant le
    comportement du système de bases de données. Dans la première section de ce
    chapitre, les méthodes de configuration de ces paramètres sont décrites&nbsp;; les
    sections suivantes discutent de chaque paramètre en détail.
   </para>

  <sect1 id="config-setting">
   <title>Paramètres de configuration</title>

   <para>
    Tous les noms de paramètres sont insensibles à la casse. Chaque
    paramètre prend une valeur d'un de ces quatre types&nbsp;: booléen, entier,
    nombre à virgule flottante ou chaîne de caractères. Les valeurs booléennes
    peuvent être <literal>ON</literal>, <literal>OFF</literal>,
    <literal>TRUE</literal>, <literal>FALSE</literal>, <literal>YES</literal>,
    <literal>NO</literal>, <literal>1</literal>, <literal>0</literal>
    ou tout préfixe non ambigu de ceux-ci (toutes ces écriture sont
    insensibles à la casse).
   </para>

   <para>
    Certains paramètres indiquant une valeur de taille mémoire ou de durée.
    Ils ont chacun une unité implicite, soit Ko, soit blocs (typiquement
    8&nbsp;Ko), soit millisecondes, soit secondes, soit minutes. Pour
    simplifier la saisie, une unité (y compris différente) peut être indiquée
    de façon explicite. Les unités mémoire valides sont <literal>kB</literal>
    (kilo-octets), <literal>MB</literal> (Méga-octets) et
    <literal>GB</literal> (Giga-octets)&nbsp;; les
    unités de temps valides sont <literal>ms</literal>
    (millisecondes), <literal>s</literal> (secondes),
    <literal>min</literal> (minutes), <literal>h</literal> (heures),
    and <literal>d</literal> (jours). Les unités de mémoire sont des
    multiples de 1024, pas de 1000.
   </para>

   <para>
    Une façon d'initialiser ces paramètres est d'éditer le fichier
    <filename>postgresql.conf</filename>
    <indexterm><primary>postgresql.conf</primary></indexterm>
    qui est normalement placé dans le répertoire data
    (<application>initdb</application> y installe une copie par défaut).
    Un exemple de son contenu peut être&nbsp;:
<programlisting># Ceci est un commentaire
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB</programlisting>
    Un paramètre est indiqué par ligne. Le signe égal entre le nom et la
    valeur est optionnel. Les espaces n'ont pas de signification et les
    lignes vides sont ignorées. Les marques de hachage (<literal>#</literal>)
    introduisent des commentaires. Les valeurs des paramètres qui ne
    sont pas des identifieurs simples ou des nombres doivent être placées entre
    guillemets simples. Pour intégrer un guillemet simple dans la valeur d'un
    paramètre, on écrit soit deux guillemets (c'est la méthode préférée) soit
    un antislash suivi du guillemet.
   </para>

   <para>
    <indexterm>
     <primary><literal>include</literal></primary>
     <secondary>dans le fichier de configuration</secondary>
    </indexterm>
    En plus de la configuration des paramètres, le fichier
    <filename>postgresql.conf</filename> peut contenir des
    <firstterm>directives d'inclusion</firstterm> indiquant un autre fichier à
    lire et dont le contenu doit être traité à ce niveau comme partie intégrante du
    fichier de configuration. Les directives d'inclusion ressemblent simplement à
<programlisting>
include 'nom_fichier'
</programlisting>
    Si le nom du fichier n'est pas un chemin absolu, il est pris comme relatif
    au répertoire contenant le fichier de configuration le référençant. Les
    inclusions peuvent être imbriquées.
   </para>

   <para>
    <indexterm>
     <primary>SIGHUP</primary>
    </indexterm>
    Le fichier de configuration est relu à chaque fois que le processus
    serveur principal reçoit un signal <systemitem>SIGHUP</systemitem> 
    (<literal>pg_ctl reload</literal> est le moyen le plus simple de
    l'envoyer). Le
    processus serveur principal propage aussi ce signal aux processus serveur
    en cours d'exécution de façon à ce que les sessions existantes
    obtiennent aussi la nouvelle valeur. Il est également possible d'envoyer
    le signal directement à un seul processus serveur. Quelques paramètres
    ne peuvent être initialisés qu'au lancement du serveur&nbsp;; tout changement
    de leur valeur dans le fichier de configuration est ignoré jusqu'au prochain
    démarrage du serveur.
   </para>

   <para>
    Une autre façon de configurer ces paramètres est de les passer comme
    option de la commande <command>postgres</command>&nbsp;:
<programlisting>postgres -c log_connections=yes -c log_destination='syslog'</programlisting>
    Les options de la ligne de commande surchargent le paramétrage 
    effectué dans le fichier <filename>postgresql.conf</filename>. 
    Ce qui signifie que la valeur d'un paramètre passé en ligne de commande
    ne peut plus être modifiée et rechargée à la volée par le fichier
    <filename>postgresql.conf</filename>. C'est pourquoi, bien que la méthode
    de la ligne de commande paraisse pratique, elle peut coûter en
    flexibilité par la suite.
   </para>

   <para>
    Il est parfois utile de donner une option en ligne de
    commande pour une unique session particulière. La variable d'environnement
    <envar>PGOPTIONS</envar> est utilisée côté client à ce propos&nbsp;:
<programlisting>env PGOPTIONS='-c geqo=off' psql</programlisting>
    (Ceci fonctionne pour toute application client
    fondée sur <application>libpq</application>, et non pas seulement pour
    <application>psql</application>.) Cela ne fonctionne pas pour
    les paramètres fixés au démarrage du serveur ou qui doivent être
    précisés dans <filename>postgresql.conf</filename>.
   </para>

   <para>
    De plus, il est possible d'affecter un ensemble de paramètres à un
    utilisateur ou à une base de données. Quand une session est lancée, les
    paramètres par défaut de l'utilisateur et de la base de données
    impliqués sont chargés. Les commandes
    <xref linkend="sql-alteruser" endterm="sql-alteruser-title"/> et
    <xref linkend="sql-alterdatabase" endterm="sql-alterdatabase-title"/>
    sont respectivement utilisées pour configurer ces paramètres. Les
    paramètres par base de données surchargent
    ceux passés sur la ligne de commande de <command>postgres</command> ou
    du fichier de configuration et sont à leur tour surchargés par ceux de
    l'utilisateur&nbsp;; les deux sont surchargés par les paramètres de session.
   </para>

   <para>
    Quelques paramètres peuvent être modifiés dans les sessions
    <acronym>SQL</acronym> individuelles avec la commande
    <xref linkend="sql-set" endterm="sql-set-title"/>, par exemple&nbsp;:
<screen>SET ENABLE_SEQSCAN TO OFF;</screen>
    Si <command>SET</command> est autorisé, il surcharge toutes les autres sources de
    valeurs pour le paramètre. Quelques paramètres ne peuvent pas être changés
    via <command>SET</command>&nbsp;: s'ils contrôlent un comportement qui
    ne peut pas être modifié sans relancer le serveur
    <productname>PostgreSQL</productname>, par exemple. De plus, quelques
    paramètres peuvent être modifiés via <command>SET</command> ou
    <command>ALTER</command> par les superutilisateurs, mais pas par les
    utilisateurs ordinaires.
   </para>

   <para>
    La commande <xref linkend="sql-show" endterm="sql-show-title"/> permet
    d'inspecter les valeurs courantes de tous les paramètres.
   </para>

   <para>
    La table virtuelle <structname>pg_settings</structname> (décrite dans la
    <xref linkend="view-pg-settings"/>) autorise aussi l'affichage et la mise à jour de
    paramètres de session à l'exécution. Elle est équivalente à <command>SHOW</command>
    et <command>SET</command> mais peut être plus facile à utiliser parce qu'elle
    peut être jointe avec d'autres tables et que ses lignes peuvent être
    sélectionnées en utilisant des conditions personnalisées.
   </para>
   </sect1>
    
   <sect1 id="runtime-config-file-locations">
     <title>Emplacement des fichiers</title>
     
     <para>
       En plus du fichier <filename>postgresql.conf</filename> déjà mentionné,
       <productname>PostgreSQL</productname> utilise deux autres fichiers de
       configuration éditables manuellement. Ces fichiers contrôlent
       l'authentification du client (leur utilisation est discuté dans le
       <xref linkend="client-authentication"/>). Par défaut, les trois fichiers de
       configuration sont stockés dans le répertoire data du cluster de bases
       de données. Les paramètres décrits dans cette section permettent de
       déplacer les fichiers de configuration. Ce qui peut en faciliter
       l'administration. Il est, en particulier, souvent plus facile de
       s'assurer que les fichiers de configuration sont correctement sauvegardés
       quand ils sont conservés à part.
     </para>
       
       <variablelist>
         <varlistentry id="guc-data-directory" xreflabel="data_directory">
           <term><varname>data_directory</varname> (<type>string</type>)</term>
           <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>data_directory</varname></primary>
           </indexterm>
             <para>
               Indique le répertoire à utiliser pour le stockage des données.
               Ce paramètre ne peut être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>
       
         <varlistentry id="guc-config-file" xreflabel="config_file">
           <term><varname>config_file</varname> (<type>string</type>)</term>
           <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>config_file</varname>
               </primary>
           </indexterm>
             <para>
               Indique le fichier de configuration principal du serveur
	       (appelé <filename>postgresql.conf</filename>). Ce paramètre
	       ne peut être initialisé que sur la ligne de commande de
               <command>postgres</command>.
             </para>
           </listitem>
         </varlistentry>
   
         <varlistentry id="guc-hba-file" xreflabel="hba_file">
           <term><varname>hba_file</varname> (<type>string</type>)</term>
	   <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>hba_file</varname></primary>
           </indexterm>
             <para>
               Indique le fichier de configuration de l'authentification
               fondée sur l'hôte (appelé <filename>pg_hba.conf</filename>).
	       Ce paramètre ne peut être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>

         <varlistentry id="guc-ident-file" xreflabel="ident_file">
           <term><varname>ident_file</varname> (<type>string</type>)</term>
	   <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>ident_file</varname></primary>
           </indexterm>
             <para>
               Indique le fichier de configuration de l'authentification
               <application>ident</application> (appelé <filename>pg_ident.conf</filename>).
               Ce paramètre ne peut seulement être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>

         <varlistentry id="guc-external-pid-file"
           xreflabel="external_pid_file">
           <term><varname>external_pid_file</varname> (<type>string</type>)</term>
           <listitem>
           <indexterm>
             <primary>paramètre de configuration <varname>external_pid_file</varname></primary>
           </indexterm>
             <para>
               Indique le nom d'un fichier supplémentaire d'identifiant de
               processus (PID) créé par le serveur à l'intention des
	       programmes d'administration du serveur.
               Ce paramètre ne peut être initialisé qu'au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>
       </variablelist>

     <para>
       Dans une installation par défaut, aucun des paramètres ci-dessus n'est
       configuré explicitement. À la place, le répertoire des données est
       spécifié par l'option <option>-D</option> en ligne de commande ou par
       la variable d'environnement <envar>PGDATA</envar>. Les fichiers de
       configuration sont alors tous disponibles dans le répertoire des données.
     </para>

     <para>
       Pour conserver les fichiers de configuration dans un répertoire
       différent de data, l'option <option>-D</option> de la ligne de
       commande <command>postgres</command>
       ou la variable d'environnement <envar>PGDATA</envar> doit pointer sur le
       répertoire contenant les fichiers de configuration. Le paramètre
       <varname>data_directory</varname> doit alors être configuré dans le
       fichier <filename>postgresql.conf</filename> (ou sur la ligne de commande) pour
       préciser où est réellement situé le répertoire des données. 
       <varname>data_directory</varname> surcharge <option>-D</option> et
       <envar>PGDATA</envar> pour l'emplacement du répertoire des données,
       mais pas pour l'emplacement des fichiers de configuration.
     </para>

     <para>
       les noms des fichiers de configuration et leur emplacement peuvent
       être indiqués individuellement en utilisant les
       paramètres <varname>config_file</varname>, <varname>hba_file</varname> et/ou
       <varname>ident_file</varname>. <varname>config_file</varname> ne peut être
       indiqué que sur la ligne de commande de <command>postgres</command>
       mais les autres peuvent être placés dans le fichier de configuration
       principal. Si les trois paramètres et <varname>data_directory</varname> sont
       configurés explicitement, alors il n'est pas nécessaire d'indiquer
       <option>-D</option> ou <envar>PGDATA</envar>.
     </para>

     <para>
       Lors de la configuration de ces paramètres, un chemin relatif est
       interprété d'après le répertoire d'où est lancé <command>postgres</command>.
     </para>

   </sect1>

   <sect1 id="runtime-config-connection">
    <title>Connexions et authentification</title>

    <sect2 id="runtime-config-connection-settings">
     <title>Paramétrages de connexion</title>

     <variablelist>
     
       <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
         <term><varname>listen_addresses</varname> (<type>string</type>)</term>
         <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>listen_addresses</varname>
             </primary>
         </indexterm>
           <para>
             Indique les adresses TCP/IP sur lesquelles le serveur écoute
             les connexions des applications client. La valeur prend la forme
             d'une liste de noms d'hôte ou d'adresses IP numériques séparés
             par des virgules. L'entrée spéciale <literal>*</literal> correspond
             à toutes les interfaces IP disponibles. Si la liste est vide, le
             serveur n'écoute aucune interface IP, auquel cas seuls les
             sockets de domaine Unix peuvent être utilisés pour s'y connecter.
             La valeur par défaut est
	     <systemitem class="systemname">localhost</systemitem>, ce qui
	     n'autorise que les
             connexions locales de type <quote>loopback</quote>. Ce
	     paramètre ne peut être configuré qu'au lancement du serveur.
           </para>
         </listitem>
       </varlistentry>

       <varlistentry id="guc-port" xreflabel="port">
         <term><varname>port</varname> (<type>integer</type>)</term>
	 <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>port</varname></primary>
         </indexterm>
           <para>
             Le port TCP sur lequel le serveur écoute&nbsp;; 5432 par défaut.
             Le même numéro de port est utilisé pour toutes les
             adresses IP que lesquelles le serveur écoute. Ce paramètre ne peut
             être configuré qu'au lancement du serveur.
           </para>
         </listitem>
       </varlistentry>

       <varlistentry id="guc-max-connections" xreflabel="max_connections">
         <term><varname>max_connections</varname> (<type>integer</type>)</term>
      <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>max_connections</varname>
             </primary>
         </indexterm>
       <para>
        Indique le nombre maximum de connexions concurrentes au serveur de
        base de données. La valeur par défaut typique est 100 mais peut être
        moindre si les paramètres du noyau ne le supportent pas (ce qui est
        déterminé lors du <application>initdb</application>). Ce paramètre
	ne peut être initialisé qu'au lancement du serveur.
       </para>

       <para>
        Augmenter ce paramètre peut obliger <productname>PostgreSQL</productname>
        à réclamer plus de mémoire partagée
	<systemitem class="osname">System V</systemitem>
        ou de sémaphores que ne le permet la configuration par défaut du système
        d'exploitation. Voir la <xref linkend="sysvipc"/> pour plus
        d'informations sur la façon d'ajuster ces paramètres, si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-superuser-reserved-connections" xreflabel="superuser_reserved_connections">
      <term><varname>superuser_reserved_connections</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>superuser_reserved_connections</varname></primary>
      </indexterm>
       <para>
        Indique le nombre de connecteurs (<quote>slots</quote>) réservés
	aux connexions des superutilisateurs <productname>PostgreSQL</productname>.
	Au plus <xref linkend="guc-max-connections"/> connexions peuvent être
	actives simultanément. À chaque fois que le nombre de connexions
	simultanément actives atteint <varname>max_connections</varname> moins
	<varname>superuser_reserved_connections</varname>, les nouvelles
	connexions ne sont acceptées que pour les superutilisateurs.
       </para>

       <para>
        La valeur par défaut est 3. La valeur doit être plus petite que la
	valeur de <varname>max_connections</varname>. Ce paramètre ne peut
        être configuré qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-directory" xreflabel="unix_socket_directory">
       <term><varname>unix_socket_directory</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>unix_socket_directory</varname></primary>
       </indexterm>
         <para>
           Indique le répertoire du socket de domaine Unix sur lequel le
           serveur écoute les connexions des applications client. Par défaut,
           il s'agit de <filename>/tmp</filename> mais cela peut être
           modifié au moment de la construction. Ce paramètre ne peut
           être configuré qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
       <term><varname>unix_socket_group</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>unix_socket_group</varname>
           </primary>
       </indexterm>
         <para>
           Configure le groupe propriétaire du socket de domaine Unix
           (l'utilisateur propriétaire de la socket est toujours l'utilisateur
           qui lance le serveur). En combinaison avec le paramètre
           <varname>unix_socket_permissions</varname>, ceci peut être
           utilisé comme un mécanisme de contrôle d'accès supplémentaire pour
           les connexions de domaine Unix. Par défaut, il s'agit d'une
           chaîne vide, ce qui sélectionne le groupe par défaut de l'utilisateur
           courant. Ce paramètre n'est disponible qu'au lancement du
           serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
       <term><varname>unix_socket_permissions</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>unix_socket_permissions</varname></primary>
       </indexterm>
         <para>
           Configure les droits d'accès au socket de domaine Unix. Ce socket
           utilise l'ensemble habituel des droits du système de fichiers
           Unix. La spécification du paramètre est attendue dans le mode
           numérique avec la forme acceptée par les appels système
           <function>chmod</function> et <function>umask</function> (pour
           utiliser le format octal, ce nombre doit commencer avec un
           <literal>0</literal> (zéro)).
         </para>
  
         <para>
           Les droits par défaut sont <literal>0777</literal>, signifiant que
           tout le monde peut se connecter. Les alternatives raisonnables sont
           <literal>0770</literal> (utilisateur et groupe uniquement, voir
           aussi <varname>unix_socket_group</varname>) et
           <literal>0700</literal> (utilisateur uniquement) (pour un
           socket de domaine Unix, seul le droit d'accès en écriture
	   importe&nbsp;; il n'est donc pas nécessaire de donner ou de révoquer les
           droits de lecture ou d'exécution).
         </para>
  
         <para>
           Ce mécanisme de contrôle d'accès est indépendant de celui décrit
           dans le <xref linkend="client-authentication"/>.
         </para>
    
         <para>
           Ce paramètre n'est positionnable qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
      <term><varname>bonjour_name</varname> (<type>string</type>)</term>
       <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>bonjour_name</varname></primary>
      </indexterm>
         <para>
           Indique le nom du broadcast <productname>Bonjour</productname>.
           Le nom de l'ordinateur est utilisé si ce paramètre est configuré avec
           une chaîne vide (ce qui est la valeur par défaut). Ce paramètre est
	   ignoré si le serveur n'est pas compilé avec le support
	   <productname>Bonjour</productname>.
           Cette option n'est configurable qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
      <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>tcp_keepalives_idle</varname></primary>
      </indexterm>
       <para>
        Sur les systèmes supportant l'option de socket <symbol>TCP_KEEPIDLE</symbol>,
	indique le nombre de secondes avant l'envoi de signaux
	<quote>keepalives</quote> sur une connexion silencieuse
	(<foreignphrase>idle</foreignphrase>). La valeur 0 permet d'utiliser
	celle par défaut du système. Si <symbol>TCP_KEEPIDLE</symbol> n'est
	pas supporté, ce paramètre doit
	valoir 0. Ce paramètre est ignoré pour les connexions réalisées via un
	socket de domaine Unix.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
      <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>tcp_keepalives_interval</varname></primary>
      </indexterm>
       <para>
        Sur les systèmes supportant l'option de socket <symbol>TCP_KEEPINTVL</symbol>,
	indique le temps, en secondes, d'attente d'une réponse à un
	<quote>keepalive</quote> avant de retransmettre. La valeur 0 permet
	d'utiliser celle par défaut du système. Si <symbol>TCP_KEEPINTVL</symbol>
	n'est pas supporté, ce paramètre doit valoir 0. Ce paramètre est ignoré
	pour les connexions réalisées via un socket de domaine Unix.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
      <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>tcp_keepalives_count</varname></primary>
      </indexterm>
       <para>
        Sur les systèmes supportant l'option socket <symbol>TCP_KEEPCNT</symbol>,
	indique le nombre de <quote>keepalive</quote> qui peuvent être perdus avant
	de considérer que la connexion est tombée. La valeur 0 permet d'utiliser
	celle par défaut du système. Si <symbol>TCP_KEEPCNT</symbol> n'est
	pas supporté, ce paramètre doit valoir 0. Ce paramètre est ignoré pour
	les connexions réalisées via un socket de domaine Unix.
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
     </sect2>
     <sect2 id="runtime-config-connection-security">
     <title>Sécurité et authentification</title>
     
     <variablelist>
     <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
      <term><varname>authentication_timeout</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm><primary>délai</primary><secondary>authentification client</secondary></indexterm>
      <indexterm><primary>authentification client</primary><secondary>délai lors de</secondary></indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>authentication_timeout</varname></primary>
      </indexterm>
       <para>
        Temps maximum pour terminer l'authentification du client en
        secondes. Si un client n'a pas terminé le protocole d'authentification
        dans ce délai, le serveur rompt la connexion. Ceci protège le serveur
	des clients bloqués occupant une connexion indéfiniment. La valeur par
	défaut est de 60 secondes.
	Cette option est configurable au lancement du serveur et dans le fichier
        <filename>postgresql.conf</filename>. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl" xreflabel="ssl">
       <term><varname>ssl</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>ssl</varname></primary>
       </indexterm>
         <para>
          Active les connexions <acronym>SSL</acronym>. Lire la
	  <xref linkend="ssl-tcp"/> avant de l'utiliser. Désactivé par défaut.
          Ce paramètre n'est configurable qu'au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-password-encryption"
       xreflabel="password_encryption">
       <term><varname>password_encryption</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>password_encryption</varname> 
           </primary>
       </indexterm>
         <para>
           Ce paramètre détermine si le mot de passe doit être chiffré quand un
	   mot de passe est indiqué dans
	   <xref linkend="sql-createuser" endterm="sql-createuser-title"/> ou
	   <xref linkend="sql-alteruser" endterm="sql-alteruser-title"/> sans
	   qu'il soit précisé <literal>ENCRYPTED</literal> ou
	   <literal>UNENCRYPTED</literal>. Actif par défaut (chiffre le mot de passe).
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
       <term><varname>krb_server_keyfile</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>krb_server_keyfile</varname>
           </primary>
       </indexterm>
         <para>
           Configure l'emplacement du fichier contenant la clé secrète du
           serveur Kerberos. Voir la <xref linkend="kerberos-auth"/> pour les
           détails. Ce paramètre ne peut être configuré qu'au lancement
	   du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-srvname" xreflabel="krb_srvname">
      <term><varname>krb_srvname</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>krb_srvname</varname></primary>
      </indexterm>
       <para>
        Configure le nom du service Kerberos. Voir la <xref linkend="kerberos-auth"/>
        pour les détails. Ce paramètre ne peut être configuré qu'au lancement
	du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-hostname" xreflabel="krb_server_hostname">
      <term><varname>krb_server_hostname</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>krb_server_hostname</varname></primary>
      </indexterm>
       <para>
        Configure la partie du nom de l'hôte du service principal.
        Ceci, combiné avec <varname>krb_srvname</varname>, est utilisé pour
	engendrer le service principal complet, c'est-à-dire
        <varname>krb_srvname</varname><literal>/</literal><varname>krb_server_hostname</varname><literal>@</literal>REALM.
        Sans configuration, le comportement par défaut autorise tout service
        principal correspondant à une entrée dans la table des clés. Voir la
	<xref linkend="kerberos-auth"/> pour les détails. Ce paramètre ne peut
        être configuré qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>krb_caseins_users</varname></primary>
      </indexterm>
       <para>
        Indique si les noms des utilisateurs Kerberos doivent être traités en
	respectant la casse. Par défaut inactif (insensible à la casse, valeur
	<literal>off</literal>), ce paramètre ne peut être configuré qu'au
	lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

<!-- ICI -->
     <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
       <term><varname>db_user_namespace</varname> (<type>boolean</type>)</term>
      <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>db_user_namespace</varname></primary>
       </indexterm>
       <para>
        Ce paramètre active les noms d'utilisateur par base de données. Il est
	désactivé par défaut.
	Ce paramètre ne peut être configuré que dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>

       <para>
        Si ce paramètre est activé, vous devrez créer des utilisateurs de nom
        <literal>nomutilisateur@nom_base</literal>. Quand <literal>nomutilisateur</literal>
        est passé pour un client en cours de connexion, <literal>@</literal> et le nom
        de la base de données sont ajoutés au nom de l'utilisateur et ce nom
        d'utilisateur spécifique à la base de données est recherché dans le
        serveur. Notez que lorsque vous créez des utilisateurs dont le nom
        contient un <literal>@</literal> dans l'environnement SQL, vous devez mettre le
        nom entre guillemets.
       </para>

       <para>
        Ce paramètre activé, vous pouvez toujours créer des utilisateurs
        globaux ordinaires. Ajoutez simplement <literal>@</literal> lors de la
        spécification du nom du client. Le <literal>@</literal> sera supprimé avant de
        chercher le nom de l'utilisateur dans le serveur.
       </para>

       <note>
        <para>
         Cette fonctionnalité est temporaire jusqu'à ce qu'une solution
        complète soit trouvée. Ce paramètre sera supprimé.
        </para>
       </note>
      </listitem>
     </varlistentry>

    </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-resource">
    <title>Consommation de ressources</title>

    <sect2 id="runtime-config-resource-memory">
     <title>Mémoire</title>

     <variablelist>
     <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
      <term><varname>shared_buffers</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>shared_buffers</varname></primary>
      </indexterm>
       <para>
        Initialise le nombre de tampons en mémoire partagée utilisés par le
        serveur de bases de données. La valeur par défaut est de 4000 mais
        pourrait être moindre si la configuration de votre noyau ne le supporte
        pas (c'est déterminé lors de l'exécution d'<application>initdb</application>).
        Chaque tampon fait 8192 octets sauf si une valeur différente de
	<symbol>BLCKSZ</symbol> a été choisie lors de la construction du serveur. Ce
        paramétrage doit valoir au moins 16, mais aussi au moins deux fois la
	valeur de <xref linkend="guc-max-connections"/>&nbsp;; néanmoins, des
        valeurs significativement plus importantes que ce minimum sont
        généralement nécessaires pour de bonnes performances. Des valeurs de
        quelques milliers sont recommandées pour des installations de
        production. Ce paramètre n'est initialisable qu'au lancement du serveur.
       </para>

       <para>
        Augmenter ce paramètre pourrait faire en sorte que
        <productname>PostgreSQL</productname> réclame plus de mémoire partagé <systemitem
        class="osname">System V</systemitem> que ce que la configuration par défaut de
        votre système d'exploitation ne peut gérer. Voir la <xref
        linkend="sysvipc"/> pour plus d'informations sur l'ajustement de ces
        paramètres si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
      <term><varname>temp_buffers</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>temp_buffers</varname></primary>
      </indexterm>
       <para>
        Configure le nombre maximum de tampons temporaires utilisés par chaque
	session de la base de données. Ce sont des tampons locaux au niveau de
	la session utilisés seulement pour accéder aux tables temporaires. La
	valeur par défaut est 1000. Ce paramètre peut être modifié à l'intérieur
	des sessions individuelles mais seulement jusqu'à la première
	utilisation des tables temporaires dans une session&nbsp;; les tentatives
	suivantes de changement de cette valeur n'auront pas d'effet sur cette
	session.
       </para>

       <para>
        Une session alloue les tampons temporaires nécessaires jusqu'à atteindre
	la limite donnée par <varname>temp_buffers</varname>. Le coût dû à une grosse
	valeur dans les sessions qui n'ont pas réellement besoin de beaucoup de
	tampons temporaires est seulement d'un descripteur de tampon, soit
	environ 64 octets, par incrément dans <varname>temp_buffers</varname>. Néanmoins,
	si un tampon est réellement utilisé, 8192 autres octets seront consommés
	pour ce dernier (ou, plus généralement, <symbol>BLCKSZ</symbol> octets).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
      <term><varname>max_prepared_transactions</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_prepared_transactions</varname></primary>
      </indexterm>
       <para>
        Configure le nombre maximum de transactions pouvant être dans l'état
        <quote>préparées</quote> simultanément (voir <xref
        linkend="sql-prepare-transaction"
        endterm="sql-prepare-transaction-title"/>). Configurer ce paramètre à
	zéro désactive la fonctionnalité des transactions préparées. La valeur
	par défaut est de 5. Ce paramètre peut seulement être
	configurée au lancement du serveur.
       </para>

       <para>
        Si vous n'utilisez pas les transactions préparées, ce paramètre peut
	valoir zéro. Si vous les utilisez, vous voudrez
	probablement que <varname>max_prepared_transactions</varname> soit au
	moins aussi important que <xref linkend="guc-max-connections"/> pour
	éviter des échecs involontaires à l'étape de préparation.
       </para>

       <para>
        Augmenter ce paramètre peut faire que <productname>PostgreSQL</productname> réclame
	plus de mémoire partagée <systemitem class="osname">System V</systemitem> que ne
	le permet la configuration par défaut de votre système d'exploitation.
	Voir la <xref linkend="sysvipc"/> pour des informations sur la façon
	d'ajuster ces paramètres, si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-work-mem" xreflabel="work_mem">
       <term><varname>work_mem</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>work_mem</varname></primary>
       </indexterm>
         <para>
           Spécifie la mémoire à utiliser pour les opérations de tri interne
           et pour les tables de découpage avant de basculer sur des fichiers
           temporaires sur disque. La valeur est spécifiée en Ko et vaut par
           défaut 1024 (soit 1&nbsp;Mo). Notez que pour une requête complexe,
           plusieurs tris ou opérations de hachage pourraient être exécutés en
           parallèle&nbsp;; chacun d'entre eux se verra autorisé à utiliser
           autant de mémoire que cette valeur indique avant de commencer à
           placer des données dans des fichiers temporaires. De plus,
           plusieurs sessions en cours d'exécution pourraient exécuter des
           opérations simultanément. Donc, la mémoire totale utilisée pourrait
           être plusieurs fois la valeur de <varname>work_mem</varname>&nbsp;;
           il est nécessaire de conserver ce fait en tête lors du choix de cette
           valeur. Les opérations de tri sont utilisées pour <literal>ORDER
           BY</literal>, <literal>DISTINCT</literal> et les jointures d'assemblage. Les
           tables de découpage sont utilisées dans les jointures de découpage,
           les agrégations basées sur le découpage et le traitement des
           sous-requêtes <literal>IN</literal>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-maintenance-work-mem" 
       xreflabel="maintenance_work_mem">
       <term><varname>maintenance_work_mem</varname>
         (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration 
           <varname>maintenance_work_mem</varname></primary>
       </indexterm>
         <para>
           Spécifie la mémoire maximum utilisée dans les opérations de
           maintenance telles que <command>VACUUM</command>, <command>CREATE
           INDEX</command> et <command>ALTER TABLE ADD FOREIGN KEY</command>. La valeur est
           spécifiée en Ko et vaut par défaut 16384 (soit 16&nbsp;Mo). Comme
           une seule de ces opérations peut être exécutée à un moment donné
           sur une session de la base de données et qu'une installation n'en
           exécute pas beaucoup en même temps, il est possible d'initialiser
           cette variable à une valeur bien plus importante que 
           <varname>work_mem</varname>. De gros paramétrages pourraient
           améliorer les performances sur les opérations VACUUM et pour la
           restauration des sauvegardes de bases de données.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
       <term><varname>max_stack_depth</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_stack_depth</varname>
           </primary>
         </indexterm>
         <para>
           Spécifie la profondeur maximum de la pile d'exécution du serveur.
           La configuration idéale pour ce paramètre est la limite actuelle
           de la pile forcée par le noyau (configurée par <literal>ulimit
           -s</literal> ou une commande locale équivalente), moins une marge de
           sécurité d'un Mo ou plus. La marge de sécurité est nécessaire
           parce que la profondeur de la pile n'est pas vérifiée dans chaque
           routine du serveur mais seulement dans les routines clés
           potentiellement récursives telles que l'évaluation d'une
           expression. Le  paramétrage par défaut est de 2048&nbsp;Ko (soit
	       2&nbsp;Mo), ce qui est très petit et comporte peu de risques.
	       Néanmoins, cela pourrait être trop petit pour autoriser l'exécution
	       de fonctions complexes. Seuls les superutilisateurs peuvent modifier
	       ce paramètre.
         </para>

         <para>
           Configurer ce paramètre à une valeur plus importante que la limite
	       réelle du noyau signifiera qu'une fonction récursive peut arrêter
	       brutalement un processus serveur individuel. Sur les plateformes où
           <productname>PostgreSQL</productname> peut déterminer la limite du
           noyau, il ne vous laissera pas configurer cette variable à une valeur
           inadéquate. Néanmoins, toutes les plateformes ne fournissent pas
           cette information, donc faites attention en choisissant une valeur.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-resource-fsm">
     <title>Carte de l'espace libre (<foreignphrase>Free Space
      Map</foreignphrase>)</title>

     <indexterm>
      <primary>carte de l'espace libre</primary>
     </indexterm>

     <para>
      Ces paramètres contrôlent la taille de la <firstterm>carte de l'espace
      libre</firstterm> partagé, carte qui garde trace des emplacements inutilisés dans
      la base de données. Une carte de l'espace libre trop petite pourrait faire
      en sorte que la base de données se mette à consommer une place de plus en
      plus importante dans l'espace disque car l'espace libre qui n'est pas dans
      la carte ne peut pas être ré-utilisée&nbsp;; à la place,
      <productname>PostgreSQL</productname> demandera plus d'espace disque au système
      d'exploitation lorsqu'il aura besoin de stocker de nouvelles données.
      Les quelques dernières lignes affichées suite à une commande
      <command>VACUUM VERBOSE</command> sur la base entière peut aider à déterminer si
      les paramètres en cours sont adéquats. Un message <literal>NOTICE</literal> est
      aussi affiché lors d'une telle opération si les paramètres en cours sont
      trop bas.
     </para>

     <para>
      Augmenter ce paramètre pourrait faire que <productname>PostgreSQL</productname>
      réclame plus de mémoire partagée <systemitem class="osname">System V</systemitem>
      ou de sémaphores que ne le permet la configuration par défaut de votre système
      d'exploitation. Voir la <xref linkend="sysvipc"/> pour plus
      d'informations sur la façon d'ajuster ces paramètres si nécessaire.
     </para>

     <variablelist>
     <varlistentry id="guc-max-fsm-pages" xreflabel="max_fsm_pages">
      <term><varname>max_fsm_pages</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>max_fsm_pages</varname></primary>
      </indexterm>
       <para>
        Initialise le nombre maximum de pages disque pour lesquelles les
        espaces libres sont tracés dans la carte partagée des espaces libres.
        Six octets de mémoire partagée sont consommés pour chaque emplacement
        de page. Ce paramétrage doit être supérieur à
	16&nbsp;*&nbsp;<varname>max_fsm_relations</varname>. La valeur par
	défaut est choisie
	par <application>initdb</application> suivant la quantité de mémoire
	disponible et peut aller de 20000 à 200000.
        Ce paramètre n'est configurable qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-fsm-relations" xreflabel="max_fsm_relations">
      <term><varname>max_fsm_relations</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>max_fsm_relations</varname></primary>
      </indexterm>
       <para>
        Initialise le nombre maximum de relations (tables et index) pour
	lesquelles
        les espaces libres sont tracés dans la carte partagée de l'espace
        libre. En gros, 70 octets de mémoire partagée sont consommés par
        emplacement. La valeur par défaut est de 1000.
        Ce paramètre n'est configurable qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-resource-kernel">
     <title>Usage des ressources du noyau</title>
     <variablelist>

     <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>shared_preload_libraries</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Cette variable indique les bibliothèques partagées à
	charger au lancement du serveur. Si plus d'une bibliothèque est
	indiquée, séparez leur nom avec des virgules. Par exemple,
        <literal>'$libdir/malib'</literal> chargera
	<literal>malib.so</literal> (ou, sur certaines plateformes,
	<literal>malib.sl</literal>) à partir du répertoire d'installation
	des bibliothèques standard. Ce paramètre est seulement configurable
	au lancement du serveur.
       </para>

       <para>
        Les bibliothèques des langages de procédures
	<productname>PostgreSQL</productname> peuvent être chargées ainsi,
	typiquement en utilisant la syntaxe <literal>'$libdir/plXXX'</literal>
	où <literal>XXX</literal> est <literal>pgsql</literal>, <literal>perl</literal>,
	<literal>tcl</literal> ou <literal>python</literal>.
       </para>

       <para>
        En préchargeant une bibliothèque partagée, le temps de chargement de la
	bibliothèque à sa première utilisation est évitée. Néanmoins, la durée
	de lancement de chaque nouveau processus serveur pourrait augmenter
	légèrement, même si aucun de ces processus n'utilise la bibliothèque.
	Donc, ce paramètre est seulement recommandé pour les bibliothèques
	qui seront utilisées dans la plupart des sessions.
       </para>

       <para>
        Si une bibliothèque indiquée est introuvable, le lancement du serveur
	échouera.
       </para>

       <para>
        Chaque bibliothèque supportée par PostgreSQL a un <quote>bloc
	magique</quote> qui est vérifié pour garantir la compatibilité. Pour
	cette raison, les bibliothèques non PostgreSQL ne peuvent pas être
	chargées de cette façon.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-preload-libraries" xreflabel="preload_libraries">
      <term><varname>preload_libraries</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>preload_libraries</varname></primary>
      </indexterm>
       <para>
        Cette variable spécifie une ou plusieurs bibliothèques préchargées au
        lancement du serveur. Une fonction d'initialisation sans paramètre peut
        être appelée pour chaque bibliothèque. Pour cela, ajouter un caractère 
        deux points et le nom de la fonction d'initialisation après le nom de la
        bibliothèque. Par exemple, <literal>'$libdir/malib:malib_init'</literal>
        causerait le préchargement de <literal>malib</literal> et l'exécution de
        <literal>malib_init</literal>. Si plus d'une bibliothèque doit être chargée,
        séparez leur nom par des virgules.
       </para>

       <para>
        Si une bibliothèque spécifique ou une fonction d'initialisation sont
	introuvables, le serveur échouera au lancement.
       </para>

       <para>
        Les bibliothèques des langages de procédure de
        <productname>PostgreSQL</productname> peuvent être préchargées de
        cette façon, typiquement en utilisant la syntaxe
        <literal>'$libdir/plXXX:plXXX_init'</literal> où
        <literal>XXX</literal> est soit <literal>pgsql</literal> soit
        <literal>perl</literal> soit <literal>tcl</literal> soit <literal>python</literal>.
       </para>

       <para>
        En préchargeant une bibliothèque partagée (et en l'initialisant dans
        les cas applicables), le temps de lancement de la bibliothèque est
        évité à la première utilisation de la bibliothèque. Néanmoins, le temps
        de lancer chaque nouveau processus pourrait augmenter légèrement même si
	le processus n'utilise pas la bibliothèque. Donc, ce paramètre est
	seulement recommandé pour les bibliothèques qui seront utilisées par
	la majorité des sessions.
       </para>
      </listitem>
    </varlistentry>

   </variablelist>
</sect2>

    <sect2 id="runtime-config-resource-vacuum-cost">
     <title id="runtime-config-resource-vacuum-cost-title">
      Délais du VACUUM basé sur le coût
     </title>

     <para>
      Lors de l'exécution des commandes <xref linkend="sql-vacuum"
      endterm="sql-vacuum-title"/> et de <xref linkend="sql-analyze"
      endterm="sql-analyze-title"/>, le système maintient un compteur interne
      conservant la trace du coût estimé des différentes opérations
      d'entrées/sorties réalisées. Quand le coût accumulé atteint une limite
      (spécifiée par <varname>vacuum_cost_limit</varname>), le processus
      traitant l'opération s'arrêtera un moment (spécifié par
      <varname>vacuum_cost_delay</varname>). Puis, il réinitialisera le compteur
      et continuera l'exécution.
     </para>

      <para>
	Le but de cette fonctionnalité est d'autoriser les administrateurs à
	réduire l'impact des entrées/sorties de ces commandes suivant l'activité
	des bases de données. Il existe un grand nombre de situations pour
	lesquelles ceci n'est pas très important mais les commandes de
	maintenance quand <command>VACUUM</command> et <command>ANALYZE</command>
	se finissent rapidement&nbsp;; néanmoins, il est généralement très
	important que ces commandes n'interfèrent pas de façon significative
	sur la capacité du système à réaliser d'autres opérations sur les bases
	de données. Un délai du VACUUM basé sur le coût fournit un moyen aux
	administrateurs pour y parvenir.
      </para>

      <para>
        Cette fonctionnalité est désactivée par défaut. Pour l'activer,
	initialisez la variable <varname>vacuum_cost_delay</varname> à une valeur
	différente de zéro.
      </para>

      <variablelist>
        <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
          <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_delay</varname></primary>
          </indexterm>
            <para>
              Le temps, en millisecondes, de repos du processus quand la limite
	      de coût a été atteinte. La valeur par défaut vaut 0, ce qui
	      désactive la fonctionnalité du délai du VACUUM basé sur le coût.
	      Une valeur positive active cette fonctionnalité. Notez que, sur
	      plusieurs systèmes, la résolution réelle des délais de repos est de
	      10&nbsp;millisecondes&nbsp;; configurer <varname>vacuum_cost_delay</varname>
	      à une valeur qui n'est pas un multiple de 10 pourrait avoir le
	      même résultat que de le configurer au prochain multiple de 10.
            </para>
          </listitem>
        </varlistentry>
      
        <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
          <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_hit</varname></primary>
          </indexterm>
            <para>
              Le coût estimé pour nettoyer via VACUUM un tampon trouvé dans le
	      cache des tampons partagés. Cela représente le coût pour
	      verrouiller le lot de tampons, la recherche dans la table de
	      découpage partagée et le parcours du contenu de la page. La valeur
	      par défaut vaut 1.
            </para>
          </listitem>
        </varlistentry>
    
        <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
          <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_miss</varname></primary>
          </indexterm>
            <para>
              Le coût estimé pour nettoyer via VACUUM un tampon qui doit être lu
	      sur le disque. Ceci représente l'effort pour verrouiller le lot de
	      tampons, la recherche dans la table de découpage partagée, la
	      lecture du bloc désiré du disque et le parcours de son contenu. La
	      valeur par défaut vaut 10.
            </para>
          </listitem>
        </varlistentry>
  
        <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
          <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_dirty</varname></primary>
          </indexterm>
            <para>
              Le coût estimé chargé quand VACUUM modifie un bloc qui était
	      précédemment propre. Cela représente les entrées/sorties
	      supplémentaires requis pour vider le bloc sale de nouveau sur le
	      disque. La valeur par défaut vaut 20.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
          <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_limit</varname></primary>
          </indexterm>
            <para>
              Le coût accumulé qui causera l'endormissement du processus de
	      VACUUM. La valeur par défaut vaut 200.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>
          Certaines opérations contenant des verrous critiques devraient se
	  terminer aussi rapidement que possible. Les délais de VACUUM basés
	  sur le coût ne surviennent pas pendant ces opérations. Du coup, il
	  est possible que le coût accumulé soit bien plus important que la
	  limite spécifiée. Pour éviter des délais inutilement longs dans de
	  tels cas, le délai réel est calculé de la façon suivante&nbsp;:
	  <varname>vacuum_cost_delay</varname> * <varname>accumulated_balance</varname> /
	  <varname>vacuum_cost_limit</varname> avec un maximum de
	  <varname>vacuum_cost_delay</varname> * 4.
        </para>
      </note>

    </sect2>

    <sect2 id="runtime-config-resource-background-writer">
      <title>Écriture en tâche de fond</title>
  
      <para>
        À partir de <productname>PostgreSQL</productname> 8.0, il existe un processus
        serveur séparé pour l'<firstterm>écriture en tâche de fond</firstterm>, dont la
        seule fonction est de lancer les écritures des tampons partagés
        <quote>sales</quote>.  Le but est que les processus serveur gérant les
        requêtes des utilisateurs doivent déléguer ou n'avoir jamais à attendre
	la fin d'une écriture car le processus d'écriture en tâche de fond s'en
	chargera. Cet arrangement réduit aussi la pénalité de performance
	associée avec les points de vérification. Le processus d'écriture en
	tâche de fond vérifiera en contenu les pages sales pour les écrire sur
	le disque, de façon à ce que seules quelques pages doivent être forcées
	en écriture lorsque survient le point de vérification, à la place d'un
	déluge d'écritures de tampons sales ne se faisant qu'à chaque point de
	vérification. Néanmoins, il y a une nette augmentation dans la charge des
	entrées/sorties parce que, là où une page souvent sale n'aurait été
	écrite qu'une seule fois par intervalle de point de vérification, le
	processus d'écriture en tâche de fond l'aurait écrite plusieurs fois
	dans la même période. Dans la plupart des situations, un chargement lent
	continu est préférable à des pointes périodiques mais les paramètres
	discutés dans cette sous-section peuvent être utilisés pour configurer
	finement le comportement pour les besoins locaux.
      </para>

      <variablelist>
        <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
          <term><varname>bgwriter_delay</varname> (<type>integer</type>)</term>
	  <listitem>
          <indexterm>
            <primary>paramètre de configuration <varname>bgwriter_delay</varname></primary>
          </indexterm>
            <para>
              Spécifie le délai entre les tours d'activité du processus
	      d'écriture en tâche de fond. À chaque tour, le processus
	      écrit un certain nombre de tampons sales (contrôlable par les
	      paramètres suivants). Puis, il s'endort pour <varname>bgwriter_delay</varname>
	      millisecondes et recommence. La valeur par défaut est de 200.
	      Notez que sur de nombreux systèmes, la résolution réelle des
	      délais de sommeil est de 10&nbsp;millisecondes&nbsp;; configurer
	      <varname>bgwriter_delay</varname> à une valeur qui n'est pas un multiple
	      de 10 pourrait avoir le même résultat que de le configurer au
	      multiple de 10 supérieur.
	      Ce paramètre peut seulement être configuré dans le fichier
	      <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
            </para>
          </listitem>
        </varlistentry>

      <varlistentry id="guc-bgwriter-lru-percent" xreflabel="bgwriter_lru_percent">
       <term><varname>bgwriter_lru_percent</varname> (<type>floating point</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_lru_percent</varname></primary>
       </indexterm>
        <para>
         Pour réduire la probabilité que les processus serveur aient besoin
	 de lancer leur propre écriture, la tâche de fond d'écriture essaie
	 d'écrire les tampons qui ont une chance d'être rapidement recyclés.
	 À chaque tour, elle examine jusqu'à <varname>bgwriter_lru_percent</varname>
	 des tampons les plus proches du recyclage et écrit tout ce qui est à
	 mettre à jour. La valeur par défaut est 1,0 (ceci est un pourcentage du
	 nombre total de tampons partagés).
	 Ce paramètre peut seulement être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
       <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_lru_maxpages</varname></primary>
       </indexterm>
        <para>
         À chaque tour, ce nombre maximum de tampons sera écrit suite au
	 parcours des prochains tampons à recycler. La valeur par défaut est de
	 5.
	 Ce paramètre peut seulement être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-all-percent" xreflabel="bgwriter_all_percent">
       <term><varname>bgwriter_all_percent</varname> (<type>floating point</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_all_percent</varname></primary>
       </indexterm>
        <para>
         Pour réduire la quantité de travail nécessaire à chaque point de
	 vérification, la tâche d'écriture en arrière plan fait aussi un
	 parcours circulaire de l'ensemble des tampons, écrivant les tampons
	 à mettre à jour. À chaque tour, il examine au plus
         <varname>bgwriter_all_percent</varname> des tampons dans ce but. La valeur par
	 défaut est de 0,333 (ceci le pourcentage du nombre total de tampons
	 partagés). Avec le paramètre par défaut <varname>bgwriter_delay</varname>,
	 ceci permettra le parcours de l'ensemble de tampons une fois par minute.
	 Ce paramètre peut seulement être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-all-maxpages" xreflabel="bgwriter_all_maxpages">
       <term><varname>bgwriter_all_maxpages</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>bgwriter_all_maxpages</varname></primary>
       </indexterm>
        <para>
         À chaque tour, ce nombre maximum de tampons sera écrit suite au
	 parcours de tous les tampons. (Si cette limite est atteinte, le
	 parcours s'arrête et recommence au prochain tampon la prochaine fois.)
	 La valeur par défaut est de 5.
	 Ce paramètre peut seulement être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>
      </variablelist>

      <para>
        Des valeurs plus petites de <varname>bgwriter_all_percent</varname> et
        <varname>bgwriter_all_maxpages</varname> réduiront la charge supplémentaire
	en entrées/sorties causée par le processus d'écriture en tâche de fond
	mais laisseront plus de travail aux points de vérification. Pour réduire
	les pointes de chargements aux points de vérification, augmentez ces deux
	valeurs. Pour désactiver totalement le processus en d'écriture en tâche
	de fond, configurez les deux valeurs <varname>maxpages</varname> et/ou
	les deux <varname>percent</varname> à zéro.
      </para>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-wal">
    <title>Write Ahead Log</title>

   <para>
    Voir aussi la <xref linkend="wal-configuration"/> pour des détails sur la
    configuration pointue des WAL.
   </para>

    <sect2 id="runtime-config-wal-settings">
     <title>Paramétrages</title>
     <variablelist>
     
     <varlistentry id="guc-fsync" xreflabel="fsync">
      <term><varname>fsync</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>fsync</varname></primary>
      </indexterm>
       <para>
        Si ce paramètre est activé, le serveur <productname>PostgreSQL</productname>
        tentera de s'assurer que les mises à jour sont écrites physiquement
        sur le disque en exécutant les appels système <function>fsync()</function>
        ou différentes méthodes équivalentes (voir <xref
        linkend="guc-wal-sync-method"/>). Ceci vous assure que le groupe de
        bases de données retournera à un état cohérent après un arrêt brutal
        du système d'exploitation ou suite à un problème matériel.
       </para>

       <para>
        Néanmoins, utiliser <varname>fsync()</varname> implique des coûts au
        niveau performance&nbsp;: lorsqu'une transaction est validée,
        <productname>PostgreSQL</productname> doit attendre que le système
        d'exploitation vide les WAL sur disque. Lorsque <varname>fsync</varname>
        est désactivé, le système d'exploitation est autorisé à faire de son
        mieux en utilisant des tampons pour les écritures, en ordonnant et en
        ajoutant des délais aux écritures. Néanmoins, si le système s'arrête
        brutalement, les résultats des dernières transactions validées
        pourraient être perdus en partie ou complètement. Dans le pire des cas,
        une corruption non récupérable des données pourrait survenir
	(les arrêts brutaux du serveur de bases de données lui-même ne sont
	<emphasis>pas</emphasis> un facteur de risque ici. Seul l'arrêt brutal au niveau du
	système d'exploitation crée un risque de corruption).
       </para>

       <para>
        À cause des risques encourus, il n'existe pas de paramétrage universel
        pour <varname>fsync</varname>. Certains administrateurs désactivent en
        permanence <varname>fsync</varname> alors que d'autres ne le 
        désactivent que pour les charges initiales importantes de données
        s'il existe un moyen de recommencer proprement si quelque chose se
        passe mal. D'autres laissent toujours <varname>fsync</varname>
        activé. La valeur par défaut
        est d'activer <varname>fsync</varname> pour une confiance maximale. Si
        vous avez confiance en votre système d'exploitation (ou sur la
        sauvegarde sur batterie), vous pouvez considérer la désactivation de
        <varname>fsync</varname>.
       </para>

       <para>
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Si vous désactivez ce paramètre (<literal>off</literal>), considérez aussi
	la désactivation de <xref linkend="guc-full-page-writes"/>.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
      <term><varname>wal_sync_method</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_sync_method</varname></primary>
      </indexterm>
       <para>
        Méthode utilisée pour forcer les mises à jour des WAL sur le disque.
        Si <varname>fsync</varname> est désactivé, alors ce paramètre est
        inapplicable car les mises à jour ne seront pas du tout forcées. Les
        valeurs possibles sont&nbsp;:
       </para>
       <itemizedlist>
        <listitem>
        <para>
         <literal>open_datasync</literal> (écrit les fichiers WAL avec l'option 
         <symbol>O_DSYNC</symbol> de <function>open()</function>)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fdatasync</literal> (appelle <function>fdatasync()</function> à chaque
         validation)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fsync_writethrough</literal> (appelle <function>fsync()</function> à chaque
         validation, forçant une écriture de tous les caches disque)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fsync</literal> (appelle <function>fsync()</function> à chaque validation)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>open_sync</literal> (écrit les fichiers WAL avec l'option
         <symbol>O_SYNC</symbol> de <function>open()</function>)
        </para>
        </listitem>
       </itemizedlist>
       <para>
        Toutes ces options ne sont pas disponibles sur toutes les plateformes.
        La valeur par défaut correspond à la première méthode supportée de la
        liste ci-dessus par la plateforme.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
      <term><varname>full_page_writes</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>full_page_writes</varname></primary>
      </indexterm>
       <para>
        Quand ce paramètre est activé, le serveur <productname>PostgreSQL</productname>
        écrit le contenu entier de chaque page disque sur un WAL lors de la
        première modification de cette page intervenant après un point de
        vérification.
        Ceci est nécessaire car une page en cours d'écriture lors d'un arrêt
	brutal du serveur pourrait être seulement partiellement effectuée,
	résultant en une page contenant un mixe de données obsolètes et de
	données nouvelles. Les données modifiées au niveau ligne stockées
	habituellement dans les WAL ne seront pas suffisantes pour restaurer
	complètement une telle page lors de la restauration. Stocker l'image
	complète de la page garantie que la page pourra être restaurée
	entièrement, mais au prix d'un accroissement de la quantité de
	données à écrire dans les WAL (car rejouer les WAL commence toujours
	à un point de vérification, il est suffisant de le faire lors de la
	première modification de chaque page après un point de vérification.
	Du coup, une façon de réduire le coût de l'écriture de pages complètes
	est d'augmenter les paramètres d'intervalle des points de vérification).
       </para>

       <para>
        Désactiver ce paramètre accélère les opérations normales mais pourrait
	résulter en une base corrompue après un arrêt brutal du système
	d'exploitation ou une coupure de courant. Les risques sont similaires à
	la désactivation de <varname>fsync</varname>, bien que moindre. Il
	pourrait être plus sûr de désactiver ce paramètre si vous avez du
	matériel (comme un contrôleur disque sur batterie) ou un logiciel pour
	le système de fichiers qui réduit le risque d'écriture de pages
	partielles à un niveau suffisament bas (par exemple ReiserFS 4).
       </para>

       <para>
        Désactiver ce paramètre n'affecte pas l'utilisation de l'archivage des
	WAL pour la récupération à un point donné, aussi appelé <acronym>PITR</acronym>
        (voir <xref linkend="continuous-archiving"/>).
       </para>

       <para>
        Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Activé par défaut (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
       <term><varname>wal_buffers</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>wal_buffers</varname></primary>
       </indexterm>
         <para>
         Nombre de tampons de pages disque alloués en mémoire partagée pour les
	 données WAL. La valeur par défaut vaut 8. Ce paramétrage a seulement
	 besoin d'être assez important pour contenir toutes les données WAL
	 générées par une transaction typique car la donnée est envoyée sur le
	 disque à chaque validation de transaction.
	 Ce paramètre est seulement disponible au lancement du serveur.
         </para>

       <para>
        Augmenter ce paramètre peut causer une demande plus importante de
	tampons partagés <systemitem class="osname">System V</systemitem> par
	<productname>PostgreSQL</productname>, plus que ne le permet la configuration
	par défaut de votre système d'exploitation. Voir la <xref
	linkend="sysvipc"/> pour des informations sur la façon d'ajuster ces
	paramètres, si nécessaire.
       </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
       <term><varname>commit_delay</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>commit_delay</varname>
           </primary>
       </indexterm>
         <para>
           Délai entre l'enregistrement d'une validation dans le tampon WAL
           et le vidage du tampon sur le disque, en microsecondes. Un délai
           différent de zéro peut autoriser la validation de plusieurs
           transactions en un seul appel système 
           <function>fsync()</function> si la charge système est assez
           importante pour que des transactions supplémentaires soient prêtes
           dans l'intervalle donné. Mais le délai est perdu si aucune autre
           transaction n'est prête à être validée. Du coup, le délai n'est
           traité que si au moins
           <varname>commit_siblings</varname> autres transactions sont actives
           au moment où le processus serveur a écrit son enregistrement de
           validation. La valeur par défaut est zéro, soit pas de délai.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
       <term><varname>commit_siblings</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>commit_siblings</varname>
           </primary>
       </indexterm>
         <para>
           Nombre minimum de transactions ouvertes en même temps avant
           d'attendre le délai <varname>commit_delay</varname>. Une valeur plus
           importante rend plus probable le fait qu'au moins une autre
           transaction sera prête à valider pendant la durée du délai. La
           valeur par défaut est de cinq.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     
     <sect2 id="runtime-config-wal-checkpoints">
     <title>Points de vérification</title>

    <variablelist>
     <varlistentry id="guc-checkpoint-segments" xreflabel="checkpoint_segments">
      <term><varname>checkpoint_segments</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>checkpoint_segments</varname></primary>
      </indexterm>
       <para>
        Distance maximum entre des points de vérifications automatiques
        des WAL, dans les segments des journaux de traces (chaque segment fait
	normalement 16&nbsp;Mo). Par défaut, il y en a trois.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>checkpoint_timeout</varname></primary>
      </indexterm>
       <para>
        Temps maximum entre des points de vérification automatiques des
	WAL en secondes. La valeur par défaut est de 300 secondes.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
       <term><varname>checkpoint_warning</varname>
         (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration
           <varname>checkpoint_warning</varname></primary>
       </indexterm>
         <para>
           Écrit un message dans les journaux du serveur si les points de
           vérification causées par le remplissage des fichiers segment sont
           arrivés dans un intervalle plus rapide que ce nombre de secondes
           (ce qui suggère que <varname>checkpoint_segments</varname> devrait être
           augmenté). Vaut par défaut 30 secondes. Une valeur de zéro désactive
           cet avertissement.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

   </variablelist>
  </sect2>

  <sect2 id="runtime-config-wal-archiving">
  <title>Archivage</title>

  <variablelist>
    <varlistentry id="guc-archive-command" xreflabel="archive_command">
      <term><varname>archive_command</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>archive_command</varname>
          </primary>
      </indexterm>
        <para>
          La commande shell pour exécuter l'archivage d'un segment complet
          de fichier WAL. Si cette chaîne est vide (valeur par défaut),
          l'archivage des WAL est désactivé. Tout <literal>%p</literal> dans la
          chaîne est remplacé par le chemin vers le fichier à archiver
          et tout <literal>%f</literal> est seulement remplacé par le nom du fichier.
          (Le nom du chemin est relatif au répertoire de travail du serveur,
	  c'est-à-dire le répertoire des données du cluster.) Utilisez
	  <literal>%%</literal> pour intégrer un vrai caractère
	  <literal>%</literal> dans la commande. Pour plus d'informations, voir
	  la <xref linkend="backup-archiving-wal"/>.
	  Ce paramètre peut seulement être configuré dans le fichier
	  <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>

        <para>
          Il est important que la commande renvoie un code de sortie zéro si
          et seulement si elle a réussi. Exemples&nbsp;:
<programlisting>archive_command = 'cp "%p" /mnt/server/archivedir/"%f"'
archive_command = 'copy "%p" /mnt/server/archivedir/"%f"'  # Windows</programlisting>
        </para>
      </listitem>
    </varlistentry>

     <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
      <term><varname>archive_timeout</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>archive_timeout</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Le <xref linkend="guc-archive-command"/> est seulement appelé pour les
	segments WAL terminés. Du coup, si votre serveur génère peut de trafic
	WAL (ou a des périodes où cela arrive), il pourrait y avoir un long délai
	entre la fin d'une transaction et son enregistrement. Pour placer une
	limite sur l'ancienneté des données non archivées, vous pouvez configurer
        <varname>archive_timeout</varname> pour forcer le serveur à basculer vers
	un nouveau segment WAL périodiquement. Quand ce paramètre est plus grand
	que zéro, le serveur basculera vers un nouveau segment chaque fois que ce
	nombre de secondes s'est écoulé depuis le dernier changement de segment.
	Notez que les fichiers archivés et fermés rapidement à cause d'un
	basculement forcé sont toujours de la même taille que les fichiers
	réellement terminés. Il est donc déconseillé de configurer un temps très
	court pour <varname>archive_timeout</varname> &mdash; cela va exploser
	la taille de cotre stockage d'archive. Un <varname>archive_timeout</varname>
	d'une minute est habituellement raisonnable.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>
     
   </variablelist>
   </sect2>

   </sect1>

   <sect1 id="runtime-config-query">
    <title>Planification des requêtes</title>

    <sect2 id="runtime-config-query-enable">
     <title>Configuration de la méthode du planificateur</title>

      <para>
       Ces paramètres de configuration fournissent une méthode dure pour
       influencer les plans de requête choisis par l'optimiseur de requêtes. Si
        le plan choisi par défaut par l'optimiseur pour une requête particulière
        n'est pas optimale, une solution temporaire pourrait être découverte en
        utilisant un de ces paramètres de configuration pour forcer l'optimiseur
	à choisir un meilleur plan. Désactiver un de ces paramétrages de façon
	permanente est néanmoins quelque fois une bonne idée. De meilleures
	façons d'améliorer la qualité des
	plans choisis par l'optimiseur incluent l'ajustement de <xref
	linkend="runtime-config-query-constants"
	endterm="runtime-config-query-constants-title"/>, le lancement plus
	fréquent de <xref linkend="sql-analyze" endterm="sql-analyze-title"/>,
	l'augmentation de la valeur du paramètre de configuration <xref
	linkend="guc-default-statistics-target"/> et l'augmentation du nombre
	de statistiques récupérées pour des colonnes spécifiques en utilisant
	<command>ALTER TABLE SET STATISTICS</command>.
      </para>

     <variablelist>
      <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
       <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>parcours bitmap</primary>
       </indexterm>
       <indexterm>
        <primary>paramètre de configuration <varname>enable_bitmapscan</varname></primary>
       </indexterm>
        <para>
         Active ou désactive l'utilisation des plans de parcours de bitmap par
         le planificateur de requêtes. Actif par défaut (<literal>on</literal>).
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
       <term><varname>enable_hashagg</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>enable_hashagg</varname></primary>
       </indexterm>
       <para>
        Active ou désactive l'utilisation des agrégats hachés par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_hashjoin</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des jointures hachées par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

      <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_indexscan</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des parcours d'index par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_mergejoin</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des jointures de fusion par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_nestloop</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des jointures de boucles imbriquées
        par le planificateur. Il n'est pas possible de supprimer les
        jointures de boucles imbriquées complètement mais désactiver cette
        variable décourage le planificateur de l'utiliser si d'autres méthodes
        sont disponibles. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>parcours séquentiel</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_seqscan</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des parcours séquentiel par le
        planificateur. Il n'est pas possible de supprimer complètement les
        parcours séquentiels mais désactiver cette variable décourage le
        planificateur de l'utiliser si d'autres méthodes sont disponibles.
        Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
      <term><varname>enable_sort</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_sort</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des étapes de tri explicite par le 
        planificateur. Il n'est pas possible de supprimer complètement ces tris
        mais désactiver cette variable décourage le planificateur de l'utiliser
        si d'autres méthodes sont disponibles. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_tidscan</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation des parcours de <acronym>TID</acronym> par
        le planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-query-constants">
     <title id="runtime-config-query-constants-title">
      Constantes de coût du planificateur
     </title>

    <para>
     Les variables de <firstterm>coût</firstterm> décrites dans cette section
     sont mesurées sur une échelle arbitraire. Seules leurs valeurs relatives
     comptent, du coup les augmenter ou les diminuer d'un même facteur
     n'occasionera aucune changement dans les choix du planificateur.
     Traditionnellement, ces variables ont été référencées comme des unités de
     récupérations de pages séquentielles&nbsp;; c'est-à-dire que
     <varname>seq_page_cost</varname> est configuré conventionnellement à
     <literal>1.0</literal> et les autres variables de coût sont configurées
     en considérant cette référence. Mais vous pouvez utiliser une autre échelle
     si vous le préférez comme les temps d'exécution réels en millisecondes sur
     une machine particulière.
    </para>

   <note>
    <para>
     Malheureusement, il n'existe pas de méthode bien définie pour
     déterminer les valeurs idéales des variables de coût.
     Elles sont mieux traitées en tant que moyennes sur un mix complet de
     requêtes qu'une installation particulière obtiendra. Cela signifie que
     les modifier sur la base de quelques expériences est très risqué.
    </para>
   </note>

     <variablelist>

     <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary><varname>seq_page_cost</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation du coût du planificateur pour une récupération
	d'une page disque faisant partie d'une série de récupérations
	séquentielles. La valeur par défaut est 1.0.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
      <term><varname>random_page_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>random_page_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation du coût du planificateur pour une
        page disque récupérée de façon non séquentielle. C'est mesuré comme un
        multiple du coût de récupération d'une page séquentielle. 
	La valeur par défaut est 4.0.
	Réduire cette valeur par rapport à <varname>seq_page_cost</varname>
        fera en sorte que le système privilégie les parcours d'index&nbsp;;
	l'augmenter pénalisera les parcours d'index en les rendant plus
	coûteux. Vous pouvez augmenter ou diminuer les deux valeurs ensembles
	pour modifier l'importance des coûts dûs aux entrées/sorties disque
	par rapports aux coûts CPU, décrits par les paramètres suivants.
       </para>

       <tip>
        <para>
         Bien que le système vous laisse configurer <varname>random_page_cost</varname>
	 à une valeur moindre que celle de <varname>seq_page_cost</varname>,
	 l'intérêt est nul. Néanmoins, les configurer de façon identique a un
	 sens si la base tient entièrement dans le cache en RAM puisque dans ce
	 cas il n'y a aucune pénalité pour toucher des pages qui ne se suivent
	 pas. De plus, dans une base qui tient presque dans le cache, vous
	 pouvez baisser les valeurs relatives aux paramètres CPU car le coût de
	 récupération d'une page déjà en RAM est bien moindre à ce qu'il aurait
	 été dans le cas d'une récupération de page sur disque.
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_tuple_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation du coût du planificateur pour le 
        traitement de chaque ligne lors d'une requête. La valeur
        par défaut est 0,01.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_index_tuple_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation du coût du planificateur pour le 
        traitement de chaque ligne lors d'un parcours d'index.
        La valeur par défaut est 0,005.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_operator_cost</varname></primary>
      </indexterm>
       <para>
        Initialise l'estimation du coût du planificateur de requêtes pour le
        traitement de chaque opérateur dans une clause <literal>WHERE</literal>.
	ou une fonction exécutée par une requête. La valeur par défaut est 0,0025.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
      <term><varname>effective_cache_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>effective_cache_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation du planificateur sur la taille réelle du cache
	disque disponible pour une simple requête. Il est factorisé
	en estimations du coût d'utilisation d'un index&nbsp;; une valeur
	plus importante favorisera l'utilisation de parcours d'index, une
	valeur plus basse favorisera l'utilisation de parcours séquentiels.
	Lors de la configuration de ce paramètre, vous devez considérer à la
	fois les tampons partagés de <productname>PostgreSQL</productname>
	et la portion de cache disque du noyau qui sera utilisée pour les
	fichiers de données de <productname>PostgreSQL</productname>. Prenez
	aussi en compte le nombre attendu de requêtes exécutées en parallèle
	sur différentes tables car elles auront à partager l'espace
	disponible. Ce paramètre n'a pas d'effet sur la taille de la mémoire
	partagée allouée par <productname>PostgreSQL</productname>, pas plus
	qu'il ne réserve le cache disque du noyau&nbsp;; il est utilisé dans
	un but d'estimation seulement. La valeur est mesurée en pages disque,
	qui font normalement 8192 octets chaque. La valeur par défaut est
	de 16384 (128&nbsp;Mo).
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-query-geqo">
     <title>Optimiseur génétique de requêtes</title>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
      <term><varname>geqo</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>optimisation génétique des requêtes</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>optimisation génétique des requêtes</see>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>geqo</varname></primary>
      </indexterm>
       <para>
	Active ou désactive l'optimisation génétique des requêtes, algorithme
	tentant de faire de la planification de requêtes sans recherche
	exhaustive. Activé par défaut. La variable <varname>geqo_threshold</varname>
	fournit un moyen plus fin pour désactiver certaines classes de requêtes.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
      <term><varname>geqo_threshold</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>geqo_threshold</varname></primary>
      </indexterm>
       <para>
        Utilise l'optimisation génétique des requêtes pour planifier les
        requêtes avec au moins ce nombre d'éléments impliqués dans la clause
        <literal>FROM</literal> (notez qu'une construction <literal>FULL OUTER JOIN</literal>
        compte seulement comme un élément du <literal>FROM</literal>). La valeur par
        défaut est de 12. Pour des requêtes simples, il est généralement préférable
        d'utiliser le planificateur déterministe, exhaustif mais pour les
        requêtes comprenant beaucoup de tables, le planificateur déterministe
        prendrait trop de temps.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
       <term><varname>geqo_effort</varname>
         (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_effort</varname></primary>
       </indexterm>
         <para>
           Contrôle l'équité entre le temps de planification et l'efficacité
           du plan de requête dans GEQO. Cette variable doit être un entier
           entre 1 et 10. La valeur par défaut est 5. Les valeurs plus
           importantes augmentent le temps passé pendant la planification de
           la requête mais augmentent aussi la possibilité qu'un plan de
           requête efficace soit choisi.
         </para>
       
         <para>
           <varname>geqo_effort</varname> ne fait réellement rien
           directement&nbsp;; c'est seulement utilisé pour calculer les
           valeurs par défaut des autres variables qui influencent le
           comportement de GEQO (décrit ci-dessous). Si vous préférez, vous
           pouvez configurer les autres paramètres manuellement.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
       <term><varname>geqo_pool_size</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_pool_size</varname>
           </primary>
       </indexterm>
         <para>
           Contrôle la taille de la queue utilisée par GEQO. Cette taille
           est le nombre d'individus dans une population génétique. Elle
           doit être d'au moins deux, et les valeurs utiles sont typiquement
           100 et 1000. Si elle est configurée à zéro (la valeur par défaut),
           alors une valeur par défaut convenable est choisie suivant
           <varname>geqo_effort</varname> et le nombre de tables dans la
           requête.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
       <term><varname>geqo_generations</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_generations</varname>
           </primary>
       </indexterm>
         <para>
           Contrôle le nombre de générations utilisé par GEQO. Les générations
           spécifient le nombre d'itérations de l'algorithme. Il doit être au
           moins un, et les valeurs utiles sont dans la même échelle que la
           taille de la queue. S'il est configuré à zéro (la valeur par
           défaut), alors une version par défaut convenable est choisie
           suivant <varname>geqo_pool_size</varname>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias"
       xreflabel="geqo_selection_bias">
       <term><varname>geqo_selection_bias</varname> (<type>floating 
         point</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_selection_bias</varname>
           </primary>
       </indexterm>
         <para>
           Contrôle le biais de sélection utilisé par GEQO. C'est une pression
           sélective à l'intérieur de la population. Les valeurs peuvent aller
           de 1,50 à 2,00&nbsp;; ce dernier est la valeur par défaut.
         </para>
       </listitem>
     </varlistentry>
     
     </variablelist>
    </sect2>
     <sect2 id="runtime-config-query-other">
     <title>Autres options du planificateur</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
      <term><varname>default_statistics_target</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>default_statistics_target</varname></primary>
      </indexterm>
       <para>
        Initialise la cible par défaut des statistiques pour les colonnes de
        table qui n'ont pas une cible spécifique de colonne configurée via
        <command>ALTER TABLE SET STATISTICS</command>. Des valeurs plus importantes
        accroissent le temps nécessaire à exécuter <command>ANALYZE</command> mais
        pourrait améliorer les estimations du planificateurs. La valeur par
	défaut est de 10. Pour plus d'informations sur l'utilisation des
	statistiques par le planificateur de requêtes de
	<productname>PostgreSQL</productname>, référez-vous à la <xref
	linkend="planner-stats"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
      <term><varname>constraint_exclusion</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>constraint exclusion</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>constraint_exclusion</varname></primary>
      </indexterm>
       <para>
        Active ou désactive l'utilisation de la table des contraintes par le
	planificateur des requêtes pour optimiser les requêtes. Désactivé
	par défaut (<literal>off</literal>).
       </para>

       <para>
        Quand ce paramètre est activé (<literal>on</literal>), le planificateur compare
	les conditions de la requête avec les contraintes <literal>CHECK</literal> de
	la table et omet de parcourir les tables dont les conditions sont en
	contradiction avec les contraintes. Par exemple&nbsp;:

<programlisting>CREATE TABLE parent(clef integer, ...);
CREATE TABLE fils1000(check (clef between 1000 and 1999)) INHERITS(parent);
CREATE TABLE fils2000(check (clef between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;</programlisting>

	Avec l'activation de l'exclusion de la contrainte, ce <command>SELECT</command>
	ne parcourira pas du tout <structname>fils1000</structname>. Ceci peut améliorer
	les performances quand l'héritage est utilisé pour construire des tables
	partitionnées.
       </para>

       <para>
        Actuellement, <varname>constraint_exclusion</varname> est désactivé par défaut
        (<literal>off</literal>) car il existe un risque de résultats incorrects si les
	plans de requêtes sont en cache &mdash; si une contrainte de table est
	modifiée ou supprimée, le plan généré précédemment pourrait être faux
	maintenant et il n'existe pas de mécanisme intégré pour forcer une
	nouvelle planification (ce problème sera probablement résolu dans une
	prochaine version de <productname>PostgreSQL</productname>). Une autre
	raison pour la conserver désactivée est que les vérifications de
	contraintes sont relativement coûteuses et, dans de nombreuses
	circonstances, ne font pas gagner de temps. Il est recommandé de
	l'activer seulement si vous utilisez réellement des tables partitionées
	conçues pour prendre tout l'avantage de cette fonctionnalité.
       </para>

       <para>
        Référez-vous à la <xref linkend="ddl-partitioning"/> pour plus d'informations
        sur l'utilisation des exclusion de contraintes et du partitionement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>from_collapse_limit</varname></primary>
      </indexterm>
       <para>
        Le planificateur assemblera les sous-requêtes dans des requêtes
	supérieures si la liste <literal>FROM</literal> résultante n'aurait pas
	plus de ce nombre d'éléments. Des valeurs plus petites réduisent le
	temps de planification mais ramènent des plans de requêtes inférieurs.
	La valeur par défaut est huit. Il est généralement conseillé de conserver
	cette valeur inférieure à <xref linkend="guc-geqo-threshold"/>.
	Pour plus d'informations, voir <xref linkend="explicit-joins"/>.
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>join_collapse_limit</varname></primary>
      </indexterm>
        <para>
          Le planificateur ré-écrira les constructions <literal>JOIN</literal>
	  explicites (sauf <literal>FULL JOIN</literal>) en une liste d'éléments
	  <literal>FROM</literal> à chaque fois qu'au plus ce nombre d'éléments
	  en résulterait. Des valeurs plus petites réduisent le temps de
	  planification mais ramèneront des plans de requêtes inférieurs.
        </para>

        <para>
	  Par défaut, cette variable est configurée de la même façon que
	  <varname>from_collapse_limit</varname>, qui est approprié pour la
	  plupart des utilisations. Configurer cette variable à 1 empêche le réordonnancement
	  des <literal>JOIN</literal>tures explicites. Du coup, l'ordre de jointure explicite
	  spécifiée dans la requête sera l'ordre réel dans lequel les relations
	  sont jointes. Le planificateur de la requête ne choisit pas toujours
	  l'ordre de jointure optimal&nbsp;; les utilisateurs avancées pourraient
	  choisir d'initialiser temporairement cette variable à 1, puis de
	  spécifier l'ordre de jointure qu'ils désirent explicitement.
	  Pour plus d'informations, voir <xref linkend="explicit-joins"/>.
        </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-logging">
    <title>Rapports d'erreur et traces</title>

    <indexterm zone="runtime-config-logging">
     <primary>traces serveur</primary>
    </indexterm>

    <sect2 id="runtime-config-logging-where">
     <title>Où tracer</title>

     <indexterm zone="runtime-config-logging-where">
      <primary>où tracer</primary>
     </indexterm>

     <variablelist>

       <varlistentry id="guc-log-destination" xreflabel="log_destination">
         <term><varname>log_destination</varname> (<type>string</type>)</term>
       <listitem>
         <indexterm>
           <primary>paramètre de configuration 
             <varname>log_destination</varname></primary>
       </indexterm>
         <para>
           <productname>PostgreSQL</productname> supporte plusieurs méthodes
           pour la journalisation des messages du serveur, dont
           <systemitem>stderr</systemitem> et
           <systemitem>syslog</systemitem>. Sur Windows, 
           <systemitem>eventlog</systemitem> est aussi supporté. Configurez
	   ce paramètre avec une liste de destinations désirées pour les
           journaux, séparées par des virgules. Par défaut, les traces vont
	   seulement sur <systemitem>stderr</systemitem>.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-redirect-stderr" xreflabel="redirect_stderr">
       <term><varname>redirect_stderr</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>redirect_stderr</varname>
           </primary>
       </indexterm>
         <para>
           Ce paramètre autorise la capture et la redirection des messages
           envoyés vers <application>stderr</application> dans des journaux de traces.
	   Cette méthode, en combinaison avec les traces
           <application>stderr</application>, est souvent plus utile que de tracer dans
           <application>syslog</application> car certains types de messages pourraient ne
           pas apparaître dans la sortie <application>syslog</application> (un exemple
           habituel concerne les messages d'échecs de l'éditeur de liens).
           Ce paramètre est seulement disponible au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-directory" xreflabel="log_directory">
       <term><varname>log_directory</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_directory</varname>
           </primary>
       </indexterm>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, ce paramètre
           détermine le répertoire dans lequel les fichiers de trace sont
           créés. Elle pourrait être spécifiée avec un chemin absolu ou
	   relatif au répertoire des données du groupe.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-filename" xreflabel="log_filename">
       <term><varname>log_filename</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_filename</varname>
           </primary>
       </indexterm>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, ce paramètre
	   initialise les noms des fichiers des journaux créés. La valeur est
	   traitée comme un modèle <systemitem>strftime</systemitem>, du coup
	   les échappements <literal>%</literal> peuvent être utilisés pour
	   spécifier des noms de fichiers dépendant de l'heure. Si aucun
	   échappement <literal>%</literal> n'est présent,
	   <productname>PostgreSQL</productname> ajoutera l'époque de l'heure
	   d'ouverture du nouveau journal. Par exemple, si
	   <varname>log_filename</varname> valait <literal>server_log</literal>,
	   alors le nom de fichier choisi serait
	   <literal>server_log.1093827753</literal> pour un journal commençant
	   le dimanche 29 août 19:02:33 2004 MST.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
       <term><varname>log_rotation_age</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_rotation_age</varname>
           </primary>
       </indexterm>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, ce paramètre
	   détermine la durée de vie maximum d'un journal individuel. Après
	   que cette durée se soit écoulée, un nouveau journal est créé.
	   Initialisez-la à zéro pour désactiver la création des nouveaux
	   journaux suivant un délai.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
       <term><varname>log_rotation_size</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_rotation_size</varname></primary>
       </indexterm>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, ce paramètre
	   détermine la taille maximum d'un journal individuel. Après ce nombre
	   d'octets, un nouveau journal est créé. Initialiser cette taille à
	   zéro désactive la création de nouveaux journaux suivant leur taille.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
       <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_truncate_on_rotation</varname></primary>
       </indexterm>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, ce paramètre
	   fera que <productname>PostgreSQL</productname> tronque (surcharge),
	   plutôt qu'il n'ajoute à un journal de même nom. Néanmoins, ce
	   tronquage ne surviendra qu'à partir du moment où un nouveau fichier
	   sera ouvert à cause d'une rotation basée sur le temps, et non pas
	   suite au lancement du serveur ou suite à une rotation basée sur la
	   taille. Si désactivé (off), les
	   fichiers déjà existants se verront ajoutés les nouvelles traces 
	   dans tous les cas. Par exemple, en utilisant ce paramètre en
	   combinaison avec un <varname>log_filename</varname> comme
	   <literal>postgresql-%H.log</literal> résulterait en la génération
	   de 24 journaux (un pour chaque heure) puis les surchargera
	   cycliquement.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
         <para>
           Exemple&nbsp;: pour conserver sept jours de traces, un fichier par
	   jour nommé <literal>server_log.Mon</literal>,
	   <literal>server_log.Tue</literal>, etc. et surcharger automatiquement
	   les traces de la semaine dernière avec ceux de cette semaine,
	   configurez <varname>log_filename</varname> à <literal>server_log.%a</literal>, 
	   <varname>log_truncate_on_rotation</varname> à <literal>on</literal>
	   et <varname>log_rotation_age</varname> à <literal>1440</literal>.
         </para>
         <para>
           Exemple&nbsp;: pour conserver 24 heures de traces, un journal par
	   heure mais aussi, faire une rotation plus souvent si le journal dépasse
	   1&nbsp;Go, configurez
	   <varname>log_filename</varname> à <literal>server_log.%H%M</literal>, 
	   <varname>log_truncate_on_rotation</varname> à <literal>on</literal>, 
	   <varname>log_rotation_age</varname> à <literal>60</literal> et
	   <varname>log_rotation_size</varname> à <literal>1000000</literal>.
	   Inclure <literal>%M</literal> dans <varname>log_filename</varname> permet des
	   rotations conduites par la taille qui pourraient survenir pour
	   sélectionner un nom de fichier différent du nom de fichier initial.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
       <term><varname>syslog_facility</varname> (<type>string</type>)</term>
       <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>syslog_facility</varname></primary>
         </indexterm>
        <para>
          Lorsque les traces <application>syslog</application> sont activées, ce
	  paramètre détermine le niveau (<quote>facility</quote>) utilisé par
          <application>syslog</application>. Vous pouvez choisir entre
          <literal>LOCAL0</literal>, <literal>LOCAL1</literal>,
          <literal>LOCAL2</literal>, <literal>LOCAL3</literal>, <literal>LOCAL4</literal>,
          <literal>LOCAL5</literal>, <literal>LOCAL6</literal>, <literal>LOCAL7</literal>&nbsp;;
          la valeur par défaut est <literal>LOCAL0</literal>. Voir aussi la
          documentation du démon <application>syslog</application> de votre
	  serveur.
	  Ce paramètre peut seulement être configuré dans le fichier
	  <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
      <term><varname>syslog_ident</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>syslog_identity</varname></primary>
      </indexterm>
        <para>
         Si <application>syslog</application> est activé, ce paramètre détermine le nom
         du programme utilisé pour identifier les messages de
         <productname>PostgreSQL</productname> dans les journaux de traces de
         <application>syslog</application>. La valeur par défaut est
	 <literal>postgres</literal>.
	 Ce paramètre peut seulement être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
       </listitem>
      </varlistentry>
      
      </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-when">
     <title>Quand tracer</title>

     <variablelist>

     <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
      <term><varname>client_min_messages</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>client_min_messages</varname></primary>
      </indexterm>
       <para>
        Contrôle les niveaux des messages envoyés au client. Les valeurs
        valides peuvent être <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>, <literal>DEBUG2</literal>,
        <literal>DEBUG1</literal>, <literal>LOG</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>, <literal>FATAL</literal>,
        et <literal>PANIC</literal>. Chaque niveau inclut tous les
        niveaux qui le suivent. La valeur par défaut est <literal>NOTICE</literal>.
        Notez que <literal>LOG</literal> a un niveau différent que dans
        <varname>log_min_messages</varname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
      <term><varname>log_min_messages</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_messages</varname></primary>
      </indexterm>
       <para>
        Contrôle les niveaux des messages écrits dans les journaux de traces.
        Les valeurs valides sont <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
        <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>, <literal>WARNING</literal>,
        <literal>ERROR</literal>, <literal>LOG</literal>, <literal>FATAL</literal> et
        <literal>PANIC</literal>. Chaque niveau inclut tous les niveaux qui le
        suivent. Le niveau le plus bas obtient le plus petit nombre de
        messages. La valeur par défaut est <literal>NOTICE</literal>. Notez que
        <literal>LOG</literal> a un niveau différent que dans
        <varname>client_min_messages</varname>. Seuls les superutilisateurs peuvent
        modifier ce paramétrage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
      <term><varname>log_error_verbosity</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_error_verbosity</varname></primary>
      </indexterm>
       <para>
        Contrôle le nombre de détails écrits dans les journaux de traces pour
        chaque message tracé. Les valeurs valides sont <literal>TERSE</literal>,
        <literal>DEFAULT</literal> et <literal>VERBOSE</literal>, chacune ajoutant plus de
	champs aux messages affichés. Seuls les superutilisateurs peuvent
        modifier ce paramétrage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
      <term><varname>log_min_error_statement</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_error_statement</varname></primary>
      </indexterm>
       <para>
        Contrôle si l'instruction SQL ayant causé une erreur sera aussi
        enregistrée dans le journal des traces. L'instruction SQL en cours est
	inclus dans le journal des traces pour tout message de la sévérité
	spécifiée ou d'une sévérité supérieure. Les valeurs valides sont
        <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>FATAL</literal> et <literal>PANIC</literal>.
	La valeur par défaut est <literal>ERROR</literal>, ce qui signifie que
	les instructions causant des erreurs, des erreurs fatales ou des PANIC
	seront tracées. Pour désactiver les traces sur les instructions échouées,
	configurez ce paramètre à <literal>PANIC</literal>. Seuls les
	superutilisateurs peuvent modifier ce paramétrage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_duration_statement</varname></primary>
      </indexterm>
        <para>
         Trace la durée de chaque instruction terminée si l'exécution a duré
	 au moins ce nombre de millisecondes. En la configurant à zéro,
	 trace les durées de toutes les instructions. -1 (la valeur par défaut)
	 désactive les traces sur les durées des instructions. Par exemple, si
	 vous l'initialisez à <literal>250</literal>, alors toutes les
	 instructions SQL qui s'exécutent en au moins 250ms seront tracées.
	 Il est utile d'activer ce paramètre pour tracer les requêtes non
	 optimisées dans vos applications. Seuls les superutilisateurs peuvent
	 modifier cette configuration.
        </para>

        <para>
         Pour les clients utilisant le protocole étendue de requêtes, les durées
	 des étapes Parse (analyse), Bind (lien) et Execute (exécution) sont
	 tracées indépendamment.
        </para>

       <note>
        <para>
         Lorsque vous utilisez cette option avec
         <xref linkend="guc-log-statement"/>, le texte des instructions tracées
	 à cause de <varname>log_statement</varname> ne sera pas répété dans le
	 message de trace de la durée. Si vous n'utilisez pas
         <application>syslog</application>, il est recommandé de tracer le PID
	 ou l'ID de la session en utilisant <xref linkend="guc-log-line-prefix"/>
         de façon à pouvoir lier le message de l'instruction au message sur la
	 durée en utilisant l'ID de processus ou l'ID de session.
        </para>
       </note>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-silent-mode" xreflabel="silent_mode">
       <term><varname>silent_mode</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>silent_mode</varname></primary>
       </indexterm>
        <para>
         Exécute le serveur silencieusement. Si ce paramètre est configuré, le
	 serveur se lancera automatiquement en tâche de fond et tout terminal
	 de contrôle sera dissocié. La sortie standard et la sortie standard
	 des erreurs du serveur sont redirigées vers <literal>/dev/null</literal>, donc
	 tout message qui leur est adressé sera perdu. Sauf si le journal
	 <application>syslog</application> est sélectionné ou que <varname>redirect_stderr</varname>
	 est activé, utiliser ce paramètre n'est pas encouragé car il empêche de
	 voir les messages d'erreurs.
	 Ce paramètre peut seulement être configuré au lancement du serveur. 
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

       <para>
        Voici une liste des niveaux de sévérité utilisés dans ces
        paramétrages&nbsp;:
        <variablelist>
         <varlistentry>
          <term><literal>DEBUG[1-5]</literal></term>
          <listitem>
           <para>
            Fournit des informations utiles aux développeurs.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>INFO</literal></term>
          <listitem>
           <para>
            Fournit des informations implicitement demandées par l'utilisateur,
            par exemple lors d'un <command>VACUUM VERBOSE</command>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>NOTICE</literal></term>
          <listitem>
           <para>
            Fournit des informations qui pourraient être utiles aux
            utilisateurs, par exemple lors du tronquage d'identifiants longs ou
            la création d'index faisant partie de clés primaires.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>WARNING</literal></term>
          <listitem>
           <para>
            Fournit des avertissements aux utilisateurs, par exemple un
            <command>COMMIT</command> en dehors d'un bloc de transactions.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>ERROR</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a annulé la commande en cours.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>LOG</literal></term>
          <listitem>
           <para>
            Rapporte des informations intéressant les administrateurs, par
            exemple l'activité des points de vérification.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>FATAL</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a causé l'annulation de la session courante.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>PANIC</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a causé l'annulation de toutes les sessions.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>

    </sect2>
     <sect2 id="runtime-config-logging-what">
     <title>Que tracer</title>
     
     <variablelist>
     
     <varlistentry>
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)</term>
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_parse</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_rewritten</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_plan</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_pretty_print</varname></primary>
      </indexterm>
       <para>
        Ces paramètres activent plusieurs sorties de débogage. Pour chaque requête
        exécutée, elles affichent l'arbre d'analyse résultant.
        <varname>debug_pretty_print</varname> indente ces affichages pour
        produire un format de sortie plus lisible mais plus long. 
        <varname>client_min_messages</varname> ou
        <varname>log_min_messages</varname> doivent valoir
        <literal>DEBUG1</literal> ou plus bas pour réellement envoyer cette
	sortie vers le client ou les traces du serveur, respectivement. Ces
	paramètres sont désactivés par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-connections" xreflabel="log_connections">
      <term><varname>log_connections</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_connections</varname></primary>
      </indexterm>
       <para>
        Ceci affiche une ligne dans les traces du serveur détaillant chaque
        connexion réussie. Désactivée par défaut, elle est probablement très
	utile. Certains programmes client, comme <application>psql</application>, tentent
	de se connecter deux fois pour déterminer si un mot de passe est requis,
	donc des messages <quote>connection received</quote> dupliqués n'indiquent
	pas nécessairement un problème.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
       <term><varname>log_disconnections</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_disconnections</varname></primary>
       </indexterm>
         <para>
	 Ceci affiche dans les journaux du serveur une ligne similaire à
         <varname>log_connections</varname> mais à la fin d'une session
	 et inclut la durée de la session. Elle est désactivée par défaut.
	 Ce paramètre peut seulement être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>


     <varlistentry id="guc-log-duration" xreflabel="log_duration">
       <term><varname>log_duration</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_duration</varname></primary>
       </indexterm>
       <para>
        Trace la durée de toute instruction exécutée. Désactivée par défaut
	(<literal>off</literal>). Seuls les superutilisateurs peuvent modifier
	ce paramètre.
       </para>

       <para>
        Pour les clients utilisant le protocole étendu de requêtes, les durées
	des étapes Parse (analyse), Bind (lien) et Execute (exécution) sont
	tracées indépendamment.
       </para>

       <note>
        <para>
         La différence entre configurer cette option et configurer
         <xref linkend="guc-log-min-duration-statement"/> à zéro est que
	 dépasser <varname>log_min_duration_statement</varname> force l'ajout
	 du texte de la requête dans la trace, ce que cette option ne fait pas.
	 Du coup, si <varname>log_duration</varname> est activé (<literal>on</literal>)
	 et <varname>log_min_duration_statement</varname> a une valeur positive,
         toutes les durées sont tracées mais le texte de la requête est inclus
	 seulement pour les instructions dépassant la limite. Ce comportement
	 peut être utile pour récupérer des statistiques sur les installations
	 à forte charge.
        </para>
       </note>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
       <term><varname>log_line_prefix</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_line_prefix</varname></primary>
       </indexterm>
       <para>
         Ceci est une chaîne style <function>printf</function> qui est affichée au début
	 de chaque ligne de trace. La valeur par défaut est une chaîne vide.
	 Chaque échappement reconnu est remplacé comme indiqué ci-dessous - tout
	 ce qui reste et qui ressemble à un échappement est ignoré. Les autres
	 caractères sont copiés directement sur la ligne. Certains échappements
	 sont seulement reconnus par les processus de session et ne s'appliquent
	 pas aux processus en tâche de fond comme le processus serveur principal.
	 <application>Syslog</application> produit son propre marquage horaire et
	 informations d'ID sur le processus, donc vous ne voudrez probablement
	 pas utiliser ces échappements si vous utilisez <application>syslog</application>.
	 Ce paramètre peut seulement être configuré dans le fichier
	 <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.

<informaltable>
  <tgroup cols="3">
    <colspec colnum="1" colwidth="0.5*"/>
    <colspec colnum="2" colwidth="2*"/>
    <colspec colnum="3" colwidth="0.5*"/>
    <thead>
      <row>
        <entry>Échappement</entry>
        <entry>Effet</entry>
        <entry>Session seulement</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry><literal>%u</literal></entry>
        <entry>Nom de l'utilisateur</entry>
        <entry>oui</entry>
      </row>
      <row>
        <entry><literal>%d</literal></entry>
        <entry>Nom de la base de données</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%r</literal></entry>
        <entry>Nom ou adresse IP de l'hôte distant et port distant</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%h</literal></entry>
        <entry>Nom d'hôte distant ou adresse IP</entry>
        <entry>yes</entry>
      </row>
      <row>
        <entry><literal>%p</literal></entry>
        <entry>ID du processus</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%t</literal></entry>
        <entry>Marquage horaire (sans millisecondes)</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%m</literal></entry>
        <entry>Marquage horaire avec millisecondes</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%i</literal></entry>
        <entry>Balise de commande&nbsp;: la commande qui a généré cette trace.</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%c</literal></entry>
        <entry>ID de session&nbsp;: un identifiant unique pour chaque session.
          Ce sont deux numéros hexadécimaux sur quatre octets (sans zéros devant)
          séparés par un point. Les nombres sont l'heure de début de la session et
	  son ID de processus, donc ceci peut aussi être utilisé comme moyen de
	  sauvegarde  pour ces éléments.</entry>
        <entry>oui</entry>
      </row>
      <row>
        <entry><literal>%l</literal></entry>
        <entry>Numéro de la ligne de traces pour chaque processus, commençant à 1</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%s</literal></entry>
        <entry>Marquage horaire du début de session</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%x</literal></entry>
        <entry>ID de la transaction</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%q</literal></entry>
        <entry>Ne produit aucune sortie, mais indique aux autres processus
	  de stopper à cet endroit dans la chaîne. Ignoré par les processus
          de session.</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%%</literal></entry>
        <entry>Littéral <literal>%</literal></entry>
        <entry>non</entry>
    </row>
  </tbody>
</tgroup>
</informaltable>
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement" xreflabel="log_statement">
       <term><varname>log_statement</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_statement</varname></primary>
       </indexterm>
         <para>
           Contrôle les instructions SQL tracées. Les valeurs valides sont 
	   <literal>none</literal>, <literal>ddl</literal>, <literal>mod</literal>
	   et <literal>all</literal>. <literal>ddl</literal> trace toutes les
	   commandes de définition comme <command>CREATE</command>,
	   <command>ALTER</command> et <command>DROP</command>.
	   <literal>mod</literal> trace toutes les instructions
	   <literal>ddl</literal>, ainsi que les instructions de modification
	   de données <command>INSERT</command>, <command>UPDATE</command>,
	   <command>DELETE</command>, <command>TRUNCATE</command> et
	   <command>COPY FROM</command>. Les instructions <command>PREPARE</command>,
	   <command>EXECUTE</command> et <command>EXPLAIN ANALYZE</command> sont
	   aussi tracées si leur commande contenue est d'un type approprié.
	   Pour les clients utilisant le protocole étendu de requêtes, la trace
	   survient quand un message Execute est reçu et les valeurs des paramètres
	   de Bind sont inclus (avec les guillemets simples embarqués doublés).
         </para>

         <para>
           La valeur par défaut est <literal>none</literal>. Seuls les superutilisateurs
	       peuvent changer ce paramétrage.
	     </para>

	     <note>
	       <para>
            Les instructions contenant de simples erreurs de syntaxe ne sont pas
            tracées même si <varname>log_statement</varname> vaut
            <literal>all</literal> car la trace est émise seulement après qu'une
            analyse basique ne soit réalisée pour déterminer le type
            d'instruction. Dans le cas du protocle étendu de requête, ce paramètre
            ne trace pas les instructions qui échoue avant la phase Execute
            (c'est-à-dire pendant l'analyse et la planification). Configurer
            <varname>log_min_error_statement</varname> à
            <literal>ERROR</literal> pour tracer ce type d'instructions.
	       </para>
	     </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
       <term><varname>log_hostname</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>log_hostname</varname></primary>
       </indexterm>
         <para>
           Par défaut, les messages de traces de connexion affichent seulement
	   l'adresse IP de l'hôte se connectant. Activer ce paramètre causera
	   la trace du nom de l'hôte. Notez que, suivant votre configuration de
	   résolution de nom d'hôte, ceci pourrait imposer une pénalité de
	   performance non négligeable.
	   Ce paramètre peut seulement être configuré dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-statistics">
    <title>Statistiques d'exécution</title>

    <sect2 id="runtime-config-statistics-collector">
     <title>Récupérateur de statistiques sur les requêtes et les index</title>

     <para>
      Ces paramètres contrôlent une fonctionnalité de récupération de
      statistiques sur tout le serveur. Quand la récupération de statistiques
      est activée, les données produites peuvent être visualisées via la
      famille de vues systèmes <structname>pg_stat</structname> et
      <structname>pg_statio</structname>. Référez-vous à
      <xref linkend="monitoring"/> pour plus d'informations.
     </para>

     <note>
     <para>
      À partir de <productname>PostgreSQL</productname> 8.2,
      <varname>stats_command_string</varname> contrôle un mécanisme de
      récupération de données séparé pouvant être activé et désactivé
      indépendamment de l'exécution du sous-processus de récupération des
      statistiques. Le sous-processus est seulement nécessaire pour supporter
      la récupération des statistiques niveau bloc et niveau ligne.
     </para>
     </note>

     <variablelist>

     <varlistentry id="guc-stats-command-string" xreflabel="stats_command_string">
      <term><varname>stats_command_string</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_command_string</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Active la récupération d'informations sur la requête en cours d'exécution
	sur chaque session, avec l'heure où l'exécution a commencé. Ce paramètre
	est activé par défaut. Notez que, même s'il est activé, cette information
	n'est pas visible à tous les utilisateurs, mais seulement des
	superutilisateurs et de l'utilisateur de la session pour les commandes
	exécutées sur celle-ci. Donc, cela ne représente pas une faille de
	sécurité. Seuls les superutilisateurs peuvent modifier ce paramètre.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
      <term><varname>update_process_title</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>update_process_title</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Active la mise à jour du titre du processus à chaque fois qu'une nouvelle
	commande SQL est reçue par le serveur. Le titre du processus est
	typiquement visible par la commande <command>ps</command> ou, sous
	Windows, en utilisantle  <application>Process Explorer</application>.
	Seuls les superutilisateurs peuvent modifier ce paramètre.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-start-collector" xreflabel="stats_start_collector">
      <term><varname>stats_start_collector</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_start_collector</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle si le serveur doit exécuter le sous-processus de récupération
	des statistiques. Activé par défaut, il peut être désactivé si vous
	ne comptez pas utiliser les statistiques ou l'autovacuum. Ce paramètre
	est seulement configurable au démarrage du serveur car le sous-processus
	de récupération ne peut pas être lancé ou arrêté ainsi. (Néanmoins,
	la quantité de statistiques récupérées peut être modifiée avec le
	serveur en cours d'exécution, à condition que le sous-processus soit
	en cours d'exécution.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-block-level" xreflabel="stats_block_level">
      <term><varname>stats_block_level</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_block_level</varname></primary>
      </indexterm>
       <para>
        Active la récupération des statistiques au niveau bloc sur l'activité
	de la base de données. Ce paramètre est désactivé par défaut. Seuls les
	superutilisateurs peuvent le modifier.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-row-level" xreflabel="stats_row_level">
      <term><varname>stats_row_level</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_row_level</varname></primary>
      </indexterm>
       <para>
        Active la récupération de statistiques au niveau ligne sur l'activité
	de la base de données. Ce paramètre est désactivé par défaut. Seuls les
	superutilisateurs peuvent le modifier.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-reset-on-server-start" xreflabel="stats_reset_on_server_start">
      <term><varname>stats_reset_on_server_start</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_reset_on_server_start</varname></primary>
      </indexterm>
       <para>
        If on, collected block-level and row-level statistics are zeroed out
        whenever the server is restarted. If off, statistics are accumulated
        across server restarts. This parameter is off by default.
        This parameter can only be set at server start.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-statistics-monitor">
     <title>Statistics Monitoring</title>
     <variablelist>

     <varlistentry>
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>log_statement_stats</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>log_parser_stats</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>log_planner_stats</varname></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>log_executor_stats</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Pour chaque requête, écrivez les statistiques de performance dans le
	module respectif des traces du serveur. C'est un outil de profilage très
	simpliste. <varname>log_statement_stats</varname> rapporte toutes les
	statistiques sur les instructions, alors que les autres font un rapport
	par module. <varname>log_statement_stats</varname> ne peut pas être
	activé avec une des options module. Toutes ces options sont désactivées
	par défaut. Seuls les superutilisateurs peuvent modifier ces
	paramètres.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-autovacuum">
    <title>VACUUM automatique</title>

    <indexterm>
     <primary>autovacuum</primary>
     <secondary>paramètres de configuration</secondary>
    </indexterm>

     <para>
      Ces paramètres contrôlent le comportement de la fonctionnalité appelée
      <firstterm>autovacuum</firstterm>. Référerez-vous à la <xref
      linkend="autovacuum"/> pour plus de détails.
     </para>

    <variablelist>

     <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
      <term><varname>autovacuum</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum</varname></primary>
      </indexterm>
       <para>
        Contrôle si le serveur doit lancer le démon autovacuum.
	Désactivé par défaut. <varname>stats_start_collector</varname> et
	<varname>stats_row_level</varname> doivent aussi être actifs pour que ce
	démon soit exécuté. Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
      <term><varname>autovacuum_naptime</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_naptime</varname></primary>
      </indexterm>
       <para>
        Spécifie le délai entre les tours d'activité pour le démon
	autovacuum. À chaque tour, le démon examine une base de données
	et lance autant de commandes <command>VACUUM</command> et <command>ANALYZE</command> que
	nécessaire pour les tables de la base de données. Le délai est mesuré en
	secondes et vaut par défaut 60 secondes.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
      <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_threshold</varname></primary>
      </indexterm>
       <para>
        Spécifie le nombre minimum de lignes mises à jour ou supprimées nécessaire
	pour déclencher un <command>VACUUM</command> sur une table. La valeur par défaut
	est 500.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Ce paramètre peut être surchargé individuellement pour chaque table
	par des entrées dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
      <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_analyze_threshold</varname></primary>
      </indexterm>
       <para>
        Spécifie le nombre minimum de lignes insérées, mises à jour ou supprimées
	pour déclencher une commande <command>ANALYZE</command> sur une table. La valeur
	par défaut est de 250.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Ce paramètre peut être surchargé individuellement pour chaque table
	par des entrées dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
      <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_scale_factor</varname></primary>
      </indexterm>
       <para>
        Spécifie une fraction de la taille de la table à ajouter à
        <varname>autovacuum_vacuum_threshold</varname> pour décider du moment
	pour déclencher un <command>VACUUM</command>. La valeur par défaut est de 0,2.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Ce paramètre peut être surchargé individuellement pour chaque table
	par des entrées dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
      <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_analyze_scale_factor</varname></primary>
      </indexterm>
       <para>
        Spécifie une fraction de la taille de la table à ajouter à
        <varname>autovacuum_analyze_threshold</varname> pour décider de
	déclencher une commande <command>ANALYZE</command>. La valeur par défaut est
	de 0,1.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Ce paramètre peut être surchargé individuellement pour chaque table
	par des entrées dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
      <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_freeze_max_age</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Spécifie l'âge maximum (en transactions) que le champ
        <structname>pg_class</structname>.<structfield>relfrozenxid</structfield>
	d'une table peut atteindre avant qu'une opération
	<command>VACUUM</command> ne soit forcé pour empêcher la réinitialisation
	de l'ID de transaction sur cette table. Le système lance les
	processus autovacuum pour cela même si l'autovacuum est désactivé. La
	valeur par défaut est 200000000 (200 millions). Ce paramètre est seulement
	lu au démarrage du serveur mais il peut être diminué individuellement pour
	chaque table en ajoutant des entrées dans
	<structname>pg_autovacuum</structname>. Pour plus d'information, voir
	<xref linkend="vacuum-for-wraparound"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
      <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_cost_delay</varname></primary>
      </indexterm>
       <para>
        Spécifie la valeur du coût du délai utilisée dans les opérations de
        <command>VACUUM</command>. Si -1 est spécifié (la valeur par défaut),
        la valeur habituelle de <xref linkend="guc-vacuum-cost-delay"/> sera
	utilisée.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Ce paramètre peut être surchargé pour des tables individuelles
	par les entrées dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
      <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>autovacuum_vacuum_cost_limit</varname></primary>
      </indexterm>
       <para>
        Spécifie la valeur limite du coût utilisée dans les opérations de
        <command>VACUUM</command> automatiques. Si -1 est spécifié (la valeur par
        défaut), la valeur courante de <xref linkend="guc-vacuum-cost-limit"/>
	sera utilisée.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
	Ce paramètre peut être surchargé pour des tables
	individuelles par les entrées dans <structname>pg_autovacuum</structname>.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-client">
    <title>Valeurs par défaut des connexions client</title>

    <sect2 id="runtime-config-client-statement">
     <title>Comportement des instructions</title>
     <variablelist>

     <varlistentry id="guc-search-path" xreflabel="search_path">
      <term><varname>search_path</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>search_path</varname></primary>
      </indexterm>
      <indexterm><primary>path</primary><secondary>pour schémas</secondary></indexterm>
       <para>
        Cette variable spécifie l'ordre dans lequel les schémas sont recherchés
        lorsqu'un objet (table, type de données, fonction, etc.) est référencé
        par un simple nom sans son composant schéma. Quand il existe des noms
        identiques dans différents schémas, le premier trouvé dans le chemin de
        recherche est utilisé. Un objet qui ne fait partie d'aucun des schémas
        du chemin de recherche peut seulement être référencé en spécifiant son
        schéma conteneur avec un nom qualifié.
       </para>

       <para>
        La valeur de <varname>search_path</varname> doit être une liste de noms
        de schémas séparés par des virgules. Si un des éléments de la liste est
        la valeur spéciale <literal>$user</literal>, alors le schéma ayant le
        nom renvoyé par <function>SESSION_USER</function> est substitué, si un tel
        schéma existe (sinon <literal>$user</literal> est ignoré).
       </para>

       <para>
        Le schéma du catalogue système, <literal>pg_catalog</literal>, est toujours
        recherché, qu'il soit ou non mentionné dans le chemin. S'il est
        mentionné, alors il sera cherché dans l'ordre spécifié. Si
        <literal>pg_catalog</literal> ne fait pas partie du chemin, alors il sera
        cherché <emphasis>avant</emphasis> tout élément du chemin. Il devrait aussi être
        noté que le schéma des tables temporaires,
        <literal>pg_temp_<replaceable>nnn</replaceable></literal>, est cherché implicitement avant
        tout autre.
       </para>

       <para>
        Lorsque des objets sont créés sans précision d'un schéma cible
        particulier, ils sont placés dans le premier schéma listé dans le chemin
        de recherche. Une erreur est rapportée si le chemin de recherche est
        vide.
       </para>

       <para>
        La valeur par défaut de ce paramètre est <literal>'"$user",
        public'</literal> (où la deuxième partie sera ignorée s'il n'existe pas
        de schéma nommé <literal>public</literal>). Elle supporte l'utilisation
        partagée d'une base de données (où aucun utilisateur n'a de schémas
        privés et tous partagent l'utilisation de <literal>public</literal>), de
        schémas privés par utilisateur et une combinaison des deux. D'autres
        effets peuvent être obtenus en modifiant le chemin de recherche par
        défaut soit globalement soit par utilisateur.
       </para>

       <para>
        La valeur réelle actuelle du chemin de recherche peut être examinée via
        la fonction <acronym>SQL</acronym> <function>current_schemas()</function>. 
        Elle n'est pas identique à la valeur de <varname>search_path</varname>,
        car <function>current_schemas()</function> affiche comment la requête
        apparaissant dans <varname>search_path</varname> sera résolue.
       </para>

       <para>
        Pour plus d'informations sur la gestion des schémas, voir la <xref
        linkend="ddl-schemas"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
       <term><varname>default_tablespace</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>default_tablespace</varname></primary>
       </indexterm>
       <indexterm><primary>espace logique</primary><secondary>par défaut</secondary></indexterm>
         <para>
           Cette variable indique le
	   <foreignphrase>tablespace</foreignphrase> par défaut dans lequel
	   sont créés les objets (tables et index) quand une commande
	   <command>CREATE</command> ne l'explicite pas.
	</para>

	<para>
	  La valeur est soit le nom de l'espace logique soit une chaîne vide pour
	  indiquer l'utilisation de l'espace logique par défaut de la base de
	  données en cours. Si la valeur ne correspond pas au nom d'une base de
	  données existantes, <productname>PostgreSQL</productname> utilisera automatiquement
	  l'espace logique par défaut de la base de données en cours.
	</para>

	<para>
	  Pour plus d'informations sur les espaces logiques, voir la <xref
	  linkend="manage-ag-tablespaces"/>.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>check_function_bodies</varname></primary>
      </indexterm>
        <para>
          Ce paramètre est habituellement à on. Lorsqu'il est <literal>off</literal>, il
	  désactive la validation de la chaîne du corps de la fonction lors
	  de <xref linkend="sql-createfunction"
	  endterm="sql-createfunction-title"/>. Désactiver la validation est
	  quelque fois utile pour éviter des problèmes tels que les références
	  avant lors de la restauration des définitions de fonctions à partir
	  d'une sauvegarde.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
      <term><varname>default_transaction_isolation</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
        <primary>niveau d'isolation de la transaction</primary>
      </indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>default_transaction_isolation</varname></primary>
      </indexterm>
        <para>
          Chaque transaction SQL a un niveau d'isolation, qui peut être soit
	  <quote>read uncommitted</quote>, soit <quote>read committed</quote>,
	  soit <quote>repeatable read</quote> soit <quote>serializable</quote>.
	  Ce paramètre contrôle le niveau d'isolation par défaut de chaque
	  nouvelle transaction. Par défaut, <quote>read committed</quote>.
        </para>

        <para>
          Consultez le <xref linkend="mvcc"/> et <xref linkend="sql-set-transaction"
	  endterm="sql-set-transaction-title"/>
          pour plus d'informations.
        </para>
      </listitem>
    </varlistentry>

     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>transaction en lecture seule</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>default_transaction_read_only</varname></primary>
      </indexterm>

       <para>
        Une transaction SQL en lecture seule ne pourrait pas modifier les 
        tables non temporaires. Ce paramètre contrôle le statut de lecture seule
        par défaut de chaque nouvelle transaction. La valeur par défaut est
	<literal>off</literal> (lecture/écriture).
       </para>

       <para>
        Consultez <xref linkend="sql-set-transaction"
	endterm="sql-set-transaction-title"/> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
      <term><varname>statement_timeout</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>statement_timeout</varname></primary>
      </indexterm>
       <para>
        Annule toute instruction prenant plus que le nombre spécifié de
	millisecondes commençant à partir du moment où la commande arrive du client
	au serveur. Si <varname>log_min_error_statement</varname> est configuré
	à <literal>ERROR</literal> ou plus bas, l'instruction qui a pris plus de
	temps que cette valeur à s'exécuter, sera aussi tracée. Une valeur de
	zéro désactive le chronomètre et est la valeur par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
      <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
	Indique l'âge limite (en transactions) que <command>VACUUM</command>
        doit utiliser pour décider de remplacer les ID de transaction avec
        <literal>FrozenXID</literal> lors du parcours d'une table.
        La valeur par défaut est 100000000 (100 million). Bien que les
	utilisateurs puissent configurer une valeur quelconque comprise entre zéro et
        1000000000, <command>VACUUM</command> limite silencieusement la
	valeur réelle à la moitié de la valeur de <xref
        linkend="guc-autovacuum-freeze-max-age"/> pour qu'il n'y ait pas une
	valeur trop courte entre des autovacuums forcés.
        Pour plus d'informations, voir <xref linkend="vacuum-for-wraparound"/>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-client-format">
     <title>Locale et formatage</title>

     <variablelist>

       <varlistentry id="guc-datestyle" xreflabel="datestyle">
         <term><varname>datestyle</varname> (<type>string</type>)</term>
	 <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>datestyle</varname></primary>
       </indexterm>
         <para>
           Configure le format d'affichage pour les valeurs de type date et
           heure, ainsi que les règles d'interprétation des valeurs de saisie
           des dates ambiguës. Pour des raisons historiques, cette variable
           contient deux composants indépendants&nbsp;: la spécification du
           format en sortie (<literal>ISO</literal>, <literal>Postgres</literal>,
           <literal>SQL</literal> ou <literal>German</literal>) et la spécification en
           entrée/sortie pour l'ordre année/mois/jour (<literal>DMY</literal>,
           <literal>MDY</literal> ou <literal>YMD</literal>). Elles peuvent être
           configurées séparément ou ensemble. Les mots clés <literal>Euro</literal>
           et <literal>European</literal> sont un synonyme pour
           <literal>DMY</literal>&nbsp;; les mots clés <literal>US</literal>,
           <literal>NonEuro</literal> et <literal>NonEuropean</literal> sont des synonymes
           pour <literal>MDY</literal>. Voir la <xref linkend="datatype-datetime"/> pour
           plus d'informations. La valeur par défaut est <literal>ISO, MDY</literal>
	   mais <application>initdb</application> initialisera le fichier de
	   configuration avec une valeur qui correspond au comportement de la locale
	   <varname>lc_time</varname> choisie.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="timezone">
       <term><varname>timezone</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>timezone</varname></primary>
       </indexterm>
       <indexterm><primary>fuseau horaire</primary></indexterm>
         <para>
           Configure le fuseau horaire pour l'affichage et l'interprétation
           de la date et de l'heure. Par défaut, vaut 'unknown', ce qui
           signifie qu'il utilise ce que l'environnement système spécifie
           comme fuseau horaire. Voir la <xref linkend="datatype-datetime"/>
           pour plus d'informations.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>timezone_abbreviations</varname></primary>
      </indexterm>
      <indexterm><primary>time zone names</primary></indexterm>
      <listitem>
       <para>
       <!-- collection ? -->
        Configure la liste des abréviations de fuseaux horaires
	acceptés par le serveur pour la saisie de données de type datetime. La
	valeur par défaut est 'Default', qui est une liste qui fonctionne
	presque dans le monde entier&nbsp;; il y a aussi 'Australia' et 'India'.
	D'autres listes peuvent être définies pour une installation
	particulière. Voir <xref linkend="datetime-appendix"/> pour plus
	d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
      <term><varname>extra_float_digits</varname> (<type>integer</type>)</term>

      <listitem>
      <indexterm>
       <primary>chiffres significatifs</primary>
      </indexterm>
      <indexterm>
       <primary>nombre à virgule flottante</primary>
       <secondary>affichage</secondary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>extra_float_digits</varname></primary>
      </indexterm>

       <para>
        Ce paramètre ajuste le nombre de chiffres affichés par les valeurs à
        virgule flottante, ceci incluant <type>float4</type>, <type>float8</type> et les
        types de données géométriques. La valeur du paramètre est ajouté au
        nombre standard de chiffres (<literal>FLT_DIG</literal> ou <literal>DBL_DIG</literal>
        comme approprié). La valeur peut être initialisée à une valeur maximum
        de 2 pour inclure les chiffres partiellement significatifs&nbsp;; c'est
        tout spécialement utile pour sauvegarder les données à virgule flottante
        qui ont besoin d'être restaurées exactement. Cette variable peut aussi
        être négative pour supprimer les chiffres non souhaités.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
      <term><varname>client_encoding</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>client_encoding</varname></primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
       <para>
        Initialise le codage côté client (ensemble de caractères). Par défaut,
        utilise le codage de la base de données.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
      <term><varname>lc_messages</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_messages</varname></primary>
      </indexterm>
       <para>
        Initialise la langue dans laquelle les messages sont affichés. Les
        valeurs acceptables sont dépendantes du système&nbsp;; voir <xref
        linkend="locale"/> pour plus d'informations. Si cette variable est
        initialisée en tant que chaîne vide (ce qui est la valeur par défaut),
        alors la valeur est héritée de l'environnement d'exécution du serveur.
       </para>

       <para>
        Avec certains systèmes, cette catégorie de locale n'existe pas.
        Initialiser cette variable fonctionnera toujours mais n'aura aucun
        effet. De même, il existe une chance pour qu'aucun message traduit
        n'existe pour la langue sélectionnée. Dans ce cas, vous continuerez de
        voir les messages en anglais.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
      <term><varname>lc_monetary</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_monetary</varname></primary>
      </indexterm>
       <para>
        Initialise la locale à utiliser pour formater les montants de monnaie,
        par exemple avec la famille de fonctions <function>to_char</function>.
        Les valeurs acceptables dépendent du système&nbsp;; voir la <xref
        linkend="locale"/> pour plus d'informations. Si cette variable est une
        chaîne vide (la valeur par défaut), alors la valeur est héritée de
        l'environnement d'exécution du serveur.
       </para>

       <para>
        Seuls les superutilisateurs peuvent modifier ce paramètre car il affecte
	les messages envoyés dans les traces du serveur ainsi qu'au client.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
      <term><varname>lc_numeric</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_numeric</varname></primary>
      </indexterm>
       <para>
        Initialise la locale à utiliser pour formater les nombres, par exemple
        avec la famille de fonctions <function>to_char</function>. Les valeurs
        acceptables dépendent du système&nbsp;; voir la <xref linkend="locale"/>
        pour plus d'informations. Si cette variable est une chaîne vide (valeur
        par défaut), alors la valeur est héritée de l'environnement d'exécution
        du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
      <term><varname>lc_time</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_time</varname></primary>
      </indexterm>
       <para>
        Initialise la locale à utiliser pour formater les valeurs de date et
        d'heure (actuellement, ce paramétrage ne fait rien mais il le pourrait
        dans le futur). Les valeurs acceptables dépendent du système&nbsp;; voir
        la <xref linkend="locale"/> pour plus d'informations. Si cette variable est
        une chaîne vide (la valeur par défaut), alors la valeur est héritée de
        l'environnement système du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-client-other">
     <title>Autres valeurs par défaut</title>

     <variablelist>

     <varlistentry id="guc-explain-pretty-print" xreflabel="explain_pretty_print">
      <term><varname>explain_pretty_print</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>explain_pretty_print</varname></primary>
      </indexterm>
       <para>
        Détermine si <command>EXPLAIN VERBOSE</command> utilise le format indenté ou
        non pour l'affichage des arbres détaillés des requêtes. Activé par
        défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-dynamic-library-path" 
       xreflabel="dynamic_library_path">
       <term><varname>dynamic_library_path</varname>
         (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration 
           <varname>dynamic_library_path</varname></primary>
       </indexterm>
       <indexterm><primary>chargement dynamique</primary></indexterm>
         <para>
           Si un module chargeable dynamiquement a besoin d'être ouvert et
           que le nom de fichier spécifié dans la commande <command>CREATE
           FUNCTION</command> ou <command>LOAD</command> ne contient pas de
           répertoire (c'est-à-dire que le nom ne contient pas de slash), le
           système cherchera ce chemin pour le fichier requis.
         </para>
  
         <para>
           La valeur pour <varname>dynamic_library_path</varname> doit être
           une liste de chemins absolus séparés par des virgules (ou des
           points virgules sous Windows).  Si un élément de la liste commence
           avec la chaîne spéciale <literal>$libdir</literal>, le répertoire
           des bibliothèques internes du paquetage
           <productname>PostgreSQL</productname> est substitué à
           <literal>$libdir</literal>. C'est l'emplacement où sont installés
           les modules fournis par la distribution
           <productname>PostgreSQL</productname> standard (utilisez
           <literal>pg_config --pkglibdir</literal> pour connaître le nom de
           ce répertoire). Par exemple&nbsp;:
<programlisting>dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'</programlisting>
           ou dans un environnement Windows&nbsp;:
<programlisting>dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'</programlisting>
         </para>

       <para>
        La valeur par défaut de ce paramètre est <literal>'$libdir'</literal>.
        Si la valeur est une chaîne vide, la recherche automatique du chemin est
        désactivée.
       </para>

       <para>
        Ce paramètre peut être modifié à l'exécution par les superutilisateurs
        mais un paramétrage réalisé de cette façon ne persistera que pendant la
        durée de la connexion du client, donc cette méthode devrait être
        réservée à des buts de développements. La façon recommandée
        pour initialiser ce paramètre est d'utiliser le fichier de configuration
        <filename>postgresql.conf</filename>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>gin_fuzzy_search_limit</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Limite haute de la taille d'un ensemble renvoyé par un index GIN.
        Pour plus d'informations, voir <xref linkend="gin-tips"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
      <term><varname>local_preload_libraries</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>local_preload_libraries</varname></primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</filename></primary>
      </indexterm>
      <listitem>
       <para>
        Cette variable spécifie une ou plusieurs bibliothèques partagées à
	charger lors du lancement du serveur. Si plus d'une bibliothèque doit
	être chargée, séparez leur noms avec des virgules. Ce paramètre
	ne peut pas être modifié après le lancement d'une session.
       </para>

       <para>
        Comme il ne s'agit pas d'une option réservée aux superutilisateurs,
	les bibliothèques pouvant être chargées sont restreintes à celles qui
	font partie du sous-répertoire <filename>plugins</filename> du
	répertoire standard des bibliothèques de votre installation. (Il est de
	la responsabilité de l'administrateur de bases de données de s'assurer
	que seuls des bibliothèques <quote>saines</quote> y soient installés.)
	Les entrées dans <varname>local_preload_libraries</varname> peuvent
	spécifier ce répertoire explicitement, par exemple
        <literal>$libdir/plugins/ma_lib</literal>, ou spécifier simplement le
	nom de la bibliothèque &mdash; <literal>ma_lib</literal> aurait le même
	effet que <literal>$libdir/plugins/ma_lib</literal>.
       </para>

       <para>
        Il n'y a pas d'avantage de performance à charger une bibliothèque au lancement
	du serveur ou à sa première utilisation. Le but de cette fonctionnalité
	est d'autoriser le chargement de bibliothèque de débogage ou de mesure
	de performance dans certaines sessions spécifiques sans qu'une commande
	<command>LOAD</command> spécifique ne soit donnée. Par exemple, le débogage
	pourrait être activé pour toutes les sessions sous un nom d'utilisateur
	donné en configurant ce paramètre avec <command>ALTER USER SET</command>.
       </para>

       <para>
        Si une bibliothèque spécifiée n'est pas trouvée, la tentative de
	connexion échouera.
       </para>

       <para>
        Chaque bibliothèque supportée par PostgreSQL a un <quote>bloc magique</quote>
	qui est vérifié pour garantir la compatibilité. Pour cette raison, les
	bibliothèques non PostgreSQL ne peuvent pas être chargées de cette façon.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
    <title>Gestion des verrous</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)</term>

      <listitem>
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>deadlock_timeout</varname></primary>
      </indexterm>

       <para>
        Temps total, en millisecondes, d'attente d'un verrou avant de vérifier
        s'il s'agit d'une condition de verrous morts (deadlock condition). La
        vérification d'un verrou mort est assez lente, donc le serveur ne le
        fait pas à chaque fois qu'il attend pour un verrou. Nous supposons (de
        façon optimiste) que les verrous morts ne sont pas communs pour les
        applications de production et nous attendons simplement un verrou
        pendant un certain temps avant de lancer une recherche de blocage.
        Augmenter cette valeur réduit le temps perdu en recherche inutile de
        verrous morts mais ralentit la détection de vraies erreurs de verrous
        morts. La valeur par défaut est de 1000 (c'est-à-dire une par seconde),
        ce qui est probablement la plus petite valeur que vous pourriez vouloir
        en pratique. Sur un serveur déjà chargé, vous pouvez
        l'augmenter. Idéalement, ce paramétrage devrait dépasser le temps
        typique d'une transaction de façon à améliorer la probabilité qu'un
        verrou soit abandonné avant que le processus en attente ne décide de
        lancer une recherche de verrous morts.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_locks_per_transaction</varname></primary>
      </indexterm>
       <para>
        La table des verrous partagés est créée avec l'espace nécessaire pour
	décrire les verrous sur <varname>max_locks_per_transaction</varname> *
	(<xref linkend="guc-max-connections"/> +
        <xref linkend="guc-max-prepared-transactions"/>) objets&nbsp;; du coup,
	un maximum de ce nombre d'objets distincts sera verrouillé en même
	temps (le nom de ce paramètre pourrait engendrer la confusion&nbsp;: il
	n'y a pas de limite dur sur le nombre de verrous pris par une
	transaction, mais plutôt une valeur moyenne ou maximum). Par défaut,
	64, qui a prouvé son adéquation historiquement, mais vous pourriez
	avoir besoin d'augmenter cette valeur si vous avez des clients qui
	touchent beaucoup de tables différentes dans une seule transaction.
	Ce paramètre est initialisé au lancement du serveur uniquement.
       </para>

       <para>
        Augmenter ce paramètre pourrait faire que <productname>PostgreSQL</productname>
        réclame plus de mémoire partagée <systemitem class="osname">System V</systemitem>
        ou de sémaphores que ne le permet la configuration par défaut de votre
	système d'exploitation. Voir la <xref linkend="sysvipc"/> pour plus
        d'informations sur la façon d'ajuster ces paramètres si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
    <title>Compatibilité de version et de plateforme</title>

    <sect2 id="runtime-config-compatible-version">
     <title>Précédentes versions de PostgreSQL</title>
     <variablelist>

     <varlistentry id="guc-add-missing-from" xreflabel="add_missing_from">
      <term><varname>add_missing_from</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>FROM</primary><secondary>manquant</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>add_missing_from</varname></primary>
      </indexterm>
       <para>
        Une fois activé, les tables référencées par une requête seront
	automatiquement ajoutées à la clause <literal>FROM</literal> si elles n'y sont
	pas déjà présentes. Ce comportement n'est pas compatible avec le
	standard SQL et beaucoup de personnes ne l'aiment pas car elle masque
	les erreurs (comme référencer une table alors que vous avez référencé
	son alias). Désactivé par défaut (<literal>off</literal>). Cette variable peut
	être activée pour des raisons de compatibilité avec les versions
	précédant la 8.1 de <productname>PostgreSQL</productname> où ce comportement était
	activé par défaut.
       </para>

       <para>
        Notez que même quand cette variable est activée, un message
	d'avertissement sera émis pour chaque entrée <literal>FROM</literal> implicite
	référencée par une requête. Les utilisateurs sont encouragés à mettre à
	jour leurs applications pour ne pas se baser sur ce comportement, en
	ajoutant toutes les tables référencées par une requête dans la clause
	<literal>FROM</literal> de cette requête (ou dans sa clause <literal>USING</literal> dans
	le cas d'un <command>DELETE</command>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
      <term><varname>array_nulls</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>array_nulls</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Ceci contrôle si l'analyseur de saisie de tableau reconnaît les
	<literal>NULL</literal> sans guillemets comme des éléments de tableaux
	NULL. Activé par défaut (<literal>on</literal>), autorisant la saisie
	de valeurs NULL dans un tableau. Néanmoins, les versions de
	<productname>PostgreSQL</productname> avant la 8.2 ne le supportaient
	pas et, du coup, pourraient traiter <literal>NULL</literal> comme une
	chaîne dont le contenu est <quote>NULL</quote>. Pour une compatibilité
	ascendante avec les applications nécessitant l'ancien comportement, ce
	paramètre peut être désactivée (<literal>off</literal>).
       </para>

       <para>
        Notez qu'il est possible de créer des valeurs de tableau contenant des
	NULL même quand cette variable est désactivée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm><primary>strings</primary><secondary>backslash quotes</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>backslash_quote</varname></primary>
      </indexterm>
       <para>
        Ceci contrôle si un guillemet peut être représenté par un
	<literal>\'</literal> dans une chaîne. Le moyen préféré, standard SQL, pour
	représenter un guillemet est de le doubler (<literal>''</literal>) mais,
	historiquement, <productname>PostgreSQL</productname> accepte aussi
        <literal>\'</literal>. Néanmoins, l'utilisation de <literal>\'</literal> ajoute des
        problèmes liés à la sécurité car certains codages d'ensembles de caractères
	des clients contiennent des caractères multi-octets dans lesquel le dernier
	octet est l'équivant ASCII numérique d'un <literal>\</literal>. Si le code côté
	client ne fait pas un échappement correct, alors une attaque par injection
	SQL est possible. Ce risque peut être annihilé en s'assurant que le 
	serveur rejette les requêtes dans lesquelles apparait un guillemet à
	échapper avec un antislash. Les valeurs autorisées de
	<varname>backslash_quote</varname> sont
        <literal>on</literal> (autorise <literal>\'</literal> en permanence),
	<literal>off</literal> (rejette en permanence) et
	<literal>safe_encoding</literal> (l'autorise seulement si le codage du client
	n'autorise pas l'ASCII <literal>\</literal> dans un caractère multioctet).
	<literal>safe_encoding</literal> est le paramétrage par défaut.
       </para>

       <para>
        Notez que dans une chaîne litérale conforme au standard,
	<literal>\</literal> signifie seulement <literal>\</literal>. Ce paramètre
	affecte la gestion des chaînes non conformes, incluant la syntaxe de chaînes
	d'échappement (<literal>E'...'</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-with-oids" xreflabel="default_with_oids">
       <term><varname>default_with_oids</varname>
         (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>default_with_oids</varname>
           </primary>
       </indexterm>
         <para>
           Elle contrôle si les commandes <command>CREATE TABLE</command> et
           <command>CREATE TABLE AS</command> incluent une colonne OID dans
           les tables nouvellement créées, si ni <literal>WITH OIDS</literal>
           ni <literal>WITHOUT OIDS</literal> ne sont spécifiées. Elle
           détermine aussi si les OID seront inclus dans les tables créés par
           <command>SELECT INTO</command>. Dans
	   <productname>PostgreSQL</productname> 8.1, 
           <varname>default_with_oids</varname> est désactivée contrairement
	   aux versions précédentes.
         </para>
       
         <para>
           L'utilisation d'OID dans les tables utilisateur est considérée comme
           obsolète, donc la plupart des installations devront laisser cette
           variable désactivée. Les applications qui requièrent des OID pour
           une table particulière devront spécifier <literal>WITH
           OIDS</literal> lors de la création de la table. Cette variable peut
           être activée pour des raisons de compatibilité avec les anciennes
           applications qui ne suivent pas ce comportement.
         </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>strings</primary><secondary>escape warning</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>escape_string_warning</varname></primary>
      </indexterm>
       <para>
        Activé, un message d'avertissement est affiché si un antislash
	(<literal>\</literal>) apparaît dans une chaîne litérale ordinaire (syntaxe
	<literal>'...'</literal>) et <varname>standard_conforming_strings</varname>
	est désactivé. Activé par défaut (<literal>on</literal>).
       </para>
       <para>
        Les applications souhaitant utiliser l'antislash comme échappement
	devront être modifiées pour utiliser la syntaxe de chaîne d'échappement
	(<literal>E'...'</literal>) car le comportement par défaut des chaînes
	ordinaires changera dans une prochaine version pour une raison de
	compatibilité avec le standard SQL. Cette variable peut être activée
	pour aider à la détection des applications cassées.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-regex-flavor" xreflabel="regex_flavor">
      <term><varname>regex_flavor</varname> (<type>string</type>)</term>
      <indexterm><primary>regular expressions</primary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>regex_flavor</varname></primary>
      </indexterm>
      <listitem>
       <para>
        L'expression rationnelle <quote>flavor</quote> peut être configurée à
	<literal>advanced</literal> (avancé), <literal>extended</literal> (étendu)
	ou <literal>basic</literal> (basique). La valeur par défaut est
	<literal>advanced</literal>. La configuration <literal>extended</literal>
	pourrait être utile pour une compatibilité ascendante avec les versions
	précédant la 7.4 de <productname>PostgreSQL</productname>. Voir
        <xref linkend="posix-syntax-details"/> pour plus de détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sql-inheritance" xreflabel="sql_inheritance">
      <term><varname>sql_inheritance</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>sql_inheritance</varname></primary>
      </indexterm>
      <indexterm><primary>inheritance</primary></indexterm>
      <listitem>
       <para>
        Ceci contrôle la sémantique de l'héritage. Si désactivé
	(<literal>off</literal>), les sous-tables ne seront pas inclus par
	défaut par les différentes commandes&nbsp;; généralement un mot
	clé <literal>ONLY</literal>. Ceci a été ajouté pour la compatibilité
	avec les versions antérieures à la 7.1. Voir
        <xref linkend="ddl-inherit"/> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)</term>
      <indexterm><primary>strings</primary><secondary>standard conforming</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>standard_conforming_strings</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Ceci contrôle si les chaînes ordinaires (<literal>'...'</literal>)
	traitent les antislashs litéralement comme spécifiés dans le standard
	SQL. Désactivé par défaut (<literal>off</literal>), ramenant
        <productname>PostgreSQL</productname> à son comportement historique
	pour le traitement des antislashs comme caractères d'échappement.
	La valeur par défaut sera passée à <literal>on</literal> dans une
	prochaine version pour améliorer la compatibilité avec le standard. Les
	applications peuvent vérifier ce paramètre pour déterminer la façon dont
	elles doivent traiter les chaînes litérales. La présence de ce
	paramètre indique aussi que la syntaxe d'échappement de chaîne
	(<literal>E'...'</literal>) est supportée. La syntaxe d'échappement
	de chaîne devrait être utilisée si une application désire que les
	antislashs soient traités comme des caractères d'échappement.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-compatible-clients">
     <title>Compatibilité de la plateforme et du client</title>
     <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_NULL_equals">
      <term><varname>transform_NULL_equals</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>IS NULL</primary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>transform_NULL_equals</varname></primary>
      </indexterm>
       <para>
        Une fois activée, les expressions de la forme
        <literal><replaceable>expr</replaceable> = NULL</literal> (ou <literal>NULL
        = <replaceable>expr</replaceable></literal>) sont traitées comme
        <literal><replaceable>expr</replaceable> IS NULL</literal>, c'est-à-dire qu'elles
        renvoient vrai si <replaceable>expr</replaceable> s'évalue par la valeur NULL, et
        faux sinon. Le bon comportement, compatible avec le standard SQL, de
	<literal><replaceable>expr</replaceable> = NULL</literal> est de toujours renvoyer
	NULL (inconnu). Du coup, ce paramètre est désactivé par défaut.
       </para>

       <para>
        Néanmoins, les formulaires filtrés dans <productname>Microsoft
        Access</productname> génèrent des requêtes qui utilisent
        <literal><replaceable>expr</replaceable> = NULL</literal> pour tester les valeurs
        NULL, donc si vous utilisez cette interface pour accéder à une base de
	données, vous souhaiterez activer ce paramètre. Comme les
        expressions de la forme <literal><replaceable>expr</replaceable> = NULL</literal>
        renvoient toujours la valeur NULL (en utilisant la bonne
        interprétation), elles ne sont pas très utiles et n'apparaissent pas
	souvent dans les applications normales, donc ce paramètre a peu
        d'utilité en pratique. Mais les nouveaux utilisateurs confondent
        fréquemment la sémantique des expressions impliquant des valeurs NULL.
	Du coup, ce paramètre n'est pas activé par défaut.
       </para>

       <para>
        Notez que ce paramètre affecte seulement la forme exacte
        <literal>= NULL</literal>, aucun autre opérateur de comparaison ou aucune autre
        expression qui sont équivalentes en terme de calcul à des expressions
        impliquant l'opérateur égal (telles que <literal>IN</literal>). Du coup,
	ce paramètre n'est pas un correctif général pour une mauvaise
	programmation.
       </para>

       <para>
        Référez-vous à la <xref linkend="functions-comparison"/> pour des
        informations en relation.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-preset">
     <title>Options préconfigurées</title>

     <para>
       Les <quote>paramètres</quote> suivant sont en lecture seule et sont
       déterminés lors de la compilation ou de l'installation de
       <productname>PostgreSQL</productname>. Ainsi, ils ont été exclus du
       fichier <filename>postgresql.conf</filename> d'exemple. Ces paramètres rapportent
       différents aspects du comportement de <productname>PostgreSQL</productname>
       qui pourraient avoir un intérêt pour certaines applications,
       particulièrement pour les interfaces d'administration.
     </para>

     <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
       <term><varname>block_size</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>block_size</varname></primary>
       </indexterm>
         <para>
           Affiche la taille d'un bloc disque. Elle est déterminée par la valeur
           de <literal>BLCKSZ</literal> à la construction du serveur. La valeur par
           défaut est de 8192&nbsp;octets. La signification de quelques variables
	   de configuration (comme <xref linkend="guc-shared-buffers"/>) est
	   influencée par <varname>block_size</varname>. Voir la <xref
	   linkend="runtime-config-resource"/> pour plus d'informations.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
       <term><varname>integer_datetimes</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>integer_datetimes</varname></primary>
       </indexterm>
         <para>
           Affiche si <productname>PostgreSQL</productname> a été construit avec
	   le support des dates et heures sur des entiers de 64 bits. Il est
	   configuré en utilisant <literal>--enable-integer-datetimes</literal>
	   au moment de la construction de <productname>PostgreSQL</productname>.
	   La valeur par défaut est <literal>off</literal>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
       <term><varname>lc_collate</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>lc_collate</varname></primary>
       </indexterm>
         <para>
           Affiche la locale utilisée pour le tri des données de type texte.
	   Voir la <xref linkend="locale"/> pour plus d'informations. La valeur est
	   déterminée lors de l'initialisation du groupe de bases de données.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
       <term><varname>lc_ctype</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>lc_ctype</varname></primary>
       </indexterm>
         <para>
           Affiche la locale déterminant les classifications de caractères.
	   Voir la <xref linkend="locale"/> pour plus d'informations. La valeur
	   est déterminée au moment de l'initialisation du groupe de bases de
	   données. D'habitude, elle sera identique à <varname>lc_collate</varname>
	   mais, pour des applications particulières, elle pourrait être
	   configurée différemment.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
       <term><varname>max_function_args</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_function_args</varname></primary>
       </indexterm>
         <para>
           Affiche le nombre maximum d'arguments des fonctions. Ce nombre est
	   déterminé par la valeur de <literal>FUNC_MAX_ARGS</literal> lors de la
	   construction du serveur. La valeur par défaut est de 100.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
       <term><varname>max_identifier_length</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_identifier_length</varname></primary>
       </indexterm>
         <para>
           Affiche la longueur maximum d'un identifiant. Elle est déterminée comme
	   valant <literal>NAMEDATALEN</literal> moins un lors de la construction du
	   serveur. La valeur par défaut de <literal>NAMEDATALEN</literal> est 64&nbsp;;
	   du coup, la valeur par défaut de <varname>max_identifier_length</varname>
	   est 63.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
       <term><varname>max_index_keys</varname> (<type>integer</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>max_index_keys</varname></primary>
       </indexterm>
         <para>
           Affiche le nombre maximum de clés d'index. Ce nombre est déterminé
	   par la valeur de <literal>INDEX_MAX_KEYS</literal> lors de la construction
	   du serveur. La valeur par défaut est 32.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
       <term><varname>server_encoding</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>server_encoding</varname></primary>
       </indexterm>
       <indexterm><primary>ensemble de caractères</primary></indexterm>
         <para>
           Affiche le codage de la base de données (ensemble de caractères).
	   Il est déterminé lors de la création de la base de données.
	   Habituellement, les clients sont seulement concernés par la valeur
	   de <xref linkend="guc-client-encoding"/>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
       <term><varname>server_version</varname> (<type>string</type>)</term>
       <listitem>
       <indexterm>
         <primary>paramètre de configuration <varname>server_version</varname></primary>
       </indexterm>
         <para>
           Affiche le numéro de version du serveur. Il est déterminé par la
	   valeur de <literal>PG_VERSION</literal> lors de la construction du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
      <term><varname>server_version_num</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>server_version_num</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Rapporte le numéro de version du serveur en tant qu'entier. Il est
	déterminé par la valeur de <literal>PG_VERSION_NUM</literal> lors de la
	construction du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-custom">
    <title>Options personnalisées</title>

    <para>
      Cette fonctionnalité a été conçue pour permettre l'ajout de paramètres
      habituellement inconnues de <productname>PostgreSQL</productname> 
      car ajoutées par des modules supplémentaires (comme les langages de
      procédures). Ceci autorise les modules à être configuré de la façon
      standard.
    </para>

  <variablelist>

    <varlistentry id="guc-custom-variable-classes" xreflabel="custom_variable_classes">
      <term><varname>custom_variable_classes</varname> (<type>string</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>custom_variable_classes</varname></primary>
      </indexterm>
        <para>
          Cette variable spécifie un ou plusieurs noms de classe à utiliser
	  par des variables personnalisées, de la forme d'une liste séparée par
	  des virgules. Une variable personnalisée est une variable habituellement
	  inconnue de <productname>PostgreSQL</productname> lui-même mais
	  utilisée par certains modules supplémentaires. Ces variables doivent
	  avoir des noms consistant en un nom de classe, un point et un nom de
	  variable. <varname>custom_variable_classes</varname> spécifie tous les noms
	  de classe utilisés dans une installation particulière.
	  Ce paramètre peut seulement être configuré dans le fichier
	  <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

     <para>
       La difficulté avec la configuration de variables personnalisées dans
       <filename>postgresql.conf</filename> est que le fichier doit être lu avant que
       les modules supplémentaires ne soient chargés et, du coup, les variables
       seraient habituellement rejetées comme étant inconnues. Lorsque
       <varname>custom_variable_classes</varname> est initialisé, le serveur acceptera
       les définitions de variables arbitraires à l'intérieur de chaque classe
       spécifiée. Ces variables seront traitées comme des emplacements vides et
       n'auront aucune fonction tant que le module qui les définit n'est pas
       chargé. Quand un module d'une classe spécifique est chargé, il ajoute les
       bonnes définitions de variables pour son nom de classe, convertit les
       valeurs des emplacements suivant les définitions et émet des messages
       d'avertissement pour tout emplacement restant dans sa classe (qui seraient
       à priori des noms de variables mal saisis).
     </para>

     <para>
       Voici un exemple de ce que pourrait contenir <filename>postgresql.conf</filename>
       en utilisant des variables personnalisées&nbsp;:

<programlisting>custom_variable_classes = 'plr,plperl'
plr.path = '/usr/lib/R'
plperl.use_strict = true
plruby.use_strict = true        # generates error, unknown class name</programlisting>
     </para>
   </sect1>

   <sect1 id="runtime-config-developer">
    <title>Options pour les développeurs</title>

    <para>
     Les paramètres suivants ont pour but de travailler sur les sources de
     <productname>PostgreSQL</productname> et, dans certains cas, d'assister
     à une récupération sur des bases de données sévèrement endommagées. Il n'y
     a aucune raison pour les utiliser dans la configuration d'un système de
     production. En tant que tel, ils ont été exclus du fichier d'exemple de
     <filename>postgresql.conf</filename>. Notez qu'un certain nombre d'entre eux
     requièrent des options de compilation spéciales pour fonctionner.
    </para>

    <variablelist>
     <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>allow_system_table_mods</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Autorise la modification de la structure des tables systèmes.
        C'est utilisé par <command>initdb</command>.
        Ce paramètre n'est modifiable qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
      <term><varname>debug_assertions</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_assertions</varname></primary>
      </indexterm>
       <para>
        Active différentes vérifications des affectations. C'est une aide au
        débogage. Si vous expérimentez des problèmes étranges ou des arrêts
	brutaux, vous pouvez l'activer car ce paramètre pourrait
	exposer des erreurs de programmation. Pour utiliser ce paramètre, la
	macro <symbol>USE_ASSERT_CHECKING</symbol> doit être définie lors de
        la construction de <productname>PostgreSQL</productname> (ceci
        s'accomplit par l'option <option>--enable-cassert</option> de
        <command>configure</command>). Notez que la valeur de
	<varname>debug_assertions</varname> est par défaut active si
        <productname>PostgreSQL</productname> a été construit après ajout
        de l'option ci-dessus.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>ignore_system_indexes</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Ignore les index système lors de la lecture des tables système (mais
	continue à mettre à jour les index lors de la modification des tables).
	C'est utile lors de la récupération d'index système endommagés. Ce
	paramètre ne peut pas être modifié après le démarrage de la session.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
      <term><varname>post_auth_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>post_auth_delay</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Si différent de zéro, un délai de ce nombre de secondes intervient quand
	un nouveau processus serveur est lancé, après l'étape d'authentification.
	Ceci a pour but de donner l'opportunité d'attacher un débogueur au
	processus serveur. Ce paramètre ne peut pas être modifié après le
	démarrage de la session.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>pre_auth_delay</varname></primary>
      </indexterm>
       <para>
        Si différent de zéro, un délai de ce nombre de secondes arrive juste
        après qu'un nouveau processus ne soit créé, avant le processus
        d'authentification. Ceci a pour but de donner une opportunité d'attacher
        un débogueur au processus serveur pour tracer les mauvais comportements
        pendant l'authentification.
	Ce paramètre peut seulement être configuré dans le fichier
	<filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
      <term><varname>trace_notify</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_notify</varname></primary>
      </indexterm>
       <para>
        Génère un grand nombre de sorties de débogage pour les commandes
        <command>LISTEN</command> et <command>NOTIFY</command>.
	<xref linkend="guc-client-min-messages"/> ou
        <xref linkend="guc-log-min-messages"/> doivent être
        <literal>DEBUG1</literal> ou plus bas pour envoyer cette sortie sur les
        traces client ou serveur, respectivement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
      <term><varname>trace_sort</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_sort</varname></primary>
      </indexterm>
       <para>
        Si actif, émet des informations sur l'utilisation des ressources lors
	des opérations de tri. Ce paramètre est seulement disponible si la
	macro <symbol>TRACE_SORT</symbol> était définie lorsque
	<productname>PostgreSQL</productname> a été compilé (néanmoins,
        <symbol>TRACE_SORT</symbol> est actuellement définie par défaut).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_locks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lock_oidmin</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lock_table</varname> (<type>boolean</type>)</term>
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)</term>
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        Différents autres paramètres de trace et de débogage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
      <term><varname>wal_debug</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_debug</varname></primary>
      </indexterm>
       <para>
        Si <literal>on</literal>, émet une sortie de débogage relative aux WAL.
	Ce paramètre est seulement disponible si la macro <symbol>WAL_DEBUG</symbol>
	était définie au moment de la compilation de <productname>PostgreSQL</productname>.
       </para>
      </listitem>
     </varlistentry>

      <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
       <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)</term>
       <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>zero_damaged_pages</varname></primary>
       </indexterm>
       <para>
        La détection d'une en-tête de page endommagée cause généralement le
        rapport d'une erreur par <productname>PostgreSQL</productname>, l'annulation de la
        commande courante. Initialiser <varname>zero_damaged_pages</varname> à <literal>on</literal>
        fait que le système rapporte à la place un avertissement, supprime la
        page endommagée et continue son traitement. Ce comportement
        <emphasis>détruira les données</emphasis>, c'est-à-dire toutes les lignes de la
        page endommagée. Mais cela vous permettra de passer l'erreur et de
        récupérer les lignes des pages non endommagées qui pourraient être
        présentes dans la table. Donc, c'est utile pour récupérer les données si
        la corruption est dûe à une erreur matérielle ou logicielle. Vous ne
	devriez généralement pas configurer ce paramètre à <literal>on</literal>
	sauf si vous abandonnez l'espoir de récupérer les données des pages
	endommagées d'une table. Le paramétrage par défaut est désactivé, et ne
	peut être modifié que par un superutilisateur.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </sect1>

  <sect1 id="runtime-config-short">
   <title>Options courtes</title>

   <para>
    Pour le côté pratique, voici les options sur une lettre en ligne de
    commande disponibles pour certains paramètres. Elles sont décrites dans
    le <xref linkend="runtime-config-short-table"/>. Certains des options existent
    pour des raisons historiques et leur présence en tant qu'option sur une
    lettre ne doit pas être vue comme une incitation à utiliser massivement
    cette option.
   </para>

    <table id="runtime-config-short-table">
     <title>Clés des options courtes</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Option courte</entry>
        <entry>Équivalent</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><option>-A <replaceable>x</replaceable></option></entry>
        <entry><literal>debug_assertions = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-e</option></entry>
	<entry><literal>datestyle = euro</literal></entry>
       </row>
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</literal>,
	  <literal>enable_hashjoin = off</literal>,
	  <literal>enable_indexscan = off</literal>,
	  <literal>enable_mergejoin = off</literal>,
	  <literal>enable_nestloop = off</literal>,
	  <literal>enable_seqscan = off</literal>,
	  <literal>enable_tidscan = off</literal>
         </entry>
       </row>
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</literal></entry>
       </row>
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-i</option></entry>
	<entry><literal>listen_addresses = '*'</literal></entry>
       </row>
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directory = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</literal></entry>
       </row>
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-O</option></entry>
	<entry><literal>allow_system_table_mods = on</literal></entry>
       </row>
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-P</option></entry>
	<entry><literal>ignore_system_indexes = on</literal></entry>
       </row>
       <row>
        <entry><option>-s</option></entry>
	<entry><literal>log_statement_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
	<entry><literal>work_mem = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
	<entry><literal>log_parser_stats = on</literal>,
        <literal>log_planner_stats = on</literal>, 
	<literal>log_executor_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
	<entry><literal>post_auth_delay = <replaceable>x</replaceable></literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>
 </chapter>
