<!-- DerniËre modification
     le       $Date$
     par      $Author$
     rÈvision $Revision$ -->

<sect1 id="dblink">
 <title>dblink</title>

 <indexterm zone="dblink">
  <primary>dblink</primary>
 </indexterm>

 <para>
  <filename>dblink</filename> is a module which supports connections to
  other <productname>PostgreSQL</productname> databases from within a database
  session.
 </para>

 <refentry id="CONTRIB-DBLINK-CONNECT">
  <refnamediv>
   <refname>dblink_connect</refname>
   <refpurpose>ouvre une connexion persistante vers une base de donn√©es
    distante</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_connect(text connstr) returns text
    dblink_connect(text connname, text connstr) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_connect()</function> establishes a connection to a remote
    <productname>PostgreSQL</productname> database.  The server and database to
    be contacted are identified through a standard <application>libpq</application>
    connection string.  Optionally, a name can be assigned to the
    connection.  Multiple named connections can be open at once, but
    only one unnamed connection is permitted at a time.  The connection
    will persist until closed or until the database session is ended.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Le nom √† utiliser pour cette connexion&nbsp;; en cas d'omission,
       une connexion sans nom est ouverte, rempla√ßant toute autre connexion
       sans nom.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>connstr</parameter></term>
     <listitem>
      <para>
       Cha√Æne de connexion au format standard de la
       <application>libpq</application>, par exemple
       <literal>hostaddr=127.0.0.1 port=5432 dbname=mabase user=postgres
       password=monmotdepasse</literal>.
       Pour les d√©tails, voir <function>PQconnectdb</function> dans
       <xref linkend="libpq-connect"/>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie le statut qui est toujours <literal>OK</literal> (car toute
    erreur fait que la fonction bascule en mode erreur plut√¥t que de
    renvoyer quelque chose).
   </para>
  </refsect1>

  <refsect1>
   <title>Notes</title>

   <para>
    Seuls les super-utilisateurs peuvent utiliser
    <function>dblink_connect</function> pour cr√©er des connexions authentifi√©es
    sans mot de passe. Si des utilisateurs standards ont besoin de cette
    capacit√©, utilisez √† la place la fonction
    <function>dblink_connect_u</function>.
   </para>

   <para>
    Il est d√©conseill√© de choisir des noms de connexion contenir des
    signes d'√©galit√© car c'est un risque de confusion avec les cha√Ænes de
    connexion dans les autres fonctions <filename>dblink</filename>.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 select dblink_connect('myconn', 'dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-CONNECT-U">
  <refnamediv>
   <refname>dblink_connect_u</refname>
   <refpurpose>ouvre une connexions distante √† une base de donn√©es de
    fa√ßon non s√©curis√©e</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_connect_u(text connstr) returns text
    dblink_connect_u(text connname, text connstr) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_connect_u()</function> est identique √†
    <function>dblink_connect()</function>, sauf qu'elle permettra √† des
    utilisateurs standards de se connecter en utilisant toute m√©thode
    d'authentification.
   </para>

   <para>
    Si le serveur distant s√©lectionne une m√©thode d'authentification qui
    n'implique pas de mot de passe, une impersonnalisation et une escalade
    de droits peut survenir car la session semblera venir de l'utilisateur
    qui ex√©cute <productname>PostgreSQL</productname>. Du coup,
    <function>dblink_connect_u()</function> est install√© initialement sans
    aucun droit pour <literal>PUBLIC</literal>, le rendant utilisable que
    par les super-utilisateurs. Dans certaines situations, il peut √™tre
    appropri√© de donner le droit <literal>EXECUTE</literal> sur
    <function>dblink_connect_u()</function> √† certains utilisateurs
    sp√©cifiques qui sont consid√©r√©s de confiance, mais cela doit se faire
    avec une grande attention.
   </para>

   <para>
    Pour plus de d√©tails, voir <function>dblink_connect()</function>.
   </para>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-DISCONNECT">
  <refnamediv>
   <refname>dblink_disconnect</refname>
   <refpurpose>ferme une connexion persistante vers une base de donn√©es
    distantes</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_disconnect() returns text
    dblink_disconnect(text connname) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_disconnect()</function> ferme une connexion ouverte
    par <function>dblink_connect()</function>. La forme sans argument
    ferme une connexion sans nom.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Le nom de la connexion √† fermer
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie le statut qui est toujours <literal>OK</literal> (car toute
    erreur fait que la fonction bascule en mode erreur plut√¥t que de
    renvoyer quelque chose).
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 test=# select dblink_disconnect();
  dblink_disconnect
 -------------------
  OK
 (1 row)

 select dblink_disconnect('myconn');
  dblink_disconnect
 -------------------
  OK
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK">
  <refnamediv>
   <refname>dblink</refname>
   <refpurpose>ex√©cute une requ√™te sur une base de donn√©es
   distante</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink(text connname, text sql [, bool fail_on_error]) returns setof record
    dblink(text connstr, text sql [, bool fail_on_error]) returns setof record
    dblink(text sql [, bool fail_on_error]) returns setof record
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink</function> ex√©cute une requ√™te (habituellement un
    <command>SELECT</command>, mais cela pourrait √™tre toute instruction
    SQL qui renvoie des lignes) sur une base de donn√©es distante.
   </para>

   <para>
    Si deux arguments <type>text</type> sont pr√©sents, le premier est utilis√©
    comme nom d'une connexion persistante. Si cette connexion est trouv√©e,
    la commande est ex√©cut√©e sur cette connexion. Si elle n'est pas trouv√©e,
    le premier argument est pris pour une cha√Æne de connexion comme
    <function>dblink_connect</function>, et la connexion indiqu√©e est
    conserv√©e uniquement pendant la dur√©e d'ex√©cution de cette commande.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Le nom √† utiliser pour cette connexion&nbsp;; omettez ce param√®tre
       pour utiliser la connexion sans nom.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>connstr</parameter></term>
     <listitem>
      <para>
       Une cha√Æne de connexion d√©crite pr√©c√©demment pour
       <function>dblink_connect</function>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
        L'instruction SQL √† ex√©cuter sur l'h√¥te distant, par exemple
	<literal>select * from foo</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
       Si true (la valeur par d√©faut si elle n'est pas pr√©cis√©e), un message
       de type ERROR sur la base distante cause l'envoi d'un message de type
       ERROR en local. Dans le cas contraire, le message distant de type ERROR
       est trait√© localement comme un NOTICE, et aucune ligne n'est renvoy√©e.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    La fonction renvoie les lignes produites par la requ√™te. Comme
    <function>dblink</function> peut √™tre utilis√©e avec toute requ√™te, elle
    est d√©clar√©e comme renvoyant le type <type>record</type>, et ne sp√©cifie
    donc aucun ensemble particulier de colonnes. Ceci signifie que vous
    devez sp√©cifier l'ensemble de colonnes attendues dans la requ√™te
    appelant &mdash; sinon <productname>PostgreSQL</productname> ne sait pas
    √† quoi s'attendre. Voici un exemple&nbsp;:

<programlisting>
SELECT *
    FROM dblink('dbname=mydb', 'select proname, prosrc from pg_proc')
      AS t1(proname name, prosrc text)
    WHERE proname LIKE 'bytea%';
</programlisting>

    La partie <quote>alias</quote> de la clause <literal>FROM</literal> doit
    sp√©cifier les noms et types des colonnes que la fonction va renvoyer.
    (Sp√©cifier les noms des colonnes dans un alias est en fait une syntaxe
    du standard SQL mais sp√©cifier les types des colonnes est une extension
    <productname>PostgreSQL</productname>.) Ceci permet au syst√®me de
    savoir comment √©tendre <literal>*</literal>, et √† quoi correspond <structname>proname</structname> dans la clause <literal>WHERE</literal>
    avant de tenter l'ex√©cution de la fonction. √Ä l'ex√©cution, une erreur
    sera renvoy√©e si le r√©sultat r√©el de la requ√™te √† partir de la base de
    donn√©es distante n'a pas le m√™me nombre de colonnes que celui indiqu√©
    dans la clause <literal>FROM</literal>. Les noms de colonnes n'ont pas
    besoin de correspondre et <function>dblink</function> n'insiste pas
    sur une correspondance exacte des types. L'op√©ration sera une r√©ussite
    si les cha√Ænes de donn√©es renvoy√©es sont valides pour le type d√©clar√©
    dans la clause <literal>FROM</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>Notes</title>

   <para>
    <function>dblink</function> r√©cup√®re les r√©sultats complet de la
    requ√™te avant des les renvoyer au syst√®me local. Si la requ√™te doit
    renvoyer un grand nombre de lignes, il est pr√©f√©rable d'ouvrir un
    curseur avec <function>dblink_open</function> puis de r√©cup√©rer un
    nombre g√©rable de lignes.
   </para>

   <para>
    Une fa√ßon agr√©able d'utiliser <function>dblink</function> avec des
    requ√™tes pr√©d√©termin√©es est de cr√©er une vue. Ceci permet de stocker
    l'information sur les colonnes dans la vue, au lieu d'avoir √† la saisir
    pour chaque requ√™te. Par exemple&nbsp;:

    <programlisting>
    create view myremote_pg_proc as
      select *
        from dblink('dbname=postgres', 'select proname, prosrc from pg_proc')
        as t1(proname name, prosrc text);

    select * from myremote_pg_proc where proname like 'bytea%';
    </programlisting>
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 select * from dblink('dbname=postgres', 'select proname, prosrc from pg_proc')
  as t1(proname name, prosrc text) where proname like 'bytea%';
   proname   |   prosrc
 ------------+------------
  byteacat   | byteacat
  byteaeq    | byteaeq
  bytealt    | bytealt
  byteale    | byteale
  byteagt    | byteagt
  byteage    | byteage
  byteane    | byteane
  byteacmp   | byteacmp
  bytealike  | bytealike
  byteanlike | byteanlike
  byteain    | byteain
  byteaout   | byteaout
 (12 rows)

 select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 select * from dblink('select proname, prosrc from pg_proc')
  as t1(proname name, prosrc text) where proname like 'bytea%';
   proname   |   prosrc
 ------------+------------
  byteacat   | byteacat
  byteaeq    | byteaeq
  bytealt    | bytealt
  byteale    | byteale
  byteagt    | byteagt
  byteage    | byteage
  byteane    | byteane
  byteacmp   | byteacmp
  bytealike  | bytealike
  byteanlike | byteanlike
  byteain    | byteain
  byteaout   | byteaout
 (12 rows)

 select dblink_connect('myconn', 'dbname=regression');
  dblink_connect
 ----------------
  OK
 (1 row)

 select * from dblink('myconn', 'select proname, prosrc from pg_proc')
  as t1(proname name, prosrc text) where proname like 'bytea%';
   proname   |   prosrc
 ------------+------------
  bytearecv  | bytearecv
  byteasend  | byteasend
  byteale    | byteale
  byteagt    | byteagt
  byteage    | byteage
  byteane    | byteane
  byteacmp   | byteacmp
  bytealike  | bytealike
  byteanlike | byteanlike
  byteacat   | byteacat
  byteaeq    | byteaeq
  bytealt    | bytealt
  byteain    | byteain
  byteaout   | byteaout
 (14 rows)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-EXEC">
  <refnamediv>
   <refname>dblink_exec</refname>
   <refpurpose>ex√©cute une commande sur une base de donn√©es
    distante</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_exec(text connname, text sql [, bool fail_on_error]) returns text
    dblink_exec(text connstr, text sql [, bool fail_on_error]) returns text
    dblink_exec(text sql [, bool fail_on_error]) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_exec</function> ex√©cute une commande (c'est-√†-dire toute
    instruction SQL qui ne renvoie pas de lignes) dans une base de donn√©es
    distante.
   </para>

   <para>
    Quand deux arguments de type <type>text</type> sont fournis, le premier
    est recherch√© comme nom d'une connexion persistante&nbsp;; si cette
    connexion est trouv√©e, la commande est ex√©cut√©e sur cette connexion. Dans
    le cas contraire, le premier argument est trait√©e comme une cha√Æne de
    connexion pour <function>dblink_connect</function>, et la connexion
    indiqu√©e est maintenue uniquement pour la dur√©e d'ex√©cution de cette
    commande.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† utiliser&nbsp;; omettez ce param√®tre pour
       utiliser la connexion sans nom.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>connstr</parameter></term>
     <listitem>
      <para>
       Une cha√Æne de connexion identique √† celle d√©crite pour
       <function>dblink_connect</function>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
       La commande SQL que vous souhaitez ex√©cuter dans la base de donn√©es
       distante&nbsp;; par exemple
       <literal>insert into foo values(0,'a','{"a0","b0","c0"}')</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
       Si true (la valeur par d√©faut si elle n'est pas pr√©cis√©e), un message
       de type ERROR sur la base distante cause l'envoi d'un message de type
       ERROR en local. Dans le cas contraire, le message distant de type ERROR
       est trait√© localement comme un NOTICE, et la valeur renvoy√©e est
       <literal>ERROR</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie le statut de la commande ou <literal>ERROR</literal> en cas
    d'√©chec.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 select dblink_connect('dbname=dblink_test_slave');
  dblink_connect
 ----------------
  OK
 (1 row)

 select dblink_exec('insert into foo values(21,''z'',''{"a0","b0","c0"}'');');
    dblink_exec
 -----------------
  INSERT 943366 1
 (1 row)

 select dblink_connect('myconn', 'dbname=regression');
  dblink_connect
 ----------------
  OK
 (1 row)

 select dblink_exec('myconn', 'insert into foo values(21,''z'',''{"a0","b0","c0"}'');');
    dblink_exec
 ------------------
  INSERT 6432584 1
 (1 row)

 select dblink_exec('myconn', 'insert into pg_class values (''foo'')',false);
 NOTICE:  sql error
 DETAIL:  ERROR:  null value in column "relnamespace" violates not-null constraint

  dblink_exec
 -------------
  ERROR
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-OPEN">
  <refnamediv>
   <refname>dblink_open</refname>
   <refpurpose>ouvre un curseur vers une base de donn√©es distante</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_open(text cursorname, text sql [, bool fail_on_error]) returns text
    dblink_open(text connname, text cursorname, text sql [, bool fail_on_error]) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_open()</function> ouvre un curseur vers une base de
    donn√©es distante. Le curseur peut ensuite √™tre manipul√© avec
    <function>dblink_fetch()</function> et
    <function>dblink_close()</function>.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† utiliser&nbsp;; omettez ce param√®tre pour
       utiliser la connexion sans nom.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>cursorname</parameter></term>
     <listitem>
      <para>
       Nom √† affecter au curseur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
       L'instruction <command>SELECT</command> √† ex√©cuter sur l'h√¥te distant,
       par exemple <literal>select * from pg_class</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
       Si true (la valeur par d√©faut si elle n'est pas pr√©cis√©e), un message
       de type ERROR sur la base distante cause l'envoi d'un message de type
       ERROR en local. Dans le cas contraire, le message distant de type ERROR
       est trait√© localement comme un NOTICE, et la valeur renvoy√©e est
       <literal>ERROR</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie le statut, soit <literal>OK</literal> soit
    <literal>ERROR</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>Notes</title>

   <para>
    Comme un curseur peut seulement persister dans une transaction,
    <function>dblink_open</function> lance un bloc de transaction explicite
    (<command>BEGIN</command>) du c√¥t√© distant, si le c√¥t√© distant n'√©tait
    pas d√©j√† √† l'int√©rieur d'une transaction. Cette transaction sera de
    nouveau ferm√©e quand l'instruction <function>dblink_close</function>
    est ex√©cut√©e. Notez que si vous utilisez <function>dblink_exec</function>
    pour modifier les donn√©es entre <function>dblink_open</function> et
    <function>dblink_close</function>, et qu'ensuite une erreur survient ou
    que vous utilisez <function>dblink_disconnect</function> avant
    <function>dblink_close</function>, vos modifications <emphasis>seront
    perdues</emphasis> car la transaction sera annul√©e.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 test=# select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 test=# select dblink_open('foo', 'select proname, prosrc from pg_proc');
  dblink_open
 -------------
  OK
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-FETCH">
  <refnamediv>
   <refname>dblink_fetch</refname>
   <refpurpose>renvoie des lignes √† partir d'un curseur ouvert sur une
    base de donn√©es distante</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_fetch(text cursorname, int howmany [, bool fail_on_error]) returns setof record
    dblink_fetch(text connname, text cursorname, int howmany [, bool fail_on_error]) returns setof record
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_fetch</function> r√©cup√®re des lignes √† partir d'un
    curseur d√©j√† ouvert par <function>dblink_open</function>.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† utiliser&nbsp;; omettez ce param√®tre pour
       utiliser la connexion sans nom.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>cursorname</parameter></term>
     <listitem>
      <para>
       Le nom du curseur √† partir duquel r√©cup√©rer les lignes.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>howmany</parameter></term>
     <listitem>
      <para>
       Nombre maximum de lignes √† r√©cup√©rer. Les
       <parameter>howmany</parameter> lignes suivantes sont r√©cup√©r√©es, en
       commen√ßant √† la position actuelle du curseur, vers l'avant. Une fois
       le curseur positionn√© √† la fin, aucune ligne suppl√©mentaire ne sera
       renvoy√©e.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
       Si true (la valeur par d√©faut si elle n'est pas pr√©cis√©e), alors une
       erreur sur la base distante cause l'envoie d'un rapport d'erreur en
       local. Si elle vaut false, l'erreur distante est rapport√©e localement
       comme un NOTICE et la fonction ne renvoie aucune ligne.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    La fonction renvoie les lignes r√©cup√©r√©es √† partir du curseur. Pour
    utiliser cette fonction, vous devez sp√©cifier l'ensemble de colonnes
    attendues, comme discut√© pr√©c√©demment pour <function>dblink</function>.
   </para>
  </refsect1>

  <refsect1>
   <title>Notes</title>

   <para>
    Avec une diff√©rence entre le nombre de colonnes renvoy√©es sp√©cifi√©es dans
    la clause <literal>FROM</literal>, et le nombre r√©el de colonnes renvoy√©es
    par le curseur distant, une erreur sera remont√©e. Dans ce cas, le curseur
    distant est toujours avanc√© de ce nombre de lignes. C'est aussi vrai pour
    toute autre erreur survenant dans la requ√™te locale apr√®s l'ex√©cution
    du <command>FETCH</command> distant.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 test=# select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 test=# select dblink_open('foo', 'select proname, prosrc from pg_proc where proname like ''bytea%''');
  dblink_open
 -------------
  OK
 (1 row)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
  funcname |  source
 ----------+----------
  byteacat | byteacat
  byteacmp | byteacmp
  byteaeq  | byteaeq
  byteage  | byteage
  byteagt  | byteagt
 (5 rows)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
  funcname  |  source
 -----------+-----------
  byteain   | byteain
  byteale   | byteale
  bytealike | bytealike
  bytealt   | bytealt
  byteane   | byteane
 (5 rows)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
   funcname  |   source
 ------------+------------
  byteanlike | byteanlike
  byteaout   | byteaout
 (2 rows)

 test=# select * from dblink_fetch('foo', 5) as (funcname name, source text);
  funcname | source
 ----------+--------
 (0 rows)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-CLOSE">
  <refnamediv>
   <refname>dblink_close</refname>
   <refpurpose>ferme un curseur sur une base de donn√©es distante</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_close(text cursorname [, bool fail_on_error]) returns text
    dblink_close(text connname, text cursorname [, bool fail_on_error]) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_close</function> ferme un curseur pr√©c√©demment ouvert
    avec <function>dblink_open</function>.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† utiliser&nbsp;; omettez ce param√®tre pour
       utiliser la connexion sans nom.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>cursorname</parameter></term>
     <listitem>
      <para>
       Nom du curseur √† fermer
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
       Si true (la valeur par d√©faut si elle n'est pas pr√©cis√©e), un message
       de type ERROR sur la base distante cause l'envoi d'un message de type
       ERROR en local. Dans le cas contraire, le message distant de type ERROR
       est trait√© localement comme un NOTICE, et la valeur renvoy√©e est
       <literal>ERROR</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie le statut, soit <literal>OK</literal> soit
    <literal>ERROR</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>Notes</title>

   <para>
    Si <function>dblink_open</function> a commenc√© un bloc de transaction
    explicite, et que c'est le dernier curseur ouvrant restant dans cette
    connexion, <function>dblink_close</function> ex√©cutera le
    <command>COMMIT</command> correspondant.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 test=# select dblink_connect('dbname=postgres');
  dblink_connect
 ----------------
  OK
 (1 row)

 test=# select dblink_open('foo', 'select proname, prosrc from pg_proc');
  dblink_open
 -------------
  OK
 (1 row)

 test=# select dblink_close('foo');
  dblink_close
 --------------
  OK
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-GET-CONNECTIONS">
  <refnamediv>
   <refname>dblink_get_connections</refname>
   <refpurpose>renvoie les noms de toutes les connexions nomm√©es
   ouvertes</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_get_connections() returns text[]
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_get_connections</function> renvoie un tableau contenant
    le nom de toutes les connexions nomm√©es et ouvertes de
    <filename>dblink</filename>.
   </para>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>Renvoie un tableau de texte des noms des connexion, ou NULL s'il n'y
   en as pas.</para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
   SELECT dblink_get_connections();
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-ERROR-MESSAGE">
  <refnamediv>
   <refname>dblink_error_message</refname>
   <refpurpose>r√©cup√®re le dernier message d'erreur sur la connexion
    nomm√©e</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_error_message(text connname) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_error_message</function> r√©cup√®re le dernier message
    d'erreur sur la connexion nomm√©e.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Return Value</title>

   <para>
    Renvoie le dernier message, ou une cha√Æne vide s'il n'y a pas eu
    d'erreur sur cette connexion.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
    SELECT dblink_error_message('dtest1');
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-SEND-QUERY">
  <refnamediv>
   <refname>dblink_send_query</refname>
   <refpurpose>envoie une requ√™te asynchrone √† une base de donn√©es
    distante</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_send_query(text connname, text sql) returns int
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_send_query</function> envoie une requ√™te √† ex√©cuter
    de fa√ßon asynchrone, c'est-√†-dire sans attendre imm√©diatement le r√©sultat.
    Il ne doit pas y avoir une requ√™te asynchrone d√©j√† en ex√©cution sur la
    connexion.
   </para>

   <para>
    Apr√®s un envoi r√©ussi d'une requ√™te asynchrone, le statut de fin
    d'ex√©cution de la requ√™te se v√©rifie avec
    <function>dblink_is_busy</function>, et les r√©sultats sont finalement
    r√©cup√©r√©s avec <function>dblink_get_result</function>. Il est aussi
    de tenter l'annulation d'une rqu√™te asynchrone active en utilisant
    <function>dblink_cancel_query</function>.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† utiliser.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
       L'instruction SQL que vous voulez ex√©cuter dans la base de donn√©es
       distante, par exemple <literal>select * from pg_class</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie 1 si la requ√™te a √©t√© envoy√©e avec succ√®s, 0 sinon.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
    SELECT dblink_send_query('dtest1', 'SELECT * FROM foo WHERE f1 &lt; 3');
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-IS-BUSY">
  <refnamediv>
   <refname>dblink_is_busy</refname>
   <refpurpose>v√©rifie si la connexion est occup√©e avec une requ√™te
   asynchrone</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_is_busy(text connname) returns int
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_is_busy</function> teste si une requ√™te asynchrone est
    en cours d'ex√©cution.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† v√©rifier
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie 1 si la connexion est occup√©e, 0 dans le cas contraire.
    Si cette fonction renvoie 0, il est garantie que
    <function>dblink_get_result</function> ne bloquera pas.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
    SELECT dblink_is_busy('dtest1');
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-GET-RESULT">
  <refnamediv>
   <refname>dblink_get_result</refname>
   <refpurpose>r√©cup√®re le r√©sultat d'une requ√™te asynchrone</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_get_result(text connname [, bool fail_on_error]) returns setof record
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_get_result</function> r√©cup√®re le r√©sultat d'une
    requ√™te asynchrone pr√©c√©demment envoy√©e avec
    <function>dblink_send_query</function>. Si la requ√™te n'est pas d√©j√†
    termin√©e, <function>dblink_get_result</function> attendra jusqu'√† ce que
    ce soit le cas.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† utiliser
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
       Si true (la valeur par d√©faut si elle n'est pas pr√©cis√©e), un message
       de type ERROR sur la base distante cause l'envoi d'un message de type
       ERROR en local. Dans le cas contraire, le message distant de type ERROR
       est trait√© localement comme un NOTICE, et aucune ligne n'est renvoy√©e.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Pour une requ√™te asynchrone (c'est-√†-dire une requ√™te SQL renvoyant des
    lignes), la fonction renvoie les lignes produites par la requ√™te. Pour
    utiliser cette fonction, vous devez indiquer l'ensemble des colonnes
    attendues comme indiqu√© pour <function>dblink</function>.
   </para>

   <para>
    Pour une commande asynchrone (c'est-√†-dire une requ√™te SQL renvoyant des
    lignes), la fonction renvoie une seule ligne avec une colonne texte
    contenant la cha√Æne de statut de la commande. Il est n√©cessaire de
    sp√©cifier que le r√©sultat aura une colonne texte dans la clause
    <literal>FROM</literal> appelante.
   </para>
  </refsect1>

  <refsect1>
   <title>Notes</title>

   <para>
    Cette fonction <emphasis>doit</emphasis> √™tre appel√©e si
    <function>dblink_send_query</function> a renvoy√© 1. Elle doit √™tre appel√©e
    une fois pour chaque requ√™te envoy√©e, et une fois de plus pour obtenir
    un ensemble vide avant de pouvoir utiliser de nouveau la connexion.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 contrib_regression=#   SELECT dblink_connect('dtest1', 'dbname=contrib_regression');
  dblink_connect
 ----------------
  OK
 (1 row)

 contrib_regression=#   SELECT * from
 contrib_regression-#    dblink_send_query('dtest1', 'select * from foo where f1 &lt; 3') as t1;
  t1
 ----
   1
 (1 row)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 |     f3
 ----+----+------------
   0 | a  | {a0,b0,c0}
   1 | b  | {a1,b1,c1}
   2 | c  | {a2,b2,c2}
 (3 rows)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 | f3
 ----+----+----
 (0 rows)

 contrib_regression=#   SELECT * from
    dblink_send_query('dtest1', 'select * from foo where f1 &lt; 3; select * from foo where f1 &gt; 6') as t1;
  t1
 ----
   1
 (1 row)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 |     f3
 ----+----+------------
   0 | a  | {a0,b0,c0}
   1 | b  | {a1,b1,c1}
   2 | c  | {a2,b2,c2}
 (3 rows)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 |      f3
 ----+----+---------------
   7 | h  | {a7,b7,c7}
   8 | i  | {a8,b8,c8}
   9 | j  | {a9,b9,c9}
  10 | k  | {a10,b10,c10}
 (4 rows)

 contrib_regression=#   SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[]);
  f1 | f2 | f3
 ----+----+----
 (0 rows)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-CANCEL-QUERY">
  <refnamediv>
   <refname>dblink_cancel_query</refname>
   <refpurpose>annule toute requ√™te en cours d'ex√©cution sur la connexion
    nomm√©e</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_cancel_query(text connname) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_cancel_query</function> tente d'annuler toute requ√™te
    en cours d'ex√©cution sur la connexion nomm√©e. Notez que la r√©ussite de
    la fonction n'est pas assur√©e (car, par exemple, la requ√™te distante
    pourrait √™tre d√©j√† termin√©e). Une demande d'annulation am√©liore simplement
    les possibilit√©s que la question √©choue rapidement. Vous devez toujours
    terminer le protocole de la requ√™te, par exemple en appelant
    <function>dblink_get_result</function>.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
       Nom de la connexion √† utiliser.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie <literal>OK</literal> si la demande d'annulation a bien √©t√©
    envoy√©e, ou le texte d'un message d'erreur en cas d'√©chec.
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
    SELECT dblink_cancel_query('dtest1');
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-CURRENT-QUERY">
  <refnamediv>
   <refname>dblink_current_query</refname>
   <refpurpose>renvoie la requ√™te en cours</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_current_query() returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    Renvoie la commande en cours d'ex√©cution sur la session locale, ou
    NULL si ce n'est pas d√©terminable. Notez que cette fonction n'a pas
    de relation avec d'autres fonctionnalit√©s de <filename>dblink</filename>.
    Elle est fournie car elles est parfois utile pour g√©n√©rer des requ√™tes √†
    envoyer √† des bases distantes.
   </para>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>Renvoie une copie de la requ√™te en cours d'ex√©cution.</para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
test=# select dblink_current_query();
      dblink_current_query
--------------------------------
 select dblink_current_query();
(1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-GET-PKEY">
  <refnamediv>
   <refname>dblink_get_pkey</refname>
   <refpurpose>renvoie la position et le nom des champs de cl√© primaire
    d'une relation
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_get_pkey(text relname) returns setof dblink_pkey_results
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_get_pkey</function> fournit des informations sur la cl√©
    primaire d'une relation dans la base de donn√©es locale. C'est parfois
    utile dans la g√©n√©ration de requ√™tes √† envoyer sur des bases distantes.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
       Nom d'une relation existante, par exemple <literal>foo</literal> ou
       <literal>monschema.matable</literal>. Ajoutez des guillemets doubles
       si le nom est en minuscule et en majuscule, ou contient des
       caract√®res sp√©ciaux, par exemple <literal>"FooBar"</literal>&nbsp;;
       sans guillemets, la cha√Æne sera mise en minuscule.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>
    Renvoie une ligne pour chaque champ de cl√© primaire, ou aucune ligne
    si la relation n'a pas de cl√© primaire. Le type de ligne r√©sultante
    est d√©fini ainsi&nbsp;:

    <programlisting>
CREATE TYPE dblink_pkey_results AS (position int, colname text);
    </programlisting>
   </para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
test=# create table foobar(f1 int, f2 int, f3 int,
test(#   primary key(f1,f2,f3));
CREATE TABLE
test=# select * from dblink_get_pkey('foobar');
 position | colname
----------+---------
        1 | f1
        2 | f2
        3 | f3
(3 rows)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-BUILD-SQL-INSERT">
  <refnamediv>
   <refname>dblink_build_sql_insert</refname>
   <refpurpose>
    construit une instruction d'insertion en utilisant une ligne locale,
    rempla√ßant les valeurs des champs de la cl√© primaire pour la s√©lection
    avec les valeurs fournies
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_build_sql_insert(text relname,
                            int2vector primary_key_attnums,
                            int2 num_primary_key_atts,
                            text[] src_pk_att_vals_array,
                            text[] tgt_pk_att_vals_array) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_build_sql_insert</function> peut √™tre utile pour r√©aliser
    une r√©plication s√©lective d'une table locale vers une base distante.
    Elle s√©lectionne une ligne de la table locale bas√©e sur la cl√© primaire
    et construit une commande SQL <command>INSERT</command> qui dupliquera
    cette ligne, mais avec les valeurs de cl√© primaire remplac√©es par les
    valeurs du dernier argument. (Pour r√©aliser une copie exacte de la ligne,
    indiquez simplement les m√™mes valeurs pour les deux derniers arguments.)
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
       Nom d'une relation existante, par exemple <literal>foo</literal> ou
       <literal>monschema.matable</literal>. Ajoutez des guillemets doubles
       si le nom est en minuscule et en majuscule, ou contient des
       caract√®res sp√©ciaux, par exemple <literal>"FooBar"</literal>&nbsp;;
       sans guillemets, la cha√Æne sera mise en minuscule.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>primary_key_attnums</parameter></term>
     <listitem>
      <para>
       Num√©ros des attributs (commen√ßant √† 1) des champs de la cl√© primaire,
       par exemple <literal>1 2</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>num_primary_key_atts</parameter></term>
     <listitem>
      <para>
       Le nombre de champs de la cl√© primaire
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>src_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
       Les valeurs des champs de la cl√© primaire pour rechercher la ligne
       locale. Chaque champ est repr√©sent√© dans sa forme textuelle. Une
       erreur est renvoy√© s'il n'y a pas de lignes locales avec ces valeurs
       de cl√© primaire.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>tgt_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
       Les valeurs des champs de la cl√© primaire √† placer dans la commande
       <command>INSERT</command> r√©sultante. Chaque champ est repr√©sent√© dans
       sa forme textuelle.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>Renvoie l'instruction SQL demand√©e en tant que texte.</para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 test=# select dblink_build_sql_insert('foo', '1 2', 2, '{"1", "a"}', '{"1", "b''a"}');
              dblink_build_sql_insert
 --------------------------------------------------
  INSERT INTO foo(f1,f2,f3) VALUES('1','b''a','1')
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-BUILD-SQL-DELETE">
  <refnamediv>
   <refname>dblink_build_sql_delete</refname>
   <refpurpose>construit une instruction de suppression en utilisant une ligne
    locale, en rempla√ßant les valeurs des champs de la cl√© primaire pour la
    s√©lection avec les valeurs fournies
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_build_sql_delete(text relname,
                            int2vector primary_key_attnums,
                            int2 num_primary_key_atts,
                            text[] tgt_pk_att_vals_array) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_build_sql_delete</function> peut √™tre utile pour r√©aliser
    une r√©plication s√©lective d'une table locale vers une base distante.
    Elle construit une commande SQL <command>DELETE</command> qui supprimera
    la ligne avec les valeurs indiqu√©es pour la cl√© primaire.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
       Nom d'une relation existante, par exemple <literal>foo</literal> ou
       <literal>monschema.matable</literal>. Ajoutez des guillemets doubles
       si le nom est en minuscule et en majuscule, ou contient des
       caract√®res sp√©ciaux, par exemple <literal>"FooBar"</literal>&nbsp;;
       sans guillemets, la cha√Æne sera mise en minuscule.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>primary_key_attnums</parameter></term>
     <listitem>
      <para>
       Num√©ros des attributs (commen√ßant √† 1) des champs de la cl√© primaire,
       par exemple <literal>1 2</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>num_primary_key_atts</parameter></term>
     <listitem>
      <para>
       Le nombre de champs de la cl√© primaire
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>tgt_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
       Les valeurs de champs de la cl√© primaire, √† utiliser dans la commande
       <command>DELETE</command> r√©sultante. Chaque champ est repr√©sent√© dans
       sa forme textuelle.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>Renvoie l'instruction SQL demand√©e en tant que texte.</para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 test=# select dblink_build_sql_delete('"MyFoo"', '1 2', 2, '{"1", "b"}');
            dblink_build_sql_delete
 ---------------------------------------------
  DELETE FROM "MyFoo" WHERE f1='1' AND f2='b'
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-BUILD-SQL-UPDATE">
  <refnamediv>
   <refname>dblink_build_sql_update</refname>
   <refpurpose>construit une instruction de mise √† jour en utilisant une ligne
    locale, en rempla√ßant les valeurs des champs de la cl√© primaire pour la
    s√©lection avec les valeurs fournies
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <synopsis>
    dblink_build_sql_update(text relname,
                            int2vector primary_key_attnums,
                            int2 num_primary_key_atts,
                            text[] src_pk_att_vals_array,
                            text[] tgt_pk_att_vals_array) returns text
   </synopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>

   <para>
    <function>dblink_build_sql_update</function> peut √™tre utile pour r√©aliser
    une r√©plication s√©lective d'une table locale vers une base de donn√©e
    distante. Elle s√©lectionne une ligne √† partir de la table locale en se
    basant sur la cl√© primaire, puis construit une commande SQL
    <command>UPDATE</command> qui dupliquera cette ligne, mais avec les valeurs
    de cl√© primaire remplac√©es par les valeurs dans le dernier argument.
    (Pour faire une copie exacte de la ligne, indiquez les m√™mes valeurs
    pour les deux derniers arguments.) La commande <command>UPDATE</command>
    affecte toujours tous les champs de la ligne &mdash; la diff√©rence
    principale entre ceci et <function>dblink_build_sql_insert</function> est
    qu'il est suppos√© que la ligne cible existe d√©j√† dans la table distante.
   </para>
  </refsect1>

  <refsect1>
   <title>Arguments</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
       Nom d'une relation existante, par exemple <literal>foo</literal> ou
       <literal>monschema.matable</literal>. Ajoutez des guillemets doubles
       si le nom est en minuscule et en majuscule, ou contient des
       caract√®res sp√©ciaux, par exemple <literal>"FooBar"</literal>&nbsp;;
       sans guillemets, la cha√Æne sera mise en minuscule.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>primary_key_attnums</parameter></term>
     <listitem>
      <para>
       Num√©ros des attributs (commen√ßant √† 1) des champs de la cl√© primaire,
       par exemple <literal>1 2</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>num_primary_key_atts</parameter></term>
     <listitem>
      <para>
       Le nombre de champs de la cl√© primaire
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>src_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
       Les valeurs des champs de la cl√© primaire pour rechercher la ligne
       locale. Chaque champ est repr√©sent√© dans sa forme textuelle. Une
       erreur est renvoy√© s'il n'y a pas de lignes locales avec ces valeurs
       de cl√© primaire.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>tgt_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
       Les valeurs des champs de la cl√© primaire √† placer dans la commande
       <command>UPDATE</command> r√©sultante. Chaque champ est repr√©sent√© dans
       sa forme textuelle.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Valeur de retour</title>

   <para>Renvoie l'instruction SQL demand√©e en tant que texte.</para>
  </refsect1>

  <refsect1>
   <title>Exemple</title>

   <programlisting>
 test=# select dblink_build_sql_update('foo', '1 2', 2, '{"1", "a"}', '{"1", "b"}');
                    dblink_build_sql_update
 -------------------------------------------------------------
  UPDATE foo SET f1='1',f2='b',f3='1' WHERE f1='1' AND f2='b'
 (1 row)
   </programlisting>
  </refsect1>
 </refentry>

</sect1>
