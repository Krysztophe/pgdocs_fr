
<sect1 id="fuzzystrmatch">
 <title>fuzzystrmatch</title>
 
 <para>
  Cette section décrit le module fuzzystrmatch qui fournit plusieurs fonctions
  déterminant des similarités et une distance entre des chaînes.
 </para>

 <sect2>
  <title>Soundex</title>
  <para>
   Le système Soundex est une méthode permettant d'établir une correspondance
   entre des noms (ou des mots) qui se prononcent de la même façon. Elle a
   été utilisé au début par le «&nbsp;United States Census&nbsp;» en 1880,
   1900 et 1910, mais a peu d'utilité en dehors des noms anglais (ou plutôt
   de la prononciation anglaise des noms). Ce n'est pas un outil linguistique.
  </para>
  <para>
   Lors de la comparaison de deux valeurs soundex pour déterminer la similarité,
   la fonction de différence rapporte le rapprochement de la correspondance
   sur une échelle de zéro à quatre, zéro signifiant aucune correspondance et
   quatre une correspondance exacte.
  </para>
  <para>
   Voici quelques exemples d'utilisation&nbsp;:
  </para>
  <programlisting><![CDATA[
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT a.nm, b.nm FROM s a, s b WHERE soundex(a.nm) = soundex(b.nm) AND a.oid <> b.oid;

CREATE FUNCTION text_sx_eq(text, text) RETURNS boolean AS
'select soundex($1) = soundex($2)'
LANGUAGE SQL;

CREATE FUNCTION text_sx_lt(text, text) RETURNS boolean AS
'select soundex($1) < soundex($2)'
LANGUAGE SQL;

CREATE FUNCTION text_sx_gt(text, text) RETURNS boolean AS
'select soundex($1) > soundex($2)'
LANGUAGE SQL;

CREATE FUNCTION text_sx_le(text, text) RETURNS boolean AS
'select soundex($1) <= soundex($2)'
LANGUAGE SQL;

CREATE FUNCTION text_sx_ge(text, text) RETURNS boolean AS
'select soundex($1) >= soundex($2)'
LANGUAGE SQL;

CREATE FUNCTION text_sx_ne(text, text) RETURNS boolean AS
'select soundex($1) <> soundex($2)'
LANGUAGE SQL;

DROP OPERATOR #= (text, text);

CREATE OPERATOR #= (leftarg=text, rightarg=text, procedure=text_sx_eq, commutator = #=);

SELECT * FROM s WHERE text_sx_eq(nm, 'john');

SELECT * FROM s WHERE s.nm #= 'john';

SELECT * FROM s WHERE difference(s.nm, 'john') > 2;
  ]]></programlisting>
 </sect2>

 <sect2>
  <title>levenshtein</title>
  <para>
   Cette fonction calcule la distance de levenshtein entre deux chaînes&nbsp;:
  </para>
  <programlisting>
   int levenshtein(text source, text target)
  </programlisting>
  <para>
   La <literal>source</literal> et la cible (<literal>target</literal>)
   peuvent être toute chaîne de caractère non NULL d'un maximum de 255
   caractères.
  </para>
  <para>
   Exemple&nbsp;:
  </para>
  <programlisting>
   SELECT levenshtein('GUMBO','GAMBOL');
  </programlisting>
 </sect2>

 <sect2>
  <title>metaphone</title>
  <para>
   Cette fonction calcule et renvoie le code metaphone d'une chaîne en
   entrée&nbsp;:
  </para>
  <programlisting>
   text metahpone(text source, int max_output_length)
  </programlisting>
  <para>
   <literal>source</literal> doit être une chaîne non NULL avec un maximum de
   255 caractères. <literal>max_output_length</literal> fixe la longueur
   maximum du code metaphone en résultat&nbsp;; s'il est plus long, la sortie
   est tronquée à cette taille.
  </para>
  <para>Exemple</para>
  <programlisting>
   SELECT metaphone('GUMBO',4);
  </programlisting>
 </sect2>

</sect1>
