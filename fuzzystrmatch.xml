<!-- SAS : 20071220, PG83b4 -->

<sect1 id="fuzzystrmatch">
 <title>fuzzystrmatch</title>

 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>

 <para>
  Le module <filename>fuzzystrmatch</filename> fournit diverses fonctions qui
  permettent de déterminer les similarités et la distance entre des chaînes.
 </para>

 <sect2>
  <title>Soundex</title>
  <para>
   Le système Soundex est une méthode qui permet d'associer des noms (ou des
   mots) dont la prononciation est proche en les convertissant dans le même
   code. Elle a été utilisée à l'origine par le «&nbsp;United States
   Census&nbsp;» en 1880, 1900 et 1910.  Note that Soundex
   is not very useful for non-English names.
  </para>
  <para>
   The <filename>fuzzystrmatch</filename> module provides two functions
   for working with Soundex codes:
  </para>

  <programlisting>
   soundex(text) returns text
   difference(text, text) returns int
  </programlisting>

  <para>
   The <function>soundex</function> function converts a string to its Soundex code.
   The <function>difference</function> function converts two strings to their Soundex
   codes and then reports the number of matching code positions.  Since
   Soundex codes have four characters, the result ranges from zero to four,
   with zero being no match and four being an exact match.  (Thus, the
   function is misnamed &mdash; <function>similarity</function> would have been
   a better name.)
  </para>

  <para>
   Voici quelques exemples d'utilisation&nbsp;:
  </para>
  <programlisting><![CDATA[
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') &gt; 2;
  ]]></programlisting>
 </sect2>

 <sect2>
  <title>Levenshtein</title>
  <para>
   Cette fonction calcule la distance de Levenshtein entre deux chaînes&nbsp;:
  </para>
  <programlisting>
   levenshtein(text source, text target) returns int
  </programlisting>
  <para>
   La <literal>source</literal> et la cible (<literal>target</literal>)
   sont des chaînes quelconques non NULL de 255 caractères au maximum.
  </para>
  <para>
   Exemple&nbsp;:
  </para>
  <programlisting>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-------------
           2
(1 row)
  </programlisting>
 </sect2>

 <sect2>
  <title>Metaphone</title>
  <para>
   Metaphone, like Soundex, is based on the idea of constructing a
   representative code for an input string.  Two strings are then
   deemed similar if they have the same codes.
  </para>

  <para>
   This function calculates the metaphone code of an input string:
  </para>

  <programlisting>
   metaphone(text source, int max_output_length) returns text
  </programlisting>

  <para>
   <literal>source</literal> doit être une chaîne non NULL de
   255 caractères au maximum. <literal>max_output_length</literal> fixe la longueur
   maximale du code metaphone résultant&nbsp;; s'il est plus long, la sortie
   est tronquée à cette taille.
  </para>
  <para>Exemple</para>

  <programlisting>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-----------
 KM
(1 row)
  </programlisting>
 </sect2>

 <sect2>
  <title>Double Metaphone</title>

  <para>
   The Double Metaphone system computes two <quote>sounds like</quote> strings
   for a given input string &mdash; a <quote>primary</quote> and an
   <quote>alternate</quote>.  In most cases they are the same, but for non-English
   names especially they can be a bit different, depending on pronunciation.
   These functions compute the primary and alternate codes:
  </para>

  <programlisting>
   dmetaphone(text source) returns text
   dmetaphone_alt(text source) returns text
  </programlisting>

  <para>
   There is no length limit on the input strings.
  </para>

  <para>
   Example:
  </para>

  <programlisting>
test=# select dmetaphone('gumbo');
 dmetaphone
------------
 KMP
(1 row)
  </programlisting>
 </sect2>

</sect1>
