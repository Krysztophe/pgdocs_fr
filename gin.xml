<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $PostgreSQL: pgsql/doc/src/sgml/gin.sgml,v 2.4 2006/09/18 12:11:36 teodor Exp $ -->

<chapter id="GIN">
<title>Index GIN</title>

   <indexterm>
    <primary>index</primary>
    <secondary>GIN</secondary>
   </indexterm>

<sect1 id="gin-intro">
 <title>Introduction</title>

 <para>
   <acronym>GIN</acronym> est l'acronyme de <foreignphrase>Generalized Inverted
   Index</foreignphrase>. C'est une structure d'index stockant des ensembles de
   paires (clé, liste de lignes) où le terme <quote>liste de lignes</quote>
   est un ensemble de lignes dans lesquelles la clé est valable. Each
   indexed value may contain many keys, so the same row ID may appear in
   multiple posting lists.
 </para>

 <para>
   Il est généralisé dans le sens qu'un index <acronym>GIN</acronym> n'a pas
   besoin de connaître l'opération qu'il accélère. À la place, il utilise
   les stratégies personnalisées définies pour des types de données particuliers.
 </para>

 <para>
  Un avantage de <acronym>GIN</acronym> est qu'il autorise le développement
  de types de données personnalisés avec des méthodes d'accès appropriées par
  un expert dans le domaine du type de données, plutôt que par un expert des
  bases de données. L'utilisation de <acronym>GiST</acronym> fournit le
  même avantage.
 </para>

  <para>
   L'implémentation de <acronym>GIN</acronym> dans
   <productname>PostgreSQL</productname> est principalement l'oeuvre de
   Teodor Sigaev et Oleg Bartunov. Plus d'informations sur <acronym>GIN</acronym>
   sont disponibles sur leur <ulink
   url="http://www.sai.msu.su/~megera/oddmuse/index.cgi/Gin">site web</ulink>.
  </para>
</sect1>

<sect1 id="gin-extensibility">
 <title>Extensibilité</title>

 <para>
   L'interface <acronym>GIN</acronym> a un haut niveau d'abstraction, nécessitant
   à la personne implémentant la méthode d'accès d'implémenter seulement les
   sémantiques du type de données en cours d'accès. La couche 
   <acronym>GIN</acronym> elle-même s'occupe de la concurrence, des traces
   et des recherches dans la structure de l'arbre.
 </para>

 <para>
   Ce qui est nécessaire pour qu'une méthode d'accès <acronym>GIN</acronym>
   fonctionne est d'implémenter quatre méthodes définies par l'utilisateur,
   méthodes qui définissent le comportement des clés dans l'arbre
   and the relationships between keys, indexed values,
   and indexable queries. In short, <acronym>GIN</acronym> combines
   extensibility with generality, code reuse, and a clean interface.
 </para>

 <para>
   Les quatre méthodes qu'une classe d'opérateur d'index
   <acronym>GIN</acronym> doit fournir sont&nbsp;:
 </para>

 <variablelist>
    <varlistentry>
     <term>int compare(Datum a, Datum b)</term>
     <listitem>
      <para>
	   Compare les clés (valeurs non indexées&nbsp;!) et renvoie un entier
	   plus ptit que zéro, zéro ou plus grand que zéro, indiquant que la
	   première clé est plus petite, égale à, plus grande que la seconde.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Datum* extractValue(Datum inputValue, uint32 *nkeys)</term>
     <listitem>
      <para>
	   Renvoie un tableau de clés à partir de valeurs à indexer. Le nombre
	   de clés renvoyées doit être stocké dans <literal>*nkeys</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Datum* extractQuery(Datum query, uint32 *nkeys,
		StrategyNumber n)</term>
     <listitem>
      <para>
       Returns an array of keys given a value to be queried; that is,
       <literal>query</literal> is the value on the right-hand side of an
       indexable operator whose left-hand side is the indexed column.
       <literal>n</literal> is the strategy number of the operator within the
       operator class (see <xref linkend="xindex-strategies"/>).
       Often, <function>extractQuery</function> will need
       to consult <literal>n</literal> to determine the data type of
       <literal>query</literal> and the key values that need to be extracted.
       The number of returned keys must be stored into <literal>*nkeys</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>bool consistent(bool check[], StrategyNumber n, Datum query)</term>
     <listitem>
      <para>
       Renvoie TRUE si la valeur indexée satisfait l'opérateur de la requête
       avec un numéro de stratégie <literal>n</literal> (ou pourrait satisfaire
       si l'opérateur est marqué RECHECK dans la classe d'opérateur).
       The <literal>check</literal> array has
       the same length as the number of keys previously returned by
       <function>extractQuery</function> for this query.  Each element of the
       <literal>check</literal> array is TRUE if the indexed value contains the
       corresponding query key, ie, if (check[i] == TRUE) the i-th key of the
       <function>extractQuery</function> result array is present in the indexed value.
       The original <literal>query</literal> datum (not the extracted key array!) is
       passed in case the <function>consistent</function> method needs to consult it.
      </para>
     </listitem>
    </varlistentry>

  </variablelist>

</sect1>

<sect1 id="gin-implementation">
 <title>Implementation</title>

 <para>
  Internally, a <acronym>GIN</acronym> index contains a B-tree index
  constructed over keys, where each key is an element of the indexed value
  (a member of an array, for example) and where each tuple in a leaf page is
  either a pointer to a B-tree over heap pointers (PT, posting tree), or a
  list of heap pointers (PL, posting list) if the list is small enough.
 </para>

</sect1>

<sect1 id="gin-tips">
<title>Conseils et astuces sur GIN</title>

 <variablelist>
  <varlistentry>
   <term>Create vs insert</term>
   <listitem>
	<para>
	 Dans la plupart des cas, l'insertion dans un index <acronym>GIN</acronym>
	 est lent à cause de la probabilité d'insertion de nombreuses clés pour
	 chaque valeur. Donc, en cas de nombreuses insertions dans une table, il
	 est conseillé de supprimer l'index GIN et de le re-créer après
	 l'opération d'insertion.
	</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><xref linkend="guc-gin-fuzzy-search-limit"/></term>
   <listitem>
	<para>
	 La raison principale qui a poussé le développement des index
	 <acronym>GIN</acronym> a été la création du support des recherches de texte
	 complet dans <productname>PostgreSQL</productname> et il arrive
	 fréquemment qu'une recherche renvoie un gros ensemble de résultats.
	 Moreover, this often happens when the query contains very frequent
	 words, so that the large result set is not even useful. La lecture des
	 lignes du disque et leur tri prend beaucoup de temps,
	 ce qui est une situation inacceptable en production. (Notez que la
	 recherche dans l'index est en soi très rapide.)
	</para>
	<para>
	 To facilitate controlled execution of such queries
	 <acronym>GIN</acronym> has a configurable soft upper limit on the size
	 of the returned set, the
	 <varname>gin_fuzzy_search_limit</varname> configuration parameter.
	 It is set to 0 (meaning no limit) by default.
	 If a non-zero limit is set, then the returned set is a subset of
	 the whole result set, chosen at random.
	</para>
	<para>
	 <quote>Douce</quote> (<foreignphrase>Soft</foreignphrase>) signifie
	 que le nombre réel des résultats renvoyés pourrait être légèrement
	 différent de la limite spécifiée, suivant la requête et la qualité du
	 générateur de nombres aléatoires du système.
	</para>
   </listitem>
  </varlistentry>
 </variablelist>

</sect1>

<sect1 id="gin-limit">
 <title>Limitations</title>

 <para>
  <acronym>GIN</acronym> doesn't support full index scans: because there are
  often many keys per value, each heap pointer would be returned many times,
  and there is no easy way to prevent this.
 </para>

 <para>
  Quand <function>extractQuery</function> ne renvoit aucune clé,
  <acronym>GIN</acronym> will emit an error.  Depending on the operator,
  a void query might match all, some, or none of the indexed values (for
  example, every array contains the empty array, but does not overlap the
  empty array), and <acronym>GIN</acronym> can't determine the correct
  answer, nor produce a full-index-scan result if it could determine that
  that was correct.
 </para>

 <para>
  It is not an error for <function>extractValue</> to return zero keys,
  but in this case the indexed value will be unrepresented in the index.
  This is another reason why full index scan is not useful &mdash; it would
  miss such rows.
 </para>

 <para>
  <acronym>GIN</acronym> recherche les clés par une égalité seule. Ceci pourra
  être amélioré dans le futur.
 </para>
</sect1>

<sect1 id="gin-examples">
 <title>Exemples</title>

 <para>
  La distribution des sources de <productname>PostgreSQL</productname> inclut
  des classes <acronym>GIN</acronym> pour les tableaux à une dimension de tous
  les types internes. Les modules <filename>contrib</filename> suivants
  contiennent aussi des classes d'opérateurs <acronym>GIN</acronym>&nbsp;:
 </para>
 
 <variablelist>
  <varlistentry>
   <term>intarray</term>
   <listitem>
    <para>Support amélioré pour int4[]</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>tsearch2</term>
   <listitem>
    <para>Support pour l'indexage inversé de texte. Ceci est bien plus rapide
     pour les ensembles de gros documents principalement statiques.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</sect1>

</chapter>
