<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<chapter id="install-win32">
 <title>Installation sur <productname>Windows</productname></title>

 <indexterm>
  <primary>installation</primary>
  <secondary>sur Windows</secondary>
 </indexterm>

 <para>
  Il est recommandé que la plupart des utilisateurs téléchargent la distribution
  binaire pour Windows, disponible sous la forme d'un package
  <productname>Windows Installer</productname> à partir du site web de
  <productname>PostgreSQL</productname>. Construire à partir des sources a pour
  seule cible les personnes qui développent <productname>PostgreSQL</productname>
  ou des extensions.
 </para>

 <para>
  Il existe différentes façons de construire PostgreSQL sur
  <productname>Windows</productname>. Le système complet peut être construit en
  utilisant <productname>MinGW</productname> ou
  <productname>Visual C++ 2005</productname>. Il peut aussi être construit
  pour les anciennes versions de <productname>Windows</productname> en
  utilisant <productname>Cygwin</productname>. Enfin, la bibliothèque d'accès
  pour les clients (<application>libpq</application>) peut être construit en
  utilisant <productname>Visual C++ 7.1</productname> ou
  <productname>Borland C++</productname> pour la compatibilité avec des
  applications liées statiquement en utilisant ces outils.
 </para>

 <para>
  La construction par <productname>MinGW</productname> ou
  <productname>Cygwin</productname> utilise le système habituel de construction,
  voir <xref linkend="installation"/> et les FAQ dans
  <filename>doc/FAQ_MINGW</filename> et <filename>do/FAQ_CYGWIN</filename>.
  Notez que <productname>Cygwin</productname> n'est pas recommandé, et devrait
  seulement être utilisé pour les anciennes versions de
  <productname>Windows</productname> où la construction native ne fonctionne
  pas, comme par exemple <productname>Windows 98</productname>.
 </para>

 <sect1 id="install-win32-full">
  <title>Construire avec <productname>Visual C++ 2005</productname></title>

 <para>
  Les outils pour construire en utilisant <productname>Visual C++
  2005</productname> se trouvent dans le répertoire
  <filename>src/tools/msvc</filename>. Lors de la construction, assurez-vous
  qu'il n'y a pas d'outils provenant de <productname>MinGW</productname> ou
  <productname>Cygwin</productname> dans le chemin (PATH) de votre
  environnement. De plus, assurez-vous que vous disposez de tous les outils
  requis de Visual C++ et que ces derniers sont bien dans le PATH. Cela se
  fait simplement en lançant <application>Visual Studio Command
  Prompt</application> et en exécutant les commandes à partir de là. Toutes
  les commandes doivent être exécutées à partir du répertoire
  <filename>src\tools\msvc</filename>.
 </para>

 <para>
  Avant de commencer la construction, éditez le fichier
  <filename>config.pl</filename> pour préciser vos options de configuration,
  ceci incluant les chemins vers les bibliothèques utilisées. Si vous avez
  besoin de configurer d'autres variables d'environnement, créez un fichier
  appelé <filename>buildenv.pl</filename> et placez-y les commandes souhaitées.
  Par exemple, pour ajouter le chemin vers bison s'il ne se trouve pas dans
  le PATH, créez un fichier contenant&nbsp;:
  <screen>
   $ENV{PATH}=$ENV{PATH} . ';c:\chemin\vers\bison\bin';
  </screen>
 </para>

 <sect2>
  <title>Pré-requis</title>
  <para>
   PostgreSQL se construit en utilisant soit les versions professionnelles
   (quelque soit l'édition) soit la version Express gratuite de
   <productname>Visual Studio 2005</productname>. Les produits supplémentaires
   suivants sont nécessaires pour construire le package complet. Utilisez le
   fichier <filename>config.pl</filename> pour indiquer les répertoires où se
   trouvent les bibliothèques.

   <variablelist>
    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl est requis pour exécuter les scripts de construction.
      Le Perl de MinGW et de Cygwin ne fonctionnera pas. Il doit aussi être
      présent dans le PATH. Les binaires de cet outil sont téléchargeables
      à partir de <ulink url="http://www.activestate.com"></ulink> (Note&nbsp;:
      la version 5.8 est requise, la distribution standard libre est
      suffisante).
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
      Requis pour construire <application>PL/TCL</application> (Note&nbsp;:
      la version 8.4 est requise, la distribution standard libre est
      suffisante).
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Bison</productname> et
      <productname>Flex</productname></term>
     <listitem><para>
      Bison et Flex sont requis pour construire à partir d'une extraction du
      Git, mais ils ne sont pas nécessaires si vous utilisez une version
      packagée. Notez que seul Bison 1.875 ou les versions 2.2 et ultérieures
      fonctionneront. Bison et Flex sont téléchargeables sur
      <ulink url="http://gnuwin32.sourceforge.net"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
     <listitem><para>
      Diff est nécessaire pour exécuter les tests de régression, et peut être
      téléchargé à partir de <ulink url="http://gnuwin32.sourceforge.net"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
     <listitem><para>
      Gettext est requis pour construire le support NLS, et peut être téléchargé
      à partir de <ulink url="http://gnuwin32.sourceforge.net"></ulink>. Notez
      que les binaires, dépendances et fichiers développeurs sont tous
      nécessaires.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Microsoft Platform SDK</productname></term>
     <listitem><para>
      Il est recommandé de mettre à jour avec la dernière version disponible
      du <productname>Microsoft Platform SDK</productname>, disponible au
      téléchargement sur <ulink url="http://www.microsoft.com/downloads/"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
     <listitem><para>
      Requis pour le support de l'authentification Kerberos. MIT Kerberos est
      téléchargeable sur <ulink
      url="http://web.mit.edu/Kerberos/dist/index.html"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>libxml2</productname> et
      <productname>libxslt</productname></term>
     <listitem><para>
      Requis pour le support du XML. Les binaires sont disponibles sur
      <ulink url="http://zlatkovic.com/pub/libxml"></ulink> et les sources sur
      <ulink url="http://xmlsoft.org"></ulink>. Notez que libxml2 nécessite
      iconv, qui est disponible sur le même site web.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>openssl</productname></term>
     <listitem><para>
      Requis pour le support de SSL. Les binaires peuvent être téléchargés à
      partir de <ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></ulink>
      alors que les sources sont disponibles sur <ulink
      url="http://www.openssl.org"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
     <listitem><para>
      Requis pour le support d'UUID-OSSP (seulement en contrib). Les
      sources peuvent être récupérées sur le
      <ulink url="http://www.ossp.org/pkg/lib/uuid/">site ossp.org</ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
     <listitem><para>
      Requis pour la construction de <application>PL/Python</application>. Les
      binaires sont téléchargeables sur
      <ulink url="http://www.python.org"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
     <listitem><para>
      Requis pour le support de la compression dans
      <application>pg_dump</application> et <application>pg_restore</application>.
      Les binaires sont disponibles à partir de <ulink
      url="http://www.zlib.net"></ulink>.
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect2>

 <sect2>
  <title>Construction</title>

  <para>
   Pour construire tout PostgreSQL dans la configuration par défaut, exécutez
   la commande&nbsp;:
   <screen>
    <userinput>
     build
    </userinput>
   </screen>
   Pour construire tout PostgreSQL dans la configuration de débogage, exécutez
   la commande&nbsp;:
   <screen>
    <userinput>
     build DEBUG
    </userinput>
   </screen>
   Pour construire un seul projet, par exemple psql, exécutez les commandes&nbsp;:
   <screen>
    <userinput>
     build psql
    </userinput>
    <userinput>
     build DEBUG psql
    </userinput>
   </screen>
   Pour modifier la configuration de construction par défaut, placez ce qui suit
   dans le fichier <filename>buildenv.pl</filename>&nbsp;:
   <screen>
    <userinput>
     $ENV{CONFIG}="Debug";
    </userinput>
   </screen>
  </para>

  <para>
   Il est aussi possible de construire à partir de l'interface de Visual Studio.
   Dans ce cas, vous devez exécuter&nbsp;:
   <screen>
    <userinput>
     perl mkvcbuild.pl
    </userinput>
   </screen>
   à partir de l'invite, puis ouvrir le fichier <filename>pgsql.sln</filename>
   généré (dans le répertoire racine des sources) dans Visual Studio.
  </para>
 </sect2>

 <sect2>
  <title>Nettoyage et installation</title>

  <para>
   La plupart du temps, la récupération automatique des dépendances dans
   Visual Studio prendra en charge les fichiers modifiés. Mais, s'il y a eu
   trop de modifications, vous pouvez avoir besoin de nettoyer
   l'installation. Pour cela, exécutez simplement la commande
   <filename>clean.bat</filename>, qui nettoiera automatiquement les fichiers
   générés. Vous pouvez aussi l'exécuter avec le paramètre
   <parameter>dist</parameter>, auquel cas il se comporte comme
   <userinput>make distclean</userinput> et supprime les fichiers flex/bison
   en sortie.
  </para>

  <para>
   Par défaut, tous les fichiers sont écrits dans un sous-répertoire de
   <filename>debug</filename> ou <filename>release</filename>. Pour installer
   ces fichiers en utilisant les emplacements standards et pour générer aussi
   les fichiers requis pour initialiser et utiliser la base de données,
   exécutez la commande&nbsp;:
   <screen>
    <userinput>
     perl install.pl c:\destination\directory
    </userinput>
   </screen>
  </para>
 </sect2>

 <sect2>
  <title>Exécuter les tests de régression</title>

  <para>
   Pour exécuter les tests de régression, assurez-vous que vous avez terminé la
   construction de toutes les parties requises. Ensuite, assurez-vous que les
   DLL nécessaires au chargement de toutes les parties du système (comme les
   DLL Perl et Python pour les langages de procédure) sont présentes dans le
   chemin système. Dans le cas contraire, configurez-les dans le fichier
   <filename>buildenv.pl</filename>. Pour lancer les tests, exécutez une des
   commandes suivantes à partir du répertoire
   <filename>src\tools\msvc</filename>&nbsp;:
   <screen>
    <userinput>
     vcregress check
    </userinput>
    <userinput>
     vcregress installcheck
    </userinput>
    <userinput>
     vcregress plcheck
    </userinput>
    <userinput>
     vcregress contribcheck
    </userinput>
   </screen>

   Pour modifier la planification utilisée (en parallèle par défaut), ajoutez-la
   à la ligne de commande, comme&nbsp;:
   <screen>
    <userinput>
     vcregress check serial
    </userinput>
   </screen>

   Pour plus d'informations sur les tests de régression, voir
   <xref linkend="regress"/>.
  </para>
 </sect2>

 <sect2>
  <title>Construire la documentation</title>

  <para>
   Construire la documentation PostgreSQL au format HTML nécessite plusieurs
   outils et fichiers. Créez un répertoire racine pour tous ces fichiers et
   stockez-les dans des sous-répertoires conformément à la liste ci-dessous.
   <variablelist>
    <varlistentry>
     <term>OpenJade 1.3.1-2</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://sourceforge.net/project/downloading.php?groupname=openjade&amp;filename=openjade-1_3_1-2-bin.zip"></ulink>
      et à décompresser dans le sous-répertoire <filename>openjade-1.3.1</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DTD 4.2</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></ulink>
      et à décompresser dans le sous-répertoire <filename>docbook</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DSSSL 1.79</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://sourceforge.net/project/downloading.php?groupname=docbook&amp;filename=docbook-dsssl-1.79.zip"></ulink>
      et à décompresser dans le sous-répertoire <filename>docbook-dsssl-1.79</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>ISO character entities</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></ulink>
      et à décompresser dans le sous-répertoire  <filename>docbook</filename>.
     </para></listitem>
    </varlistentry>
   </variablelist>
   Modifiez le fichier <filename>buildenv.pl</filename> et ajoutez une variable
   pour l'emplacement du répertoire racine, par exemple&nbsp;:
   <screen>
    $ENV{DOCROOT}='c:\docbook';
   </screen>
   Pour construire la documentation, exécutez la commande
   <filename>builddoc.bat</filename>. Notez que ceci exécutera la construction
   une deuxième fois, pour générer les index. Les fichiers HTML générés seront
   dans le répertoire <filename>doc\src\sgml</filename>.
  </para>
 </sect2>

 </sect1>

 <sect1 id="install-win32-libpq">
  <title>Construire <application>libpq</application> avec
  <productname>Visual C++</productname> ou
  <productname>Borland C++</productname></title>

 <para>
  Utiliser <productname>Visual C++ 7.1-8.0</productname> ou
  <productname>Borland C++</productname> pour construire libpq est seulement
  recommandé si vous avez besoin d'une version contenant des drapeaux
  débogage/version finale, ou si vous avez besoin d'une bibliothèque statique
  que vous lierez à une application. Pour une utilisation normale,
  <productname>MinGW</productname> et
  <productname>Visual Studio 2005</productname> sont recommandés.
 </para>

 <para>
  Pour construire la bibliothèque client <application>libpq</application> en
  utilisant <productname>Visual Studio 7.1</productname> (ou ultérieur),
  allez dans le répertoire <filename>src</filename> et exécutez la commande&nbsp;:
<screen>
<userinput>nmake /f win32.mak</userinput>
</screen>
 </para>
 <para>
  Pour construire une version 64-bit de la bibliothèque client
  <application>libpq</application> en utilisant <productname>Visual Studio
  8.0</productname> (ou ultérieur), allez dans le répertoire
  <filename>src</filename> et exécutez la commande&nbsp;:
<screen>
<userinput>nmake /f win32.mak CPU=AMD64</userinput>
</screen>
  Voir le fichier <filename>win32.mak</filename> pour plus de détails
  sur les variables supportées.
 </para>

 <para>
  Pour construire la bibliothèque client <application>libpq</application> en
  utilisant <productname>Borland C++</productname>, allez dans le répertoire
  <filename>src</filename> et exécutez la commande&nbsp;:
<screen>
<userinput>make -N -DCFG=Release /f bcc32.mak</userinput>
</screen>
 </para>

 <sect2>
 <title>Fichiers générés</title>
 <para>
  Les fichiers suivants seront produits&nbsp;:

  <variablelist>
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.dll</filename></term>
    <listitem>
     <para>
      la bibliothèque client&nbsp;;
     </para>
    </listitem>
   </varlistentry>
  
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpqdll.lib</filename></term>
    <listitem>
     <para>
      la bibliothèque d'import nécessaire à l'édition de liens avec
      <filename>libpq.dll</filename>&nbsp;
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.lib</filename></term>
    <listitem>
     <para>
       la version statique de la bibliothèque d'interface client&nbsp;;
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>

 <para>
  Habituellement, vous n'avez pas besoin d'installer les fichiers client. Vous
  devez placer le fichier <filename>libpq.dll</filename> dans le même répertoire
  que vos applications. N'installez pas <filename>libpq.dll</filename> dans
  votre répertoire Windows, System ou System32, sauf en cas d'absolue
  nécessité. S'il
  est installé par un programme, ce dernier doit en contrôler au préalable la
  ressource <symbol>VERSIONINFO</symbol> afin d'éviter l'écrasement d'une 
  version plus récente.
 </para>

 <para>
  Si l'on prévoit de développer sur cette machine une application qui utilise 
  <application>libpq</application>, il faut ajouter les
  sous-répertoires <filename>src\include</filename> et 
  <filename>src\interfaces\libpq</filename> dans le
  chemin d'inclusion des sources de votre compilateur.
 </para>

 <para>
  Pour utiliser la bibliothèque, il faut ajouter 
  <filename>libpqdll.lib</filename> au projet (sous Visual C++,
  clic droit sur le projet et choisir ajouter).
 </para>
</sect2>
</sect1>
</chapter>
