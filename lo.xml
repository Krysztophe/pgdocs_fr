<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="lo">
 <title>lo</title>

 <indexterm zone="lo">
  <primary>lo</primary>
 </indexterm>

 <para>
  Le module <filename>lo</filename> ajoute un support des «&nbsp;Large
  Objects&nbsp;» (aussi appelé LO ou BLOB). Il inclut le type de données
  <type>lo</type> et un trigger <function>lo_manage</function>.
 </para>

 <sect2>
  <title>Aperçu</title>
  <para>
   Un des problèmes avec le pilote JDBC (mais cela affecte aussi le pilote
   ODBC) est que la spécification suppose que les références aux BLOB (Binary
   Large OBject) sont stockées dans une table et que, si une entrée est
   modifiée, le BLOB associé est supprimé de cette base.
  </para>
  <para>
   Au niveau de <productname>PostgreSQL</productname>, ceci n'arrive pas. Les
   <quote>Large Objects</quote>
   sont traités comme des objets propres&nbsp;; une entrée de table peut
   référencer un <quote>Large Object</quote> par son OID, mais plusieurs
   tables peuvent référencer le même OID. Donc, le système ne peut pas
   supprimer un <quote>Large Object</quote> simplement parce que vous
   avez modifié ou supprimé une entrée contenant son OID.
  </para>
  <para>
   Ceci n'est pas un problème pour les nouvelles applications spécifiques
   à <productname>PostgreSQL</productname> mais celles qui existent déjà, qui
   utilisent JDBC ou ODBC,
   ne suppriment pas les objets, ceci aboutissant à des <quote>Large
   Objects</quote> orphelins - des objets qui ne sont référencés par
   personne et occupant donc un espace disque précieux sans raison.
  </para>

  <para>
   Le module <filename>lo</filename> permet de corriger ceci en attachant un
   trigger aux tables contenant des colonnes de référence des LO. Le trigger
   fait essentiellement un <function>lo_unlink</function> quand vous supprimez
   ou modifiez une valeur référence un <quote>Large Object</quote>. Quand
   vous utilisez ce trigger, vous supposez que, dans toute la base de données,
   il n'existe qu'une référence d'un <quote>Large Object</quote> référencé dans
   une colonne contrôlée par un trigger.
  </para>
 
  <para>
   Le module fournit aussi un type de données <type>lo</type>, qui est tout
   simplement un domaine sur le type <type>oid</type>. Il est utile pour
   différencier les colonnes de la base qui contiennent des références d'objet
   de ceux qui contiennent des OID sur d'autres choses. Vous n'avez pas
   besoin d'utiliser le type <type>lo</type> pour utiliser le trigger mais cela
   facilite le travail pour garder trace des colonnes de votre base de données
   qui représentent des <quote>Large Objects</quote> que vous gérez avec le
   trigger. Une rumeur indique aussi que le pilote ODBC a du mal si vous
   n'utilisez pas le type <type>lo</type> pour les colonnes BLOB.
  </para>
</sect2>

 <sect2>
  <title>Comment l'utiliser</title>

  <para>
   Voici un exemple d'utilisation&nbsp;:
  </para>

  <programlisting>
   CREATE TABLE image (title TEXT, raster lo);

   CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
     FOR EACH ROW EXECUTE PROCEDURE lo_manage(raster);
  </programlisting>

  <para>
   Pour chaque colonne qui contiendra des références uniques aux <quote>Large
   Objects</quote>, créez un trigger <literal>BEFORE UPDATE OR DELETE</literal>
   trigger, et donnez le nom de la colonne comme argument du trigger. Si vous
   avez plusieurs colonnes <type>lo</type> dans la même table, créez un
   trigger séparé pour chacune en vous souvenant de donner un nom différent
   à chaque trigger sur la même table.
  </para>
 </sect2>

 <sect2>
  <title>Limites</title>

  <itemizedlist>
   <listitem>
    <para>
     Supprimer une table résultera quand même en des objets orphelins pour
     tous les objets qu'elle contient, car le trigger n'est pas exécuté. Vous
     pouvez éviter ceci en faisant précéder le <command>DROP
     TABLE</command> avec <command>DELETE FROM
     <replaceable>table</replaceable></command>.
    </para>

    <para>
     <command>TRUNCATE</command> a le même comportement.
    </para>

    <para>
     Si vous avez déjà, ou suspectez avoir, des <quote>Large Objects</quote>
     orphelins, voir le module <filename>contrib/vacuumlo</filename> (<xref
     linkend="vacuumlo"/>) pour vous aider à les nettoyer. Une bonne idée est
     d'exécuter <application>vacuumlo</application> occasionnellement pour
     s'assurer du ménage réalisé par le trigger <function>lo_manage</function>.
    </para>
   </listitem>

   <listitem>
    <para>
     Quelques interfaces peuvent créer leur propres tables et n'ajouteront pas
     les triggers associés. De plus, les utilisateurs peuvent ne pas se
     rappeler (ou savoir) pour créer les triggers.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <title>Auteur</title>

  <para>
   Peter Mount <email>peter@retep.org.uk</email>
  </para>
 </sect2>

</sect1>

