<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/lobj.sgml,v 1.11 2005/09/15 07:03:18 guillaume Exp $
-->

 <chapter id="largeobjects">
  <title id="largeobjects-title">Objets larges</title>

  <indexterm zone="largeobjects"><primary>objet large</primary></indexterm>
  <indexterm><primary>BLOB</primary><see>objet large</see></indexterm>

   <para>
   <productname>PostgreSQL</productname> a des fonctionnalités concernant les
   <firstterm>objets larges</firstterm>, fournissant un accès style flux aux données
   utilisateurs stockées dans une structure spéciale. L'accès en flux est utile
   pour travailler avec des valeurs de données trop larges pour être manipuler
   convenablement en entier.
   </para>

   <para>
    Ce chapitre décrit l'implémentation, la programmation et les interfaces du
    langage de requêtes pour les données de type objet large dans
    <productname>PostgreSQL</productname>. Nous utilisons la bibliothèque C
    <application>libpq</application> pour les exemples de ce chapitre mais la
    plupart des interfaces natives de programmation de
    <productname>PostgreSQL</productname> supportent des fonctionnalités
    équivalentes. D'autres interfaces pourraient utiliser l'interface des objets
    larges en interne pour fournir un support générique des valeurs larges. Ceci
    n'est pas décrit ici.
   </para>

  <sect1 id="lo-intro">
   <title>Introduction</title>

   <para>
    Tous les objets larges sont placés dans une seule table système appelée
    <classname>pg_largeobject</classname>.
    <productname>PostgreSQL</productname> supporte aussi un système de stockage
    appelé <quote><acronym>TOAST</acronym></quote> qui stocke automatiquement
    les valeurs ne tenant pas sur une page de la base de données dans une aire
    de stockage secondaire par table. Ceci rend partiellement obsolète la
    fonctionnalité des objets larges. Un avantage restant des objets larges est
    qu'il autorise les valeurs de plus de 2&nbsp;Go en taille alors que les
    champs <acronym>TOAST</acronym> peuvent être d'au plus 1&nbsp;Go. De plus,
    les objets larges peuvent être modifiés au hasard en utilisant une API de
    lecture/écriture qui est plus efficace que la réalisation de telles
    opérations utilisant <acronym>TOAST</acronym>.
   </para>

  </sect1>

  <sect1 id="lo-implementation">
   <title>Fonctionnalités d'implémentation</title>

   <para>
    L'implémentation des objets larges coupe les objets larges en
    <quote>morceaux</quote> (<foreignphrase>chunks</foreignphrase>) et stocke 
    les morceaux dans les lignes de la base de données. Un index B-tree
    garantit des recherches rapides pour le bon numéro du morceau lors d'accès
    aléatoires en lecture et écriture.
   </para>
  </sect1>

  <sect1 id="lo-interfaces">
   <title>Interfaces client</title>

   <para>
    Cette section décrit les possibilités que les bibliothèques d'interfaces
    client de <productname>PostgreSQL</productname> fournissent pour accéder
    aux objets larges. Toutes les manipulations d'objets larges utilisant ces
    fonctions <emphasis>doivent</emphasis> prendre place dans un bloc de
    transaction SQL. L'interface des objets larges de
    <productname>PostgreSQL</productname> prend comme modèle l'interface des
    systèmes de fichiers <acronym>Unix</acronym> avec des fonctions analogues
    pour <function>open</function>, <function>read</function>,
    <function>write</function>, <function>lseek</function>, etc.
   </para>

   <para>
    Les applications clients utilisant l'interface des objets larges dans
    <application>libpq</application> doivent inclure le fichier d'en-tête
    <filename>libpq/libpq-fs.h</filename> et établir un lien avec la
    bibliothèque <application>libpq</application>.
   </para>

   <sect2>
    <title>Créer un objet large</title>

    <para>
     La fonction
<synopsis>Oid lo_creat(PGconn *conn, int mode);
</synopsis>
     <indexterm><primary>lo_creat</primary></indexterm>
     crée un nouvel objet large. La valeur de retour est l'OID assigné au
     nouvel objet large ou InvalidOid (zéro) en cas d'erreur.

     <replaceable class="parameter">mode</replaceable> est inutilisée et
     ignorée sur <productname>PostgreSQL</productname> 8.1&nbsp;; néanmoins,
     pour la compatibilité avec les anciennes versions, il est préférable de
     l'initialiser à <symbol>INV_READ</symbol>, <symbol>INV_WRITE</symbol>,
     ou <symbol>INV_READ</symbol> <literal>|</literal> <symbol>INV_WRITE</symbol>
     (ces constantes symboliques sont définies dans le fichier d'en-tête
     <filename>libpq/libpq-fs.h</filename>).
    </para>

    <para>
     Un exemple&nbsp;:
<programlisting>inv_oid = lo_creat(conn, INV_READ|INV_WRITE);
</programlisting>
    </para>

    <para>
     La fonction
<synopsis>Oid lo_create(PGconn *conn, Oid lobjId);
</synopsis>
     <indexterm><primary>lo_create</primary></indexterm>
     crée aussi un nouvel objet large. L'OID à affecter peut être spécifié par
     <replaceable class="parameter">lobjId</replaceable>&nbsp;; dans ce cas, un
     échec survient si l'OID est déjà utilisé pour un autre objet large. Si
     <replaceable class="parameter">lobjId</replaceable> vaut InvalidOid
     (zero), alors <function>lo_create</function> affecte un OID inutilisé (ceci est le
     même comportement que <function>lo_creat</function>). La valeur de retour est
     l'OID qui a été affecté au nouvel objet large ou InvalidOid (zero) en cas
     d'échec.
    </para>

    <para>
     <function>lo_create</function> est nouveau depuis
     <productname>PostgreSQL</productname> 8.1&nbsp;; si cette fonction est
     utilisée à partir d'un serveur d'une version plus ancienne, elle échouera
     et renverra InvalidOid.
    </para>

    <para>
     Un exemple&nbsp;:
<programlisting>inv_oid = lo_create(conn, desired_oid);
</programlisting>
    </para>
   </sect2>

   <sect2>
    <title>Importer un objet large</title>

    <para>
     Pour importer un fichier du système d'exploitation en tant qu'objet large,
     appelez
<synopsis>Oid lo_import(PGconn *conn, const char *filename);
</synopsis>
     <indexterm><primary>lo_import</primary></indexterm>
     <replaceable class="parameter">filename</replaceable> 
     spécifie le nom du fichier à importer comme objet large. Le code de retour
     est l'OID assigné au nouvel objet large ou InvalidOid (zero) en cas
     d'échec. Notez que le fichier est lu par la bibliothèque d'interface du
     client, pas par le serveur. Donc il doit exister dans le système de fichier
     du client et lisible par l'application du client.
    </para>
   </sect2>

   <sect2>
    <title>Exporter un objet large</title>

    <para>
     Pour exporter un objet large en tant que fichier du système
     d'exploitation, appelez
    <synopsis>int lo_export(PGconn *conn, Oid lobjId, const char *filename);
</synopsis>
     <indexterm><primary>lo_export</primary></indexterm>
     L'argument <parameter>lobjId</parameter> spécifie l'OID de l'objet large à
     exporter et l'argument <parameter>filename</parameter> spécifie le nom du
     fichier. Notez que le fichier est écrit par la bibliothèque d'interface du
     client, pas par le serveur. Renvoie 1 en cas de succès, -1 en cas d'échec.
    </para>
   </sect2>

   <sect2>
    <title>Ouvrir un objet large existant</title>

    <para>
     Pour ouvrir un objet large existant pour lire ou écrire, appelez
<synopsis>int lo_open(PGconn *conn, Oid lobjId, int mode);
</synopsis>
     <indexterm><primary>lo_open</primary></indexterm>
     L'argument <parameter>lobjId</parameter> spécifie l'OID de l'objet large à
     ouvrir. Les bits <parameter>mode</parameter> contrôlent si l'objet est
     ouvert en lecture (<symbol>INV_READ</symbol>), écriture
     (<symbol>INV_WRITE</symbol>) ou les deux (ces constantes symboliques
     sont définies dans le fichier d'en-tête
     <filename>libpq/libpq-fs.h</filename>). Un objet large ne peut pas être
     ouvert avant d'avoir été créé. <function>lo_open</function> renvoie un
     descripteur (positif) d'objet large pour une utilisation future avec
     <function>lo_read</function>, <function>lo_write</function>,
     <function>lo_lseek</function>, <function>lo_tell</function> et
     <function>lo_close</function>. Le descripteur est uniquement valide pour
     la durée de la transaction en cours. En cas d'échec, -1 est renvoyé.
    </para>

    <para>
     Actuellement, le serveur ne fait pas de distinction entre les modes
     <symbol>INV_WRITE</symbol> et <symbol>INV_READ</symbol> <literal>|</literal>
     <symbol>INV_WRITE</symbol>&nbsp;: vous êtes autorisé à lire à partir du 
     descripteur dans les deux cas. Néanmoins, il existe une différence
     significative entre ces modes et <symbol>INV_READ</symbol> seul&nbsp;: avec
     <symbol>INV_READ</symbol>, vous ne pouvez pas écrire sur le descripteur et la
     donnée lue à partir de ce dernier reflètera le contenu de l'objet large
     au moment où <function>lo_open</function> a été exécuté dans la transaction active,
     quelque soient les possibles écritures par cette transaction ou par
     d'autres. Lire à partir d'un descripteur ouvert avec
     <symbol>INV_WRITE</symbol> renvoie des données reflétant toutes les
     écritures des autres transactions validées ainsi que les écritures de la
     transaction en cours. Ceci est similaire à la différence de comportement
     entre les modes de transaction <literal>SERIALIZABLE</literal> et <literal>READ
     COMMITTED</literal> pour les requêtes SQL <command>SELECT</command>.
    </para>

    <para>
     Un exemple&nbsp;:
<programlisting>inv_fd = lo_open(conn, inv_oid, INV_READ|INV_WRITE);
</programlisting>
    </para>
</sect2>

<sect2>
<title>Écrire des données dans un objet large</title>

<para>
     La fonction
<synopsis>int lo_write(PGconn *conn, int fd, const char *buf, size_t len);
</synopsis>
     <indexterm><primary>lo_write</primary></indexterm> écrit
     <parameter>len</parameter> octets de <parameter>buf</parameter>
     dans le descripteur <parameter>fd</parameter> de l'objet large. L'argument
     <parameter>fd</parameter> doit avoir été renvoyé par un appel précédent à
     <function>lo_open</function>. Le nombre d'octets réellement écrits est
     renvoyé. Dans le cas d'une erreur, une valeur négative est renvoyée.
</para>
</sect2>

<sect2>
<title>Lire des données à partir d'un objet large</title>

<para>
     La fonction
<synopsis>int lo_read(PGconn *conn, int fd, char *buf, size_t len);
</synopsis>
     <indexterm><primary>lo_read</primary></indexterm> lit
     <parameter>len</parameter> octets du descripteur de l'objet large
     <parameter>fd</parameter> et les place dans <parameter>buf</parameter>.
     L'argument <parameter>fd</parameter> doit avoir été renvoyé par un appel
     précédent à <function>lo_open</function>. Le nombre d'octets réellement lus
     est renvoyé. Dans le cas d'une erreur, une valeur négative est renvoyée.
</para>
</sect2>

<sect2>
<title>Recherche dans un objet large</title>

<para>
     Pour modifier l'emplacement courant de lecture ou écriture associé au
     descripteur d'un objet large, appelez
<synopsis>int lo_lseek(PGconn *conn, int fd, int offset, int whence);
</synopsis>
     <indexterm><primary>lo_lseek</primary></indexterm> Cette fonction déplace le pointeur
     d'emplacement courant pour le descripteur de l'objet large identifié par
     <parameter>fd</parameter> au nouvel emplacement spécifié avec le décalage
     (<parameter>offset</parameter>). Les valeurs valides pour
     <parameter>whence</parameter> sont <symbol>SEEK_SET</symbol>
     (rechercher depuis le début de l'objet), <symbol>SEEK_CUR</symbol>
     (rechercher depuis la position courante) et <symbol>SEEK_END</symbol>
     (rechercher depuis la fin de l'objet). Le code de retour est le nouvel
     emplacement du pointeur ou -1 en cas d'erreur.
</para>
</sect2>

<sect2>
<title>Obtenir la position de recherche d'un objet large</title>

<para>
     Pour obtenir la position actuelle de lecture ou écriture d'un descripteur
     d'objet large, appelez
<synopsis>int lo_tell(PGconn *conn, int fd);
</synopsis>
     <indexterm><primary>lo_tell</primary></indexterm> S'il y a une erreur, le code de retour
     est négatif.
</para>
</sect2>

<sect2>
<title>Fermer un descripteur d'objet large</title>

<para>
     Un descripteur d'objet large peut être fermé en appelant
<synopsis>int lo_close(PGconn *conn, int fd);
</synopsis>
     <indexterm><primary>lo_close</primary></indexterm> où <parameter>fd</parameter> est un 
     descripteur d'objet large renvoyé par <function>lo_open</function>. En
     cas de succès, <function>lo_close</function> renvoie zéro. Renvoie 1 en
     cas de succès, -1 en cas d'échec.
</para>

<para>
     Tous les descripteurs d'objets larges restant ouverts à la fin d'une
     transaction seront automatiquement fermés.
</para>
</sect2>

   <sect2>
    <title>Supprimer un objet large</title>

    <para>
     Pour supprimer un objet large de la base de données, appelez
<synopsis>int lo_unlink(PGconn *conn, Oid lobjId);
</synopsis>
     <indexterm><primary>lo_unlink</primary></indexterm> L'argument
     <parameter>lobjId</parameter> spécifie l'OID de l'objet large à supprimer.
     Dans le cas d'une erreur, le code de retour est négatif.
    </para>
   </sect2>


</sect1>

<sect1 id="lo-funcs">
<title>Fonctions du côté serveur</title>

<para>
	Ce sont des fonctions côté serveur appelables à partir de SQL et
	correspondant à chaque fonction côté client décrite ci-dessus&nbsp;; en
	fait, pour leur grande part, les fonctions côté client sont simplement
	des interfaces vers les fonctions équivalentes côté serveur. Celles qui
	sont réellement utiles à appeler via des commandes SQL sont
	<function>lo_creat</function><indexterm><primary>lo_creat</primary></indexterm>,
	<function>lo_create</function><indexterm><primary>lo_create</primary></indexterm>,
	<function>lo_unlink</function><indexterm><primary>lo_unlink</primary></indexterm>,
	<function>lo_import</function><indexterm><primary>lo_import</primary></indexterm> et
	<function>lo_export</function><indexterm><primary>lo_export</primary></indexterm>.
	Voici des exemples de leur utilisation&nbsp;:
<programlisting>CREATE TABLE image (
    nom             text,
    donnees         oid
);

SELECT lo_creat(-1);       -- renvoie l'OID du nouvel objet large

SELECT lo_create(43213);   -- tente de créer l'objet large d'OID 43213

SELECT lo_unlink(173454);  -- supprime l'objet large d'OID 173454

INSERT INTO image (nom, donnees)
    VALUES ('superbe image', lo_import('/etc/motd'));

SELECT lo_export(image.donnees, '/tmp/motd') FROM image
    WHERE nom = 'superbe image';
</programlisting>
</para>

<para>
Les fonctions <function>lo_import</function> et <function>lo_export</function>
côté serveur se comportent considérablement différemment de leurs analogues côté
client. Ces deux fonctions lisent et écrivent des fichiers dans le système de
fichiers du serveur en utilisant les droits du propriétaire du serveur de base
de données. Du coup, leur utilisation est restreinte aux superutilisateurs. Au
contraire des fonctions côté serveur, les fonctions d'import et d'export côté
client lisent et écrivent des fichiers dans le système de fichiers du client en
utilisant les droits du programme client. Les fonctions côté client peuvent être
utilisées par tout utilisateur <productname>PostgreSQL</productname>.
</para>
</sect1>

<sect1 id="lo-examplesect">
<title>Programme d'exemple</title>

<para>
     L'<xref linkend="lo-example"/> est un programme d'exemple qui montre une
     utilisation de l'interface des objets larges avec <application>libpq</application>.
     Des parties de ce programme disposent de commentaires au bénéfice de
     l'utilisateur. Ce programme est aussi disponible dans la distribution des
     sources (<filename>src/test/examples/testlo.c</filename>).
</para>

  <example id="lo-example">
   <title>Exemple de programme sur les objets larges avec
<application>libpq</application></title>
<programlisting>/*--------------------------------------------------------------
 *
 * testlo.c--
 *    test utilisant des objets larges avec libpq
 *
 * Copyright (c) 1994, Regents of the University of California
 *
 *--------------------------------------------------------------
 */
#include &lt;stdio.h&gt;
#include &quot;libpq-fe.h&quot;
#include &quot;libpq/libpq-fs.h&quot;

#define BUFSIZE          1024

/*
 * importFile
 *    importe le fichier &quot;in_filename&quot; dans la base de données
 *    en tant qu'objet &quot;lobjOid&quot;
 *
 */
Oid
importFile(PGconn *conn, char *filename)
{
    Oid         lobjId;
    int         lobj_fd;
    char        buf[BUFSIZE];
    int         nbytes,
                tmp;
    int         fd;

    /*
     * ouvre le fichier à lire
     */
    fd = open(filename, O_RDONLY, 0666);
    if (fd &lt; 0)
    {                           /* error */
        fprintf(stderr, &quot;can't open unix file %s\n&quot;, filename);
    }

    /*
     * crée l'objet large
     */
    lobjId = lo_creat(conn, INV_READ | INV_WRITE);
    if (lobjId == 0)
        fprintf(stderr, &quot;can't create large object\n&quot;);

    lobj_fd = lo_open(conn, lobjId, INV_WRITE);

    /*
     * lit le fichier Unix écrit dans le fichier inversion
     */
    while ((nbytes = read(fd, buf, BUFSIZE)) &gt; 0)
    {
        tmp = lo_write(conn, lobj_fd, buf, nbytes);
        if (tmp &lt; nbytes)
            fprintf(stderr, &quot;error while reading large object\n&quot;);
    }

    (void) close(fd);
    (void) lo_close(conn, lobj_fd);

    return lobjId;
}

void
pickout(PGconn *conn, Oid lobjId, int start, int len)
{
    int         lobj_fd;
    char       *buf;
    int         nbytes;
    int         nread;

    lobj_fd = lo_open(conn, lobjId, INV_READ);
    if (lobj_fd &lt; 0)
    {
        fprintf(stderr, &quot;can't open large object %d\n&quot;,
                lobjId);
    }

    lo_lseek(conn, lobj_fd, start, SEEK_SET);
    buf = malloc(len + 1);

    nread = 0;
    while (len - nread &gt; 0)
    {
        nbytes = lo_read(conn, lobj_fd, buf, len - nread);
        buf[nbytes] = ' ';
        fprintf(stderr, &quot;&gt;&gt;&gt; %s&quot;, buf);
        nread += nbytes;
    }
    free(buf);
    fprintf(stderr, &quot;\n&quot;);
    lo_close(conn, lobj_fd);
}

void
overwrite(PGconn *conn, Oid lobjId, int start, int len)
{
    int         lobj_fd;
    char       *buf;
    int         nbytes;
    int         nwritten;
    int         i;

    lobj_fd = lo_open(conn, lobjId, INV_WRITE);
    if (lobj_fd &lt; 0)
    {
        fprintf(stderr, &quot;can't open large object %d\n&quot;,
                lobjId);
    }

    lo_lseek(conn, lobj_fd, start, SEEK_SET);
    buf = malloc(len + 1);

    for (i = 0; i &lt; len; i++)
        buf[i] = 'X';
    buf[i] = ' ';

    nwritten = 0;
    while (len - nwritten &gt; 0)
    {
        nbytes = lo_write(conn, lobj_fd, buf + nwritten, len - nwritten);
        nwritten += nbytes;
    }
    free(buf);
    fprintf(stderr, &quot;\n&quot;);
    lo_close(conn, lobj_fd);
}

/*
 * exportFile
 *    exporte l'objet large &quot;lobjOid&quot; dans le fichier
 * &quot;out_filename&quot;
 *
 */
void
exportFile(PGconn *conn, Oid lobjId, char *filename)
{
    int         lobj_fd;
    char        buf[BUFSIZE];
    int         nbytes,
                tmp;
    int         fd;

    /*
     * ouvre l'&quot;objet&quot; large
     */
    lobj_fd = lo_open(conn, lobjId, INV_READ);
    if (lobj_fd &lt; 0)
    {
        fprintf(stderr, &quot;can't open large object %d\n&quot;,
                lobjId);
    }

    /*
     * ouvre le fichier à écrire
     */
    fd = open(filename, O_CREAT | O_WRONLY, 0666);
    if (fd &lt; 0)
    {                           /* error */
        fprintf(stderr, &quot;can't open unix file %s\n&quot;,
                filename);
    }

    /*
     * lit à partir du fichier inversion et écrit dans le fichier Unix
     */
    while ((nbytes = lo_read(conn, lobj_fd, buf, BUFSIZE)) &gt; 0)
    {
        tmp = write(fd, buf, nbytes);
        if (tmp &lt; nbytes)
        {
            fprintf(stderr, &quot;error while writing %s\n&quot;,
                    filename);
        }
    }

    (void) lo_close(conn, lobj_fd);
    (void) close(fd);

    return;
}

void
exit_nicely(PGconn *conn)
{
    PQfinish(conn);
    exit(1);
}

int
main(int argc, char **argv)
{
    char       *in_filename,
               *out_filename;
    char       *database;
    Oid         lobjOid;
    PGconn     *conn;
    PGresult   *res;

    if (argc != 4)
    {
        fprintf(stderr, &quot;Usage: %s database_name in_filename out_filename\n&quot;,
                argv[0]);
        exit(1);
    }

    database = argv[1];
    in_filename = argv[2];
    out_filename = argv[3];

    /*
     * initialise la connexion
     */
    conn = PQsetdb(NULL, NULL, NULL, NULL, database);

    /* check to see that the backend connection was successfully made */
    if (PQstatus(conn) == CONNECTION_BAD)
    {
        fprintf(stderr, &quot;Connection to database '%s' failed.\n&quot;, database);
        fprintf(stderr, &quot;%s&quot;, PQerrorMessage(conn));
        exit_nicely(conn);
    }

    res = PQexec(conn, &quot;begin&quot;);
    PQclear(res);

    printf(&quot;importing file %s\n&quot;, in_filename);
/*  lobjOid = importFile(conn, in_filename); */
    lobjOid = lo_import(conn, in_filename);
/*
    printf(&quot;as large object %d.\n&quot;, lobjOid);

    printf(&quot;picking out bytes 1000-2000 of the large object\n&quot;);
    pickout(conn, lobjOid, 1000, 1000);

    printf(&quot;overwriting bytes 1000-2000 of the large object with X's\n&quot;);
    overwrite(conn, lobjOid, 1000, 1000);
*/

    printf(&quot;exporting large object to file %s\n&quot;, out_filename);
/*    exportFile(conn, lobjOid, out_filename); */
    lo_export(conn, lobjOid, out_filename);

    res = PQexec(conn, &quot;end&quot;);
    PQclear(res);
    PQfinish(conn);
    exit(0);
}
</programlisting>
</example>

</sect1>
</chapter>
