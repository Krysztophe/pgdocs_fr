<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="ltree">
 <title>ltree</title>

 <indexterm zone="ltree">
  <primary>ltree</primary>
 </indexterm>

 <para>
  Ce module implémente le type de données <type>ltree</type> pour représenter
  des labels de données stockés dans une structure hiérarchique de type arbre.
  Des fonctionnalités étendues de recherche sont fournies.
 </para>

 <sect2>
  <title>Définitions</title>

  <para>
   Un <firstterm>label</firstterm> est une séquence de caractères
   alphanumériques et de tirets bas (par exemple, dans la locale C, les
   caractères <literal>A-Za-z0-9_</literal> sont autorisés). La longueur d'un
   label est limité par 256 octets.
  </para>

  <para>
   Exemples&nbsp;: <literal>42</literal>, <literal>Personal_Services</literal>
  </para>

  <para>
   Le <firstterm>chemin de label</firstterm> est une séquence de zéro
   ou plusieurs labels séparés par des points, par exemple
   <literal>L1.L2.L3</literal>, ce qui représente le chemin de la racine
   jusqu'à un n½ud particulier. La longueur d'un chemin
   est limité à 65&nbsp;Ko, mais une longueur inférieure ou égale à 2&nbsp;Ko
   est préférable. Nous considérons qu'il ne s'agit pas d'une limitation
   stricte. Par exemple, lataille maximum d'un chemin de label dans le
   <ulink url="http://www.dmoz.org">catalogue DMOZ</ulink> fait environ 240
   octets&nbsp;!
  </para>

  <para>
   Exemple&nbsp;: <literal>Top.Countries.Europe.Russia</literal>
  </para>

  <para>
   Le module <filename>ltree</filename> fournit plusieurs types de
   données&nbsp;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <type>ltree</type> stocke un chemin de label.
    </para>
   </listitem>

   <listitem>
    <para>
     <type>lquery</type> représente un type d'expression rationnelle du chemin
     pour la correspondance de valeurs de type <type>ltree</type>. Un mot
     simple établit une correspondance avec ce label dans un chemin. Le
     caractère joker (<literal>*</literal>) est utilisé pour spécifier tout
     nombre de labels (niveaux). Par exemple&nbsp;:
     <programlisting>
foo         <lineannotation>Correspond au chemin exact <literal>foo</literal></lineannotation>
*.foo.*     <lineannotation>Correspond à tout chemin contenant le label <literal>foo</literal></lineannotation>
*.foo       <lineannotation>Correspond à tout chemin dont le dernier label est
<literal>foo</literal></lineannotation>
     </programlisting>
    </para>

    <para>
     Les caractères joker peuvent être quantifiés pour restreindre le nombre
     de labels de la correspondance&nbsp;:
     <programlisting>
*{<replaceable>n</replaceable>}        <lineannotation>Correspond à exactement <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,}       <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,<replaceable>m</replaceable>}      <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels mais à pas plus de <replaceable>m</replaceable></lineannotation>
*{,<replaceable>m</replaceable>}       <lineannotation>Correspond à au plus <replaceable>m</replaceable> labels &mdash; identique à</lineannotation> *{0,<replaceable>m</replaceable>}
     </programlisting>
    </para>

    <para>
     Il existe plusieurs modificateurs qui peuvent être placés à la fin
     d'un label sans joker dans un <type>lquery</type> pour que la
     correspondance se fasse sur plus que la correspondance exacte&nbsp;:
     <programlisting>
@           <lineannotation>Correspondance sans vérification de casse, par exemple <literal>a@</literal> établit une correspondance avec <literal>A</literal></lineannotation>
*           <lineannotation>Correspondance d'un préfixe pour un label, par exemple <literal>foo*</literal> établit une correspondance avec <literal>foobar</literal></lineannotation>
%           <lineannotation>Correspondance avec les mots séparés par des tirets bas</lineannotation>
     </programlisting>
     Le comportement de <literal>%</literal> est un peu complexe. Il tente
     d'établir une correspondance avec des mots plutôt qu'avec un label
     complet. Par exemple, <literal>foo_bar%</literal> établit une
     correspondance avec <literal>foo_bar_baz</literal> mais pas avec
     <literal>foo_barbaz</literal>. S'il est combiné avec
     <literal>*</literal>, la correspondance du préfixe s'applique à chaque
     mot séparément. Par exemple, <literal>foo_bar%*</literal> établit une
     correspondance avec <literal>foo1_bar2_baz</literal>, mais pas avec
     <literal>foo1_br2_baz</literal>.
    </para>

    <para>
     De plus, vous pouvez écrire plusieurs labels séparés avec des
     <literal>|</literal> (OR) pour établir une correspondance avec un des
     labels, et vous pouvez placer un <literal>!</literal> (NOT) au début pour
     établir une correspondance avec tout sauf une des différentes
     alternatives.
    </para>

    <para>
     Voici un exemple annoté d'une <type>lquery</type>&nbsp;:
    <programlisting>
     Top.*{0,2}.sport*@.!football|tennis.Russ*|Spain
     a.  b.     c.      d.               e.
    </programlisting>
     Cette requête établira une correspondance avec tout chemin qui&nbsp;:
    </para>
    <orderedlist numeration='loweralpha'>
     <listitem>
      <para>
       commence avec le label <literal>Top</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       et suit avec zéro ou deux labels jusqu'à
      </para>
     </listitem>
     <listitem>
      <para>
       un label commençant avec le préfixe <literal>sport</literal> quelque
       soit la casse
      </para>
     </listitem>
     <listitem>
      <para>
       ensuite un label ne correspondant ni à <literal>football</literal> ni
       à <literal>tennis</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       et se termine enfin avec un label commençant par
       <literal>Russ</literal> ou correspond strictement à
       <literal>Spain</literal>.
      </para>
     </listitem>
    </orderedlist>
   </listitem>

   <listitem>
    <para><type>ltxtquery</type> represente en quelque sorte une recherche
    plein texte pour la correspondance de valeurs <type>ltree</type>. Une
    valeur <type>ltxtquery</type> contient des mots, quelque fois avec
    les modificateurs <literal>@</literal>, <literal>*</literal>,
    <literal>%</literal> à la fin&nbsp;; les modifications ont la même
    signification que dans un <type>lquery</type>. Les mots peuvent être
    combinés avec <literal>&amp;</literal> (AND), <literal>|</literal> (OR),
    <literal>!</literal> (NOT) et des parenthèses. La différence clé d'une
    <type>lquery</type> est que <type>ltxtquery</type> établit une
    correspondance avec des mots sans relation avec leur position dans
    le chemin de labels.
    </para>

    <para>
     Voici un exemple de <type>ltxtquery</type>&nbsp;:
    <programlisting>
     Europe &amp; Russia*@ &amp; !Transportation
    </programlisting>
     Ceci établira une correspondance avec les chemins contenant le label
     <literal>Europe</literal> et tout label commençant par
     <literal>Russia</literal> (quelque soit la casse), mais pas les chemins
     contenant le label <literal>Transportation</literal>. L'emplacement de
     ces mots dans le chemin n'est pas important. De plus, quand
     <literal>%</literal> est utilisé, le mot peut établir une correspondance
     avec tout mot séparé par un tiret bas dans un label, quelque soit sa
     position.
    </para>
   </listitem>

  </itemizedlist>

  <para>
   Note&nbsp;: <type>ltxtquery</type> autorise un espace blanc entre des
   symboles mais <type>ltree</type> et <type>lquery</type> ne le permettent
   pas.
  </para>
 </sect2>

 <sect2>
  <title>Opérateurs et fonctions</title>

  <para>
   Le type <type>ltree</type> dispose des opérateurs de comparaison habituels
   <literal>=</literal>, <literal>&lt;&gt;</literal>, <literal>&lt;</literal>,
   <literal>&gt;</literal>, <literal>&lt;=</literal>, <literal>&gt;=</literal>.
   Les comparaisons trient dans l'ordre du parcours d'un arbre, avec les
   enfants d'un n½ud trié par le texte du label. De plus, il existe les
   opérateurs spécialisés suivant&nbsp;:
  </para>

  <table id="ltree-op-table">
   <title>Opérateurs <type>ltree</type></title>

   <tgroup cols="3">
    <thead>
     <row>
      <entry>Opérateur</entry>
      <entry>Retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>ltree</type> <literal>@&gt;</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>l'argument gauche est-il un ancêtre de l'argument droit (ou
      identique)&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>&lt;@</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>l'argument gauche est-il un descendant de l'argument droit (ou
      identique)&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>~</literal> <type>lquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que <type>ltree</type> établie une correspondance avec
      <type>lquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>lquery</type> <literal>~</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que <type>ltree</type> établie une correspondance avec
      <type>lquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>?</literal> <type>lquery[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que <type>ltree</type> établie une correspondance avec tout
      any <type>lquery</type> dans ce tableau&nbsp;?</entry>
     </row>

     <row>
      <entry><type>lquery[]</type> <literal>?</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que <type>ltree</type> établie une correspondance avec tout
      <type>lquery</type> dans ce tableau&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>@</literal> <type>ltxtquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que <type>ltree</type> établie une correspondance avec
      <type>ltxtquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltxtquery</type> <literal>@</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que <type>ltree</type> établie une correspondance avec
      <type>ltxtquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>||</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>concatène des chemins <type>ltree</type></entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>||</literal> <type>text</type></entry>
      <entry><type>ltree</type></entry>
      <entry>convertit du texte en <type>ltree</type> et concatène</entry>
     </row>

     <row>
      <entry><type>text</type> <literal>||</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>convertit du texte en <type>ltree</type> et concatène</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>@&gt;</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient un ancêtre de
      <type>ltree</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>&lt;@</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient un ancêtre de
      <type>ltree</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>&lt;@</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient un descendant de
      <type>ltree</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>@&gt;</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient un descendant de
      <type>ltree</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>~</literal> <type>lquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient tout chemin correspondant à
      <type>lquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>lquery</type> <literal>~</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient tout chemin correspondant à
      <type>lquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?</literal> <type>lquery[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau <type>ltree</type> contient tout chemin
      correspondant à un <type>lquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>lquery[]</type> <literal>?</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau <type>ltree</type> contient tout chemin
      correspondant à un <type>lquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>@</literal> <type>ltxtquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient tout chemin correspondant à
      <type>ltxtquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltxtquery</type> <literal>@</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>est-ce que le tableau contient tout chemin correspondant à
      <type>ltxtquery</type>&nbsp;?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?@&gt;</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>première entrée du tableau ancêtre de
      <type>ltree</type>&nbsp;; NULL si aucun</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?&lt;@</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>première entrée du tableau descendant de
      <type>ltree</type>&nbsp;; NULL si aucun</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?~</literal> <type>lquery</type></entry>
      <entry><type>ltree</type></entry>
      <entry>première entrée du tableau établissant une correspondance avec
      <type>lquery</type>&nbsp;; NULL si aucune</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?@</literal> <type>ltxtquery</type></entry>
      <entry><type>ltree</type></entry>
      <entry>première entrée du tableau établissant une correspondance avec
      <type>ltxtquery</type>&nbsp;; NULL si aucune</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   Lesopérateurs operators <literal>&lt;@</literal>, <literal>@&gt;</literal>,
   <literal>@</literal> et <literal>~</literal> ont des versions analogues
   <literal>^&lt;@</literal>, <literal>^@&gt;</literal>, <literal>^@</literal>,
   <literal>^~</literal>, qui sont identiques sauf qu'elles n'utilisent pas les
   index. Elles sont utiles pour tester.
  </para>

  <para>
   Les fonctions suivantes sont disponibles&nbsp;:
  </para>

  <table id="ltree-func-table">
   <title>Fonctions <type>ltree</type></title>

   <tgroup cols="5">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Type en retour</entry>
      <entry>Description</entry>
      <entry>Exemple</entry>
      <entry>Résultat</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>subltree(ltree, int start, int end)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>sous-chemin de of <type>ltree</type> de la position
      <parameter>start</parameter> à la position
       <parameter>end</parameter>-1 (counting from 0)</entry>
      <entry><literal>subltree('Top.Child1.Child2',1,2)</literal></entry>
      <entry><literal>Child1</literal></entry>
     </row>

     <row>
      <entry><function>subpath(ltree, int offset, int len)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>sous-chemin de <type>ltree</type> commençant à la position
       <parameter>offset</parameter>, de longueur <parameter>len</parameter>.
       Si <parameter>offset</parameter> est négatif, le sous-chemin commence
       de ce nombre à partir de la fin du chemin. Si <parameter>len</parameter>
       est négatif, laisse ce nombre de labels depuis la fin du chemin.</entry>
      <entry><literal>subpath('Top.Child1.Child2',0,2)</literal></entry>
      <entry><literal>Top.Child1</literal></entry>
     </row>

     <row>
      <entry><function>subpath(ltree, int offset)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>sous-chemin de <type>ltree</type> commençant à la position
       <parameter>offset</parameter>, s'étendant à la fin du chemin. Si
       <parameter>offset</parameter> est négatif, le sous-chemin commence de
       ce point jusqu'à la fin du chemin.</entry>
      <entry><literal>subpath('Top.Child1.Child2',1)</literal></entry>
      <entry><literal>Child1.Child2</literal></entry>
     </row>

     <row>
      <entry><function>nlevel(ltree)</function></entry>
      <entry><type>integer</type></entry>
      <entry>nombre de labels dans le chemin</entry>
      <entry><literal>nlevel('Top.Child1.Child2')</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

     <row>
      <entry><function>index(ltree a, ltree b)</function></entry>
      <entry><type>integer</type></entry>
      <entry>position de la première occurrence de <parameter>b</parameter>
       dans <parameter>a</parameter>&nbsp;; -1 si introuvable</entry>
      <entry><literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6')</literal></entry>
      <entry><literal>6</literal></entry>
     </row>

     <row>
      <entry><function>index(ltree a, ltree b, int offset)</function></entry>
      <entry><type>integer</type></entry>
      <entry>position de la première occurrence de <parameter>b</parameter>
       dans <parameter>a</parameter>, la recherche commence à
       <parameter>offset</parameter>&nbsp;; un <parameter>offset</parameter>
       négatif signifie un commencement à <parameter>-offset</parameter> labels
       de la fin du chemin</entry>
      <entry><literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6',-4)</literal></entry>
      <entry><literal>9</literal></entry>
     </row>

     <row>
      <entry><function>text2ltree(text)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>convertit du <type>text</type> en <type>ltree</type></entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>ltree2text(ltree)</function></entry>
      <entry><type>text</type></entry>
      <entry>convertit du <type>ltree</type> en <type>text</type></entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>lca(ltree, ltree, ...)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>plus petit ancêtre commun, c'est-à-dire préfixe commun le plus
       long des chemins (jusqu'à huit arguments supportés)</entry>
      <entry><literal>lca('1.2.2.3','1.2.3.4.5.6')</literal></entry>
      <entry><literal>1.2</literal></entry>
     </row>

     <row>
      <entry><function>lca(ltree[])</function></entry>
      <entry><type>ltree</type></entry>
      <entry>plus petit ancêtre commun, c'est-à-dire préfixe commun le plus
       long des chemins</entry>
      <entry><literal>lca(array['1.2.2.3'::ltree,'1.2.3'])</literal></entry>
      <entry><literal>1.2</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Index</title>
  <para>
   <filename>ltree</filename> accepte différents types d'index pouvant
   améliorer les performances des oopérateurs indiqués&nbsp;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Index B-tree sur <type>ltree</type>&nbsp;:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     Index GiST sur <type>ltree</type>&nbsp;:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>,
     <literal>@&gt;</literal>, <literal>&lt;@</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     Exemple de la création d'un tel index&nbsp;:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (path);
    </programlisting>
   </listitem>
   <listitem>
    <para>
     Index GiST sur <type>ltree[]</type>&nbsp;:
     <literal>ltree[] &lt;@ ltree</literal>, <literal>ltree @&gt; ltree[]</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     Exemple de la création d'un tel index&nbsp;:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (array_path);
    </programlisting>
    <para>
     Note&nbsp;: ce type d'index est à perte.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <title>Exemple</title>

  <para>
   Cet exemple utilise les données suivantes (disponibles dans le fichier
   <filename>contrib/ltree/ltreetest.sql</filename> des sources)&nbsp;:
  </para>

  <programlisting>
CREATE TABLE test (path ltree);
INSERT INTO test VALUES ('Top');
INSERT INTO test VALUES ('Top.Science');
INSERT INTO test VALUES ('Top.Science.Astronomy');
INSERT INTO test VALUES ('Top.Science.Astronomy.Astrophysics');
INSERT INTO test VALUES ('Top.Science.Astronomy.Cosmology');
INSERT INTO test VALUES ('Top.Hobbies');
INSERT INTO test VALUES ('Top.Hobbies.Amateurs_Astronomy');
INSERT INTO test VALUES ('Top.Collections');
INSERT INTO test VALUES ('Top.Collections.Pictures');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Stars');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Galaxies');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Astronauts');
CREATE INDEX path_gist_idx ON test USING gist(path);
CREATE INDEX path_idx ON test USING btree(path);
  </programlisting>

  <para>
   Maintenant, nous avons une table <structname>test</structname> peuplée
   avec des données décrivant la hiérarchie ci-dessous&nbsp;:
  </para>

  <programlisting>
                            Top
                         /   |  \
                 Science Hobbies Collections
                     /       |              \
            Astronomy   Amateurs_Astronomy Pictures
               /  \                            |
    Astrophysics  Cosmology                Astronomy
                                            /  |    \
                                     Galaxies Stars Astronauts
  </programlisting>

  <para>
   Nous pouvons faire de l'héritage&nbsp;:
  </para>

  <programlisting>
ltreetest=# select path from test where path &lt;@ 'Top.Science';
                path
------------------------------------
 Top.Science
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(4 rows)
  </programlisting>

  <para>
   Voici quelques exemples de correspondance de chemins&nbsp;:
  </para>

  <programlisting>
ltreetest=# select path from test where path ~ '*.Astronomy.*';
                     path
-----------------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Collections.Pictures.Astronomy
 Top.Collections.Pictures.Astronomy.Stars
 Top.Collections.Pictures.Astronomy.Galaxies
 Top.Collections.Pictures.Astronomy.Astronauts
(7 rows)

ltreetest=# select path from test where path ~ '*.!pictures@.*.Astronomy.*';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </programlisting>

  <para>
   Voici quelques exemples de recherche plein texte&nbsp;:
  </para>
  <programlisting>
ltreetest=# select path from test where path @ 'Astro*% &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Hobbies.Amateurs_Astronomy
(4 rows)

ltreetest=# select path from test where path @ 'Astro* &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </programlisting>

  <para>
   Construction d'un chemin en utilisant les fonctions&nbsp;:
  </para>
  <programlisting>
ltreetest=# select subpath(path,0,2)||'Space'||subpath(path,2) from test where path &lt;@ 'Top.Science.Astronomy';
                 ?column?
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </programlisting>

  <para>
   Nous pouvons simplifier ceci en créant une fonction SQL qui insère un
   label à une position spécifié dans un chemin&nbsp;:
  </para>
  <programlisting>
CREATE FUNCTION ins_label(ltree, int, text) RETURNS ltree
AS 'select subpath($1,0,$2) || $3 || subpath($1,$2);'
LANGUAGE SQL IMMUTABLE;

ltreetest=# select ins_label(path,2,'Space') from test where path &lt;@ 'Top.Science.Astronomy';
                ins_label
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </programlisting>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Tout le travail a été réalisé par Teodor Sigaev
   (<email>teodor@stack.net</email>) et Oleg Bartunov
   (<email>oleg@sai.msu.su</email>). Voir
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist"></ulink> pour des
   informations supplémentaires. Les auteurs voudraient remercier Eugeny
   Rodichev pour son aide. Commentaires et rapports de bogue sont les
   bienvenus.
  </para>
 </sect2>

</sect1>
