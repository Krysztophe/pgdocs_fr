<!-- $PostgreSQL: pgsql/doc/src/sgml/ltree.sgml,v 1.3 2007/12/10 05:32:51 tgl Exp $ -->

<sect1 id="ltree">
 <title>ltree</title>

 <indexterm zone="ltree">
  <primary>ltree</primary>
 </indexterm>

 <para>
  Ce module implémente le type de données <type>ltree</type> pour représenter
  des labels de données stockés dans une structure hiérarchique de type arbre.
  Des fonctionnalités étendues de recherche sont fournies.
 </para>

 <sect2>
  <title>Définitions</title>

  <para>
   Un <firstterm>label</firstterm> est une séquence de caractères
   alphanumériques et de tirets bas (par exemple, dans la locale C, les
   caractères <literal>A-Za-z0-9_</literal> sont autorisés). La longueur d'un
   label est limité par 256 octets.
  </para>

  <para>
   Exemples&nbsp;: <literal>42</literal>, <literal>Personal_Services</literal>
  </para>

  <para>
   Le <firstterm>chemin de label</firstterm> est une séquence de zéro
   ou plusieurs labels séparés par des points, par exemple
   <literal>L1.L2.L3</literal>, ce qui représente le chemin de la racine
   jusqu'à un n½ud particulier. La longueur d'un chemin
   est limité à 65&nbsp;Ko, mais une longueur inférieure ou égale à 2&nbsp;Ko
   est préférable. Nous considérons qu'il ne s'agit pas d'une limitation
   stricte. Par exemple, lataille maximum d'un chemin de label dans le
   <ulink url="http://www.dmoz.org">catalogue DMOZ</ulink> fait environ 240
   octets&nbsp;!
  </para>

  <para>
   Exemple&nbsp;: <literal>Top.Countries.Europe.Russia</literal>
  </para>

  <para>
   Le module <filename>ltree</filename> fournit plusieurs types de
   données&nbsp;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <type>ltree</type> stocke un chemin de label.
    </para>
   </listitem>

   <listitem>
    <para>
     <type>lquery</type> représente un type d'expression rationnelle du chemin
     pour la correspondance de valeurs de type <type>ltree</type>. Un mot
     simple établit une correspondance avec ce label dans un chemin. Le
     caractère joker (<literal>*</literal>) est utilisé pour spécifier tout
     nombre de labels (niveaux). Par exemple&nbsp;:
     <programlisting>
foo         <lineannotation>Correspond au chemin exact <literal>foo</literal></lineannotation>
*.foo.*     <lineannotation>Correspond à tout chemin contenant le label <literal>foo</literal></lineannotation>
*.foo       <lineannotation>Correspond à tout chemin dont le dernier label est
<literal>foo</literal></lineannotation>
     </programlisting>
    </para>

    <para>
     Les caractères joker peuvent être quantifiés pour restreindre le nombre
     de labels de la correspondance&nbsp;:
     <programlisting>
*{<replaceable>n</replaceable>}        <lineannotation>Correspond à exactement <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,}       <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,<replaceable>m</replaceable>}      <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels mais à pas plus de <replaceable>m</replaceable></lineannotation>
*{,<replaceable>m</replaceable>}       <lineannotation>Correspond à au plus <replaceable>m</replaceable> labels &mdash; identique à</lineannotation> *{0,<replaceable>m</replaceable>}
     </programlisting>
    </para>

    <para>
     There are several modifiers that can be put at the end of a non-star
     label in <type>lquery</type> to make it match more than just the exact match:
     <programlisting>
@           <lineannotation>Match case-insensitively, for example <literal>a@</literal> matches <literal>A</literal></lineannotation>
*           <lineannotation>Match any label with this prefix, for example <literal>foo*</literal> matches <literal>foobar</literal></lineannotation>
%           <lineannotation>Match initial underscore-separated words</lineannotation>
     </programlisting>
     The behavior of <literal>%</literal> is a bit complicated.  It tries to match
     words rather than the entire label.  For example
     <literal>foo_bar%</literal> matches <literal>foo_bar_baz</literal> but not
     <literal>foo_barbaz</literal>.  If combined with <literal>*</literal>, prefix
     matching applies to each word separately, for example
     <literal>foo_bar%*</literal> matches <literal>foo1_bar2_baz</literal> but
     not <literal>foo1_br2_baz</literal>.
    </para>

    <para>
     Also, you can write several possibly-modified labels separated with
     <literal>|</literal> (OR) to match any of those labels, and you can put
     <literal>!</literal> (NOT) at the start to match any label that doesn't
     match any of the alternatives.
    </para>

    <para>
     Here's an annotated example of <type>lquery</type>:
    <programlisting>
     Top.*{0,2}.sport*@.!football|tennis.Russ*|Spain
     a.  b.     c.      d.               e.
    </programlisting>
     This query will match any label path that:
    </para>
    <orderedlist numeration='loweralpha'>
     <listitem>
      <para>
       begins with the label <literal>Top</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       and next has zero to two labels before
      </para>
     </listitem>
     <listitem>
      <para>
       a label beginning with the case-insensitive prefix <literal>sport</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       then a label not matching <literal>football</literal> nor
       <literal>tennis</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       and then ends with a label beginning with <literal>Russ</literal> or
       exactly matching <literal>Spain</literal>.
      </para>
     </listitem>
    </orderedlist>
   </listitem>

   <listitem>
    <para><type>ltxtquery</type> represents a full-text-search-like
    pattern for matching <type>ltree</type> values.  An
    <type>ltxtquery</type> value contains words, possibly with the
    modifiers <literal>@</literal>, <literal>*</literal>, <literal>%</literal> at the end;
    the modifiers have the same meanings as in <type>lquery</type>.
    Words can be combined with <literal>&amp;</literal> (AND),
    <literal>|</literal> (OR), <literal>!</literal> (NOT), and parentheses.
    The key difference from
    <type>lquery</type> is that <type>ltxtquery</type> matches words without
    regard to their position in the label path.
    </para>

    <para>
     Here's an example <type>ltxtquery</type>:
    <programlisting>
     Europe &amp; Russia*@ &amp; !Transportation
    </programlisting>
     This will match paths that contain the label <literal>Europe</literal> and
     any label beginning with <literal>Russia</literal> (case-insensitive),
     but not paths containing the label <literal>Transportation</literal>.
     The location of these words within the path is not important.
     Also, when <literal>%</literal> is used, the word can be matched to any
     underscore-separated word within a label, regardless of position.
    </para>
   </listitem>

  </itemizedlist>

  <para>
   Note: <type>ltxtquery</type> allows whitespace between symbols, but
   <type>ltree</type> and <type>lquery</type> do not.
  </para>
 </sect2>

 <sect2>
  <title>Operators and Functions</title>

  <para>
   Type <type>ltree</type> has the usual comparison operators
   <literal>=</literal>, <literal>&lt;&gt;</literal>,
   <literal>&lt;</literal>, <literal>&gt;</literal>, <literal>&lt;=</literal>, <literal>&gt;=</literal>.
   Comparison sorts in the order of a tree traversal, with the children
   of a node sorted by label text.  In addition, there are the following
   specialized operators:
  </para>

  <table id="ltree-op-table">
   <title><type>ltree</type> Operators</title>

   <tgroup cols="3">
    <thead>
     <row>
      <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>ltree</type> <literal>@&gt;</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>is left argument an ancestor of right (or equal)?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>&lt;@</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>is left argument a descendant of right (or equal)?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>~</literal> <type>lquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> match <type>lquery</type>?</entry>
     </row>

     <row>
      <entry><type>lquery</type> <literal>~</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> match <type>lquery</type>?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>?</literal> <type>lquery[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> match any <type>lquery</type> in array?</entry>
     </row>

     <row>
      <entry><type>lquery[]</type> <literal>?</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> match any <type>lquery</type> in array?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>@</literal> <type>ltxtquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> match <type>ltxtquery</type>?</entry>
     </row>

     <row>
      <entry><type>ltxtquery</type> <literal>@</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> match <type>ltxtquery</type>?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>||</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>concatenate <type>ltree</type> paths</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>||</literal> <type>text</type></entry>
      <entry><type>ltree</type></entry>
      <entry>convert text to <type>ltree</type> and concatenate</entry>
     </row>

     <row>
      <entry><type>text</type> <literal>||</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>convert text to <type>ltree</type> and concatenate</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>@&gt;</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain an ancestor of <type>ltree</type>?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>&lt;@</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain an ancestor of <type>ltree</type>?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>&lt;@</literal> <type>ltree</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain a descendant of <type>ltree</type>?</entry>
     </row>

     <row>
      <entry><type>ltree</type> <literal>@&gt;</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain a descendant of <type>ltree</type>?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>~</literal> <type>lquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain any path matching <type>lquery</type>?</entry>
     </row>

     <row>
      <entry><type>lquery</type> <literal>~</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain any path matching <type>lquery</type>?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?</literal> <type>lquery[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> array contain any path matching any <type>lquery</type>?</entry>
     </row>

     <row>
      <entry><type>lquery[]</type> <literal>?</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>ltree</type> array contain any path matching any <type>lquery</type>?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>@</literal> <type>ltxtquery</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain any path matching <type>ltxtquery</type>?</entry>
     </row>

     <row>
      <entry><type>ltxtquery</type> <literal>@</literal> <type>ltree[]</type></entry>
      <entry><type>boolean</type></entry>
      <entry>does array contain any path matching <type>ltxtquery</type>?</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?@&gt;</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>first array entry that is an ancestor of <type>ltree</type>; NULL if none</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?&lt;@</literal> <type>ltree</type></entry>
      <entry><type>ltree</type></entry>
      <entry>first array entry that is a descendant of <type>ltree</type>; NULL if none</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?~</literal> <type>lquery</type></entry>
      <entry><type>ltree</type></entry>
      <entry>first array entry that matches <type>lquery</type>; NULL if none</entry>
     </row>

     <row>
      <entry><type>ltree[]</type> <literal>?@</literal> <type>ltxtquery</type></entry>
      <entry><type>ltree</type></entry>
      <entry>first array entry that matches <type>ltxtquery</type>; NULL if none</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   The operators <literal>&lt;@</literal>, <literal>@&gt;</literal>,
   <literal>@</literal> and <literal>~</literal> have analogues
   <literal>^&lt;@</literal>, <literal>^@&gt;</literal>, <literal>^@</literal>,
   <literal>^~</literal>, which are the same except they do not use
   indexes.  These are useful only for testing purposes.
  </para>

  <para>
   The following functions are available:
  </para>

  <table id="ltree-func-table">
   <title><type>ltree</type> Functions</title>

   <tgroup cols="5">
    <thead>
     <row>
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>subltree(ltree, int start, int end)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>subpath of <type>ltree</type> from position <parameter>start</parameter> to
       position <parameter>end</parameter>-1 (counting from 0)</entry>
      <entry><literal>subltree('Top.Child1.Child2',1,2)</literal></entry>
      <entry><literal>Child1</literal></entry>
     </row>

     <row>
      <entry><function>subpath(ltree, int offset, int len)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>subpath of <type>ltree</type> starting at position
       <parameter>offset</parameter>, length <parameter>len</parameter>.
       If <parameter>offset</parameter> is negative, subpath starts that far from the
       end of the path.  If <parameter>len</parameter> is negative, leaves that many
       labels off the end of the path.</entry>
      <entry><literal>subpath('Top.Child1.Child2',0,2)</literal></entry>
      <entry><literal>Top.Child1</literal></entry>
     </row>

     <row>
      <entry><function>subpath(ltree, int offset)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>subpath of <type>ltree</type> starting at position
       <parameter>offset</parameter>, extending to end of path.
       If <parameter>offset</parameter> is negative, subpath starts that far from the
       end of the path.</entry>
      <entry><literal>subpath('Top.Child1.Child2',1)</literal></entry>
      <entry><literal>Child1.Child2</literal></entry>
     </row>

     <row>
      <entry><function>nlevel(ltree)</function></entry>
      <entry><type>integer</type></entry>
      <entry>number of labels in path</entry>
      <entry><literal>nlevel('Top.Child1.Child2')</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

     <row>
      <entry><function>index(ltree a, ltree b)</function></entry>
      <entry><type>integer</type></entry>
      <entry>position of first occurrence of <parameter>b</parameter> in
       <parameter>a</parameter>; -1 if not found</entry>
      <entry><literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6')</literal></entry>
      <entry><literal>6</literal></entry>
     </row>

     <row>
      <entry><function>index(ltree a, ltree b, int offset)</function></entry>
      <entry><type>integer</type></entry>
      <entry>position of first occurrence of <parameter>b</parameter> in
       <parameter>a</parameter>, searching starting at <parameter>offset</parameter>;
       negative <parameter>offset</parameter> means start <parameter>-offset</parameter>
       labels from the end of the path</entry>
      <entry><literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6',-4)</literal></entry>
      <entry><literal>9</literal></entry>
     </row>

     <row>
      <entry><function>text2ltree(text)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>cast <type>text</type> to <type>ltree</type></entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>ltree2text(ltree)</function></entry>
      <entry><type>text</type></entry>
      <entry>cast <type>ltree</type> to <type>text</type></entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>lca(ltree, ltree, ...)</function></entry>
      <entry><type>ltree</type></entry>
      <entry>lowest common ancestor, i.e., longest common prefix of paths
       (up to 8 arguments supported)</entry>
      <entry><literal>lca('1.2.2.3','1.2.3.4.5.6')</literal></entry>
      <entry><literal>1.2</literal></entry>
     </row>

     <row>
      <entry><function>lca(ltree[])</function></entry>
      <entry><type>ltree</type></entry>
      <entry>lowest common ancestor, i.e., longest common prefix of paths</entry>
      <entry><literal>lca(array['1.2.2.3'::ltree,'1.2.3'])</literal></entry>
      <entry><literal>1.2</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Indexes</title>
  <para>
   <filename>ltree</filename> supports several types of indexes that can speed
   up the indicated operators:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     B-tree index over <type>ltree</type>:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     GiST index over <type>ltree</type>:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>,
     <literal>@&gt;</literal>, <literal>&lt;@</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     Example of creating such an index:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (path);
    </programlisting>
   </listitem>
   <listitem>
    <para>
     GiST index over <type>ltree[]</type>:
     <literal>ltree[] &lt;@ ltree</literal>, <literal>ltree @&gt; ltree[]</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     Example of creating such an index:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (array_path);
    </programlisting>
    <para>
     Note: This index type is lossy.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <title>Example</title>

  <para>
   This example uses the following data (also available in file
   <filename>contrib/ltree/ltreetest.sql</filename> in the source distribution):
  </para>

  <programlisting>
CREATE TABLE test (path ltree);
INSERT INTO test VALUES ('Top');
INSERT INTO test VALUES ('Top.Science');
INSERT INTO test VALUES ('Top.Science.Astronomy');
INSERT INTO test VALUES ('Top.Science.Astronomy.Astrophysics');
INSERT INTO test VALUES ('Top.Science.Astronomy.Cosmology');
INSERT INTO test VALUES ('Top.Hobbies');
INSERT INTO test VALUES ('Top.Hobbies.Amateurs_Astronomy');
INSERT INTO test VALUES ('Top.Collections');
INSERT INTO test VALUES ('Top.Collections.Pictures');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Stars');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Galaxies');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Astronauts');
CREATE INDEX path_gist_idx ON test USING gist(path);
CREATE INDEX path_idx ON test USING btree(path);
  </programlisting>

  <para>
   Now, we have a table <structname>test</structname> populated with data describing
   the hierarchy shown below:
  </para>

  <programlisting>
                            Top
                         /   |  \
                 Science Hobbies Collections
                     /       |              \
            Astronomy   Amateurs_Astronomy Pictures
               /  \                            |
    Astrophysics  Cosmology                Astronomy
                                            /  |    \
                                     Galaxies Stars Astronauts
  </programlisting>

  <para>
   We can do inheritance:
  </para>

  <programlisting>
ltreetest=# select path from test where path &lt;@ 'Top.Science';
                path
------------------------------------
 Top.Science
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(4 rows)
  </programlisting>

  <para>
   Here are some examples of path matching:
  </para>

  <programlisting>
ltreetest=# select path from test where path ~ '*.Astronomy.*';
                     path
-----------------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Collections.Pictures.Astronomy
 Top.Collections.Pictures.Astronomy.Stars
 Top.Collections.Pictures.Astronomy.Galaxies
 Top.Collections.Pictures.Astronomy.Astronauts
(7 rows)

ltreetest=# select path from test where path ~ '*.!pictures@.*.Astronomy.*';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </programlisting>

  <para>
   Here are some examples of full text search:
  </para>
  <programlisting>
ltreetest=# select path from test where path @ 'Astro*% &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Hobbies.Amateurs_Astronomy
(4 rows)

ltreetest=# select path from test where path @ 'Astro* &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </programlisting>

  <para>
   Path construction using functions:
  </para>
  <programlisting>
ltreetest=# select subpath(path,0,2)||'Space'||subpath(path,2) from test where path &lt;@ 'Top.Science.Astronomy';
                 ?column?
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </programlisting>

  <para>
   We could simplify this by creating a SQL function that inserts a label
   at a specified position in a path:
  </para>
  <programlisting>
CREATE FUNCTION ins_label(ltree, int, text) RETURNS ltree
AS 'select subpath($1,0,$2) || $3 || subpath($1,$2);'
LANGUAGE SQL IMMUTABLE;

ltreetest=# select ins_label(path,2,'Space') from test where path &lt;@ 'Top.Science.Astronomy';
                ins_label
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </programlisting>
 </sect2>

 <sect2>
  <title>Authors</title>

  <para>
   All work was done by Teodor Sigaev (<email>teodor@stack.net</email>) and
   Oleg Bartunov (<email>oleg@sai.msu.su</email>). See
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist"></ulink> for
   additional information. Authors would like to thank Eugeny Rodichev for
   helpful discussions. Comments and bug reports are welcome.
  </para>
 </sect2>

</sect1>
