<?xml version="1.0" encoding="UTF-8"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/dfunc.sgml,v 1.10 2005/09/22 18:34:40 guillaume Exp $
-->

<sect2 id="dfunc">
 <title id="dfunc-title">Compiler et lier des fonctions chargées dynamiquement</title>

 <para>
  Avant d'être en mesure d'utiliser des fonctions d'extension écrites en C dans
  <productname>PostgreSQL</productname>, elles doivent être compilées et liées
  d'une manière particulière afin de produire un fichier pouvant être chargé
  dynamiquement par le serveur. Pour être plus précis, une 
  <firstterm>bibliothèque partagée</firstterm> doit être créée.
  <indexterm><primary>bibliothèque partagée</primary></indexterm>
 </para>

 <para>
  Pour obtenir plus d'informations sur ce qui est abordé dans cette section,
  vous devrez lire la documentation de votre système d'exploitation, en
  particulier les pages traitant du compilateur C, <command>cc</command>, ainsi
  que celle sur l'éditeur de lien, <command>ld</command>. Par ailleurs, le code
  source de <productname>PostgreSQL</productname> contient plusieurs exemples
  fonctionnels contenu dans le répertoire <filename>contrib</filename>.
  Néanmoins, en vous appuyant sur ces exemples, vous créerez des modules
  dépendants de la disponibilité du code source de
  <productname>PostgreSQL</productname>.
 </para>
 
 <para>
  La création de bibliothèques partagées est un
  processus analogue à celui utilisé pour lier des exécutables&nbsp;: en premier
  lieu, les sources sont compilées en fichiers objets puis sont liées ensemble.
  Les fichiers objets doivent être compilés sous la forme de <firstterm>code 
  à position indépendante</firstterm> (<acronym>PIC</acronym>, acronyme de
  <foreignphrase>position-independent
  code</foreignphrase>)<indexterm><primary>PIC</primary></indexterm>. 
  Conceptuellement, cela correspond au fait qu'ils peuvent être placés à  
  une position arbitraire de la mémoire lorsqu'ils sont chargés par
  l'exécutable (les fichiers objets destinés aux exécutables ne sont
  généralement pas compilés de cette manière). La commande permettant de lier
  des bibliothèques partagées nécessite des options spéciales permettant de la
  distinguer d'une liaison pour un exécutable. Enfin, ceci est la théorie. La
  réalité est moins belle sur certains systèmes.
 </para>

 <para>
  Dans les exemples suivants, nous supposons que le code source est un
  fichier <filename>foo.c</filename> et que nous souhaitons créer une
  bibliothèque partagée <filename>foo.so</filename>. Le fichier objet 
  intermédiaire sera appelé <filename>foo.o</filename> sauf si précisé 
  autrement. Une bibliothèque partagée peut contenir plus d'un fichier
  objet. Ceci dit, nous n'en utiliserons qu'un ici.
 </para>

<!--
  Note: Reading GNU Libtool sources is generally a good way of
  figuring out this information.  The methods used within PostgreSQL
  source code are not necessarily ideal.
-->

  <variablelist>
   <varlistentry>
    <term><systemitem class="osname">BSD/OS</systemitem></term>
    <listitem>
    <indexterm><primary>BSD/OS</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option du compilateur pour créer des <acronym>PIC</acronym> est
      <option>-fpic</option>.  L'option de l'éditeur de liens pour créer des 
      bibliothèques partagées est <option>-shared</option>.
<programlisting>gcc -fpic -c foo.c
ld -shared -o foo.so foo.o
</programlisting>
      Ceci est applicable à partir de la version 4.0 de
      <systemitem class="osname">BSD/OS</systemitem>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">FreeBSD</systemitem></term>
    <listitem>
    <indexterm><primary>FreeBSD</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option du compilateur pour créer des <acronym>PIC</acronym> est
      <option>-fpic</option>.  L'option de l'éditeur de liens pour créer des 
      bibliothèques partagées est <option>-shared</option>.
<programlisting>gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
      Ceci est applicable à partir de la version 3.0 de
      <systemitem class="osname">FreeBSD</systemitem>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">HP-UX</systemitem></term>
    <listitem>
    <indexterm><primary>HP-UX</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option du compilateur système pour créer des <acronym>PIC</acronym>
      est <option>+z</option>. Lorsque vous utilisez 
      <application>GCC</application>, l'option est <option>-fpic</option>. Le 
      commutateur de l'éditeur de liens pour les bibliothèques partagées est
      <option>-b</option>.
      Ainsi      
<programlisting>cc +z -c foo.c
</programlisting>
      ou
<programlisting>gcc -fpic -c foo.c
</programlisting>
      puis
<programlisting>ld -b -o foo.sl foo.o
</programlisting>
      <systemitem class="osname">HP-UX</systemitem> utilise l'extension
      <filename>.sl</filename> pour les bibliothèques partagées, à la différence
      de la plupart des autres systèmes.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">IRIX</systemitem></term>
    <listitem>
    <indexterm><primary>IRIX</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      <acronym>PIC</acronym> est l'option par défaut. Aucune option de compilation
      particulière n'est nécessaire. Le commutateur de l'éditeur de liens pour
      produire des bibliothèques partagées est <option>-shared</option>.
<programlisting>cc -c foo.c
ld -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Linux</systemitem></term>
    <listitem>
    <indexterm><primary>Linux</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option de compilation pour créer des <acronym>PIC</acronym> est
      <option>-fpic</option>.  Sur certaines plateformes et dans certaines
      situations, <option>-fPIC</option> doit être utilisé si
      <option>-fpic</option> ne fonctionne pas. Reportez-vous au manuel de GCC
      pour plus d'informations. L'option de compilation pour créer des
      bibliothèques partagées est <option>-shared</option>. Un exemple complet
      devrait ressembler à ce qui suit&nbsp;:
<programlisting>cc -fpic -c foo.c
cc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">MacOS X</systemitem></term>
    <listitem>
    <indexterm><primary>MacOS X</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      Voici un exemple. Il suppose que les outils de développement sont installés.
<programlisting>cc -c foo.c 
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><systemitem class="osname">NetBSD</systemitem></term>
    <listitem>
    <indexterm><primary>NetBSD</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option de compilation pour créer des <acronym>PIC</acronym> est
      <option>-fpic</option>. Pour les systèmes <acronym>ELF</acronym>,
      l'option de compilation pour lier les bibliothèques partagées 
      est <option>-shared</option>. Sur les systèmes plus anciens n'étant pas ELF,
      on utilise <literal>ld -Bshareable</literal>.      
<programlisting>gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">OpenBSD</systemitem></term>
    <listitem>
    <indexterm><primary>OpenBSD</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option de compilation pour créer des <acronym>PIC</acronym> est
      <option>-fpic</option>. Les bibliothèques partagées peuvent être créées avec
      la commande suivante <literal>ld -Bshareable</literal>.
<programlisting>gcc -fpic -c foo.c
ld -Bshareable -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Solaris</systemitem></term>
    <listitem>
    <indexterm><primary>Solaris</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option de compilation pour créer des <acronym>PIC</acronym> est 
      <option>-KPIC</option> avec le compilateur de Sun et <option>-fpic</option>
      avec <application>GCC</application>. Pour lier les bibliothèques
      partagées, l'option de compilation est respectivement <option>-G</option>
      ou <option>-shared</option>.
<programlisting>cc -KPIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      ou
<programlisting>gcc -fpic -c foo.c
gcc -G -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Tru64 UNIX</systemitem></term>
    <listitem>
    <indexterm><primary>Tru64 UNIX</primary><secondary>bibliothèque partagée</secondary></indexterm>
    <indexterm><primary>Digital UNIX</primary><see>Tru64 UNIX</see></indexterm>
     <para>
      Par défaut, on compile des <acronym>PIC</acronym>. Ainsi, aucune directive
      particulière n'est à fournir pour la compilation. Pour lier, des
      options spécifiques sont à fournir à <command>ld</command>&nbsp;:
<programlisting>cc -c foo.c
ld -shared -expect_unresolved '*' -o foo.so foo.o
</programlisting>
      Une procédure identique doit être employée dans le cas où GCC serait
      utilisé à la place du compilateur du système&nbsp;; aucune option
      particulière n'est nécessaire.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">UnixWare</systemitem></term>
    <listitem>
    <indexterm><primary>UnixWare</primary><secondary>bibliothèque partagée</secondary></indexterm>
     <para>
      L'option de compilation pour créer des <acronym>PIC</acronym> est 
      <option>-KPIC</option> avec le compilateur SCO et <option>-fpic</option> avec
      <productname>GCC</productname>. Pour lier des bibliothèques partagées,
      les options respectives sont <option>-G</option> et
      <option>-shared</option>.
<programlisting>cc -K PIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      ou
<programlisting>gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 <tip>
  <para>
   Si cela vous semble compliqué, vous pouvez tenter d'utiliser
   <ulink url="http://www.gnu.org/software/libtool/"><productname>GNU
   Libtool</productname></ulink>. Cet outil permet de s'affranchir des
   différences entre les nombreux systèmes au travers d'une interface
   uniformisée.
  </para>
 </tip>

 <para>
  La bibliothèque partagée résultante peut être chargée dans 
  <productname>PostgreSQL</productname>. Lorsque l'on spécifie le nom du fichier
  dans la commande <command>CREATE FUNCTION</command>, on doit lui donner le nom
  de la bibliothèque partagée et non celui du fichier objet intermédiaire. Notez
  bien que l'extension standard pour les bibliothèques partagées (en général 
  <literal>.so</literal> ou <literal>.sl</literal>) peut être omise dans la commande
  <command>CREATE FUNCTION</command> et doit l'être pour obtenir une meilleure
  portabilité.
 </para>

 <para>
  Référez-vous à la <xref linkend="xfunc-c-dynload"/> pour savoir à quel endroit
  le serveur s'attend à trouver les fichiers de bibliothèques partagées.  
 </para>

<!--
Under AIX, object files are compiled normally but building the shared
library requires a couple of steps.  First, create the object file:
.nf
cc <other flags> -c foo.c
.fi
You must then create a symbol \*(lqexports\*(rq file for the object
file:
.nf
mkldexport foo.o `pwd` &gt; foo.exp
.fi
Finally, you can create the shared library:
.nf
ld <other flags> -H512 -T512 -o foo.so -e _nostart \e
   -bI:.../lib/postgres.exp -bE:foo.exp foo.o \e
   -lm -lc 2>/dev/null
.fi
  -->

</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-tabs-mode:nil
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/share/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
