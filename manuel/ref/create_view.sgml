<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/create_view.sgml,v 1.7.2.1 2005/03/14 06:03:02 guillaume Exp $
PostgreSQL documentation
-->

<refentry id="SQL-CREATEVIEW">
 <refmeta>
  <refentrytitle id="SQL-CREATEVIEW-TITLE">CREATE VIEW</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE VIEW</refname>
  <refpurpose>définit une nouvelle vue</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createview">
  <primary>CREATE VIEW</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] VIEW <replaceable class="PARAMETER">nom</replaceable> [ ( <replaceable
class="PARAMETER">nom_colonne</replaceable> [, ...] ) ] AS <replaceable
class="PARAMETER">requête</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE VIEW</command> définit une vue d'une requête. La
   vue n'est pas matérialisée physiquement. Au lieu de cela, la requête
   est lancée chaque fois qu'une vue est référencée dans une requête.
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> est similaire mais elle est
   remplacée si une vue du même nom existe déjà. Vous pouvez seulement
   remplacer une vue avec une nouvelle requête qui génère un ensemble de
   colonnes identiques (par exemple le même nom de colonnes et de type de
   données).
  </para>

  <para>
   Si un nom de schéma est donné (par exemple <literal>CREATE VIEW
   monschema.mavue ...</>), alors la vue est créée dans le schéma donné.
   Dans les autres cas, elle est créée dans le schéma courant. Le nom
   de la vue doit être différent du nom des autres vues, tables, séquences
   ou index du même schéma.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
       Le nom de la vue à créer (qualifié ou non du nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom de colonne</replaceable></term>
    <listitem>
     <para>
      Une liste optionnelle de noms à utiliser pour les colonnes de la vue.
      Si elle n'est pas donnée, le nom des colonnes sera déduit de la requête.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">requête</replaceable></term>
    <listitem>
     <para>
      Une requête (c'est-à-dire une instruction <command>SELECT</>)
      qui fournira les colonnes et les lignes de la vue.
     </para>

     <para>
      Référez-vous à l'instruction <xref linkend="sql-select" endterm="sql-select-title">
      pour plus d'informations sur les requêtes valides.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

   <para>
    Actuellement, les vues sont en lecture seule&nbsp;: le système n'autorisera
    pas une insertion, une mise à jour ou une suppression sur la vue. Vous
    pouvez obtenir les effets d'une vue pouvant être mise à jour en créant
    des règles qui ré-écrivent les insertions, etc. sur la vue en actions
    appropriées sur les autres tables. Pour plus d'informations, regardez 
    <xref linkend="sql-createrule" endterm="sql-createrule-title">.
   </para>

   <para>
    Utilisez l'instruction <command>DROP VIEW</command> pour supprimer les vues.
   </para>

   <para>
    Soyez attentif au fait que les noms et les types des colonnes de la vue
    soient affectés de la façon que vous souhaitez.  Par exemple,
<programlisting>
CREATE VIEW vista AS SELECT 'Hello World';
</programlisting>
    est doublement une mauvaise forme&nbsp;: le nom de la colonne sera par
    défaut <literal>?column?</> et le type de données de la colonne sera par
    défaut <type>unknown</>. Si vous voulez une chaîne de caractères dans le
    résultat de la vue, utilisez quelque chose comme
<programlisting>
CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
</programlisting>
   </para>

   <para>
    L'accès aux tables référencées dans la vue est déterminé par les droits
    du propriétaire de la vue.  Cependant, les fonctions appelées dans la vue
    sont traitées de la même façon que si elles avaient été appelées directement
    par la requête utilisant la vue.  Par conséquent, l'utilisateur de la vue
    doit avoir les droits sur toutes les fonctions utilisées par la vue.
   </para>

 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer une vue sur tous les films de comédie&nbsp;:

<programlisting>
CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE genre = 'Comédie';
</programlisting>
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL spécifie quelques possibilités supplémentaires pour
   l'instruction <command>CREATE VIEW</command>&nbsp;:
<synopsis>
CREATE VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable
class="parameter">nom_colonne</replaceable> [, ...] ) ]
    AS requête
    [ WITH [ CASCADE | LOCAL ] CHECK OPTION ]
</synopsis>
  </para>

  <para>
   Les clauses optionnelles pour la commande SQL complète sont&nbsp;:

   <variablelist>
     <varlistentry>
      <term><literal>CHECK OPTION</literal></term>
      <listitem>
       <para>
        Cette option est à utiliser avec les vues pouvant être mises à jour.
        Toutes les commandes <command>INSERT</> et <command>UPDATE</>
        sur la vue seront contrôlées pour s'assurer que les données
        sont conformes à la condition définissant la vue.
        (C'est-à-dire que les nouvelles données seraient visibles à travers la
        vue). Si cela n'est pas le cas, la mise à jour sera rejetée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>LOCAL</literal></term>
      <listitem>
       <para>
        Contrôle l'intégrité sur la vue.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CASCADE</literal></term>
      <listitem>
       <para>
        Contrôle l'intégrité sur cette vue et sur toutes les
        vues dépendantes. <literal>CASCADE</> est utilisé si
        ni <literal>CASCADE</> ni <literal>LOCAL</> ne sont
        spécifiés.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> est une
   extension du langage de <productname>PostgreSQL</productname>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
