<?xml version="1.0" encoding="UTF-8"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/prepare.sgml,v 1.10 2005/05/26 07:17:14 guillaume Exp $
PostgreSQL documentation
-->

<refentry id="sql-prepare">
 <refmeta>
  <refentrytitle id="sql-prepare-title">PREPARE</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>prépare une instruction pour exécution</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>PREPARE <replaceable class="parameter">nom</replaceable> [ (<replaceable
class="parameter">type_donnees</replaceable> [, ...] ) ] AS <replaceable
class="parameter">instruction</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-prepare">
   <primary>PREPARE</primary>
  </indexterm>

  <indexterm zone="sql-prepare">
   <primary>instructions préparées</primary>
   <secondary>création</secondary>
  </indexterm>

  <para>
   <command>PREPARE</command> crée une instruction préparée. Une instruction
   préparée est un objet côté serveur qui peut être utilisé pour optimiser les
   performances. Quand l'instruction <command>PREPARE</command> est exécutée,
   l'instruction spécifiée est analysée, réécrite et planifiée. Quand une
   commande <command>EXECUTE</command> est lancée par la suite, l'instruction
   préparée a seulement besoin d'être exécutée. Du coup, les étapes d'analyse,
   de réécriture et de planification sont réalisées une seule fois, à la place
   de chaque fois que l'instruction est exécutée.
  </para>

  <para>
   Les instructions préparées peuvent prendre des paramètres&nbsp;: les valeurs
   sont substituées dans l'instruction lorsqu'elle est exécutée. Lors de la
   création de l'instruction préparée, faites référence aux paramètres suivant
   leur position, <literal>$1</literal>, <literal>$2</literal>, etc. Une liste
   correspondante des types de données des paramètres peut être spécifiée si
   vous le souhaitez. Quand le type de donnée d'un paramètre n'est pas indiqué
   ou est déclaré comme inconnu (<literal>unknown</literal>), le type est
   inféré à partir du contexte dans lequel le paramètre est utilisé (si
   possible). Lors de l'exécution de l'instruction, indiquez les valeurs
   réelles de ces paramètres dans l'instruction <command>EXECUTE</command>.
   Référez-vous à <xref linkend="sql-execute" endterm="sql-execute-title"/>
   pour plus d'informations à ce sujet.
  </para>

  <para>
   Les instructions préparées sont seulement stockées pour la durée
   de la session en cours. Lorsque la session se termine, l'instruction préparée
   est oubliée et, du coup, elle doit être recréée avant d'être utilisée de
   nouveau. Ceci signifie aussi qu'une seule instruction préparée ne peut pas
   être utilisée par plusieurs clients de bases de données simultanément&nbsp;;
   néanmoins, chaque client peut créer sa propre instruction préparée à
   utiliser. L'instruction préparée peut être supprimés manuellement en
   utilisant la commande <xref linkend="sql-deallocate"
   endterm="sql-deallocate-title"/>.
  </para>

  <para>
   Les instructions préparées sont principalement intéressantes quand une seule
   session est utilisée pour exécuter un grand nombre
   d'instructions similaires. La différence de performances est
   particulièrement significative si les instructions sont complexes à
   planifier ou à réécrire, par exemple, si la requête implique une jointure de
   plusieurs tables ou requiert l'application de différentes règles. Si
   l'instruction est relativement simple à planifier ou à réécrire mais 
   assez coûteuse à exécuter, l'avantage de performance des instructions
   préparées est moins net.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Un nom quelconque donné à cette instruction préparée particulière. Il
      doit être unique dans une session et est utilisé par la suite pour
      exécuter ou désallouer cette instruction préparée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_donnees</replaceable></term>
    <listitem>
     <para>
      Le type de données d'un paramètre de l'instruction préparée. Si le type
      de données d'un paramètre particulier n'est pas spécifié ou est
      spécifié comme étant inconnu (<literal>unknown</literal>), il sera inferré
      à partir du contexte dans lequel le paramètre est utilisé. Pour référencer
      les paramètres de l'instruction préparée, utilisez
      <literal>$1</literal>, <literal>$2</literal>, etc.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">instruction</replaceable></term>
    <listitem>
     <para>
      Toute instruction <command>SELECT</command>, <command>INSERT</command>,
      <command>UPDATE</command>, <command>DELETE</command> ou <command>VALUES</command>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Dans certaines situations, le plan de requête produit par une instruction
   préparée est inférieur au plan qui aurait été produit si l'instruction avait été
   soumise et exécutée normalement. C'est parce que, quand l'instruction est
   planifiée et que le planificateur tente de déterminer le plan de requête
   optimal, les valeurs réelles de tous les paramètres spécifiés dans
   l'instruction ne sont pas disponibles.
   <productname>PostgreSQL</productname> récupère les statistiques de la
   distribution des données dans la table et peut utiliser les valeurs
   constantes dans une instruction pour deviner le résultat probable de
   l'exécution de l'instruction. Comme cette donnée n'est pas disponible lors de
   la planification d'instructions préparées avec paramètres, le plan choisi
   pourrait ne pas être optimal. Pour examiner le plan de requête que
   <productname>PostgreSQL</productname> a choisi pour une instruction préparée,
   utilisez <xref linkend="sql-explain" endterm="sql-explain-title"/>.
  </para>

  <para>
   Pour plus d'informations sur la planification de la requête et les
   statistiques récupérées par <productname>PostgreSQL</productname> dans ce
   but, voir la documentation de <xref linkend="sql-analyze"
   endterm="sql-analyze-title"/>.
  </para>

  <para>
   Vous pouvez voir toutes les instructions préparées disponibles d'une session
   en exécutant une requête sur la vue système <link
   linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>.
  </para>
 </refsect1>

 <refsect1 id="sql-prepare-examples">
  <title id="sql-prepare-examples-title">Exemples</title>
  <para>
   Crée une instruction préparée pour une instruction <command>INSERT</command>,
   puis l'exécute&nbsp;:
<programlisting>PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>

  <para>
   Crée une instruction préparée pour une instruction <command>SELECT</command>,
   puis l'exécute&nbsp;:
<programlisting>PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   Note that the data type of the second parameter is not specified,
   so it is inferred from the context in which <literal>$2</literal> is used.
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL inclut une instruction <command>PREPARE</command> mais il
   est seulement utilisé en SQL embarqué. Cette version de l'instruction
   <command>PREPARE</command> utilise aussi une syntaxe quelque peu différente.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"
    endterm="sql-deallocate-title"/></member>
   <member><xref linkend="sql-execute" endterm="sql-execute-title"/></member>
  </simplelist>
 </refsect1>
</refentry>
