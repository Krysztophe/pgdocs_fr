<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/psql-ref.sgml,v 1.12 2005/09/15 07:03:27 guillaume Exp $
PostgreSQL documentation
-->

<refentry id="app-psql">
  <refmeta>
    <refentrytitle id="app-psql-title"><application>psql</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo>Application</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname><application>psql</application></refname>
    <refpurpose>
      terminal interactif <productname>PostgreSQL</productname>
    </refpurpose>
  </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>psql</command>
   <arg rep="repeat"><replaceable class="parameter">option</replaceable></arg>
   <arg><replaceable class="parameter">nombase</replaceable>
   <arg><replaceable class="parameter">nomutilisateur</replaceable></arg></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="app-psql">
   <primary>psql</primary>
  </indexterm>

    <para>
     <application>psql</application> est une interface en mode texte
     pour <productname>PostgreSQL</productname>. Il vous permet de saisir des
     requêtes de façon interactive, de les exécuter sur
     <productname>PostgreSQL</productname> et de voir les résultats de ces
     requêtes. Alternativement, les entrées peuvent êtres lues à partir d'un fichier.
     De plus, il fournit un certain nombre de méta-commandes et plusieurs
     fonctionnalités style shell pour faciliter l'écriture des scripts et
     automatiser un nombre varié de tâches.
    </para>
 </refsect1>

 <refsect1 id="r1-app-psql-3">
  <title>Options</title>

  <variablelist>
    <varlistentry>
      <term><option>-a</option></term>
      <term><option>--echo-all</option></term>
      <listitem>
      <para>
       Affiche toutes les lignes en entrée sur la sortie standard lorsqu'elles
       sont lues. Ceci est plus utile dans le traitement de scripts que dans
       le mode interactif. C'est équivalent à initialiser la variable
       <varname>ECHO</varname> à <literal>all</literal>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-A</option></term>
      <term><option>--no-align</option></term>
      <listitem>
      <para>
      Bascule dans le mode d'affichage non aligné. (Le mode d'affichage par
      défaut est aligné.)
      </para>
      </listitem>
    </varlistentry>
	
    <varlistentry>
      <term><option>-c <replaceable
	class="parameter">commande</replaceable></option></term>
      <term><option>--command <replaceable
	class="parameter">commande</replaceable></option></term>
      <listitem>
      <para>
      Indique que <application>psql</application> doit exécuter une chaîne de
      commande, <replaceable class="parameter">commande</replaceable>, puis
      s'arrêter. Cette option est utile dans les scripts shell.
      </para>
      <para>
      <replaceable class="parameter">commande</replaceable> doit être soit une
      chaîne de commandes complètement analysable par le serveur (c'est-à-dire
      qui ne contient aucune des fonctionnalités spécifiques de
      <application>psql</application>), soit une seule commande
      antislash. Du coup, vous ne pouvez pas mixer les commandes
      <acronym>SQL</acronym> et les méta-commandes
      <application>psql</application>. Pour réussir ceci, vous pouvez envoyer la
      chaîne dans un tube vers <application>psql</application> comme ceci&nbsp;:
<literal>echo "\x \\
      select * from foo;" | psql</literal>.
      </para>
      <para>
       Si la chaîne de commandes contient plusieurs commandes SQL, elles sont
       traitées dans une seule transaction sauf si des commandes BEGIN/COMMIT
       explicites sont inclues dans la chaîne pour la diviser en plusieurs
       transactions. Ceci est différent du comportement adopté quand la même
       chaîne est envoyée dans l'entrée standard de
       <application>psql</application>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-d <replaceable
	class="parameter">nombase</replaceable></option></term>
      <term><option>--dbname <replaceable
	class="parameter">nombase</replaceable></option></term>
      <listitem>
      <para>
      Indique le nom de la base de données où se connecter. Ceci est
      équivalent à spécifier <replaceable
      class="parameter">nombase</replaceable> comme premier argument de la
      ligne de commande qui n'est pas une option.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-e</option></term>
      <term><option>--echo-queries</option></term>
      <listitem>
      <para>
      Copie toutes les commandes qui sont envoyées au serveur sur la sortie
      standard. Ceci est équivalent à initialiser la variable
      <varname>ECHO</varname> à <literal>queries</literal>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-E</option></term>
      <term><option>--echo-hidden</option></term>
      <listitem>
      <para>
      Affiche les requêtes réelles générées par <command>\d</command> et autres
      commandes antislash. Vous pouvez utiliser ceci pour étudier les
      opérations internes de <application>psql</application>. Ceci est
      équivalent à initialiser la variable <varname>ECHO_HIDDEN</varname>
      dans <application>psql</application>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-f <replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <term><option>--file <replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <listitem>
      <para>
      Utilise le fichier <replaceable
      class="parameter">nomfichier</replaceable> comme source des commandes au
      lieu de lire les commandes de façon interactive. Une fois que le fichier
      est entièrement traité, <application>psql</application> se termine. Ceci
      est globalement équivalent à la commande interne
      <command>\i</command>.
      </para>

      <para>
       Si <replaceable>nomfichier</replaceable> est un <literal>-</literal>
       (tiret), alors l'entrée standard est lue.
      </para>

      <para>
      Utiliser cette option est légèrement différent d'écrire <literal>psql
      &lt; <replaceable class="parameter">nomfichier</replaceable></literal>. En
      général, les deux feront ce que vous souhaitez mais utiliser
      <literal>-f</literal> active certaines fonctionnalités intéressantes
      comme les messages d'erreur avec les numéros de ligne. Il y a aussi une
      légère chance qu'utiliser cette option réduira la surcharge du lancement.
      D'un autre côté, la variante utilisant la redirection de l'entrée du shell
      doit (en théorie) pour ramener exactement le même affichage que
      celui que vous auriez eu en saisissant tout manuellement.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-F <replaceable
	class="parameter">séparateur</replaceable></option></term>
      <term><option>--field-separator <replaceable
	class="parameter">séparateur</replaceable></option></term>
      <listitem>
      <para>
      Utilisez <replaceable class="parameter">séparateur</replaceable> comme
      champ séparateur pour un affichage non aligné. Ceci est équivalent à
      <command>\pset fieldsep</command> ou <command>\f</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-h <replaceable
	class="parameter">nomhôte</replaceable></option></term>
      <term><option>--host <replaceable
	class="parameter">nomhôte</replaceable></option></term>
      <listitem>
      <para>
      Indique le nom d'hôte de la machine sur lequel le serveur est en cours
      d'exécution. Si la valeur commence avec un slash, elle est utilisée comme
      répertoire du socket de domaine Unix.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-H</option></term>
      <term><option>--html</option></term>
      <listitem>
      <para>
      Active l'affichage en tableau <acronym>HTML</acronym>. Ceci est
      équivalent à <literal>\pset format html</literal> ou à la commande
      <command>\H</command>.
      </para>
      </listitem>
    </varlistentry>
 
    <varlistentry>
      <term><option>-l</option></term>
      <term><option>--list</option></term>
      <listitem>
      <para>
      Liste toutes les bases de données disponibles puis quitte. Les autres
      option non relatives à la connexion sont ignorées. Ceci est similaire à la
      commande interne <command>\list</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-L <replaceable class="parameter">nomfichier</replaceable></option></term>
      <term><option>--log-file <replaceable class="parameter">nomfichier</replaceable></option></term>
      <listitem>
      <para>
      Écrit tous les résultats des requêtes dans le fichier <replaceable
      class="parameter">nomfichier</replaceable> en plus de la destination
      habituelle.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-o <replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <term><option>--output <replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <listitem>
      <para>
      Dirige tous les affichages de requêtes dans le fichier <replaceable
      class="parameter">nomfichier</replaceable>. Ceci est équivalent à la
      commande <command>\o</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--port <replaceable class="parameter">port</replaceable></option></term>
      <listitem>
      <para>
      Indique le port TCP ou l'extension du fichier socket de domaine local
      Unix sur lequel le serveur attend les connexions. Par défaut, il s'agit de
      la valeur de la variable d'environnement <envar>PGPORT</envar> ou, si elle
      n'est pas initialisée, le port spécifié au moment de la compilation,
      habituellement 5432.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-P <replaceable
	class="parameter">affectation</replaceable></option></term>
      <term><option>--pset <replaceable
	class="parameter">affectation</replaceable></option></term>
      <listitem>
      <para>
      Vous permet de spécifier les options d'affichage dans le style de
      <command>\pset</command> sur la ligne de commande. Notez que, ici, vous
      devez séparer nom et valeur avec un signe égal au lieu d'un espace. Du
      coup, pour initialiser le format d'affichage en LaTeX, vous devez écrire
      <literal>-P format=latex</literal>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-q</option></term>
      <term><option>--quiet</option></term>
      <listitem>
      <para>
      Indique que <application>psql</application> doit travailler
      silencieusement. Par défaut, il affiche des messages de bienvenue et des
      informations diverses. Si cette option est utilisée, rien de ceci
      n'est affiché. C'est utile avec l'option <option>-c</option>. À l'intérieur
      de <application>psql</application>, vous pouvez aussi initialiser la
      variable <varname>QUIET</varname> pour arriver au même effet.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-R <replaceable
	class="parameter">séparateur</replaceable></option></term>
      <term><option>--record-separator <replaceable
	class="parameter">séparateur</replaceable></option></term>
      <listitem>
      <para>
      Utilisez <replaceable class="parameter">séparateur</replaceable> comme
      séparateur d'enregistrement pour un affichage non aligné. Ceci est
      équivalent à la commande <command>\pset recordsep</command>.
      </para>
      </listitem>
    </varlistentry>
 
    <varlistentry>
      <term><option>-s</option></term>
      <term><option>--single-step</option></term>
      <listitem>
      <para>
      S'exécute en mode étape par étape. Ceci signifie qu'une
      intervention de l'utilisateur est nécessaire avant l'envoi de chaque
      commande au serveur, avec une option pour annuler l'exécution. Utilisez
      cette option pour déboguer des scripts.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-S</option></term>
      <term><option>--single-line</option></term>
      <listitem>
      <para>
      S'exécute en mode simple ligne où un retour à la ligne termine une
      commande SQL, de la même façon qu'un point-virgule.
      </para>

      <note>
      <para>
      Ce mode est fourni pour ceux qui insistent pour l'avoir, mais vous n'êtes pas
      nécessairement encouragé à l'utiliser. En particulier, si vous mixez
      <acronym>SQL</acronym> et méta-commandes sur une ligne, l'ordre
      d'exécution n'est pas toujours clair pour l'utilisateur non expérimenté.
      </para>
      </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-t</option></term>
      <term><option>--tuples-only</option></term>
      <listitem>
      <para>
      Désactive l'affichage des noms de colonnes et le pied de page
      contenant le nombre de résultats, etc. Ceci est équivalent à la
      méta-commande <command>\t</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-T <replaceable
	class="parameter">options_table</replaceable></option></term>
      <term><option>--table-attr <replaceable
	class="parameter">options_table</replaceable></option></term>
      <listitem>
      <para>
      Permet d'indiquer les options à placer à l'intérieur d'une balise
      <sgmltag>table</sgmltag> en <acronym>HTML</acronym>. Voir
      <command>\pset</command> pour plus de détails.
      </para>
      </listitem>
    </varlistentry>
 
    <varlistentry>
      <term><option>-u</option></term>
      <listitem>
      <para>
      Force <application>psql</application> à demander le nom et le mot de
      passe de l'utilisateur avant de se connecter à la base de données.
      </para>

      <para>
      Cette option est obsolète, car elle est conceptuellement mauvaise.
      (Demander un nom d'utilisateur autre que celui par défaut et demander
      un mot de passe parce que le
      serveur l'exige sont deux choses tout à fait différentes.) Il est
      conseillé d'utiliser les options <option>-U</option> et
      <option>-W</option> à la place.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-U <replaceable
	class="parameter">nomutilisateur</replaceable></option></term>
      <term><option>--username <replaceable
	class="parameter">nomutilisateur</replaceable></option></term>
      <listitem>
      <para>
      Se connecte à la base de données en tant que l'utilisateur <replaceable
      class="parameter">nomutilisateur</replaceable> au lieu de celui par
      défaut. (Vous devez aussi avoir le droit de le faire, bien sûr.)
      </para> 
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-v <replaceable
	class="parameter">affectation</replaceable></option></term>
      <term><option>--set <replaceable
	class="parameter">affectation</replaceable></option></term>
      <term><option>--variable <replaceable
	class="parameter">affectation</replaceable></option></term>
      <listitem>
      <para>
      Réalise une affectation de variable comme la commande interne
      <command>\set</command>. Notez que vous devez séparer nom et valeur par
      un signe égal sur la ligne de commande. Pour désinitialiser une variable,
      enlevez le signe d'égalité. Pour simplement initialiser une variable sans
      valeur, utilisez le signe égal sans passer de valeur. Ces affectations
      sont réalisées lors de la toute première étape du lancement, du coup les
      variables réservées à des buts internes peuvent être écrasées plus
      tard.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
      <para>
      Affiche la version de <application>psql</application> et quitte.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-W</option></term>
      <term><option>--password</option></term>
      <listitem>
      <para>
      Force <application>psql</application> à demander un mot de
      passe avant de se connecter à une base de données.
      </para>

      <para>
      <application>psql</application> devrait automatiquement demander un mot
      de passe chaque fois que le serveur réclame une authentification par mot
      de passe. Néanmoins, la détection de demande de mot de passe n'est
      actuellement pas totalement fiable, d'où cette option pour forcer une
      demande. Si aucune demande de mot de passe n'est effectuée et que le
      serveur requiert une authentification par mot de passe, la tentative de
      connexion échoue.
      </para>

      <para>
      Cette option reste configurée pour la session complète, même si vous
      modifiez la connexion de la base de données avec la méta-commande
      <command>\connect</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-x</option></term>
      <term><option>--expanded</option></term>
      <listitem>
      <para>
      Active le mode de formatage de table étendu. Ceci est équivalent à la
      commande <command>\x</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-X,</option></term>
      <term><option>--no-psqlrc</option></term>
      <listitem>
      <para>
      Ne lit pas le fichier de démarrage (ni le fichier système
      <filename>psqlrc</filename> ni celui de l'utilisateur
      <filename>~/.psqlrc</filename>).
      </para>
      </listitem>
    </varlistentry>

     <varlistentry>
      <term><option>-1</option></term>
      <term><option>--single-transaction</option></term>
      <listitem>
       <para>
        Quand <application>psql</application> exécute un script avec l'option
	    <option>-f</option>, ajouter cette option englobe le script avec les
	    instructions <command>BEGIN</command>/<command>COMMIT</command> pour
	    tout faire dans une seule transaction. Ceci nous assure que soit toutes
	    les commandes se terminent avec succès, soit aucune modification n'est
	    enregistrée. (Néanmoins, si le script utilise lui-même
	    <command>BEGIN</command> ou <command>COMMIT</command>, cette option
	    n'aura pas les effets désirés&nbsp;!)
       </para>
      </listitem>
     </varlistentry>

    <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
      <para>
      Affiche de l'aide sur les arguments en ligne de commande de
      <application>psql</application> et quitte.
      </para>
      </listitem>
    </varlistentry>
  </variablelist>
 </refsect1>


 <refsect1>
  <title>Code de sortie</title>

  <para>
   <application>psql</application> renvoie 0 au shell s'il se termine
   normalement, 1 s'il y a eu une erreur fatale de son fait (pas assez de
   mémoire, fichier introuvable), 2 si la connexion au serveur s'est interrompue
   ou a été annulée, 3 si une erreur est survenue dans un script et si la variable
   <varname>ON_ERROR_STOP</varname> a été initialisée.
  </para>
 </refsect1>


 <refsect1>
  <title>Usage</title>

  <refsect2 id="r2-app-psql-connecting">
    <title>Se connecter à une base de données</title>

    <para>
    <application>psql</application> est une application client
    <productname>PostgreSQL</productname> standard. Pour se connecter à une
    base de données, vous devez connaître le nom de votre base de
    données cible, le nom de l'hôte et le numéro de port du serveur ainsi que le
    nom de l'utilisateur que vous souhaitez connecter.
    <application>psql</application> peut connaître ces paramètres à partir
    d'options en ligne de commande, respectivement
    <option>-d</option>, <option>-h</option>, <option>-p</option> et
    <option>-U</option>. Si un argument autre qu'une option est rencontré, 
    il est interprété comme le nom de la base de données (ou le nom de
    l'utilisateur si le nom de la base de données est déjà donné). Toutes les
    options ne sont pas requises, des valeurs par défaut sont applicables. Si
    vous omettez le nom de l'hôte, <application>psql</application> se connecte via un
    socket de domaine Unix à un serveur sur l'hôte local ou via TCP/IP sur
    <literal>localhost</literal> pour les machines qui n'ont pas sockets de domaine
    Unix. Le numéro de port par
    défaut est déterminé au moment de la compilation. Comme le serveur de bases
    de données utilise la même valeur par défaut, vous n'aurez pas besoin de
    spécifier le port dans la plupart des cas. Le nom de l'utilisateur par
    défaut est votre nom d'utilisateur Unix, de même pour le nom de la base de
    données par défaut. Notez que vous ne pouvez pas simplement vous connecter à
    n'importe quelle base de données avec n'importe quel nom d'utilisateur. Votre
    administrateur de bases de données doit vous avoir informé de vos droits
    d'accès.
    </para>

    <para>
    Quand les valeurs par défaut ne sont pas correctes, vous pouvez vous simplifier
    la vie en configurant les variables d'environnement
    <envar>PGDATABASE</envar>, <envar>PGHOST</envar>, <envar>PGPORT</envar>
    et/ou <envar>PGUSER</envar> avec les valeurs appropriées (pour les variables
    d'environnement supplémentaires, voir <xref linkend="libpq-envars"/>). Il
    est aussi intéressant d'avoir un fichier <filename>~/.pgpass</filename> pour éviter
    d'avoir régulièrement à saisir des mots de passe. Voir <xref
    linkend="libpq-pgpass"/> pour plus d'informations.
    </para>

    <para>
    Si la connexion ne peut pas se faire, quelle qu'en soit la raison (c'est-à-dire
    droits non suffisants, serveur arrêté sur l'hôte cible, etc.),
    <application>psql</application> renvoie une erreur et s'arrête.
    </para>
  </refsect2>

  <refsect2 id="r2-app-psql-4">
    <title>Saisir des commandes SQL</title>

    <para>
    Dans le cas normal, <application>psql</application> fournit une invite avec
    le nom de la base de données sur laquelle <application>psql</application>
    est connecté suivi par la chaîne <literal>=&gt;</literal>. Par exemple,
<programlisting>$ <userinput>psql basetest</userinput>
Welcome to psql &version;, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit

basetest=&gt;
</programlisting>
    </para>

    <para>
    À l'invite l'utilisateur peut saisir des commandes <acronym>SQL</acronym>.
    Ordinairement, les lignes en entrée sont envoyées vers le serveur quand un
    point-virgule de fin de commande est saisi. Une fin de ligne ne termine pas
    une commande. Du coup, les commandes peuvent être saisies sur plusieurs
    lignes pour plus de clarté. Si la commande est envoyée et exécutée sans
    erreur, les résultats de la commande sont affichés sur l'écran.
    </para>

    <para>
    À chaque fois qu'une commande est exécutée, <application>psql</application>
    vérifie aussi les événements de notification générés par
    <xref linkend="sql-listen" endterm="sql-listen-title"/> et
    <xref linkend="sql-notify" endterm="sql-notify-title"/>.
    </para>
  </refsect2>

  <refsect2>
    <title>Meta-commandes</title>

    <para>
    Tout ce que vous saisissez dans <application>psql</application> qui
    commence par un antislash non échappé est une méta-commande
    <application>psql</application> qui est traitée par
    <application>psql</application> lui-même. Ces commandes aident à rendre
    <application>psql</application> plus utile pour l'administration ou pour
    l'écriture de scripts. Les méta-commandes sont plus souvent appelées les
    commandes slash ou antislash.
    </para>

    <para>
    Le format d'une commande <application>psql</application> est l'antislash
    suivi immédiatement d'un verbe de commande et de ses arguments. Les
    arguments sont séparés du verbe de la commande et les uns des autres par 
    un nombre illimité d'espaces blancs.
    </para>

    <para>
    Pour inclure des espaces blancs dans un argument, vous devez l'envelopper
    dans des guillemets simples. Pour inclure un guillemet simple dans un
    argument, utilisez deux guillemets simples. Tout ce qui est contenu entre des
    guillemets simples est de plus sujet à des substitutions style C pour
    <literal>\n</literal> (nouvelle ligne), <literal>\t</literal> (tabulation),
    <literal>\</literal><replaceable>chiffres</replaceable> (octal) et
    <literal>\x</literal><replaceable>chiffres</replaceable> (hexadécimal).
    </para>

    <para>
    Si un argument sans guillemets commence avec un caractère
    <literal>:</literal>, il est pris pour une variable <application>psql</application> et
    la valeur de la variable est utilisée à la place de l'argument.
    </para>

    <para>
    Les arguments placés entre guillemets arrières (<literal>`</literal>) sont
    pris comme une ligne de commande passée au shell. L'affichage de la commande
    (sans l'éventuel saut de ligne à la fin) est pris comme valeur de
    l'argument. Cela s'applique aussi aux séquences d'échappement ci-dessus.
    </para>

    <para>
    Quelques commandes prennent un identifiant <acronym>SQL</acronym> (comme un
    nom de table) en argument. Ces arguments suivent les règles de la syntaxe
    <acronym>SQL</acronym>&nbsp;: les lettres sans guillemets sont forcées en
    minuscule alors que les guillemets doubles (<literal>"</literal>) protègent les
    lettres de la conversion de casse et autorisent l'incorporation d'espaces
    blancs dans l'identifiant. À l'intérieur des guillemets doubles, les
    guillemets doubles en paire se réduisent à un seul guillemet double dans le nom
    résultant. Par exemple, <literal>FOO"BAR"BAZ</literal> est interprété comme
    <literal>fooBARbaz</literal> et <literal>"Un nom ""bizarre"</literal> devient 
    <literal>Un nom "bizarre</literal>.
    </para>

    <para>
    L'analyse des arguments se termine quand d'autres antislash non entre
    guillemets surviennent. Ceci est pris pour le début d'une nouvelle
    méta-commande. La séquence spéciale <literal>\\</literal> (deux antislashes)
    marque la fin des arguments et continue l'analyse des commandes
    <acronym>SQL</acronym>, si elles existent. De cette façon, les commandes
    <acronym>SQL</acronym> et <application>psql</application> peuvent être
    mixées librement sur une ligne. Mais dans tous les cas, les arguments d'une
    meta-commande ne peuvent pas continuer après la fin de la ligne.
    </para>

    <para>
    Les meta-commandes suivantes sont définies&nbsp;:

    <variablelist>
      <varlistentry>
        <term><literal>\a</literal></term>
        <listitem>
        <para>
	Si le format actuel d'affichage d'une table est non aligné, il est
	basculé à aligné. S'il n'est pas non aligné, il devient non aligné.
	Cette commande est conservée pour des raisons de compatibilité. Voir
	<command>\pset</command> pour une solution plus générale.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>\cd [ <replaceable>répertoire</replaceable> ]</literal></term>
       <listitem>
        <para>
	 Modifie le répertoire courant par
	<replaceable>répertoire</replaceable>. Sans argument, le
	répertoire personnel de l'utilisateur devient le répertoire courant.
        </para>

	<tip>
	 <para>
	  Pour afficher votre répertoire courant, utilisez
	  <literal>\!pwd</literal>.
	 </para>
	</tip>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\C [ <replaceable
	class="parameter">titre</replaceable> ]</literal></term>
        <listitem>
        <para>
        Initialise ou supprime le titre des tables affichées en
	résultat d'une requête. Cette commande
	est équivalente à <literal>\pset title <replaceable
	class="parameter">titre</replaceable></literal>. (Le nom de cette
	commande provient de <quote>caption</quote>, car elle avait précédemment
	pour seul but d'initialiser l'en-tête dans une table
	<acronym>HTML</acronym>.)
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\connect</literal> (or <literal>\c</literal>) <literal>[ <replaceable class="parameter">nom_base</replaceable> [ <replaceable class="parameter">nom_utilisateur</replaceable> ] [ <replaceable class="parameter">hôte</replaceable> ] [ <replaceable class="parameter">port</replaceable> ] ]</literal></term>
        <listitem>
        <para>
         Établie une nouvelle connexion à un serveur
         <productname>PostgreSQL</productname>. Si la nouvelle connexion est
         réussie, la connexion précédente est fermée. Si une option parmi
         <replaceable class="parameter">nom_base</replaceable>, <replaceable
         class="parameter">nom_utilisateur</replaceable>, <replaceable
         class="parameter">hôte</replaceable> et <replaceable
         class="parameter">port</replaceable> est omise ou vaut
         <literal>-</literal>, la valeur de ce même paramètre de la connexion
         précédente est utilisée. S'il ny avait pas encore de connexion, la
         valeur par défaut dans <application>libpq</application> est
         utilisée.
        </para>

        <para>
         Si la tentative de connexion échoue (mauvais nom d'utilisateur,
         accès refusé, etc.), la connexion précédente est conservée si
         <application>psql</application> est en mode interactif. Lors de
         l'exécution d'un script non interactif, le traitement s'arrêtera
         immédiatement avec une erreur. Cette distinction a été choisie
         pour deux raisons&nbsp;: aider l'utilisateur face aux fautes de
         frappe et en tant que mesure de précaution pour qu'un script n'agisse
         pas par erreur sur la mauvaise base.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\copy { <replaceable class="parameter">table</replaceable> [ ( <replaceable class="parameter">liste_colonnes</replaceable> ) ] | ( <replaceable class="parameter">requête</replaceable> ) }
        { <literal>from</literal> | <literal>to</literal> }
	{ <replaceable class="parameter">nomfichier</replaceable> | stdin | stdout | pstdin | pstdout }
        [ with ]
            [ binary ]
            [ oids ]
	    [ delimiter [ as ] '<replaceable class="parameter">caractère</replaceable>' ]
	    [ null [ as ] '<replaceable class="parameter">chaîne</replaceable>' ]
            [ csv
              [ header ]
	      [ quote [ as ] '<replaceable class="parameter">caractère</replaceable>' ]
	      [ escape [ as ] '<replaceable class="parameter">caractère</replaceable>' ]
	      [ force quote <replaceable class="parameter">liste_colonnes</replaceable> ]
	      [ force not null <replaceable class="parameter">liste_colonnes</replaceable> ] ]</literal>
        </term>

        <listitem>
        <para>
        Réalise une opération de copy côté client. C'est une opération qui
	exécute une commande <acronym>SQL</acronym>, <xref linkend="sql-copy"
	endterm="sql-copy-title"/>, mais au lieu que le serveur lise ou écrive le
	fichier spécifié, <application>psql</application> lit ou écrit le
	fichier en faisant le routage des données entre le serveur et le système
	de fichiers local. Ceci signifie que l'accès et les droits du fichier
	sont ceux de l'utilisateur local, pas celui du serveur, et qu'aucun
	droit de superutilisateur n'est requis.
	</para>

	<para>
	La syntaxe de la commande est similaire à celle de la commande
	<xref linkend="sql-copy" endterm="sql-copy-title"/> <acronym>SQL</acronym>.
	Notez que, à cause de cela, des règles spéciales
	d'analyse s'appliquent à la commande <command>\copy</command>. En
	particulier, les règles de substitution de variable et d'échappement
	antislash ne s'appliquent pas.
	</para>

	<para>
	<literal>\copy ... from stdin | to stdout</literal>
	lit/écrit basé sur l'entrée standard de la commande ou sa sortie 
    standard respectivement.
	Toutes les lignes sont lues à partir de la même source qui a lancé la
	commande, en continuant jusqu'à ce que <literal>\.</literal> soit lu ou
	que le flux parvienne à <acronym>EOF</acronym>. La sortie est envoyée au même
	endroit que la sortie de la commande. Pour lire/écrire à partir de l'entrée
	et de la sortie standard de <application>psql</application>, utilisez
	<literal>pstdin</literal> ou <literal>pstdout</literal>. Cette option est utile pour
	peupler des tables en ligne à l'intérieur d'un fichier script SQL.
	</para>

        <tip>
        <para>
	Cette opération n'est pas aussi efficace que la commande
	<command>COPY</command> en <acronym>SQL</acronym> parce que toutes les
	données doivent passer au travers de la connexion client/serveur. Pour
	les grosses masses de données, la commande <acronym>SQL</acronym> est
	préférable.
        </para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\copyright</literal></term>
        <listitem>
        <para>
        Affiche le copyright et les termes de distribution de
	<productname>PostgreSQL</productname>.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\d [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>
	<term><literal>\d+ [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>

        <listitem>
        <para>
	Pour chaque relation (table, vue, index ou séquence) correspondant au
	<replaceable class="parameter">modèle</replaceable>, affiche toutes les
	colonnes, leur types, le tablespace (s'il ne s'agit pas du tablespace
	par défaut) et tout attribut spécial tel que <literal>NOT
	NULL</literal> ou les valeurs par défaut. Les index, contraintes, règles
	et déclencheurs associés sont aussi affichés, ainsi que la définition de
	la vue si la relation est une vue. (Ce qui <quote>Correspond au modèle</quote> est
	défini ci-dessous.)
	</para>

	<para>
	Le forme de la commande <literal>\d+</literal> est identique, sauf que
	des informations plus complètes sont affichées&nbsp;: tout commentaire associé avec
	les colonnes de la table est affiché, ainsi que la présence d'OID dans
	la table.
	</para>

	<note>
	<para>
	Si <command>\d</command> est utilisé sans argument
	<replaceable class="parameter">modèle</replaceable>, c'est équivalent
    en plus commode à
	<command>\dtvs</command> qui affiche une liste de toutes les tables,
	vues et séquence.
	</para>
	</note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\da [ <replaceable
	 class="parameter">modèle</replaceable> ]</literal></term>

        <listitem>
        <para>
        Liste toutes les fonctions d'agrégat disponibles, avec les types
        de données sur lesquels elles opèrent. Si <replaceable
        class="parameter">modèle</replaceable> est spécifié, seuls les agrégats
        dont les noms commencent par le modèle sont affichés.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
      <term><literal>\db [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>
      <term><literal>\db+ [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>

      <listitem>
      <para>
      Liste tous les espaces logiques disponibles. Si <replaceable
      class="parameter">modèle</replaceable> est spécifié, seuls les tablespaces
      dont le nom correspond au modèle sont affichés. Si
      <literal>+</literal> est ajouté au nom de la commande, chaque objet est
      listé avec les droits associés.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dc [ <replaceable
	class="parameter">modèle</replaceable> ]</literal></term>
        <listitem>
        <para>
        Liste toutes les conversions disponibles entre les encodages de
	jeux de caractères. Si <replaceable
	class="parameter">modèle</replaceable> est spécifié, seules les
	conversions dont le nom correspond au modèle sont listées.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dC</literal></term>
        <listitem>
        <para>
        Liste toutes les conversions de types disponibles.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dd [ <replaceable
	class="parameter">modèle</replaceable> ]</literal></term>
        <listitem>
        <para>
        Affiche les descriptions des objets correspondant au <replaceable
        class="parameter">modèle</replaceable> ou de tous les objets si aucun
	argument n'est donné. Mais dans tous les cas, seuls les objets qui ont
	une description sont listés. (Le terme <quote>objet</quote> couvre les
	agrégats, les fonctions, les opérateurs, les types, les relations
	(tables, vues, index, séquences, objets larges), les règles et les
	déclencheurs.) Par exemple,&nbsp;:
<programlisting>=&gt; <userinput>\dd version</userinput>
                     Object descriptions
   Schema   |  Name   |  Object  |        Description
------------+---------+----------+---------------------------
 pg_catalog | version | function | PostgreSQL version string
(1 row)
</programlisting>
        </para>

        <para>
        Les descriptions des objets peuvent être ajoutées avec la commande
	<acronym>SQL</acronym> <xref
        linkend="sql-comment" endterm="sql-comment-title"/>.
	</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dD [ <replaceable
	 class="parameter">modèle</replaceable> ]</literal></term>
        <listitem>
        <para>
        Liste tous les domaines disponibles. Si <replaceable
        class="parameter">modèle</replaceable> est spécifié, seuls les
	domaines correspondant sont affichés.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\df [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>
	<term><literal>\df+ [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>

        <listitem>
        <para>
        Liste toutes les fonctions disponibles avec leurs arguments et les types
	en retour. Si <replaceable class="parameter">modèle</replaceable> est
	spécifié, seules les fonctions dont le nom correspond au modèle sont
	affichées. Si la forme <literal>\df+</literal> est utilisée, des
	informations supplémentaires sur chaque fonction, dont le langage et
	la description, sont proposées.
        </para>

        <note>
	<para>
	Pour rechercher des fonctions prenant un argument ou des valeurs de
	retour d'un type spécifique, utilisez les capacités de recherche du
	paginateur pour parcourir <literal>\df</literal>
	output.
	</para>
	
        <para>
        Pour réduire les redondances, <literal>\df</literal> n'affiche pas les
	fonctions d'entrées/sorties des types de données. Ceci est implémenté en
	ignorant les fonctions qui acceptent ou renvoient <type>cstring</type>.
        </para>
        </note>

        </listitem>
      </varlistentry>


      <varlistentry>
      <term><literal>\dg [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>
      <listitem>
      <para>
      Liste tous les rôles des bases de données. Si <replaceable
      class="parameter">modèle</replaceable> est spécifié, seuls les rôles
      dont le nom correspond au modèle sont listés.
      (Cette commande est maintenant réellement identique à <literal>\du</literal>.)
      </para>
      </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\distvS [ <replaceable
	class="parameter">modèle</replaceable> ]</literal></term>

	<listitem>
	<para>
	Ceci n'est pas le nom réel de la commande&nbsp;: les lettres
	<literal>i</literal>, <literal>s</literal>, <literal>t</literal>,
	<literal>v</literal>, <literal>S</literal> correspondent respectivement
	à index, séquence, table, vue et
	table système. Vous pouvez spécifier une ou toutes ces lettres, dans
	n'importe quel ordre, pour obtenir une liste de tous les objets
	correspondants. La lettre <literal>S</literal> restreint la liste aux objets système&nbsp;;
	sans <literal>S</literal>, seuls les objets non système sont affichés. Si
	<literal>+</literal> est ajouté au nom de la commande, chaque objet est
	listé avec sa description associée, si celle-ci est disponible.
	</para>

	<para>
	Si <replaceable class="parameter">modèle</replaceable> est spécifié,
	seuls les objets dont les noms correspondent au modèle sont listés.
	</para>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dl</literal></term>
	<listitem>
	<para>
	Ceci est un alias pour <command>\lo_list</command>, qui affiche une
	liste des objets larges.
	</para>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dn</literal> [ <replaceable class="parameter">modèle</replaceable> ]</term>
	<term><literal>\dn+ [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>

        <listitem>
        <para>
        Liste tous les schémas disponibles (espace logiques). Si <replaceable
        class="parameter">modèle</replaceable> (une expression régulière) est
	spécifiée, seuls les schémas dont le nom correspond au modèle sont
	listés. Tout schéma temporaire non local est supprimé. Si
	<literal>+</literal> est ajoutée au nom de la commande, chaque objet est
	listé avec ses droits et description associés.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\do [ <replaceable class="parameter">modèle</replaceable>
	]</literal></term>
        <listitem>
        <para>
        Liste tous les opérateurs disponibles avec leur opérande et type en
	retour. Si <replaceable class="parameter">modèle</replaceable> est
	spécifié, seuls les opérateurs dont le nom correspond au modèle sont
	listés.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dp [ <replaceable
	class="parameter">modèle</replaceable> ]</literal></term>
	<listitem>
	<para>
        Produit une liste de toutes les tables, vues et séquences disponibles
	avec leur droits d'accès associés. Si <replaceable
	class="parameter">modèle</replaceable> est spécifié, seules les tables,
	vues et séquences dont le nom correspond au modèle sont listées.
	</para>

	<para>
	Les commandes <xref linkend="sql-grant" endterm="sql-grant-title"/> et
        <xref linkend="sql-revoke" endterm="sql-revoke-title"/>
	sont utilisées pour configurer les droits d'accès.
	</para>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dT [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>
	<term><literal>\dT+ [ <replaceable class="parameter">modèle</replaceable> ]</literal></term>
        <listitem>
        <para>
        Liste tous les types de données ou seulement ceux dont le nom correspond
	à <replaceable class="parameter">modèle</replaceable>. La
	commande <literal>\dT+</literal> affiche des informations
	supplémentaires.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\du [ <replaceable class="parameter">modèle</replaceable>
	]</literal></term>
        <listitem>
        <para>
        Liste tous les rôles de la base de données ou seulement ceux dont
	le nom correspond au <replaceable
	class="parameter">modèle</replaceable>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\edit</literal> (ou <literal>\e</literal>) <literal>[ <replaceable
	class="parameter">nomfichier</replaceable> ]</literal></term>

        <listitem>
        <para>
        Si <replaceable class="parameter">nomfichier</replaceable> est
	spécifié, le fichier est édité&nbsp;; en quittant l'éditeur, son contenu
	est recopié dans le tampon de requête. Si aucun argument n'est fourni,
	le tampon de requête actuel est copié dans un fichier temporaire qui est
	ensuite édité de la même façon.
        </para>

        <para>
        Le nouveau tampon de requête est ensuite ré-analysé suivant les règles
	habituelles de <application>psql</application>, où le tampon complet est
	traité comme une seule ligne. (Du coup, vous ne pouvez pas faire de
	scripts de cette façon. Utilisez <command>\i</command> pour cela.) Ceci
	signifie aussi que si la requête se termine avec (ou plutôt contient) un
	point-virgule, elle est immédiatement exécutée. Dans les autres cas,
	elle attend simplement dans le tampon de requête.
        </para>

        <tip>
        <para>
        <application>psql</application> recherche les variables d'environnement
        <envar>PSQL_EDITOR</envar>, <envar>EDITOR</envar> et
        <envar>VISUAL</envar> (dans cet ordre) pour connaître l'éditeur à
	utiliser. Si aucun n'est initialisé, <filename>vi</filename> est
	utilisé sur les systèmes Unix, <filename>notepad.exe</filename> sur les
	systèmes Windows.
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\echo <replaceable
	class="parameter">texte</replaceable> [ ... ]</literal></term>
        <listitem>
	<para>
        Affiche les arguments sur la sortie standard séparés par un espace et
	suivi par une nouvelle ligne. Ceci peut être utile pour intégrer des
	informations sur la sortie des scripts. Par exemple&nbsp;:
<programlisting>=&gt; <userinput>\echo `date`</userinput>
Tue Oct 26 21:40:57 CEST 1999
</programlisting>
        Si le premier argument est <literal>-n</literal> sans guillemets,
	alors la fin de ligne n'est pas écrite.
	</para>

	<tip>
	<para>
	Si vous utilisez la commande <command>\o</command> pour rediriger la
	sortie de la requête, vous pourriez souhaiter utiliser
	<command>\qecho</command> au lieu de cette commande.
	</para>
	</tip>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\encoding [ <replaceable
	class="parameter">codage</replaceable> ]</literal></term>

        <listitem>
        <para>
        Initialise l'encodage du jeu de caractères du client. Sans
	argument, cette commande affiche l'encodage actuel.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\f [ <replaceable
	class="parameter">chaîne</replaceable> ]</literal></term>

        <listitem>
        <para>
        Initialise le champ séparateur pour la sortie de requête non alignée.
	La valeur par défaut est la barre verticale (<literal>|</literal>). Voir
	aussi <command>\pset</command> comme moyen générique de configuration
	des options d'affichage.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\g</literal> [ { <replaceable
	class="parameter">nomfichier</replaceable> |
	<literal>|</literal><replaceable
	class="parameter">commande</replaceable> } ]</term>

        <listitem>
        <para>
	Envoie le tampon de requête en entrée vers le serveur et stocke en
	option la sortie de la requête dans <replaceable
	class="parameter">nomfichier</replaceable> ou envoie dans un tube la
	sortie vers un autre shell Unix exécutant <replaceable
	class="parameter">commande</replaceable>. Un simple
	<literal>\g</literal> est virtuellement équivalent à un point-virgule.
	Un <literal>\g</literal> avec argument est une alternative en <quote>un
	coup</quote> à la commande <command>\o</command>.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\help</literal> (ou <literal>\h</literal>) <literal>[
	<replaceable class="parameter">commande</replaceable> ]</literal></term>
        <listitem>
        <para>
        Donne la syntaxe sur la commande <acronym>SQL</acronym> spécifiée. Si
	<replaceable class="parameter">commande</replaceable> n'est pas
	spécifiée, alors <application>psql</application> liste toutes les
	commandes pour lesquelles une aide en ligne est disponible. Si
	<replaceable class="parameter">commande</replaceable> est un astérisque
	(<literal>*</literal>), alors l'aide en ligne de toutes les commandes
	<acronym>SQL</acronym> est affichée.
        </para>

	<note>
	<para>
	Pour simplifier la saisie, les commandes qui consistent en plusieurs mots
	n'ont pas besoin d'être entre guillemets. Du coup, il est correct de
	saisir <userinput>\help alter table</userinput>.
	</para>
	</note>	
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\H</literal></term>
        <listitem>
        <para>
	Active le format d'affichage <acronym>HTML</acronym> des requêtes. Si
	le format <acronym>HTML</acronym> est déjà activé, il est basculé au
	format d'affichage défaut (texte aligné). Cette commande est pour la compatibilité
	mais voir <command>\pset</command> pour configurer les autres options
	d'affichage.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\i <replaceable
	class="parameter">nomfichier</replaceable></literal></term>
        <listitem>
        <para>
        Lit l'entrée à partir du fichier <replaceable
        class="parameter">nomfichier</replaceable> et l'exécute comme si elle
	avait été saisie sur le clavier.
        </para>
	<note>
	<para>
	Si vous voulez voir les lignes sur l'écran au moment de leur lecture,
	vous devez initialiser la variable <varname>ECHO</varname> à
	<literal>all</literal>.
	</para>
	</note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\l</literal> (ou <literal>\list</literal>)</term>
	<term><literal>\l+</literal> (ou <literal>\list+</literal>)</term>
        <listitem>
        <para>
        Liste les noms, propriétaires et codages des ensembles de caractères 
	de toutes les bases de données du serveur. 
	Si <literal>+</literal> est ajouté au nom de la commande,
	les descriptions des bases de données sont aussi affichées.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_export <replaceable
	class="parameter">loid</replaceable> <replaceable
	class="parameter">nomfichier</replaceable></literal></term>

	<listitem>
	<para>
	Lit l'objet large d'<acronym>OID</acronym> <replaceable
	class="parameter">loid</replaceable> à partir de la base de données
	et l'écrit dans <replaceable
	class="parameter">nomfichier</replaceable>. Notez que ceci est
	subtilement différent de la fonction serveur
	<function>lo_export</function>, qui agit avec les droits de
	l'utilisateur avec lequel est exécuté le serveur de base de données et
	sur le système de fichiers du serveur.
	</para>
	<tip>
	<para>
	Utilisez <command>\lo_list</command> pour trouver
	l'<acronym>OID</acronym> de l'objet large.
	</para>
	</tip>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_import <replaceable
	class="parameter">nomfichier</replaceable> [ <replaceable
	class="parameter">commentaire</replaceable> ]</literal></term>

	<listitem>
	<para>
	Stocke le fichier dans un objet large
	<productname>PostgreSQL</productname>. En option, il associe le
	commentaire donné avec l'objet. Exemple&nbsp;:
<programlisting>foo=&gt; <userinput>\lo_import '/home/peter/pictures/photo.xcf' 'une
photo de moi'</userinput>
lo_import 152801
</programlisting>
	La réponse indique que l'objet large a reçu l'ID 152801, dont vous
	devez vous rappeler si vous souhaitez accéder de nouveau à l'objet. Pour
	cette raison, il est recommandé de toujours associer un commentaire
	lisible par un humain avec chaque objet. Ils sont ensuite visibles avec
	la commande <command>\lo_list</command>.
	</para>

	<para>
	Notez que cette commande est subtilement différente de la fonction
	serveur <function>lo_import</function> car elle agit en tant
	qu'utilisateur local sur le système de fichier local plutôt qu'en tant
	qu'utilisateur du serveur et de son système de fichiers.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_list</literal></term>
	<listitem>
	<para>
	Affiche une liste de tous les objets larges
	<productname>PostgreSQL</productname> actuellement stockés dans la base
	de données, avec tous les commentaires fournis par eux.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_unlink <replaceable class="parameter">loid</replaceable></literal></term>

	<listitem>
	<para>
	Supprime l'objet large d'<acronym>OID</acronym>
	<replaceable class="parameter">loid</replaceable> de la base
	de données.
	</para>

	<tip>
	<para>
	Utilisez <command>\lo_list</command> pour trouver
	l'<acronym>OID</acronym> d'un objet large.
	</para>
	</tip>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\o</literal> [ {<replaceable
	class="parameter">nomfichier</replaceable> |
	<literal>|</literal><replaceable
	class="parameter">commande</replaceable>} ]</term>

        <listitem>
        <para>
        Sauvegarde les résultats des requête suivantes dans le fichier <replaceable
        class="parameter">nomfichier</replaceable> ou envoie via un tube les
	résultats à venir dans un shell Unix séparé pour exécuter <replaceable
	class="parameter">command</replaceable>. Si aucun argument n'est
	spécifié, l'affichage de la requête est redirigé vers la sortie
	standard.
        </para>

	<para>
	Les <quote>résultats de requête</quote> incluent toutes les tables,
	réponses de commande et messages d'avertissement obtenus du serveur de
	bases de données, ainsi que la sortie de différentes commandes
	antislash qui envoient des requêtes à la base de données (comme
	<command>\d</command>), mais sans messages d'erreur.
	</para>

	<tip>
	<para>
	Pour intégrer du texte entre les résultats de requête, utilisez
	<command>\qecho</command>.
	</para>
	</tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\p</literal></term>
        <listitem>
        <para>
        Affiche le tampon de requête actuel sur la sortie standard.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\password [ <replaceable class="parameter">nom_utilisateur</replaceable> ]</literal></term>
        <listitem>
        <para>
         Modifie le mot de passe de l'utilisateur indiqué (par défaut,
         l'utilisateur en cours). Cette commande demande le nouveau mot de passe,
         le chiffre et l'envoie au serveur avec la commande <command>ALTER
         ROLE</command>. Ceci vous assure que le nouveau mot de passe n'apparaît
         pas en clair dans l'historique de la commande, les traces du serveur
         ou encore ailleurs.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\pset <replaceable
	class="parameter">paramètre</replaceable> [ <replaceable
	class="parameter">valeur</replaceable> ]</literal></term>

	<listitem>
	<para>
	Cette commande initialise les options affectant l'affichage des tables 
	résultat de la requête. <replaceable
	class="parameter">paramètre</replaceable> décrit l'option à initialiser.
	La sémantique de <replaceable class="parameter">valeur</replaceable> en
	dépend.
	</para>

	<para>
	Les options ajustables d'affichage sont&nbsp;:
	<variablelist>
	  <varlistentry>
	  <term><literal>format</literal></term>
	  <listitem>
	  <para>
	  Initialise le format d'affichage parmi <literal>unaligned</literal>,
	  <literal>aligned</literal>, <literal>html</literal>,
	  <literal>latex</literal> ou <literal>troff-ms</literal>. Les
	  abréviations uniques sont autorisées. (ce qui signifie qu'une lettre
	  est suffisante.)
	  </para>

	  <para>
	  <quote>Unaligned</quote> écrit toutes les colonnes d'une ligne
	  sur une seule ligne séparées par le séparateur de champ actif. Ceci a
	  pour but de créer un affichage
	  lisible par d'autres programmes (séparé par des tabulations, séparé
	  par des virgules). Le mode <quote>Aligned</quote> est l'affichage
	  texte standard, lisible par un humain, proprement formaté. C'est aussi
	  la valeur par défaut. Les modes <quote><acronym>HTML</acronym></quote>
	  et <quote>LaTeX</quote> produisent des tables destinées à être
	  inclues dans des documents utilisant le langage de marques respectif.
	  Ce ne sont pas des documents complets&nbsp;! (Ce n'est pas 
	  dramatique en <acronym>HTML</acronym> mais en LaTeX vous devez avoir
	  une structure de document complet.)
	  </para>
	  </listitem>
          </varlistentry>

	  <varlistentry>
	  <term><literal>border</literal></term>
	  <listitem>
	  <para>
	  Le second argument doit être un nombre. En général, plus grand est ce
	  nombre, plus les tables ont de bordure et de ligne mais ceci
	  dépend du format. Dans le mode <acronym>HTML</acronym>, ceci sera
	  traduit directement avec l'attribut <literal>border=...</literal>.
	  Avec les autres, seules les valeurs 0 (sans bordure), 1 (lignes
	  internes de division) et 2 (forme de table) ont un sens.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>expanded</literal> (ou <literal>x</literal>)</term>
	  <listitem>
	  <para>
	  Bascule entre le format standard et étendu. Lorsque le format étendu
	  est activé, les résultats de la requête sont affichés sur deux colonnes
	  avec le nom de colonne sur la gauche et la donnée sur la droite. Ce
	  mode est utile dans le cas où la donnée est trop grosse pour être
	  contenue dans l'écran (mode <quote>horizontal</quote> habituel).
	  </para>

	  <para>
	  Le mode étendu est supporté par les quatre formats d'affichage.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>NULL</literal></term>
	  <listitem>
	  <para>
	  Le second argument est une chaîne qui est affichée quand une colonne
	  est NULL. La valeur par défaut est de ne rien afficher, ce qui peut
	  être facilement pris pour, disons, une chaîne vide. Du coup, vous
	  pouvez choisir d'écrire <literal>\pset NULL '(NULL)'</literal>.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>fieldsep</literal></term>
	  <listitem>
	  <para>
	  Indique le séparateur de champ à utiliser dans le mode d'affichage
	  non aligné. De cette façon, vous pouvez créer, par exemple, une
	  sortie séparée par des tabulations ou des virgules, que d'autres
	  programmes pourraient préférer. Pour configurer une tabulation comme
	  champ séparateur, saisissez <literal>\pset fieldsep
	  '\t'</literal>. Le séparateur de champ par défaut est
	  <literal>'|'</literal> (une barre verticale).
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>footer</literal></term>
	  <listitem>
	  <para>
	  Bascule l'affichage du bas de page par défaut <literal>(x
	  lignes)</literal>.
	  </para>
	  </listitem>
	  </varlistentry>

          <varlistentry>
          <term><literal>numericlocale</literal></term>
          <listitem>
          <para>
          Bascule l'affichage d'un caractère montrant la prise en compte de
          la locale pour séparer les groupes de chiffres à gauche de la
          marque des décimales. Il active aussi une marque décimale prenant
          en compte la locale.
          </para>
          </listitem>
          </varlistentry>

	  <varlistentry>
	  <term><literal>recordsep</literal></term>
	  <listitem>
	  <para>
          Indique le séparateur d'enregistrement (ligne) à utiliser dans le
	  mode d'affichage non aligné. La valeur par défaut est un caractère de
	  retour chariot.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>tuples_only</literal> (ou <literal>t</literal>)</term>
	  <listitem>
	  <para>
	  Bascule entre les lignes seules et l'affichage complet. Ce dernier
	  peut afficher des informations supplémentaires telles que les en-têtes
	  de colonnes, les titres et différents bas de page. Dans le mode lignes
	  seules, seules les données réelles de la table sont affichées.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>title [ <replaceable
	  class="parameter">texte</replaceable> ]</literal></term>
	  <listitem>
	  <para>
	  Initialise le titre de la table pour toutes les tables affichées
	  ensuite. Ceci peut être utilisé pour ajouter des balises de description
	  à l'affichage. Si aucun argument n'est donné, le titre n'est pas
	  initialisé.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>tableattr</literal> (ou <literal>T</literal>) <literal>[
	  <replaceable class="parameter">texte</replaceable> ]</literal></term>
	  <listitem>
	  <para>
	  Vous permet de spécifier tout attribut à placer à l'intérieur de la
	  balise <sgmltag>table</sgmltag> en <acronym>HTML</acronym>. Ceci
	  pourrait être par exemple <literal>cellpadding</literal> ou
	  <literal>bgcolor</literal>. Notez que vous ne voulez probablement pas
	  spécifier <literal>border</literal> car c'est pris en compte
	  par <literal>\pset border</literal>.
	  </para>
	  </listitem>
	  </varlistentry>


	  <varlistentry>
	  <term><literal>pager</literal></term>
	  <listitem>
	  <para>
	  Contrôle l'utilisation d'un paginateur pour les requêtes et les
	  affichages de l'aide de <application>psql</application>. Si la variable
	  d'environnement <envar>PAGER</envar> est configurée, la sortie est
	  envoyée via un tube dans le programme spécifié. Sinon, une valeur par
	  défaut dépendant de la plateforme (comme <filename>more</filename>)
	  est utilisée.
	  </para>

	  <para>
	  Lorsque le paginateur est désactivé, il n'est pas utilisé. Quand le
	  paginateur est activé, il est utilisé seulement si nécessaire,
	  c'est-à-dire si l'affichage se fait sur un terminal et qu'il ne tient
	  pas sur l'écran. (<application>psql</application> ne fait pas un boulot parfait
	  pour savoir quand utiliser le paginateur.) <literal>\pset pager</literal>
	  active et désactive le paginateur. Ce dernier peut aussi être
	  configuré à <literal>always</literal>, ce qui fait qu'il est utilisé en
	  permanence.
	  </para>
	  </listitem>
	  </varlistentry>
	</variablelist>
        </para>

        <para>
	Des exemples d'utilisation de ces différents formats sont
	disponibles dans la section <xref linkend="app-psql-examples"
	endterm="app-psql-examples-title"/>.
	</para>

	<tip>
	<para>
	Il existe plusieurs raccourcis de commandes pour
	<command>\pset</command>. Voir
	<command>\a</command>, <command>\C</command>, <command>\H</command>,
	<command>\t</command>, <command>\T</command> et <command>\x</command>.
	</para>
	</tip>

	<note>
	<para>
	C'est une erreur d'appeler <command>\pset</command> sans
	argument. Dans le futur, cet appel pourrait afficher le statut actuel
	de toutes les options d'affichage.
	</para>
	</note>

	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\q</literal></term>
        <listitem>
        <para>
        Quitte le programme <application>psql</application>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\qecho <replaceable
	class="parameter">texte</replaceable> [ ... ] </literal></term>
        <listitem>
        <para>
	Cette commande est identique à <command>\echo</command> sauf que 
	les affichages sont écrits dans le canal d'affichage des requêtes,
	configuré par <command>\o</command>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\r</literal></term>
        <listitem>
        <para>
        Réinitialise (efface) le tampon de requêtes.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\s [ <replaceable
	class="parameter">nomfichier</replaceable> ]</literal></term>
        <listitem>
        <para>
        Affiche ou sauvegarde l'historique des lignes de commandes dans
	<replaceable class="parameter">nomfichier</replaceable>. Si <replaceable
	class="parameter">nomfichier</replaceable> est omis, l'historique est
	écrit sur la sortie standard. Cette option est seulement disponible si
	<application>psql</application> est configuré pour utiliser la
	bibliothèque <acronym>GNU</acronym> <application>Readline</application>.
        </para>

        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\set [ <replaceable
	class="parameter">nom</replaceable> [ <replaceable
	class="parameter">valeur</replaceable> [ ... ]]]</literal></term>

	<listitem>
	<para>
	Initialise la variable interne <replaceable
	class="parameter">nom</replaceable> à <replaceable
	class="parameter">valeur</replaceable> ou, si plus d'une valeur est
	donnée, à la concaténation de toutes les valeurs. Si aucun second
	argument n'est donné, la variable est simplement initialisée sans
	valeur. Pour désinitialiser une variable, utilisez la commande
	<command>\unset</command>.
	</para>

	<para>
	Les noms de variables valides peuvent contenir des caractères, chiffres
	et tirets bas. Voir la section <xref linkend="app-psql-variables"
	endterm="app-psql-variables-title"/> ci-dessous pour les détails. Les noms
	des variables sont sensibles à la casse.
	</para>

	<para>
	Bien que vous puissiez configurer toute variable comme vous le
	souhaitez, <application>psql</application> traite certaines variables de
	façon spéciale. Elles sont documentées dans la section sur les
	variables.
	</para>

	<note>
	<para>
	Cette commande est totalement séparée de la commande 
	<acronym>SQL</acronym> <xref linkend="sql-set" endterm="sql-set-title"/>.
	</para>
	</note>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\t</literal></term>
        <listitem>
        <para>
        Bascule l'affichage des en-têtes de nom de colonne en sortie et celle du
	bas de page indiquant le nombre de lignes. Cette commande est
	équivalente à <literal>\pset tuples_only</literal> et est fournie pour en
	faciliter l'accès.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\T <replaceable
	class="parameter">options_table</replaceable></literal></term>
        <listitem>
        <para>
        Vous permet de spécifier les attributs à placer à l'intérieur de la
	balise <sgmltag>table</sgmltag> dans le mode d'affichage en tableau
	<acronym>HTML</acronym>. Cette commande est équivalente à <literal>\pset
        tableattr <replaceable
	class="parameter">options_table</replaceable></literal>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
       <term><literal>\timing</literal></term>
        <listitem>
        <para>
         Affiche le temps pris par chaque instruction SQL, en
	 millisecondes, ou arrête cet affichage.
        </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\w</literal> {<replaceable
	class="parameter">nomfichier</replaceable> | <replaceable
	class="parameter">|commande</replaceable>}</term>
        <listitem>
        <para>
	Place le tampon de requête en cours dans le fichier <replaceable
        class="parameter">nomfichier</replaceable> ou l'envoie via un tube à la
	commande Unix <replaceable class="parameter">commande</replaceable>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\x</literal></term>
        <listitem>
        <para>
        Bascule le mode étendu de formatage en table. C'est équivalent à
	<literal>\pset expanded</literal>.
       </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\z [ <replaceable
	class="parameter">modèle</replaceable> ]</literal></term>
        <listitem>
        <para>
        Produit une liste de toutes les tables, vues et séquences disponibles
	avec leur droit d'accès associé. Si un <replaceable
	class="parameter">modèle</replaceable> est spécifié, seules les tables,
	vues et séquences dont le nom correspond au modèle sont listées.
	</para>

	<para>
	Les commandes <xref linkend="sql-grant" endterm="sql-grant-title"/> et
        <xref linkend="sql-revoke" endterm="sql-revoke-title"/>
	sont utilisées pour configurer les droits d'accès.
	</para>

	<para>
	Ceci est un alias pour <command>\dp</command> (<quote>affichage des
	droits</quote>).
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\! [ <replaceable
	class="parameter">commande</replaceable> ]</literal></term>
        <listitem>
        <para>
        Lance un shell Unix séparé ou exécute la commande Unix
        <replaceable class="parameter">commande</replaceable>. Les
        arguments ne sont pas interprétés, le shell les voit tel quel.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\?</literal></term>
        <listitem>
        <para>
        Affiche l'aide sur les commandes antislash.
        </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </para>

  <refsect3 id="APP-PSQL-patterns">
   <title id="APP-PSQL-patterns-title">Modèles</title>

   <indexterm>
    <primary>modèles</primary>
    <secondary>dans psql et pg_dump</secondary>
   </indexterm>

  <para>
   Les différentes commandes <literal>\d</literal> acceptent un paramètre
   <replaceable class="parameter">modèle</replaceable> pour spécifier le(s)
   nom(s) d'objet à afficher. Dans le cas le plus simple, un modèle est
   seulement le nom exact de l'objet. Les caractères à l'intérieur du
   modèle sont normalement mis en minuscule comme pour les noms SQL&nbsp;;
   par exemple, <literal>\dt FOO</literal> affichera la table nommée
   <literal>foo</literal>. Comme pour les noms SQL, placer des guillemets
   doubles autour d'un modèle empêchera la mise en minuscule. Si vous devez
   inclure un guillemet double dans un modèle, écrivez-le en double en
   accord avec les règles sur les identifiants SQL. Par exemple,
   <literal>\dt "FOO""BAR"</literal> affichera la table nommée
   <literal>FOO"BAR</literal> (et non pas <literal>foo"bar</literal>).
   Contrairement aux règles normales pour les noms SQL, vous pouvez placer
   des guillemets doubles simplement autour d'une partie d'un modèle,
   par exemple <literal>\dt FOO"FOO"BAR</literal> affichera la table nommée
   <literal>fooFOObar</literal>.
  </para>

  <para>
   À l'intérieur d'un modèle, <literal>*</literal> correspond à toute
   séquence de caractères (et aussi à aucun) alors que <literal>?</literal> ne
   correspond qu'à un seul caractère. (Cette notation est comparable à celle des
   modèles de nom de fichier Unix.) Par exemple, <literal>\dt int*</literal>
   affiche les tables dont le nom commence avec <literal>int</literal>. Mais à
   l'intérieur de guillemets doubles, <literal>*</literal> et <literal>?</literal>
   perdent leurs significations spéciales et sont donc traités directement.
  </para>

  <para>
   Un modèle qui contient un point (<literal>.</literal>) est interprété comme
   le modèle d'un nom de schéma suivi par celui d'un nom d'objet. Par exemple,
   <literal>\dt foo*.bar*</literal> affiche toutes les tables dont le nom
   commence avec <literal>bar</literal> et qui sont dans des schémas dont le
   nom commence avec <literal>foo</literal>. Sans point, le modèle correspond
   seulement avec les objets qui sont visibles dans le chemin de recherche
   actuel des schémas. De nouveau, un point dans des guillemets doubles
   perd sa signification spéciale et est traité directement.
  </para>

  <para>
   Les utilisateurs avancés peuvent utiliser des expressions rationnelles comme
   par exemple les classes de caractère (<literal>[0-9]</literal> pour tout
   chiffre). Tous les caractères spéciaux d'expression rationnelle fonctionnent
   de la façon indiquée dans <xref linkend="functions-posix-regexp"/>, sauf pour
   le <literal>.</literal> qui est pris comme séparateur (voir ci-dessus),
   l'étoile (<literal>*</literal>) qui est transformée en l'expression
   rationnelle <literal>.*</literal> et <literal>?</literal> qui est transformée
   en <literal>.</literal>. Vous pouvez émuler ces caractères si besoin en
   écrivant <literal>?</literal> pour <literal>.</literal>,
   <literal>(<replaceable class="parameter">R</replaceable>+|)</literal> pour
   <literal><replaceable class="parameter">R</replaceable>*</literal> et
   <literal>(<replaceable class="parameter">R</replaceable>|)</literal> pour
   <literal><replaceable class="parameter">R</replaceable>?</literal>.
   Rappelez-vous que le modèle doit correspondre au nom entier contrairement à
   l'interprétation habituelle des expressions rationnelles&nbsp;; écrire
   <literal>*</literal> au début et/ou à la fin si vous ne souhaitez pas
   bloquer le modèle. Notez qu'à l'intérieur de guillemets doubles, tous les
   caractères spéciaux des expressions rationnelles perdent leur signification
   spéciale et sont traités directement. De plus, ces caractères sont traités
   littéralement dans les modèles des noms d'opérateurs (par exemple
   pour l'argument de <literal>\do</literal>).
  </para>

  <para>
   Lorsque <replaceable
   class="parameter">modèle</replaceable> est complètement omis, les commandes
   <literal>\d</literal> affichent tous les objets visibles dans le chemin de
   recherche actuel du schéma &mdash; c'est équivalent à l'utilisation du
   modèle <literal>*</literal>. Pour voir tous les objets dans la base de
   données, utilisez le modèle <literal>*.*</literal>.
  </para>
  </refsect3>
 </refsect2>

 <refsect2>
  <title>Fonctionnalités avancées</title>

   <refsect3 id="app-psql-variables">
    <title id="app-psql-variables-title">Variables</title>

    <para>
    <application>psql</application> fournit des fonctionnalités de substitution
    de variable similaire aux shells de commandes Unix. Les variables sont
    simplement des paires nom/valeur où la valeur peut être toute chaîne, quel
    que soit sa longueur. Pour initialiser des variables, utilisez la
    méta-commande <application>psql</application> <command>\set</command>&nbsp;:
<programlisting>basetest=&gt; <userinput>\set foo bar</userinput>
</programlisting>
    initialise la variable <literal>foo</literal> avec la valeur
    <literal>bar</literal>. Pour récupérer le contenu de la variable, précédez
    le nom avec un caractère deux-points. Vous pouvez l'utiliser comme argument 
    de toute commande slash&nbsp;:
<programlisting>basetest=&gt; <userinput>\echo :foo</userinput>
bar
</programlisting>
    </para>

    <note>
    <para>
    Les arguments de <command>\set</command> sont sujets aux même règles de
    substitution que les autres commandes. Du coup, vous pouvez construire des
    références intéressantes comme <literal>\set :foo 'quelquechose'</literal>
    et obtenir des <quote>liens doux</quote> ou des <quote>variables de
    variables</quote> comme, respectivement, <productname>Perl</productname> ou
    <productname><acronym>PHP</acronym></productname>. Malheureusement (ou
    heureusement&nbsp;?), on ne peut rien faire
    d'utile avec ces constructions. D'un autre côté, <literal>\set bar
    :foo</literal> est un moyen parfaitement valide de copier une variable.
    </para>
    </note>

    <para>
    Si vous appelez <command>\set</command> sans second argument, la variable
    est initialisée avec une chaîne vide. Pour désinitialiser (ou supprimer) une
    variable, utilisez la commande <command>\unset</command>.
    </para>

    <para>
    Les noms de variables internes de <application>psql</application> peuvent
    être constitués de lettres, nombres et tirets bas dans n'importe quel ordre et
    autant de fois que vous le voulez. Un certain nombre de ces variables sont
    traitées spécialement par <application>psql</application>. Elles indiquent
    certaines options qui peuvent changer au moment de l'exécution en modifiant
    la valeur de la variable ou représentent un certain état de l'application.
    Bien que vous puissiez utiliser ces variables dans n'importe quel but, ce
    n'est pas recommandé car le comportement du programme pourrait devenir
    très rapidement vraiment étrange. Par convention, toutes les variables traitées
    spécialement sont uniquement composées de lettres majuscules (et peut-être
    aussi de chiffres et de tirets bas). Pour s'assurer d'un compatibilité
    maximum dans le futur, évitez l'utilisation de tels noms de variables pour
    vos propres besoins. Une liste de toutes les variables traitées
    spécialement suit.
   </para>

    <variablelist>
      <varlistentry>
        <term><varname>AUTOCOMMIT</varname></term>
	<listitem>
        <indexterm>
	  <primary>autocommit</primary>
	  <secondary>psql</secondary>
        </indexterm>
	<para>
	Si actif (<literal>on</literal>, valeur par défaut), chaque commande SQL est
	automatiquement validée si elle se termine avec succès. Pour suspendre
	la validation dans ce mode, vous devez saisir une commande SQL
	<command>BEGIN</command> ou <command>START TRANSACTION</command>. Lorsqu'elle est
	désactivée (<literal>off</literal>) ou non initialisée, les commandes SQL ne
	sont plus validées tant que vous ne lancez pas explicitement
	<command>COMMIT</command> ou <command>END</command>. Le mode sans autocommit
	fonctionne en lançant implicitement un <command>BEGIN</command>,
	juste avant toute commande qui n'est pas déjà dans un bloc de
	transaction et qui n'est pas elle-même un <command>BEGIN</command> ou une autre
	commande de contrôle de transaction, ou une commande qui ne peut pas être
	exécutée à l'intérieur d'un bloc de transaction (comme <command>VACUUM</command>).
	</para>

	<note>
	<para>
	 Dans le mode sans autocommit, vous devez annuler explicitement toute
	transaction échouée en saisissant <command>ABORT</command> ou
	<command>ROLLBACK</command>. Gardez aussi en tête que si vous sortez d'une
	session sans validation, votre travail est perdu.
	</para>
	</note>

	<note>
	<para>
	 Le mode auto-commit est le comportement traditionnel de
	 <productname>PostgreSQL</productname> alors que le mode sans autocommit est plus
	 proche des spécifications SQL. Si vous préférez sans autocommit, vous
	 pouvez le configurer dans le fichier <filename>psqlrc</filename> 
         global du système ou dans votre fichier <filename>~/.psqlrc</filename>.
	</para>
	</note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>DBNAME</varname></term>
	<listitem>
	<para>
        Le nom de la base de données à laquelle vous êtes actuellement connecté.
        Ceci est configuré à chaque fois que vous vous connectez à une base de
	données (ainsi qu'au lancement du programme) mais peut être
	désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ECHO</varname></term>
	<listitem>
	<para>
	Si cette variable est initialisée à <literal>all</literal>, toutes les lignes saisies
	au clavier ou provenant d'un script sont écrites sur la sortie standard avant
	d'être analysées ou exécutées. Pour sélectionner ce comportement au
	lancement du programme, utilisez l'option <option>-a</option>. Si
	<varname>ECHO</varname> vaut <literal>queries</literal>, 
        <application>psql</application>
	affiche simplement toutes les requêtes au moment de leur envoi au
	serveur. L'option pour ceci est <option>-e</option>.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ECHO_HIDDEN</varname></term>
	<listitem>
	<para>
	Quand cette variable est initialisée et qu'une commande antislash est
	envoyée à la base de données, la requête est d'abord affichée. De cette
	façon, vous pouvez étudier le fonctionnement interne de
	<productname>PostgreSQL</productname> et fournir des fonctionnalités
	similaires dans vos propres programmes. (Pour sélectionner ce
	comportement au lancement du programme, utilisez l'option
	<option>-E</option>.) Si vous configurez la variable avec la valeur
	<literal>noexec</literal>, les requêtes sont juste affichées mais ne
	sont pas réellement envoyées au serveur ni exécutées.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ENCODING</varname></term>
	<listitem>
	<para>
        Le codage courant du jeu de caractères du client.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>FETCH_COUNT</varname></term>
        <listitem>
        <para>
         Si cette variable est un entier positif, les résultats de la requête
         <command>SELECT</command> sont récupérés et affichés en groupe de
         ce nombre de lignes, plutôt que par le comportement par défaut
         (récupération de l'ensemble complet des résultats avant l'affichage).
         Du coup, seule une petite quantité de mémoire est utilisée, quelque
         soit la taille de l'ensemble des résultats. Une configuration entre
         100 et 1000 est habituellement utilisée lors de l'activation de cette
         fonctionnalité.
         Gardez en tête que lors de l'utilisation de cette fonctionnalité, une
         requête pourrait échouer après avoir affiché quelques lignes.
        </para>
        <tip>
        <para>
         Bien que vous pouvez utiliser tout format de sortie avec cette
         fonctionnalité, le format par défaut, <literal>aligned</literal>,
         rend mal car chaque groupe de <varname>FETCH_COUNT</varname> lignes
         sera formaté séparément, modifiant ainsi les largeurs de colonnes
         suivant les lignes du groupe. Les autres formats d'affichage
         fonctionnent mieux.
        </para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTCONTROL</varname></term>
	<listitem>
	<para>
         Si cette variable est configurée à <literal>ignorespace</literal>, les
	 lignes commençant avec un espace n'entrent pas dans la liste de
	 l'historique. Si elle est initialisée avec la valeur
	 <literal>ignoredups</literal>, les lignes correspondant aux précédentes
	 lignes de l'historique n'entrent pas dans la liste. Une valeur de
	 <literal>ignoreboth</literal> combine les deux options. Si elle n'est
	 pas initialisée ou si elle est configurée avec une autre valeur que
	 celles-ci, toutes les lignes lues dans le mode interactif sont
	 sauvegardées dans la liste de l'historique.
	</para>
        <note>
        <para>
         Cette fonctionnalité a été plagiée sur
        <application>Bash</application>.
        </para>
        </note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTFILE</varname></term>
        <listitem>
        <para>
        Le nom du fichier utilisé pour stocker l'historique. La valeur par
        défaut est <filename>~/.psql_history</filename>. Par exemple,
        utiliser&nbsp;:
<programlisting>\set HISTFILE ~/.psql_history- :DBNAME
</programlisting>
        dans <filename>~/.psqlrc</filename> fera que
        <application>psql</application> maintiendra un historique séparé pour
        chaque base de données.
        </para>
        <note>
        <para>
        Cette fonctionnalité a été plagiée sans honte à partir de
        <application>Bash</application>.
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTSIZE</varname></term>
	<listitem>
	<para>
         Le nombre de commandes à stocker dans l'historique des commandes. La
	 valeur par défaut est 500.
	</para>
        <note>
        <para>
         Cette fonctionnalité a été plagiée sur
        <application>Bash</application>.
        </para>
        </note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HOST</varname></term>
	<listitem>
	<para>
	L'hôte du serveur de la base de données où vous êtes actuellement
	connecté. Ceci est configuré à chaque fois que vous vous connectez à une
	base de données (ainsi qu'au lancement du programme) mais peut être
	désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>IGNOREEOF</varname></term>
	<listitem>
	<para>
         Si non initialisé, envoyer un caractère <acronym>EOF</acronym> (habituellement
         <keycombo action="simul"><keycap>Ctrl</keycap><keycap>D</keycap></keycombo>) dans une
	session interactive de <application>psql</application> ferme
	l'application. Si elle est configurée avec une valeur numérique, ce
	nombre de caractères <acronym>EOF</acronym> est ignoré avant la fin de
	l'application. Si la variable est configurée mais n'a pas de valeur
	numérique, la valeur par défaut est de 10.
	</para>
        <note>
        <para>
        Cette fonctionnalité a été plagiée sur
        <application>Bash</application>.
        </para>
        </note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>LASTOID</varname></term>
	<listitem>
	<para>
	La valeur du dernier OID affecté, renvoyée à partir d'une commande
        <command>INSERT</command> ou <command>lo_insert</command>. La
	validité de cette variable est seulement garantie jusqu'à 
	l'affichage du résultat de la commande <acronym>SQL</acronym> suivante.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ON_ERROR_ROLLBACK</varname></term>
        <listitem>
      <indexterm>
       <primary>rollback</primary>
       <secondary>psql</secondary>
      </indexterm>
        <para>
        Lorsqu'il est actif (<literal>on</literal>), si une instruction d'un bloc de
        transaction génère une erreur, cette dernière est ingorée et la
        transaction continue. Lorsqu'il vaut <literal>interactive</literal>, ces
        erreurs sont seulement ignorées lors des sessions interactives, mais
        ne le sont pas lors de la lecture de scripts. Lorsqu'il vaut
        <literal>off</literal> (valeur par défaut), une instruction générant une
        erreur dans un bloc de transaction annule la transaction complète. Le
        mode on_error_rollback-on fonctionne en exécutant un
        <command>SAVEPOINT</command> implicite pour vous, juste avant chaque commande
        se trouvant dans un bloc de transaction et annule jusqu'au dernier
        point de sauvegarde en cas d'erreur.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ON_ERROR_STOP</varname></term>
	<listitem>
	<para>
	Par défaut, si les scripts non interactifs rencontrent une erreur, comme
	une commande <acronym>SQL</acronym> mal formée ou une méta-commande
	interne, le traitement continue. Ceci a été le comportement traditionnel de
	<application>psql</application> mais il est quelque fois indésirable.
	Si cette variable est configurée, le traitement du script s'arrête
	immédiatement. Si le script a été appelé à partir d'un autre script, il
	se termine de la même façon. Si le script le plus externe n'a pas été
	appelé à partir d'une session interactive de
	<application>psql</application> mais plutôt en utilisant l'option
	<option>-f</option>, <application>psql</application> renvoie le code
	erreur 3 pour distinguer ce cas des conditions d'erreurs fatales (code
	d'erreur 1).
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>PORT</varname></term>
	<listitem>
	<para>
        Le port du serveur de la base de données sur lequel vous êtes
	actuellement connecté. Ceci est configuré à chaque fois que vous vous
	connectez à une base de données (ainsi qu'au lancement du programme)
	mais peut être désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>PROMPT1</varname></term>
        <term><varname>PROMPT2</varname></term>
        <term><varname>PROMPT3</varname></term>
	<listitem>
	<para>
	Ils spécifient à quoi doit ressembler l'invite
	<application>psql</application>. Voir <xref
	linkend="app-psql-prompting" endterm="app-psql-prompting-title"/>
	ci-dessous.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>QUIET</varname></term>
	<listitem>
	<para>
	Cette variable est équivalente à l'option <option>-q</option> en ligne
	de commande. Elle n'est probablement pas très utile en mode
	interactif.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>SINGLELINE</varname></term>
	<listitem>
	<para>
	Cette variable est équivalente à l'option <option>-S</option> en ligne
	de commande.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>SINGLESTEP</varname></term>
	<listitem>
	<para>
	Cette variable est équivalente à l'option <option>-s</option> en ligne
	de commande.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>USER</varname></term>
	<listitem>
	<para>
        L'utilisateur de la base de données où vous êtes actuellement
	connecté. Ceci est configuré à chaque fois que vous vous connectez à une
	base de données (ainsi qu'au lancement du programme) mais peut être
	désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>VERBOSITY</varname></term>
	<listitem>
	<para>
	 Cette variable peut être configurée avec les valeurs
	 <literal>default</literal>, <literal>verbose</literal> (bavard) 
         ou <literal>terse</literal> (succinct) pour
	 contrôler la verbosité des rapports d'erreurs.
	</para>
	</listitem>
      </varlistentry>

    </variablelist>

   </refsect3>

   <refsect3>
    <title>Interpolation <acronym>SQL</acronym></title>

    <para>
    Une fonctionnalité utile supplémentaire des variables
    <application>psql</application> est que vous pouvez les substituer
    (<quote>interpoler</quote>) dans les instructions <acronym>SQL</acronym>
    standards. La syntaxe pour ceci est encore l'ajout d'un caractère
    deux-points (<literal>:</literal>) avant le nom de la variable.
<programlisting>basetest=&gt; <userinput>\set foo 'ma_table'</userinput>
basetest=&gt; <userinput>SELECT * FROM :foo;</userinput>
</programlisting>
    envoie alors la requête pour la table <literal>ma_table</literal>. La
    valeur de la variable est copiée littéralement, donc elle peut même contenir
    des guillemets non terminés ou des commandes antislash. Vous devez vous
    assurer que cela a un sens. L'interpolation de variable n'est pas réalisée
    dans des entités SQL <acronym>SQL</acronym> entre guillemets.
    </para>

    <para>
    Une application populaire de cette fonctionnalité est de renvoyer le
    dernier <acronym>OID</acronym> inséré dans les instructions suivantes 
    pour construire un scénario de clé étrangère. Une autre utilisation
    possible de ce mécanisme est de copier le contenu d'un fichier dans une
    colonne d'une table. Tout d'abord, chargez le fichier dans une variable puis
    procédez ainsi.
<programlisting>basetest=&gt; <userinput>\set contenu '''' `cat mon_fichier.txt` ''''</userinput>
basetest=&gt; <userinput>INSERT INTO ma_table VALUES (:contenu);</userinput>
</programlisting>
    Un problème avec cette approche est que
<filename>mon_fichier.txt</filename> pourrait contenir des guillemets simples.
Ils ont besoin d'être échappés pour ne pas provoquer d'erreurs de syntaxe quand
la deuxième ligne est traitée. Ceci peut se faire avec le programme
<command>sed</command>&nbsp;:
<programlisting>basetest=&gt; <userinput>\set contenu '''' `sed -e "s/'/\\\\\''/g" &lt;
mon_fichier.txt` '\''</userinput>
</programlisting>
    Si vous utilisez des chaînes non conformes au standard, vous aurez aussi
    besoin de doubler les antislashs. C'est un peu compliqué&nbsp;:
<programlisting>basetest=&gt; <userinput>\set contenu '''' `sed -e "s/'/''/g" -e 's/\\/\\\\/g' &lt; mon_fichier.txt` ''''</userinput>
</programlisting>
    Notez l'utilisation de conventions différentes des guillemets pour le shell
    pour que ni les guillemets simples ni les antislash ne soient spéciaux pour
    le shell. Les antislashs sont toujours spéciaux pour <command>sed</command>.
    Du coup, nous devons les doubler (peut-être qu'à un moment, vous avez pensé
    qu'il est génial que toutes les commandes Unix utilisent le même caractère
    d'échappement).
    </para>

    <para>
    Comme les caractères deux-points peuvent apparaître légalement dans les
    commandes SQL, la règle suivante s'applique&nbsp;: la séquence de caractère
    <quote>:nom</quote> n'est pas changée sauf si <quote>nom</quote> est le nom
    d'une variable réellement initialisée. Dans tous les cas, vous pouvez
    échapper un deux-points avec un antislash pour le protéger d'une
    substitution. (La syntaxe deux-points pour les variables fait partie du
    standard <acronym>SQL</acronym> pour les langages de requêtes embarqués,
    tels que <application>ECPG</application>. La syntaxe deux-points pour les
    morceaux de tableau et les conversions de types sont des extensions
    <productname>PostgreSQL</productname>, d'où le conflit.)
    </para>

   </refsect3>

   <refsect3 id="app-psql-prompting">
    <title id="app-psql-prompting-title">Invite</title>

    <para>
    Les invites <application>psql</application> peuvent être personnalisées
suivant vos préférences. Les trois variables <varname>PROMPT1</varname>,
<varname>PROMPT2</varname> et <varname>PROMPT3</varname> contiennent des
chaînes et des séquences d'échappement spéciales décrivant l'apparence de
l'invite. L'invite 1 est l'invite normale qui est lancée quand
<application>psql</application> réclame une nouvelle commande. L'invite 2 est
lancée lorsqu'une saisie supplémentaire est attendue lors de la saisie de la
commande parce que la commande n'a pas été terminée avec un point-virgule ou
parce qu'un guillemet n'a pas été fermé. L'invite 3 est lancée lorsque vous
exécutez une commande <acronym>SQL</acronym> <command>COPY</command> et que
vous devez saisir les valeurs des lignes sur le terminal.
    </para>

    <para>
    La valeur de la variable prompt sélectionnée est affichée littéralement
    sauf si un signe pourcentage (<literal>%</literal>) est rencontré. Suivant
    le prochain caractère, certains autres textes sont substitués. Les
    substitutions définies sont&nbsp;:

    <variablelist>
      <varlistentry>
        <term><literal>%M</literal></term>
	<listitem>
         <para>
          Le nom complet de l'hôte (avec le nom du domaine) du serveur de la
	  base de données ou <literal>[local]</literal> si la connexion est
	  établie via une socket de domaine Unix ou
	 <literal>[local:<replaceable>/répertoire/nom</replaceable>]</literal>,
          si la socket de domaine Unix n'est pas dans l'emplacement par défaut 
          défini à la compilation.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%m</literal></term>
	<listitem>
         <para>
          Le nom de l'hôte du serveur de la base de données, tronqué au
	  premier point ou <literal>[local]</literal> si la connexion se fait
	  via une socket de domaine Unix.
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%&gt;</literal></term>
	<listitem><para>Le numéro de port sur lequel le serveur de la base de 
	données écoute.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%n</literal></term>
	<listitem>
         <para>
          Le nom d'utilisateur de la session. (L'expansion de cette valeur
	  peut changer pendant une session après une commande <command>SET
	  SESSION AUTHORIZATION</command>.)
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%/</literal></term>
	<listitem><para>Le nom de la base de données courante.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%~</literal></term>
	<listitem><para>Comme <literal>%/</literal> mais l'affichage est un
	<literal>~</literal> (tilde) si la base de données est votre base de
	données par défaut.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%#</literal></term>
	<listitem>
         <para>
          Si l'utilisateur de la session est un superutilisateur, alors un
          <literal>#</literal> sinon un <literal>&gt;</literal>.
          (L'expansion de cette valeur peut changer durant une session
	  après une commande <command>SET SESSION
	  AUTHORIZATION</command>.)
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%R</literal></term>
	<listitem>
	<para>
	Pour l'invite 1, affiche normalement <literal>=</literal> mais
	affiche <literal>^</literal> si on est en mode simple ligne et 
        <literal>!</literal> si
	la session est déconnectée de la base de données (ce qui peut arriver si
	<command>\connect</command> échoue). Pour l'invite 2, la séquence est
	remplacée par <literal>-</literal>, <literal>*</literal>, un simple
	guillemet, un double ou un signe dollar, suivant si <application>psql</application>
	attend une saisie supplémentaire parce que la commande n'est pas
	terminée, parce que vous êtes à l'intérieur d'un commentaire <literal>/*
	... */</literal>, ou parce que vous n'avez pas terminé un guillemet ou
	une chaîne échappée avec des dollars. Pour
	l'invite 3, la séquence ne produit rien.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%x</literal></term>
	<listitem>
	<para>
	État de la Transaction&nbsp;: une chaîne vide lorsque vous n'êtes pas
	dans un bloc de transaction ou <literal>*</literal> si vous vous y trouvez, ou
	<literal>!</literal> si vous êtes dans une transaction échouée, ou enfin
	<literal>?</literal> lorsque l'état de la transaction est indéterminé (par
	exemple à cause d'une rupture de la connexion).
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%</literal><replaceable
	class="parameter">chiffres</replaceable></term>
	<listitem>
	<para>
	Le caractère avec ce code numérique est substitué.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%:</literal><replaceable
	class="parameter">nom</replaceable><literal>:</literal></term>
	<listitem>
	<para>
	La valeur de la variable <replaceable
	class="parameter">nom</replaceable> de <application>psql</application>.
	Voir la section <xref linkend="app-psql-variables"
	endterm="app-psql-variables-title"/> pour les détails.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%`</literal><replaceable
	class="parameter">commande</replaceable><literal>`</literal></term>
	<listitem>
	<para>
	la sortie de la <replaceable
	class="parameter">commande</replaceable>, similaire à la substitution
	par <quote>guillemets inverse</quote> classique.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
      <term><literal>%[</literal> ... <literal>%]</literal></term>
      <listitem>
      <para>
       Les invites peuvent contenir des caractères de contrôle du terminal
       qui, par exemple, modifient la couleur, le fond ou le style du texte
       de l'invite, ou modifient le titre de la fenêtre du terminal. Pour
       que les fonctionnalités d'édition de ligne de
       <application>Readline</application> fonctionnent correctement, les
       caractères de contrôle non affichables doivent être indiqués comme
       invisibles en les entourant avec <literal>%[</literal> et
       <literal>%]</literal>. Des pairs multiples de ceux-ci pourraient
       survenir à l'intérieur de l'invite. Par exemple,
<programlisting>basetest=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# '
</programlisting>
       a pour résultat une invite en gras (<literal>1;</literal>), jaune sur
       noir (<literal>33;40</literal>) sur les terminaux compatibles 
       VT100.
      </para>
      </listitem>
      </varlistentry>

    </variablelist>

    Pour insérer un pourcentage dans votre invite, écrivez
    <literal>%%</literal>. Les invites par défaut sont
    <literal>'%/%R%# '</literal> pour les invites 1 et 2 et
    <literal>'&gt;&gt; '</literal> pour l'invite 3.
    </para>

    <note>
    <para>
    Cette fonctionnalité a été plagiée sur
    <application>tcsh</application>.
    </para>
    </note>

   </refsect3>

   <refsect3>
    <title>Édition de la ligne de commande</title>

    <para>
    <application>psql</application> supporte la bibliothèque
    <application>Readline</application> pour une édition et une recherche
    simplifiée et conviviale de la ligne de commande. L'historique des commandes est
    automatiquement sauvegardé lorsque <application>psql</application> quitte
    et est rechargé quand <application>psql</application> est lancé. La
    complétion par tabulation est aussi
    supportée bien que la logique de complétion n'ait pas la prétention d'être un
    analyseur <acronym>SQL</acronym>. Si pour quelques raisons que ce soit, vous
    n'aimez pas la complétion par tabulation, vous pouvez la désactiver en
    plaçant ceci dans un fichier nommé <filename>.inputrc</filename> de votre
    répertoire personnel&nbsp;:
<programlisting>$if psql
set disable-completion on
$endif
</programlisting>
    (Ceci n'est pas une fonctionnalité <application>psql</application> mais
    <application>Readline</application>. Lisez sa documentation pour plus de
    détails.)
    </para>
   </refsect3>
  </refsect2>
 </refsect1>


 <refsect1>
  <title>Environnement</title>

  <variablelist>
   <varlistentry>
    <term><envar>PAGER</envar></term>

    <listitem>
     <para>
      Si les résultats d'une requête ne tiennent pas sur l'écran, ils sont
      envoyés via un tube sur cette commande. Les valeurs typiques sont
      <literal>more</literal> ou <literal>less</literal>. La valeur par défaut
      dépend de la plateforme. L'utilisation du paginateur peut être désactivée
      en utilisant la commande <command>\pset</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PGDATABASE</envar></term>

    <listitem>
     <para>
      Base de données où se connecter par défaut
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGPORT</envar></term>
    <term><envar>PGUSER</envar></term>

    <listitem>
     <para>
      Paramètres de connexion par défaut
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_EDITOR</envar></term>
    <term><envar>EDITOR</envar></term>
    <term><envar>VISUAL</envar></term>

    <listitem>
     <para>
      Éditeur utilisé par la commande <command>\e</command>. Les variables sont
      examinées dans l'ordre donné&nbsp;; la première initialisée est utilisée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>SHELL</envar></term>

    <listitem>
     <para>
      Commande exécutée par la commande <command>\!</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>TMPDIR</envar></term>

    <listitem>
     <para>
      Répertoire pour stocker des fichiers temporaires. La valeur par défaut est
      <filename>/tmp</filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>


 <refsect1>
  <title>Fichiers</title>

  <itemizedlist>
   <listitem>
    <para>
     Avant de se lancer, <application>psql</application> tente de lire et
     exécuter les commandes provenant du fichier global au système
     <filename>psqlrc</filename> ou du fichier utilisateur
     <filename>~/.psqlrc</filename>. (Sur Windows, le fichier de démarrage de
     l'utilisateur est nommé <filename>%APPDATA%\postgresql\psqlrc.conf</filename>.)
     Voir <filename><replaceable>PREFIX</replaceable>/share/psqlrc.sample</filename> pour plus
     d'informations sur la configuration du fichier global au système. Il pourrait
     être utilisé pour configurer le client et le serveur à votre goût (en
     utilisant les commandes <command>\set</command> et <command>SET</command>).

    </para>
   </listitem>

   <listitem>
   <para>
   À la fois le fichier <filename>psqlrc</filename> global au système et le
   fichier <filename>~/.psqlrc</filename> de l'utilisateur peuvent être créés
   en étant spécifiques à une version si vous leur ajouter un tiret et le numéro
   de version de <filename>~/.psqlrc-&version;</filename>. Un fichier
   correspondant à une version spécifique est préféré à un fichier sans
   indication de version.
   </para>
   </listitem>

   <listitem>
    <para>
     L'historique de la ligne de commandes est stocké dans le fichier
     <filename>~/.psql_history</filename> ou
     <filename>%APPDATA%\postgresql\psql_history</filename> sur Windows.
    </para>
   </listitem>
  </itemizedlist>
 </refsect1>


 <refsect1>
  <title>Notes</title>

    <itemizedlist>
      <listitem>
      <para>
      Dans une vie précédente, <application>psql</application> permettait au
     premier argument d'une commande antislash à une seule lettre de commencer
     directement après la commande, sans espace séparateur. Pour
     la compatibilité, ceci est toujours partiellement supporté mais
     nous n'allons pas expliquer les détails ici car son utilisation n'est pas
     encouragée. Si vous obtenez des messages étranges, gardez ceci en tête. Par
     exemple
<programlisting>basetest=&gt; <userinput>\foo</userinput>
Field separator is "oo".
</programlisting>
      ce qui n'est probablement pas ce que vous souhaitez.
      </para>
      </listitem>

      <listitem>
      <para>
      <application>psql</application> ne travaille correctement qu'avec
      des serveurs de la même version. Cela ne signifie pas que les autres
      combinaisons ne fonctionnenet pas du tout, mais des problèmes subtiles et moins
      subtiles peuvent survenir. Les commandes antislash sont particulièrement
      susceptibles d'échouer si le serveur est d'une version différente.
      </para>
      </listitem>

    </itemizedlist>
 </refsect1>


 <refsect1>
   <title>Notes pour les utilisateurs sous Windows</title>
   
   <para>
     <application>psql</application> est construit comme une
     <quote>application de type console</quote>. Comme les fenêtres console de
     windows utilisent un codage différent du reste du système, vous devez
     avoir une attention particulière lors de l'utilisation de caractères sur
     8 bits à l'intérieur de <application>psql</application>. Si
     <application>psql</application> détecte une page de code problématique,
     il vous avertira au lancement. Pour modifier la page de code de la console,
     deux étapes sont nécessaires&nbsp;:
   
   <itemizedlist>
     <listitem>
       <para>
         Configurez la page code en saisissant <userinput>cmd.exe /c chcp
         1252</userinput>. (1252 est une page code appropriée pour
         l'Allemagne&nbsp;; remplacez-la par votre valeur.) Si vous
         utilisez Cygwin, vous pouvez placer cette commande dans
         <filename>/etc/profile</filename>.
       </para>
     </listitem>
     
     <listitem>
       <para>
         Configurez la police de la console par <literal>Lucida Console</literal>
         parce que la police raster ne fonctionne pas avec la page de code ANSI.
       </para>
     </listitem>
   </itemizedlist>
   </para>

 </refsect1>


 <refsect1 id="app-psql-examples">
  <title id="app-psql-examples-title">Exemples</title>

  <para>
  Le premier exemple montre comment envoyer une commande sur plusieurs lignes
  d'entrée. Notez le changement de l'invite&nbsp;:
<programlisting>basetest=&gt; <userinput>CREATE TABLE ma_table (</userinput>
basetest(> <userinput> premier integer not NULL default 0,</userinput>
basetest(> <userinput> second text)</userinput>
basetest-> <userinput>;</userinput>
CREATE TABLE
</programlisting>
  Maintenant, regardons la définition de la table&nbsp;:
<programlisting>basetest=&gt; <userinput>\d ma_table</userinput>
             Table "ma_table"
 Attribute |  Type   |      Modifier
-----------+---------+--------------------
 premier   | integer | not null default 0
 second    | text    |

</programlisting>
  Maintenant, changeons l'invite par quelque chose de plus intéressant&nbsp;:
<programlisting>basetest=&gt; <userinput>\set PROMPT1 '%n@%m %~%R%# '</userinput>
peter@localhost basetest=&gt;
</programlisting>
  Supposons que nous avons rempli la table de données et que nous voulons les
  regarder&nbsp;:
<programlisting>peter@localhost basetest=&gt; SELECT * FROM ma_table;
 premier | second
---------+--------
       1 | one
       2 | two
       3 | three
       4 | four
(4 rows)

</programlisting>
  Vous pouvez afficher cette table de façon différente en utilisant la
  commande <command>\pset</command>&nbsp;:
<programlisting>peter@localhost basetest=&gt; <userinput>\pset border 2</userinput>
Border style is 2.
peter@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
+---------+--------+
| premier | second |
+---------+--------+
|       1 | one    |
|       2 | two    |
|       3 | three  |
|       4 | four   |
+---------+--------+
(4 rows)

peter@localhost basetest=&gt; <userinput>\pset border 0</userinput>
Border style is 0.
peter@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
premier second
------- ------
      1 one
      2 two
      3 three
      4 four
(4 rows)

peter@localhost basetest=&gt; <userinput>\pset border 1</userinput>
Border style is 1.
peter@localhost basetest=&gt; <userinput>\pset format unaligned</userinput>
Output format is unaligned.
peter@localhost basetest=&gt; <userinput>\pset fieldsep ","</userinput>
Field separator is ",".
peter@localhost basetest=&gt; <userinput>\pset tuples_only</userinput>
Showing only tuples.
peter@localhost basetest=&gt; <userinput>SELECT second, first FROM
ma_table;</userinput>
one,1
two,2
three,3
four,4
</programlisting>
  Vous pouvez aussi utiliser les commandes courtes&nbsp;:
<programlisting>peter@localhost basetest=&gt; <userinput>\a \t \x</userinput>
Output format is aligned.
Tuples only is off.
Expanded display is on.
peter@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
-[ RECORD 1 ]-
first  | 1
second | one
-[ RECORD 2 ]-
first  | 2
second | two
-[ RECORD 3 ]-
first  | 3
second | three
-[ RECORD 4 ]-
first  | 4
second | four
</programlisting>
  </para>

 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member>Variables d'environnement (<xref linkend="libpq-envars"/>)</member>
  </simplelist>
 </refsect1>

</refentry>
