<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/runtime.sgml,v 1.22 2005/07/15 06:14:29 guillaume Exp $
-->

<Chapter Id="runtime">
 <Title>Environnement d'exécution du serveur</Title>

 <Para>
  Ce chapitre discute de la configuration, du lancement du serveur de bases de
  données et de ses interactions avec le système d'exploitation.
 </para>

 <sect1 id="postgres-user">
  <title>Compte utilisateur <productname>PostgreSQL</productname></title>

  <indexterm>
   <primary>utilisateur postgres</primary>
  </indexterm>

  <para>
   Comme avec tout autre démon serveur accessible au monde externe, il est
   conseillé de lancer <productname>PostgreSQL</productname> sous un compte
   utilisateur séparé. Ce compte devrait seulement être le propriétaire des
   données gérées par le serveur et ne devrait pas être partagé avec d'autres
   démons (par exemple, utiliser l'utilisateur <literal>nobody</literal> est
   une mauvaise idée). Il n'est pas conseillé de changer le propriétaire des
   exécutables par cet utilisateur car les systèmes compromis pourraient alors
   se voir modifier leur propres binaires.
  </para>

  <para>
   Pour ajouter un compte utilisateur Unix, jetez un &oelig;il à la commande
   <command>useradd</command> ou <command>adduser</command> de votre système.
   Le nom de l'utilisateur <systemitem>postgres</systemitem> est souvent utilisé
   et l'est sur tout le livre, mais vous pouvez utiliser un autre nom si vous le
   souhaitez.
  </para>
 </sect1>

 <sect1 id="creating-cluster">
  <title>Créer un groupe de base de données</title>

  <indexterm>
   <primary>groupe de bases de données</primary>
  </indexterm>

  <indexterm>
   <primary>emplacement des données</primary>
   <see>groupe de bases de données</see>
  </indexterm>

  <para>
   Avant de faire quoi que ce soit, vous devez initialiser un emplacement de
   stockage de la base de données. Nous appelons ceci un <firstterm>groupe de
   bases de données</firstterm>. (<acronym>SQL</acronym> utilise
   le terme de groupe de catalogues.) Un groupe de bases de données est une
   collection de bases données et est géré par une seule instance d'un
   serveur de bases de données en cours d'exécution. Après initialisation, un
   groupe de bases de données contiendra une base de données nommée
   <literal>template1</literal>. Comme le nom le suggère, elle sera utilisée
   comme modèle pour les bases de données créées après&nbsp;; elle ne devrait
   pas être utilisée pour un vrai travail. (Voir <xref
   linkend="managing-databases"> pour des informations sur la création de
   nouvelles bases de données dans le groupe.)
  </para>

  <para>
   En termes de système de fichiers, un groupe de bases de données sera un
   simple répertoire sous lequel les données seront stockées. Nous l'appelons le
   <firstterm>répertoire de données</firstterm> ou l'<firstterm>emplacement des
   données</firstterm>. Le choix de cet emplacement vous appartient complètement.
   Il n'existe pas de valeur par défaut bien que les emplacements tels que
   <filename>/usr/local/pgsql/data</filename> ou
   <filename>/var/lib/pgsql/data</filename> sont populaires. Pour initialiser un
   groupe de bases de données, utilisez la commande <xref
   linkend="app-initdb">,<indexterm><primary>initdb</></> installée avec
   <productname>PostgreSQL</productname>. L'emplacement désiré sur le groupe de
   fichier est indiqué par l'option <option>-D</option>, par exemple
<screen>
<prompt>$</> <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
   Notez que vous devez exécuter cette commande en étant connecté sous le compte
   de l'utilisateur <productname>PostgreSQL</productname> décrit dans la section
   précédente.
  </para>

  <tip>
   <para>
    Comme alternative à l'option <option>-D</option>, vous pouvez initialiser
    la variable d'environnement <envar>PGDATA</envar>.
    <indexterm><primary><envar>PGDATA</envar></primary></indexterm>
   </para>
  </tip>

  <para>
   <command>initdb</command> tentera de créer le répertoire que vous avez
   spécifié si celui-ci n'existe pas déjà. Il est possible qu'il n'ait pas le
   droit de le faire (si vous avez suivi notre conseil et créé un compte sans
   droits). Dans ce cas, vous devez créer le répertoire vous-même (en tant que
   root) et modifier le propriétaire pour qu'il corresponde à l'utilisateur
   <productname>PostgreSQL</productname>. Voici comment réaliser ceci&nbsp;:
<screen>
root# <userinput>mkdir /usr/local/pgsql/data</userinput>
root# <userinput>chown postgres /usr/local/pgsql/data</userinput>
root# <userinput>su postgres</userinput>
postgres$ <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
  </para>

  <para>
   <command>initdb</command> refusera de s'exécuter si le répertoire des données
   semble être déjà initialisé.</para>

  <para>
   Comme le répertoire des données contient toutes les données stockées par 
   le système de bases de données, il est essentiel qu'il soit sécurisé par
   rapport à des accès non autorisés. Du coup, <command>initdb</command>
   supprimera les droits d'accès à tout le monde sauf l'utilisateur
   <productname>PostgreSQL</productname>.
  </para>

  <para>
   Néanmoins, bien que le contenu du répertoire soit sécurisé, la configuration
   d'authentification du client par défaut permet à tout utilisateur local de se
   connecter à la base de données et même à devenir le super-utilisateur de
   la base de données. Si vous ne faites pas confiance aux utilisateurs
   locaux, nous vous recommandons d'utiliser une des options <option>-W</option> ou
   <option>--pwprompt</option> de la commande <command>initdb</command> pour
   affecter un mot de passe au super-utilisateur de la base de
   données.<indexterm><primary>mot de passe</><secondary>du
   super-utilisateur</></indexterm>. De plus, spécifiez <option>-A md5</> ou
   <option>-A mot_de_passe</> de façon à ce que la méthode d'authentification
   <literal>trust</> par défaut ne soit pas utilisée&nbsp;; ou modifiez le fichier
   <filename>pg_hba.conf</filename> généré après l'exécution
   d'<command>initdb</command> (d'autres
   approches raisonnables incluent l'utilisation de l'authentification
   <literal>ident</literal> ou les droits du système de fichiers pour
   restreindre les connexions. Voir le <xref
   linkend="client-authentication"> pour plus d'informations).
  </para>

  <para>
   <command>initdb</command> initialise aussi la
   locale<indexterm><primary>locale</></> par défaut du groupe de bases de
   données. Normalement, elle prends seulement le paramétrage local dans
   l'environnement et l'applique à la base de données initialisée. Il est
   possible de spécifier une locale différente pour la base de données&nbsp;;
   la <xref linkend="locale"> propose plus d'informations là-dessus.
   L'ordre de tri utilisé à l'intérieur du groupe de bases de données est
   initialisé par <command>initdb</command> et ne peut pas être modifié après,
   en dehors de la sauvegarde des données, du redémarrage de
   <command>initdb</command> et du rechargement des données. Il y a aussi un
   impact sur les performances lors de l'utilisation de locales autres que
   <literal>C</> ou <literal>POSIX</>. Du coup, il est important de faire ce
   choix correctement la première fois.
  </para>

  <para>
   <command>initdb</command> configure aussi le codage par défaut de l'ensemble
   de caractères pour le groupe de bases de données. Normalement, cela doit
   été choisi pour correspondre au paramétrage de la locale. Pour les détails,
   voir la <xref linkend="multibyte">.
  </para>
 </sect1>

 <sect1 id="postmaster-start">
  <title>Lancer le serveur de bases de données</title>

  <para>
   Avant qu'une personne ait accès à la base de données, vous devez démarrer le
serveur de bases de données. Le programme serveur est appelé
<command>postmaster</command>.<indexterm><primary>postmaster</></>. Le
<command>postmaster</command> doit savoir où trouver les données qu'il est
supposé utiliser. Ceci se fait avec l'option <option>-D</option>. Du coup, la
façon la plus simple de lancer le serveur est&nbsp;:
<screen>
$ <userinput>postmaster -D /usr/local/pgsql/data</userinput>
</screen>
   qui laissera le serveur s'exécuter en avant plan. Pour cela, vous devez être
   connecté en utilisant le compte de l'utilisateur
   <productname>PostgreSQL</productname>. Sans <option>-D</option>, le serveur
   essaiera d'utiliser le répertoire de données nommé par la variable
   d'environnement <envar>PGDATA</envar>. Si cette variable ne le fournit pas
   non plus, le lancement échouera.
  </para>

  <para>
   Habituellement, il est préférable de lancer <command>postmaster</command> en tâche
   de fond. Pour cela, utilisez la syntaxe shell habituelle&nbsp;:
<screen>
$ <userinput>postmaster -D /usr/local/pgsql/data &gt;journaux_trace 2&gt;&amp;1 &amp;</userinput>
</screen>
   Il est important de sauvegarder les sorties <systemitem>stdout</> et
   <systemitem>stderr</> du serveur quelque part, comme montré ci-dessus. Cela
   vous aidera dans des buts d'audits ou pour diagnostiquer des problèmes (voir
   la <xref linkend="logfile-maintenance"> pour une discussion plus détaillée
   de la gestion de journaux de trace).
  </para>

  <para>
   Le <command>postmaster</command> prend aussi un certain nombre d'autres
   options en ligne de commande. Pour plus d'informations, voir la page de
   référence <xref linkend="app-postmaster"> ainsi que le <xref
   linkend="runtime-config"> ci-dessous.
  </para>

  <para>
   Cette syntaxe shell peut rapidement devenir ennuyante. Donc, le programme
   d'emballage <xref linkend="app-pg-ctl"><indexterm><primary>pg_ctl</primary></indexterm>
   est fourni pour simplifier certaines tâches. Par exemple&nbsp;:
<programlisting>
pg_ctl start -l journaux_trace
</programlisting>
   lancera le serveur en tâche de fond et placera les sorties dans le journal 
   de trace indiqué. L'option <option>-D</option> a la même signification ici
   qu'avec <command>postmaster</command>. <command>pg_ctl</command> est aussi
   capable d'arrêter le serveur.
  </para>

  <para>
   Normalement, vous lancerez le serveur de bases de données lors du
   démarrage de l'ordinateur.<indexterm><primary>démarrage</><secondary>au
   lancement du serveur</></> Les scripts de lancement automatique sont
   spécifiques au système d'exploitation. Certains sont distribués avec
   <productname>PostgreSQL</productname> dans le répertoire
   <filename>contrib/start-scripts</>. En installer un demandera les
   droits de root.
  </para>

  <para>
   Différents systèmes ont différentes conventions pour lancer les démons au
   démarrage. La plupart des systèmes ont un fichier
   <filename>/etc/rc.local</filename> ou
   <filename>/etc/rc.d/rc.local</filename>. D'autres utilisent les répertoires
   <filename>rc.d</>. Quoi que vous fassiez, le serveur doit être exécuté par le
   compte utilisateur <productname>PostgreSQL</productname> <emphasis>et non pas
   par root</emphasis> ou tout autre utilisateur. Donc, vous devriez
   probablement former vos commandes en utilisant <literal>su -c '...' 
   postgres</literal>. Par exemple&nbsp;:
<programlisting>
su -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog' postgres
</programlisting>
  </para>

  <para>
   Voici quelques suggestions supplémentaires par système d'exploitation
   (dans chaque cas, assurez-vous d'utiliser le bon répertoire d'installation et
   le bon nom de l'utilisateur où nous montrons des valeurs génériques).

   <itemizedlist>
    <listitem>
     <para>
      Pour <productname>FreeBSD</productname>, regardez le fichier
      <filename>contrib/start-scripts/freebsd</filename> du répertoire des
      sources de <productname>PostgreSQL</productname>.
      <indexterm><primary>FreeBSD</><secondary>script de
      lancement</secondary></>
     </para>
    </listitem>

    <listitem>
     <para>
      Sur <productname>OpenBSD</productname>, ajoutez les lignes suivantes à
      votre fichier <filename>/etc/rc.local</filename>&nbsp;:
      <indexterm><primary>OpenBSD</><secondary>script de
      lancement</secondary></>
<programlisting>
if [ -x /usr/local/pgsql/bin/pg_ctl -a -x /usr/local/pgsql/bin/postmaster ]; then
    su - -c '/usr/local/pgsql/bin/pg_ctl start -l /var/postgresql/log -s' postgres
    echo -n ' postgresql'
fi
</programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      Sur les systèmes <productname>Linux</productname>, soit vous ajoutez
      <indexterm><primary>Linux</><secondary>script de lancement</secondary></>
<programlisting>
/usr/local/pgsql/bin/pg_ctl start -l journaux_trace -D /usr/local/pgsql/data
</programlisting>
      à <filename>/etc/rc.d/rc.local</filename> soit vous jetez un &oelig;il à
      <filename>contrib/start-scripts/linux</filename> dans le répertoire des
      sources de <productname>PostgreSQL</productname>.
     </para>
    </listitem>

    <listitem>
     <para>
      Sur <productname>NetBSD</productname>, vous pouvez utiliser les scripts
      de lancement de <productname>FreeBSD</productname> ou de
      <productname>Linux</productname> suivant vos préférences.
      <indexterm><primary>NetBSD</><secondary>script de lancement</secondary></>
     </para>
    </listitem>

    <listitem>
     <para>
      Sur <productname>Solaris</productname>, créez un fichier appelé
      <filename>/etc/init.d/postgresql</filename> et contenant la ligne
      suivante&nbsp;:
      <indexterm><primary>Solaris</><secondary>script de
      lancement</secondary></>
<programlisting>
su - postgres -c "/usr/local/pgsql/bin/pg_ctl start -l journaux_trace -D /usr/local/pgsql/data"
</programlisting>
      Puis, créez un lien symbolique vers lui dans <filename>/etc/rc3.d</> de
      nom <filename>S99postgresql</>.
     </para>
    </listitem>
   </itemizedlist>

  </para>

   <para>
    Tant que <command>postmaster</command> est lancé, son
    <acronym>PID</acronym> est stocké dans le fichier
    <filename>postmaster.pid</filename> du répertoire de données. C'est utilisé
    pour empêcher les nombreux processus <command>postmaster</command> d'être
    exécuté dans le même répertoire de données et peut aussi être utilisé pour
    arrêter le processus <command>postmaster</command>.
   </para>

   <sect2 id="postmaster-start-failures">
    <title>Échecs de lancement</title>

    <para>
     Il existe de nombreuses raisons habituelles pour lesquelles le serveur
     échouerait au lancement. Vérifiez le journal des traces du serveur ou
     lancez-le manuellement (sans redirection des sorties standard et d'erreur)
     et regardez les messages d'erreurs qui apparaissent. Nous en expliquons
     certains ci-dessous parmi les messages d'erreurs les plus communs.
    </para>

    <para>
<screen>
LOG:  could not bind IPv4 socket: Address already in use
HINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry.
FATAL:  could not create TCP/IP listen socket
</screen>
     Ceci signifie seulement ce que cela suggère&nbsp;: vous avez essayé de lancer
     un autre <command>postmaster</command> sur le même port où un autre est en 
     cours d'exécution. Néanmoins, si le message d'erreur du noyau 
     n'est pas <computeroutput>Address already in use</computeroutput> ou une
     quelconque variante, il pourrait y avoir un autre problème. Par
     exemple, essayer de lancer un <command>postmaster</command> sur un numéro
     de port réservé pourrait avoir ce résultat&nbsp;:
<screen>
$ <userinput>postmaster -p 666</userinput>
LOG:  could not bind IPv4 socket: Permission denied
HINT:  Is another postmaster already running on port 666? If not, wait a few seconds and retry.
FATAL:  could not create TCP/IP listen socket
</screen>
    </para>

    <para>
     Un message du type
<screen>
FATAL:  could not create shared memory segment: Invalid argument
DETAIL:  Failed system call was shmget(key=5440001, size=4011376640, 03600).
</screen>
     signifie probablement que les limites de votre noyau sur la taille de 
     la mémoire partagée est plus petite que l'aire de fonctionnement que
     <productname>PostgreSQL</productname> essaie de créer (4011376640 octets
     dans cet exemple). Ou il pourrait signifier que vous n'avez pas du tout
     configuré le support de la mémoire partagée de type System-V dans votre
     noyau. Comme contournement temporaire, vous pouvez essayer de lancer le
     serveur avec un nombre de tampons plus petit que la normale (option
     <option>-B</option>). Vous voudrez éventuellement reconfigurer votre noyau
     pour accroître la taille de mémoire partagée autorisée. Vous pourriez voir
     aussi ce message en essayant de lancer plusieurs serveurs sur la même
     machine si le total de l'espace qu'ils requièrent dépasse la limite du
     noyau.
    </para>

    <para>
     Une erreur du type
<screen>
FATAL:  could not create semaphores: No space left on device
DETAIL:  Failed system call was semget(5440126, 17, 03600).
</screen>
     ne signifie <emphasis>pas</emphasis> qu'il vous manque de l'espace disque.
     Elle signifie que la limite de votre noyau sur le nombre de sémaphores
     <systemitem class="osname">System V</> est inférieur au nombre que
     <productname>PostgreSQL</productname> veut créer. Comme ci-dessus, vous
     pourriez contourner le problème en lançant le serveur avec un nombre
     réduit de connexions autorisées (option <option>-N</option>) mais vous
     voudrez éventuellement augmenter la limite du noyau.
    </para>

    <para>
     Si vous obtenez une erreur <quote>illegal system call</>, il est probable
     que la mémoire partagée ou les sémaphores ne sont pas du tout supportés par
     votre noyau. Dans ce cas, votre seule option est de reconfigurer le noyau
     pour activer ces fonctionnalités.
    </para>

    <para>
     Des détails sur la configuration des capacités <acronym>IPC</> <systemitem
     class="osname">System V</> sont donnés dans la <xref linkend="sysvipc">.
    </para>
   </sect2>

   <sect2 id="client-connection-problems">
    <title>Problèmes de connexion du client</title>

    <para>
     Bien que les conditions d'erreurs possibles du côté client sont assez
     variées et dépendantes de l'application, certaines pourraient être en
     relation direct avec la façon dont le serveur a été lancé. Les conditions
     autres que celles montrées ici devraient être documentées avec
     l'application client respective.
    </para>

    <para>
<screen>
psql: could not connect to server: Connection refused
        Is the server running on host "server.joe.com" and accepting
        TCP/IP connections on port 5432?
</screen>
     Ceci est l'échec générique <quote>Je n'ai pas trouvé de serveur à qui
     parler</quote>. Cela ressemble au message ci-dessus lorsqu'une connexion
     TCP/IP est tentée. Une erreur commune est d'oublier de configurer le
     serveur pour qu'il autorise les connexions TCP/IP.
    </para>

    <para>
     Autrement, vous obtiendrez ceci en essayant une communication de type
     socket de domaine Unix vers un serveur local&nbsp;:
<screen>
psql: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
</screen>
    </para>

    <para>
     La dernière ligne est utile pour vérifier si le client essaie de se
     connecter au bon endroit. Si aucun serveur n'est exécuté ici, le
     message d'erreur du noyau sera typiquement soit <computeroutput>Connection
     refused</computeroutput> soit <computeroutput>No such file or
     directory</computeroutput>, comme ce qui est illustré (il est important de
     réaliser que <computeroutput>Connection refused</computeroutput>, dans ce
     contexte, ne signifie <emphasis>pas</emphasis> que le serveur a obtenu une
     demande de connexion et l'a refusé. Ce cas produira un message différent
     comme indiqué dans la <xref linkend="client-authentication-problems">).
     D'autres messages d'erreurs tel que <computeroutput>Connection timed
     out</computeroutput> pourraient indiquer des problèmes plus fondamentaux
     comme un manque de connexion réseau.
    </para>
   </sect2>
  </sect1>

  <sect1 id="runtime-config">
   <Title>Configuration à l'exécution</Title>

   <indexterm>
    <primary>configuration</primary>
    <secondary>du serveur</secondary>
   </indexterm>

   <para>
    Il existe un grand nombre de paramètres de configuration affectant le
    comportement du système de bases de données. Dans cette sous-section, nous
    décrivons comment configurer ces paramètres&nbsp;; les sections suivantes
    discutent de chaque paramètre en détail.
   </para>

   <para>
    Tous les noms de paramètres ne sont pas sensibles à la casse. Chaque
    paramètre prend une valeur d'un de ces quatre types&nbsp;: booléen, entier,
    nombre à virgule flottante ou chaîne de caractères. Les valeurs booléennes
    peuvent être saisies comme <literal>ON</literal>, <literal>OFF</literal>,
    <literal>TRUE</literal>, <literal>FALSE</literal>, <literal>YES</literal>,
    <literal>NO</literal>, <literal>1</literal>, <literal>0</literal>
    (quelque soit la casse) ou tout préfixe non ambigu de ceux-ci.
   </para>

   <para>
    Une façon d'initialiser ces paramètres est d'éditer le fichier
    <filename>postgresql.conf</filename>
    <indexterm><primary>postgresql.conf</></>
    qui est normalement placé dans le répertoire data (<command>initdb</>
    y installe une copie par défaut). Voici un exemple de
    ce que ce fichier peut contenir&nbsp;:
<programlisting>
# Ceci est un commentaire
log_connections = yes
log_destination = 'syslog'
search_path = '$user, public'
</programlisting>
    Un seul paramètre est spécifié par ligne. Le signe égal entre le nom et la
    valeur est optionnel. Les espaces blancs n'ont pas de signification et les
    lignes blanches sont ignorées. Les marques de hachage (<literal>#</literal>)
    introduisent des commentaires. Les valeurs des paramètres qui ne
    sont pas des identifieurs simples ou des nombres doivent être entre des
    guillemets simples.
   </para>

   <para>
    <indexterm>
     <primary>SIGHUP</primary>
    </indexterm>
    Le fichier de configuration est relu à chaque fois que le processus
    <command>postmaster</command> reçoit un signal <systemitem>SIGHUP</> 
    (qui est envoyé par un simple appel à <literal>pg_ctl reload</>). Le
    <command>postmaster</command> propage aussi ce signal aux processus serveur
    en cours d'exécution de façon à ce que les sessions existantes
    obtiennent aussi la nouvelle valeur. Autrement, vous pouvez envoyer le
    signal directement à un seul processus serveur. Quelques paramètres peuvent
    seulement être initialisés au lancement du serveur&nbsp;; tout changement
    dans leur entrée du fichier de configuration sera ignoré jusqu'au prochain
    lancement du serveur.
   </para>

   <para>
    Une autre façon de configurer ces paramètres est de les donner en option sur
    la ligne de commande de <command>postmaster</command> ainsi&nbsp;:
<programlisting>
postmaster -c log_connections=yes -c log_destination='syslog'
</programlisting>
    Les options de la ligne de commande surchargent tout paramétrage en
    conflit avec ceux du fichier <filename>postgresql.conf</filename>. Notez
    que cela signifie que vous ne pourrez pas modifier la valeur en direct en
    éditant simplement le fichier <filename>postgresql.conf</filename>, donc
    bien que la méthode de la ligne de commande soit agréable, cela peut vous
    coûter cher plus tard en flexibilité.
   </para>

   <para>
    Occasionnellement, il est utile de donner une option en ligne de
    commande à une session particulière seulement. La variable d'environnement
    <envar>PGOPTIONS</envar> peut être utilisée dans ce but du côté
    client&nbsp;:
<programlisting>
env PGOPTIONS='-c geqo=off' psql
</programlisting>
    (Ceci fonctionne pour toute application client
    basée sur <application>libpq</>, et non pas seulement pour
    <application>psql</application>.) Notez que ceci ne fonctionnera pas pour
    les paramètres fixes lorsque le serveur est lancé ou qui doivent être spécifiés
    dans <filename>postgresql.conf</filename>.
   </para>

   <para>
    De plus, il est possible d'affecter un ensemble de paramètres à un
    utilisateur d'une base de données. Quand une session est lancée, les
    paramétrages par défaut de l'utilisateur et de la base de données
    impliqués sont chargés. Les commandes <xref linkend="sql-alteruser"
    endterm="sql-alteruser-title"> et <xref linkend="sql-alterdatabase"
    endterm="sql-alterdatabase-title">, respectivement, sont utilisées pour
    configurer ces paramétrages. Les paramètres par base de données surcharge
    tous ceux reçus de la ligne de commande de <command>postmaster</command> ou
    du fichier de configuration, et sont aussi surchargés par ceux de
    l'utilisateur&nbsp;; les deux sont surchargés par les options par session.
   </para>

   <para>
    Quelques paramètres peuvent être changés dans des sessions
    <acronym>SQL</acronym> individuelles avec la commande <xref
    linkend="SQL-SET" endterm="SQL-SET-title">, par exemple&nbsp;:
<screen>
SET ENABLE_SEQSCAN TO OFF;
</screen>
    Si <command>SET</> est autorisé, il surcharge toutes les autres sources de
    valeurs pour le paramètre. Quelques paramètres ne peuvent pas être changés
    via <command>SET</command>&nbsp;: par exemple, s'ils contrôlent un
    comportement qui ne peut pas être changé raisonnablement sans relancer
    <productname>PostgreSQL</productname>. De plus, quelques paramètres peuvent
    être modifiés via <command>SET</command> ou <command>ALTER</> par les
    superutilisateurs, mais pas par des utilisateurs ordinaires.
   </para>

   <para>
    La commande <xref linkend="SQL-SHOW" endterm="SQL-SHOW-title"> permet une
    inspection des valeurs actuelles de tous les paramètres.
   </para>

   <para>
    La table virtuelle <structname>pg_settings</structname> (décrite dans la <xref
    linkend="view-pg-settings">) autorise aussi l'affichage et la mise à jour de
    paramètres de session à l'exécution. Elle est équivalente à <command>SHOW</>
    et <command>SET</> mais peut être plus agréable à utiliser parce qu'elle
    peut être jointe avec d'autres tables ou sélectionnée avec l'utilisation des
    conditions de sélection désirées.
   </para>
    
   <sect2 id="runtime-config-file-locations">
     <title>Emplacement des fichiers</title>
     
     <para>
       En plus du fichier <filename>postgresql.conf</filename> déjà mentionné,
       <productname>PostgreSQL</productname> utilise deux autres fichiers de
       configuration édités manuellement, contrôlant l'authentification du
       client (leur utilisation est discuté dans <xref
       linkend="client-authentication">). Par défaut, les trois fichiers de
       configuration sont stockés dans le répertoire data du groupe des bases
       de données. Les options décrites dans cette sous-section permettent de
       déplacer les fichiers de configuration. (Faire ceci peut faciliter
       l'administration. En particulier, il est souvent plus simple de
       s'assurer que les fichiers de configuration sont proprement sauvegardés
       quand ils sont conservés à part.)
     </para>
       
       <variablelist>
         <varlistentry id="guc-data-directory" xreflabel="data_directory">
           <term><varname>data_directory</varname>
             (<type>string</type>)</term>
           <indexterm>
             <primary>paramètre de configuration
               <varname>data_directory</></primary>
           </indexterm>
           <listitem>
             <para>
               Spécifie le répertoire à utiliser pour le stockage des données.
               Cette option peut seulement être initialisée au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>
       
         <varlistentry id="guc-config-file" xreflabel="config_file">
           <term><varname>config_file</varname> (<type>string</type>)</term>
           <indexterm>
             <primary>paramètre de configuration <varname>config_file</>
               </primary>
           </indexterm>
           <listitem>
             <para>
               Spécifie le fichier de configuration principal du serveur
               (appelé <filename>postgresql.conf</>). Cette option peut
               seulement être initialisée sur la ligne de commande de
               postmaster.
             </para>
           </listitem>
         </varlistentry>
   
         <varlistentry id="guc-hba-file" xreflabel="hba_file">
           <term><varname>hba_file</varname> (<type>string</type>)</term>
           <indexterm>
             <primary>paramètre de configuration 
               <varname>hba_file</></primary>
           </indexterm>
           <listitem>
             <para>
               Spécifie le fichier de configuration pour l'authentification
               basée sur l'hôte (appelé <filename>pg_hba.conf</>).
               Cette option peut seulement être initialisée au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>

         <varlistentry id="guc-ident-file" xreflabel="ident_file">
           <term><varname>ident_file</varname> (<type>string</type>)</term>
           <indexterm>
             <primary>paramètre de configuration
               <varname>ident_file</></primary>
           </indexterm>
           <listitem>
             <para>
               Spécifie le fichier de configuration pour l'authentification
               <application>ident</> (appelé <filename>pg_ident.conf</>).
               Cette option peut seulement être initialisée au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>

         <varlistentry id="guc-external-pid-file"
           xreflabel="external_pid_file">
           <term><varname>external_pid_file</varname>
             (<type>string</type>)</term>
           <indexterm>
             <primary>paramètre de configuration
               <varname>external_pid_file</></primary>
           </indexterm>
           <listitem>
             <para>
               Spécifie le nom d'un fichier supplémentaire par identifiant de
               processus (PID) que <application>postmaster</> doit créer
               à l'intention des programmes d'administration du
               serveur.
               Cette option peut seulement être initialisée au lancement du
               serveur.
             </para>
           </listitem>
         </varlistentry>
       </variablelist>

     <para>
       Dans une installation par défaut, aucune des options ci-dessus n'est
       configurée explicitement. À la place, le répertoire des données est
       spécifié par l'option <option>-D</option> en ligne de commande ou par
       la variable d'environnement <envar>PGDATA</envar>, et les fichiers de
       configuration sont tous disponibles dans le répertoire des données.
     </para>

     <para>
       Si vous souhaitez conserver les fichiers de configuration ailleurs,
       l'option <option>-D</option> en ligne de commande du postmaster ou la
       variable d'environnement <envar>PGDATA</envar> doit pointer sur le
       répertoire contenant les fichiers de configuration. L'option
       <varname>data_directory</> doit être configurée à
       <filename>postgresql.conf</filename> (ou sur la ligne de commande) pour
       montrer où est situé le répertoire des données. Notez que
       <varname>data_directory</> surcharge <option>-D</option> et
       <envar>PGDATA</envar> quant à l'emplacement du répertoire des données,
       mais pas pour l'emplacement des fichiers de configuration.
     </para>

     <para>
       Si vous le souhaitez, vous pouvez spécifier les noms des fichiers de
       configuration et leur emplacement individuellement en utilisant les
       options <varname>config_file</>, <varname>hba_file</> et/ou
       <varname>ident_file</>. <varname>config_file</> peut seulement être
       spécifié sur la ligne de commande de <command>postmaster</command>
       mais les autres peuvent être placés dans le fichier de configuration
       principal. Si les trois options et <varname>data_directory</> sont
       configurés explicitement, alors il n'est pas nécessaire de spécifier
       <option>-D</option> ou <envar>PGDATA</envar>.
     </para>

     <para>
       Lors de la configuration de ces options, un chemin relatif sera
       interprété suivant le répertoire d'où est lancé
       <command>postmaster</command>.
     </para>

   </sect2>

   <sect2 id="runtime-config-connection">
    <title>Connexions et authentification</title>

    <sect3 id="runtime-config-connection-settings">
     <title>Paramétrages de connexion</title>

     <variablelist>
     
       <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
         <term><varname>listen_addresses</varname>
           (<type>string</type>)</term>
         <indexterm>
           <primary>paramètre de configuration <varname>listen_addresses</>
             </primary>
         </indexterm>
         <listitem>
           <para>
             Spécifie les adresses TCP/IP sur lesquelles le serveur écoute
             les connexions des applications client. La valeur prend la forme
             d'une liste de noms d'hôte ou d'adresses IP numériques séparés
             par des virgules. L'entrée spéciale <literal>*</> correspond
             à toutes les interfaces IP disponibles. Si la liste est vide, le
             serveur n'écoute aucune interface IP, auquel cas seuls les
             sockets de domaine Unix peuvent être utilisés pour s'y connecter.
             La valeur par défaut est <systemitem
             class="systemname">localhost</>, ce qui autorise seulement les
             connexions locales de type <quote>loopback</>. Ce paramètre peut
             seulement être configuré au lancement du serveur.
           </para>
         </listitem>
       </varlistentry>

       <varlistentry id="guc-port" xreflabel="port">
         <term><varname>port</varname> (<type>integer</type>)</term>
         <indexterm>
           <primary>paramètre de configuration <varname>port</></primary>
         </indexterm>
         <listitem>
           <para>
             Le port TCP sur lequel le serveur écoute&nbsp;; 5432 par défaut.
             Notez que le même numéro de port est utilisé pour toutes les
             adresses IP où le serveur écoute. Ce paramètre peut seulement
             être configuré au lancement du serveur.
           </para>
         </listitem>
       </varlistentry>

       <varlistentry id="guc-max-connections" xreflabel="max_connections">
         <term><varname>max_connections</varname>
           (<type>integer</type>)</term>
         <indexterm>
           <primary>paramètre de configuration <varname>max_connections</>
             </primary>
         </indexterm>
      <listitem>
       <para>
        Détermine le nombre maximum de connexions concurrentes au serveur de la
        base de données. La valeur par défaut typique est 100 mais pourrait être
        bien moindre si vos paramétrages du noyau ne le supportent pas (ce qui est
        déterminé lors du <application>initdb</>). Ce paramètre peut seulement
        être initialisé au lancement du serveur.
       </para>

       <para>
        Augmenter ce paramètre pourrait faire que <productname>PostgreSQL</>
        réclame plus de mémoire partagée <systemitem class="osname">System V</>
        ou de sémaphores que ne le permet la configuration par défaut de votre système
        d'exploitation. Voir la <xref linkend="sysvipc"> pour plus
        d'informations sur la façon d'ajuster ces paramètres si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-superuser-reserved-connections" xreflabel="superuser_reserved_connections">
      <term><varname>superuser_reserved_connections</varname>
       (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>superuser_reserved_connections</></primary>
      </indexterm>
      <listitem>
       <para>
        Détermine le nombre de connexions (<quote>slots</quote>) réservés
	aux connexions des superutilisateurs <productname>PostgreSQL</>.
	Au plus <xref linkend="guc-max-connections"> connexions peuvent être
	actives simultanément. À chaque fois que le nombre de connexions actives
	en même temps est d'au moins <varname>max_connections</> moins
	<varname>superuser_reserved_connections</varname>, les nouvelles
	connexions ne seront acceptées que pour les superutilisateurs.
       </para>

       <para>
        La valeur par défaut est de 2. La valeur doit être plus petite que la
	valeur de <varname>max_connections</varname>. Ce paramètre peut seulement
        être configuré uniquement au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-directory"
       xreflabel="unix_socket_directory">
       <term><varname>unix_socket_directory</varname>
         (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration
           <varname>unix_socket_directory</></primary>
       </indexterm>
       <listitem>
         <para>
           Spécifie le répertoire du socket de domaine Unix sur lequel le
           serveur écoute les connexions des applications clients. Par défaut,
           il s'agit de <filename>/tmp</filename> mais cela peut être
           modifié au moment de la construction. Ce paramètre peut seulement
           être configuré au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
       <term><varname>unix_socket_group</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>unix_socket_group</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Configure le groupe propriétaire du socket de domaine Unix
           (l'utilisateur propriétaire de la socket est toujours l'utilisateur
           qui lance le serveur). En combinaison avec l'option
           <varname>unix_socket_permissions</varname>, ceci peut être
           utilisé comme un mécanisme de contrôle d'accès supplémentaire pour
           les connexions de domaine Unix. Par défaut, il s'agit d'une
           chaîne vide utilisant le groupe par défaut pour l'utilisateur
           en cours. Cette option est seulement disponible au lancement du
           serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-permissions"
       xreflabel="unix_socket_permissions">
       <term><varname>unix_socket_permissions</varname>
         (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration 
           <varname>unix_socket_permissions</></primary>
       </indexterm>
       <listitem>
         <para>
           Configure les droits d'accès au socket de domaine Unix. Ce socket
           utilise l'ensemble habituel des droits du système de fichiers
           Unix. La spécification de l'option est attendue dans le mode
           numérique avec la forme acceptée par les appels système
           <function>chmod</function> et <function>umask</function> (pour
           utiliser le format octal, ce nombre doit commencer avec un
           <literal>0</literal> (zéro)).
         </para>
  
         <para>
           Les droits par défaut sont <literal>0777</literal>, signifiant que
           tout le monde peut se connecter. Les alternatives raisonnables sont
           <literal>0770</literal> (seul l'utilisateur et le groupe, voir
           aussi <varname>unix_socket_group</varname>) et
           <literal>0700</literal> (seul l'utilisateur) (notez, que pour un
           socket de domaine Unix, seul le droit d'accès en écriture importe
           et, donc, il n'est pas nécessaire de donner ou de révoquer les
           droits de lecture ou d'exécution).
         </para>
  
         <para>
           Ce mécanisme de contrôle d'accès est indépendant de celui décrit
           dans le <xref linkend="client-authentication">.
         </para>
    
         <para>
           Cette option est seulement disponible au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-rendezvous-name" xreflabel="rendezvous_name">
       <term><varname>rendezvous_name</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>rendezvous_name</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Spécifie le nom broadcast de <productname>Rendezvous</productname>.
           Par défaut, le nom de l'ordinateur est utilisé, spécifié comme une
           chaîne vide. Cette option est ignorée si le serveur n'était pas
           compilé avec le support <productname>Rendezvous</productname>.
           Cette option est seulement configurable au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>
     
     </variablelist>
     </sect3>
     <sect3 id="runtime-config-connection-security">
     <title>Sécurité et authentification</title>
     
     <variablelist>
     <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
      <term><varname>authentication_timeout</varname> (<type>integer</type>)</term>
      <indexterm><primary>délai</><secondary>authentification
        client</></indexterm>
      <indexterm><primary>authentification client</><secondary>lors du
        délai</></indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>authentication_timeout</></primary>
      </indexterm>
      <listitem>
       <para>
        Temps maximum pour terminer l'authentification du client en
        secondes. Si un client n'a pas terminé le protocole d'authentification
        dans ce délai, le serveur rompt la connexion. Ceci protège le serveur
        des clients bloqués occupant une connexion indéfiniment. Cette option
        n'est configurable qu'au lancement du serveur ou dans le fichier
        <filename>postgresql.conf</filename>. La valeur par défaut est de 60
        secondes.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl" xreflabel="ssl">
       <term><varname>ssl</varname> (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>ssl</></primary>
       </indexterm>
       <listitem>
         <para>
           Active les connexions <acronym>SSL</>. Merci de lire <xref
         linkend="ssl-tcp"> avant d'utiliser ceci. C'est désactivé par défaut.
           Ce paramètre est seulement disponible au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-password-encryption"
       xreflabel="password_encryption">
       <term><varname>password_encryption</varname>
         (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>password_encryption</> 
           </primary>
       </indexterm>
       <listitem>
         <para>
           Cette option détermine si le mot de passe doit être crypté quand un
	   mot de passe est spécifié dans <xref linkend="sql-createuser"
	   endterm="sql-createuser-title"> ou <xref linkend="sql-alteruser"
	   endterm="sql-alteruser-title"> sans écrire soit <literal>ENCRYPTED</>
	   soit <literal>UNENCRYPTED</>. Actif par défaut (crypte le mot de passe).
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
       <term><varname>krb_server_keyfile</varname>
         (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>krb_server_keyfile</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Configure l'emplacement du fichier contenant la clé secrète du
           serveur Kerberos. Voir <xref linkend="kerberos-auth"> pour des
           détails.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
       <term><varname>db_user_namespace</varname>
         (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration 
           <varname>db_user_namespace</></primary>
       </indexterm>
      <listitem>
       <para>
        Ceci autorise les noms d'utilisateur par base de données.
        Désactivé par défaut.
       </para>

       <para>
        Si cette option est activée, vous devrez créer des utilisateurs de nom
        <literal>nomutilisateur@nom_base</>. Quand <literal>nomutilisateur</>
        est passé pour un client en cours de connexion, <literal>@</> et le nom
        de la base de données est ajouté au nom de l'utilisateur et ce nom
        d'utilisateur spécifique à la base de données est recherché dans le
        serveur. Notez que lorsque vous créez des utilisateurs dont le nom
        contient un <literal>@</> dans l'environnement SQL, vous devez mettre le
        nom entre guillemets.
       </para>

       <para>
        Cette option activée, vous pouvez toujours créer des utilisateurs
        globaux ordinaires. Ajoutez simplement <literal>@</> lors de la
        spécification du nom du client. Le <literal>@</> sera supprimé avant de
        chercher le nom de l'utilisateur dans le serveur.
       </para>

       <note>
        <para>
         Cette fonctionnalité est temporaire jusqu'à ce qu'une solution
        complète soit trouvée. Cette option sera supprimée.
        </para>
       </note>
      </listitem>
     </varlistentry>

    </variablelist>
    </sect3>
   </sect2>

   <sect2 id="runtime-config-resource">
    <title>Consomnation de ressources</title>

    <sect3 id="runtime-config-resource-memory">
     <title>Mémoire</title>

     <variablelist>
     <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
      <term><varname>shared_buffers</varname> (<type>integer</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>shared_buffers</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise le nombre de tampons en mémoire partagée utilisés par le
        serveur de bases de données. La valeur par défaut est de 1000 mais
        pourrait être moindre si la configuration de votre noyau ne le supporte
        pas (c'est déterminé lors de l'exécution d'<application>initdb</>).
        Chaque tampon fait 8192 octets sauf si une valeur différente de
	<symbol>BLCKSZ</symbol> a été choisie lors de la construction du serveur. Ce
        paramétrage doit valoir au moins 16, mais aussi au moins deux fois la
	valeur de <xref linkend="guc-max-connections">&nbsp;; néanmoins, des
        valeurs significativement plus importantes que ce minimum sont
        généralement nécessaires pour de bonnes performances. Des valeurs de
        quelques milliers sont recommandées pour des installations de
        production. Cette option n'est initialisable qu'au lancement du serveur.
       </para>

       <para>
        Augmenter ce paramètre pourrait faire en sorte que
        <productname>PostgreSQL</> réclame plus de mémoire partagé <systemitem
        class="osname">System V</> que ce que la configuration par défaut de
        votre système d'exploitation ne peut gérer. Voir la <xref
        linkend="sysvipc"> pour plus d'informations sur l'ajustement de ces
        paramètres si nécessaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-work-mem" xreflabel="work_mem">
       <term><varname>work_mem</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>work_mem</></primary>
       </indexterm>
       <listitem>
         <para>
           Spécifie la mémoire à utiliser pour les opérations de tri interne
           et pour les tables de découpage avant de basculer sur des fichiers
           temporaires sur disque. La valeur est spécifiée en Ko et vaut par
           défaut 1024 (soit 1&nbsp;Mo). Notez que pour une requête complexe,
           plusieurs tris ou opérations de hachage pourraient être exécutés en
           parallèle&nbsp;; chacun d'entre eux se verra autorisé à utiliser
           autant de mémoire que cette valeur indique avant de commencer à
           placer des données dans des fichiers temporaires. De plus,
           plusieurs sessions en cours d'exécution pourraient exécuter des
           opérations simultanément. Donc, la mémoire totale utilisée pourrait
           être plusieurs fois la valeur de <varname>work_mem</varname>&nbsp;;
           il est nécessaire de conserver ce fait en tête lors du choix de cette
           valeur. Les opérations de tri sont utilisées pour <literal>ORDER
           BY</>, <literal>DISTINCT</> et les jointures d'assemblage. Les
           tables de découpage sont utilisées dans les jointures de découpage,
           les agrégations basées sur le découpage et le traitement des
           sous-requêtes <literal>IN</>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-maintenance-work-mem" 
       xreflabel="maintenance_work_mem">
       <term><varname>maintenance_work_mem</varname>
         (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration 
           <varname>maintenance_work_mem</></primary>
       </indexterm>
       <listitem>
         <para>
           Spécifie la mémoire maximum utilisée dans les opérations de
           maintenance telles que <command>VACUUM</command>, <command>CREATE
           INDEX</> et <command>ALTER TABLE ADD FOREIGN KEY</>. La valeur est
           spécifiée en Ko et vaut par défaut 16384 (soit 16&nbsp;Mo). Comme
           une seule de ces opérations peut être exécutée à un moment donné
           sur une session de la base de données et qu'une installation n'en
           exécute pas beaucoup en même temps, il est possible d'initialiser
           cette variable à une valeur bien plus importante que 
           <varname>work_mem</varname>. De gros paramétrages pourraient
           améliorer les performances sur les opérations VACUUM et pour la
           restauration des sauvegardes de bases de données.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
       <term><varname>max_stack_depth</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>max_stack_depth</>
           </primary>
         </indexterm>
       <listitem>
         <para>
           Spécifie la profondeur maximum de la pile d'exécution du serveur.
           La configuration idéale pour ce paramètre est la limite actuelle
           de la pile forcée par le noyau (configurée par <literal>ulimit
           -s</> ou une commande locale équivalente), moins une marge de
           sécurité d'un Mo ou plus. La marge de sécurité est nécessaire
           parce que la profondeur de la pile n'est pas vérifiée dans chaque
           routine du serveur mais seulement dans les routines clés
           potentiellement récursives telles que l'évaluation d'une
           expression. Configurer ce paramètre à une valeur plus importante
           que la limite réelle du noyau signifiera qu'une fonction récursive
           peut arrêter brutalement un processus serveur individuel. Le 
           paramétrage par défaut est de 2048&nbsp;Ko (soit 2&nbsp;Mo), ce
           qui est très petit et comporte peu de risques. Néanmoins, cela
           pourrait être trop petit pour autoriser l'exécution de fonctions
           complexes.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
     </sect3>
     <sect3 id="runtime-config-resource-fsm">
     <title>Carte de l'espace libre (<foreignphrase>Free Space
      Map</foreignphrase>)</title>

     <variablelist>
     <varlistentry id="guc-max-fsm-pages" xreflabel="max_fsm_pages">
      <term><varname>max_fsm_pages</varname> (<type>integer</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>max_fsm_pages</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise le nombre maximum de pages disque pour lesquels les
        espaces libres seront tracés dans la carte partagée des espaces libres.
        Six octets de mémoire partagée sont consommés pour chaque emplacement de
        page. Ce paramétrage doit être supérieur à 16 *
        <varname>max_fsm_relations</varname>. Par défaut, il est à 20000. Cette
        option n'est configurable qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-fsm-relations" xreflabel="max_fsm_relations">
      <term><varname>max_fsm_relations</varname> (<type>integer</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>max_fsm_relations</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise le nombre maximum de relations (tables et index) pour qui
        les espaces libres seront tracés dans la carte partagée de l'espace
        libre. En gros, 50 octets de mémoire partagée sont consommés par
        emplacement. La valeur par défaut est de 1000. Cette option n'est
        configurable qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
     </sect3>
     <sect3 id="runtime-config-resource-kernel">
     <title>Usage des ressources du noyau</title>
     <variablelist>

     <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
      <term><varname>max_files_per_process</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>max_files_per_process</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise le nombre maximum de fichiers ouverts simultanément permis
        pour chaque sous-processus serveur. La valeur par défaut est de 1000.
	Si le noyau force une limite par processus, vous n'avez pas besoin de
	vous inquiéter de ce paramétrage. Mais, sur certaines plateformes
	(notamment la plupart des systèmes BSD), le noyau autorisera des
	processus individuels à ouvrir beaucoup plus de fichiers que le système
	ne peut réellement supporter quand un grand nombre de processus essaient
	d'ouvrir autant de fichiers. Si vous récupérez des erreurs du type
	<quote>Too many open files</> (trop de fichiers ouverts), essayez de
	réduire ce paramètre. Cette option peut aussi être configurée au
	lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-preload-libraries" xreflabel="preload_libraries">
      <term><varname>preload_libraries</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>preload_libraries</></primary>
      </indexterm>
      <listitem>
       <para>
        Cette variable spécifie une ou plusieurs bibliothèques préchargées au
        lancement du serveur. Une fonction d'initialisation sans paramètre peut
        être appelée pour chaque bibliothèque. Pour cela, ajouter un caractère 
        deux points et le nom de la fonction d'initialisation après le nom de la
        bibliothèque. Par exemple, <literal>'$libdir/malib:malib_init'</literal>
        causerait le préchargement de <literal>malib</> et l'exécution de
        <literal>malib_init</>. Si plus d'une bibliothèque doit être chargée,
        séparez leur nom par des virgules.
       </para>

       <para>
        Si une bibliothèque spécifique ou une fonction d'initialisation sont
	introuvables, le serveur échouera au lancement.
       </para>

       <para>
        Les bibliothèques des langages de procédure de
        <productname>PostgreSQL</productname> peuvent être préchargées de
        cette façon, typiquement en utilisant la syntaxe
        <literal>'$libdir/plXXX:plXXX_init'</literal> où
        <literal>XXX</literal> est soit <literal>pgsql</> soit
        <literal>perl</> soit <literal>tcl</> soit <literal>python</>.
       </para>

       <para>
        En préchargeant une bibliothèque partagée (et en l'initialisant dans
        les cas applicables), le temps de lancement de la bibliothèque est
        évité à la première utilisation de la bibliothèque. Néanmoins, le temps
        de lancer chaque nouveau processus pourrait augmenter légèrement même si
	le processus n'utilise pas la bibliothèque. Donc, cette option est
	seulement recommandée pour les bibliothèques qui seront utilisées par
	la majorité des sessions.
       </para>
      </listitem>
    </varlistentry>

   </variablelist>
</sect3>

    <sect3 id="runtime-config-resource-vacuum-cost">
     <title>Délais du VACUUM basé sur le coût</title>

     <para>
      Lors de l'exécution des commandes <xref linkend="sql-vacuum"
      endterm="sql-vacuum-title"> et de <xref linkend="sql-analyze"
      endterm="sql-analyze-title">, le système maintient un compteur interne
      conservant la trace du coût estimé des différentes opérations
      d'entrées/sorties réalisées. Quand le coût accumulé atteint une limite
      (spécifiée par <varname>vacuum_cost_limit</varname>), le processus
      traitant l'opération s'arrêtera un moment (spécifié par
      <varname>vacuum_cost_delay</varname>). Puis, il réinitialisera le compteur
      et continuera l'exécution.
     </para>

      <para>
	Le but de cette fonctionnalité est d'autoriser les administrateurs à
	réduire l'impact des entrées/sorties de ces commandes suivant l'activité
	des bases de données. Il existe un grand nombre de situations pour
	lesquelles ceci n'est pas très important mais les commandes de
	maintenance quand <command>VACUUM</command> et <command>ANALYZE</command>
	se finissent rapidement&nbsp;; néanmoins, il est généralement très
	important que ces commandes n'interfèrent pas de façon significative
	sur la capacité du système à réaliser d'autres opérations sur les bases
	de données. Un délai du VACUUM basé sur le coût fournit un moyen aux
	administrateurs pour y parvenir.
      </para>

      <para>
        Cette fonctionnalité est désactivée par défaut. Pour l'activer,
	initialisez la variable <varname>vacuum_cost_delay</varname> à une valeur
	différente de zéro.
      </para>

      <variablelist>
        <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
          <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_delay</></primary>
          </indexterm>
          <listitem>
            <para>
              Le temps, en millisecondes, de repos du processus quand la limite
	      de coût a été atteinte. La valeur par défaut vaut 0, ce qui
	      désactive la fonctionnalité du délai du VACUUM basé sur le coût.
	      Une valeur positive active cette fonctionnalité. Notez que, sur
	      plusieurs systèmes, la résolution réelle des délais de repos est de
	      10&nbsp;millisecondes&nbsp;; configurer <varname>vacuum_cost_delay</varname>
	      à une valeur qui n'est pas un multiple de 10 pourrait avoir le
	      même résultat que de le configurer au prochain multiple de 10.
            </para>
          </listitem>
        </varlistentry>
      
        <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
          <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_hit</></primary>
          </indexterm>
          <listitem>
            <para>
              Le coût estimé pour nettoyer via VACUUM un tampon trouvé dans le
	      cache des tampons partagés. Cela représente le coût pour
	      verrouiller le lot de tampons, la recherche dans la table de
	      découpage partagée et le parcours du contenu de la page. La valeur
	      par défaut vaut 1.
            </para>
          </listitem>
        </varlistentry>
    
        <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
          <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_miss</></primary>
          </indexterm>
          <listitem>
            <para>
              Le coût estimé pour nettoyer via VACUUM un tampon qui doit être lu
	      sur le disque. Ceci représente l'effort pour verrouiller le lot de
	      tampons, la recherche dans la table de découpage partagée, la
	      lecture du bloc désiré du disque et le parcours de son contenu. La
	      valeur par défaut vaut 10.
            </para>
          </listitem>
        </varlistentry>
  
        <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
          <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_page_dirty</></primary>
          </indexterm>
          <listitem>
            <para>
              Le coût estimé chargé quand VACUUM modifie un bloc qui était
	      précédemment propre. Cela représente les entrées/sorties
	      supplémentaires requis pour vider le bloc sale de nouveau sur le
	      disque. La valeur par défaut vaut 20.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
          <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>vacuum_cost_limit</></primary>
          </indexterm>
          <listitem>
            <para>
              Le coût accumulé qui causera l'endormissement du processus de
	      VACUUM. La valeur par défaut vaut 200.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>
          Certaines opérations contenant des verrous critiques devraient se
	  terminer aussi rapidement que possible. Les délais de VACUUM basés
	  sur le coût ne surviennent pas pendant ces opérations. Du coup, il
	  est possible que le coût accumulé soit bien plus important que la
	  limite spécifiée. Pour éviter des délais inutilement longs dans de
	  tels cas, le délai réel est calculé de la façon suivante&nbsp;:
	  <varname>vacuum_cost_delay</varname> * <varname>accumulated_balance</varname> /
	  <varname>vacuum_cost_limit</varname> avec un maximum de
	  <varname>vacuum_cost_delay</varname> * 4.
        </para>
      </note>

    </sect3>

    <sect3 id="runtime-config-resource-background-writer">
      <title>Écriture en tâche de fond</title>
  
      <para>
        À partir de <productname>PostgreSQL</> 8.0, il existe un processus
        serveur séparé pour l'<firstterm>écriture en tâche de fond</>, dont la
        seule fonction est de lancer les écritures des tampons partagés
        <quote>sales</>.  Le but est que les processus serveur gérant les
        requêtes des utilisateurs doivent déléguer ou n'avoir jamais à attendre
	la fin d'une écriture car le processus d'écriture en tâche de fond s'en
	chargera. Cet arrangement réduit aussi la pénalité de performance
	associée avec les points de vérification. Le processus d'écriture en
	tâche de fond vérifiera en contenu les pages sales pour les écrire sur
	le disque, de façon à ce que seules quelques pages doivent être forcées
	en écriture lorsque survient le point de vérification, à la place d'un
	déluge d'écritures de tampons sales ne se faisant qu'à chaque point de
	vérification. Néanmoins, il y a une nette augmentation dans la charge des
	entrées/sorties parce que, là où une page souvent sale n'aurait été
	écrite qu'une seule fois par intervalle de point de vérification, le
	processus d'écriture en tâche de fond l'aurait écrite plusieurs fois
	dans la même période. Dans la plupart des situations, un chargement lent
	continu est préférable à des pointes périodiques mais les paramètres
	discutés dans cette section peuvent être utilisés pour configurer finement
	le comportement pour les besoins locaux.
      </para>

      <variablelist>
        <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
          <term><varname>bgwriter_delay</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>bgwriter_delay</></primary>
          </indexterm>
          <listitem>
            <para>
              Spécifie le délai entre les tours d'activité du processus
	      d'écriture en tâche de fond. À chaque tour, le processus
	      écrit un certain nombre de tampons sales (contrôlable par les
	      paramètres suivants). Les tampons sélectionnées seront toujours
	      ceux les moins récemment utilisés parmi les tampons sales en
	      cours. Puis, il s'endort pour <varname>bgwriter_delay</>
	      millisecondes et recommande. La valeur par défaut est de 200.
	      Notez que sur de nombreux systèmes, la résolution réelle des
	      délais de sommeil est de 10&nbsp;millisecondes; configurer
	      <varname>bgwriter_delay</> à une valeur qui n'est pas un multiple
	      de 10 pourrait avoir le même résultat que de le configurer au
	      multiple de 10 supérieur. Cette option est seulement disponible
	      au lancement du serveur ou dans le fichier
	      <filename>postgresql.conf</filename>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="guc-bgwriter-percent" xreflabel="bgwriter_percent">
          <term><varname>bgwriter_percent</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>bgwriter_percent</></primary>
          </indexterm>
          <listitem>
            <para>
              À chaque tour, pas plus que ce pourcentage de tampons sales ne
	      seront écrits (ne terminant tout fraction sur le prochain nombre
	      de tampons). La valeur par défaut est 1. Cette option est seulement
	      disponible au lancement du serveur ou dans le fichier
	      <filename>postgresql.conf</filename>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="guc-bgwriter-maxpages" xreflabel="bgwriter_maxpages">
          <term><varname>bgwriter_maxpages</varname> (<type>integer</type>)</term>
          <indexterm>
            <primary>paramètre de configuration <varname>bgwriter_maxpages</></primary>
          </indexterm>
          <listitem>
            <para>
              À chaque tour, pas plus que ce nombre de tampons partagés sera
	      écrit. La valeur par défaut vaut 100. Cette option est seulement
	      disponible au lancement du serveur ou dans le fichier
	      <filename>postgresql.conf</filename>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
        Des valeurs plus petites de <varname>bgwriter_percent</varname> et
        <varname>bgwriter_maxpages</varname> réduiront la charge supplémentaire
	en entrées/sorties causée par le processus d'écriture en tâche de fond
	mais laisseront plus de travail au point de vérification. Pour réduire
	les pointes de chargements aux points de vérification, augmentez les
	valeurs. Pour désactiver totalement le processus en d'écriture en tâche
	de fond, configurez <varname>bgwriter_percent</varname> et/ou
	<varname>bgwriter_maxpages</varname> à zéro.
      </para>
    </sect3>
   </sect2>

   <sect2 id="runtime-config-wal">
    <title>Write Ahead Log</title>

   <para>
    Voir aussi la <xref linkend="wal-configuration"> pour des détails sur la
    configuration pointue des WAL.
   </para>

    <sect3 id="runtime-config-wal-settings">
     <title>Paramétrages</title>
     <variablelist>
     
     <varlistentry id="guc-fsync" xreflabel="fsync">
      <indexterm>
       <primary><varname>fsync</> configuration parameter</primary>
      </indexterm>
      <term><varname>fsync</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        Si cette option est activée, le serveur <productname>PostgreSQL</>
        utilisera l'appel système <function>fsync()</> à plusieurs endroits pour
        s'assurer que les mises à jour sont écrites physiquement sur le disque.
        Ceci vous assure que le groupe de bases de données retournera à un état
        cohérent après un arrêt brutal du système d'exploitation ou suite à un
        problème matériel.
       </para>

       <para>
        Néanmoins, utiliser <function>fsync()</function> implique des coûts au
        niveau performance&nbsp;: lorsqu'une transaction est validée,
        <productname>PostgreSQL</productname> doit attendre que le système
        d'exploitation vide les WAL sur disque. Lorsque <varname>fsync</varname>
        est désactivé, le système d'exploitation est autorisé à faire de son
        mieux en utilisant des tampons pour les écritures, en ordonnant et en
        ajoutant des délais aux écritures. Néanmoins, si le système s'arrête
        brutalement, les résultats des dernières transactions validées
        pourraient être perdus en partie ou complètement. Dans le pire des cas,
        une corruption non récupérable des données pourrait survenir
	(les arrêts brutaux du serveur de bases de données lui-même ne sont
	<emphasis>pas</> un facteur de risque ici. Seul l'arrêt brutal au niveau du
	système d'exploitation crée un risque de corruption).
       </para>

       <para>
        À cause des risques encourus, il n'existe pas de paramétrage universel
        pour <varname>fsync</varname>. Certains administrateurs désactivent en
        permanence <varname>fsync</varname> alors que d'autres ne le désactivent
        que pour les charges importantes s'il existe un moyen de recommencer
        proprement si quelque chose se passe mal. Mais d'autres administrateurs
        laissent toujours <varname>fsync</varname> activé. La valeur par défaut
        est d'activer <varname>fsync</varname> pour une confiance maximale. Si
        vous avez confiance en votre système d'exploitation (ou sur la
        sauvegarde sur batterie), vous pouvez considérer la désactivation de
        <varname>fsync</varname>.
       </para>

       <para>
        Cette option n'est configurable qu'au lancement du serveur ou dans le
        fichier <filename>postgresql.conf</filename> file.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
      <term><varname>wal_sync_method</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>wal_sync_method</> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Méthode utilisée pour forcer les mises à jour des WAL sur le disque.
        Les valeurs possibles sont
        <literal>fsync</> (appel de <function>fsync()</> à chaque validation),
        <literal>fdatasync</> (appel de <function>fdatasync()</> à chaque
        validation), <literal>fsync_writethrough</> (appel de <function>_commit()</>
        à chaque validation sur Windows), <literal>open_sync</> (écriture des
        fichiers WAL avec l'option <symbol>O_SYNC</> de <function>open()</>) et
        <literal>open_datasync</> (écriture des fichiers WAL avec l'option
        <symbol>O_DSYNC</> de <function>open()</>). Toutes ces options ne sont
	pas disponibles sur toutes les plateformes. Si <varname>fsync</varname>
	est désactivée, alors cette configuration n'a pas d'intérêt. Cette
	option n'est configurable qu'au lancement du serveur ou dans le fichier
        <filename>postgresql.conf</filename>.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
       <term><varname>wal_buffers</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>wal_buffers</></primary>
       </indexterm>
       <listitem>
         <para>
         Nombre de tampons de pages disque alloués en mémoire partagée pour les
	 données WAL. La valeur par défaut vaut 8. Ce paramétrage a seulement
	 besoin d'être assez important pour contenir toutes les données WAL
	 générées par une transaction typique. Cette option est seulement
	 disponible au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
       <term><varname>commit_delay</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>commit_delay</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Délai entre l'enregistrement d'une validation dans le tampon WAL
           et le vidage du tampon sur le disque, en microsecondes. Un délai
           différent de zéro peut autoriser la validation de plusieurs
           transactions sur un seul appel système 
           <function>fsync()</function> si la charge système est assez
           importante pour que des transactions supplémentaires soient prêtes
           dans l'intervalle donné. Mais le délai est perdu si aucune autre
           transaction n'est prête à être validée. Du coup, le délai est
           seulement traitée si au moins
           <varname>commit_siblings</varname> autres transactions sont actives
           au moment où le processus serveur a écrit son enregistrement de
           validation. La valeur par défaut est zéro, donc pas de délai.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
       <term><varname>commit_siblings</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>commit_siblings</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Nombre minimum de transactions ouvertes en même temps avant
           d'attendre le délai <varname>commit_delay</>. Une valeur plus
           importante rend plus probable le fait qu'au moins une autre
           transaction sera prête à valider pendant la durée du délai. La
           valeur par défaut est de cinq.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
     </sect3>
     
     <sect3 id="runtime-config-wal-checkpoints">
     <title>Points de vérification</title>

    <variablelist>
     <varlistentry id="guc-checkpoint-segments" xreflabel="checkpoint_segments">
      <term><varname>checkpoint_segments</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>checkpoint_segments</></primary>
      </indexterm>
      <listitem>
       <para>
        Distance maximum entre des points de vérifications automatiques
        des WAL, dans les segments des journaux de traces (chaque segment fait
        normalement 16&nbsp;Mo). Par défaut, il y en a trois. Cette option
        n'est configurable qu'au lancement du serveur ou dans le fichier
        <filename>postgresql.conf</filename>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>checkpoint_timeout</> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Temps maximum entre des points de vérification automatiques des
        WAL en secondes. La valeur par défaut est de 300 secondes. Cette option
        n'est configurable qu'au lancement du serveur ou dans le fichier
        <filename>postgresql.conf</>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
       <term><varname>checkpoint_warning</varname>
         (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration
           <varname>checkpoint_warning</></primary>
       </indexterm>
       <listitem>
         <para>
           Écrit un message dans les journaux du serveur si les points de
           vérification causées par le remplissage des fichiers segment sont
           arrivés dans un intervalle plus rapide que ce nombre de secondes.
           Vaut par défaut 30 secondes. Une valeur de zéro désactive cet
           avertissement.
         </para>
       </listitem>
     </varlistentry>

   </variablelist>
  </sect3>
  
  <sect3 id="runtime-config-wal-archiving">
  <title>Archivage</title>
  
  <variablelist>
    <varlistentry id="guc-archive-command" xreflabel="archive_command">
      <term><varname>archive_command</varname> (<type>string</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>archive_command</>
          </primary>
      </indexterm>
      <listitem>
        <para>
          La commande shell pour exécuter l'archivage d'un segment complet
          de fichier WAL. Si cette chaîne est vide (valeur par défaut),
          l'archivage des WAL est désactivé. Tout <literal>%p</> dans la
          chaîne est remplacé par le chemin absolu vers le fichier à archiver
          et tout <literal>%f</> est seulement remplacé par le nom du fichier.
          Utilisez <literal>%%</> pour intégrer un vrai caractère
          <literal>%</> dans la commande. Pour plus d'informations, voir la <xref
          linkend="backup-archiving-wal">. Cette option est seulement
          disponible au lancement du serveur ou dans le fichier
          <filename>postgresql.conf</filename>.
        </para>

        <para>
          Il est important que la commande renvoie un code de sortie zéro si
          et seulement si elle a réussi. Exemples&nbsp;:
<programlisting>
archive_command = 'cp "%p" /mnt/server/archivedir/"%f"'
archive_command = 'copy "%p" /mnt/server/archivedir/"%f"'  # Windows
</programlisting>
        </para>
      </listitem>
    </varlistentry>

   </variablelist>
   </sect3>

   </sect2>

   <sect2 id="runtime-config-query">
    <title>Planification des requêtes</title>

    <sect3 id="runtime-config-query-enable">
     <title>Configuration de la méthode du planificateur</title>

      <para>
       Ces paramètres de configuration fournissent une méthode dure pour
       influencer les plans de requête choisis par l'optimiseur de requêtes. Si
        le plan choisi par défaut par l'optimiseur pour une requête particulière
        n'est pas optimale, une solution temporaire pourrait être découverte en
        utilisant un de ces paramètres de configuration pour forcer l'optimiseur
	à choisir un meilleur plan. Désactiver un de ces paramétrages de façon
	permanente est néanmoins quelque fois une bonne idée. De meilleures
	façons d'améliorer la qualité des
	plans choisis par l'optimiseur incluent l'ajustement de <xref
	linkend="runtime-config-query-constants"
	endterm="runtime-config-query-constants-title">, le lancement plus
	fréquent de <xref linkend="sql-analyze" endterm="sql-analyze-title">,
	l'augmentation de la valeur du paramètre de configuration <xref
	linkend="guc-default-statistics-target"> et l'augmentation du nombre
	de statistiques récupérées pour des colonnes spécifiques en utilisant
	<command>ALTER TABLE SET STATISTICS</command>.
      </para>

     <variablelist>
      <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
       <term><varname>enable_hashagg</varname> (<type>boolean</type>)</term>
       <indexterm>
        <primary>paramètre de configuration <varname>enable_hashagg</></primary>
       </indexterm>
       <listitem>
       <para>
        Active ou désactive l'utilisation des agrégats hachés par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_hashjoin</></primary>
      </indexterm>
      <listitem>
       <para>
        Active ou désactive l'utilisation des jointures hachées par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

      <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_indexscan</></primary>
      </indexterm>
      <listitem>
       <para>
        Active ou désactive l'utilisation des parcours d'index par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_mergejoin</></primary>
      </indexterm>
      <listitem>
       <para>
        Active ou désactive l'utilisation des jointures de fusion par le
        planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>enable_nestloop</> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Active ou désactive l'utilisation des jointures de boucles imbriquées
        par le planificateur. Il n'est pas possible de supprimer les
        jointures de boucles imbriquées complètement mais désactiver cette
        variable décourage le planificateur de l'utiliser si d'autres méthodes
        sont disponibles. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>parcours séquentiel</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_seqscan</></primary>
      </indexterm>
      <listitem>
       <para>
        Active ou désactive l'utilisation des parcours séquentiel par le
        planificateur. Il n'est pas possible de supprimer complètement les
        parcours séquentiels mais désactiver cette variable décourage le
        planificateur de l'utiliser si d'autres méthodes sont disponibles.
        Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
      <term><varname>enable_sort</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>enable_sort</></primary>
      </indexterm>
      <listitem>
       <para>
        Active ou désactive l'utilisation des étapes de tri explicite par le 
        planificateur. Il n'est pas possible de supprimer complètement ces tris
        mais désactiver cette variable décourage le planificateur de l'utiliser
        si d'autres méthodes sont disponibles. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>enable_tidscan</> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Active ou désactive l'utilisation des parcours de <acronym>TID</> par
        le planificateur. Actif par défaut.
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
     </sect3>
     <sect3 id="runtime-config-query-constants">
     <title id="runtime-config-query-constants-title">
      Constantes de coût du planificateur
     </title>

   <note>
    <para>
     Malheureusement, il n'existe pas de méthode bien définie pour
     déterminer les valeurs idéales pour la famille des variables de coût
     (<quote>cost</quote>) qui apparaissent ci-dessous. Vous êtes encouragés
     à expérimenter et à partager vos découvertes.
    </para>
   </note>

     <variablelist>

     <varlistentry id="guc-effective-cache-size" 
       xreflabel="effective_cache_size">
      <term><varname>effective_cache_size</varname> (<type>floating
        point</type>)</term>
      <indexterm>
       <primary>paramètre de configuration
         <varname>effective_cache_size</></primary>
      </indexterm>
      <listitem>
       <para>
	     Configure l'idée du planificateur sur la taille réelle du cache
	     disque disponible pour un simple parcours d'index. Ceci est factorisé
	     en estimation du coût d'utilisation d'un index&nbsp;; une valeur
	     plus grande rend un parcours d'index plus probable, une valeur plus
	     basse favorise le parcours séquentiel. Lors de la modification de ce
	     paramètre, vous devez considérer les tampons partagés de
	     <productname>PostgreSQL</productname> et la partie cache disque du
	     noyau qui seront utilisés pour les fichiers de données de
	     <productname>PostgreSQL</productname>. De plus, prenez en compte le
	     nombre attendu de requêtes concurrentes utilisant différents index
	     car elles devront partager l'espace disponible. Ce paramètre n'a pas
	     d'effet sur la taille de la mémoire partagée allouée par
	     PostgreSQL, pas plus qu'il ne réserve de cache disque du noyau&nbsp;;
	     c'est utilisé uniquement dans un but d'estimation. La valeur est
	     mesurée en pages disque, qui sont normalement de 8192 octets chaque.
	     La valeur par défaut est de 1000.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
      <term><varname>random_page_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>random_page_cost</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation du coût du planificateur pour une
        page disque récupérée de façon non séquentielle. C'est mesuré comme un
        multiple du coût de récupération d'une page séquentielle. Une valeur plus
        haute rend plus probable l'utilisation d'un parcours séquentiel, une
        valeur basse l'utilisation d'un parcours d'index. La valeur par défaut
        est quatre.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_tuple_cost</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation du coût du planificateur pour le 
        traitement de chaque ligne lors d'une requête. C'est mesuré comme une
        fraction du coût de la récupération séquentielle d'une page. La valeur
        par défaut est 0,01.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_index_tuple_cost</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation du coût du planificateur pour le 
        traitement de chaque ligne lors d'un parcours d'index. C'est mesuré
        comme une fraction du coût de la récupération séquentielle d'une page.
        La valeur par défaut est 0,001.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>cpu_operator_cost</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise l'estimation du coût du planificateur de requêtes pour le
        traitement de chaque opérateur dans une clause <literal>WHERE</>. C'est
        mesuré comme une fraction du coût de récupération séquentielle d'une
        page. La valeur par défaut est 0,025.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect3>
     <sect3 id="runtime-config-query-geqo">
     <title>Optimiseur génétique de requêtes</title>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
      <indexterm>
       <primary>optimisation génétique des requêtes</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>optimisation génétique des requêtes</see>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>geqo</></primary>
      </indexterm>
      <term><varname>geqo</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
	Active ou désactive l'optimisation génétique des requêtes, algorithme
	tentant de faire de la planification de requêtes sans recherche
	exhaustive. Activé par défaut. La variable <varname>geqo_threshold</varname>
	fournit un moyen plus fin pour désactiver certaines classes de requêtes.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
      <term><varname>geqo_threshold</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>geqo_threshold</></primary>
      </indexterm>
      <listitem>
       <para>
        Utilise l'optimisation génétique des requêtes pour planifier les
        requêtes avec au moins ce nombre d'éléments impliqués dans la clause
        <literal>FROM</> (notez qu'une construction <literal>JOIN</> externe
        compte seulement comme un élément du <literal>FROM</>). La valeur par
        défaut est de 12. Pour des requêtes simples, il est généralement préférable
        d'utiliser le planificateur déterministe, exhaustif mais pour les
        requêtes comprenant beaucoup de tables, le planificateur déterministe
        prendrait trop de temps.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
       <term><varname>geqo_effort</varname>
         (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_effort</></primary>
       </indexterm>
       <listitem>
         <para>
           Contrôle l'équité entre le temps de planification et l'efficacité
           du plan de requête dans GEQO. Cette variable doit être un entier
           entre 1 et 10. La valeur par défaut est 5. Les valeurs plus
           importantes augmentent le temps passé pendant la planification de
           la requête mais augmentent aussi la possibilité qu'un plan de
           requête efficace soit choisi.
         </para>
       
         <para>
           <varname>geqo_effort</varname> ne fait réellement rien
           directement&nbsp;; c'est seulement utilisé pour calculer les
           valeurs par défaut des autres variables qui influencent le
           comportement de GEQO (décrit ci-dessous). Si vous préférez, vous
           pouvez configurer les autres paramètres manuellement.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
       <term><varname>geqo_pool_size</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_pool_size</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Contrôle la taille de la queue utilisée par GEQO. Cette taille
           est le nombre d'individus dans une population génétique. Elle
           doit être d'au moins deux, et les valeurs utiles sont typiquement
           100 et 1000. Si elle est configurée à zéro (la valeur par défaut),
           alors une valeur par défaut convenable est choisie suivant
           <varname>geqo_effort</varname> et le nombre de tables dans la
           requête.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
       <term><varname>geqo_generations</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_generations</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Contrôle le nombre de générations utilisé par GEQO. Les générations
           spécifient le nombre d'itérations de l'algorithme. Il doit être au
           moins un, et les valeurs utiles sont dans la même échelle que la
           taille de la queue. S'il est configuré à zéro (la valeur par
           défaut), alors une version par défaut convenable est choisie
           suivant <varname>geqo_pool_size</varname>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias"
       xreflabel="geqo_selection_bias">
       <term><varname>geqo_selection_bias</varname> (<type>floating 
         point</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>geqo_selection_bias</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Contrôle le biais de sélection utilisé par GEQO. C'est une pression
           sélective à l'intérieur de la population. Les valeurs peuvent aller
           de 1,50 à 2,00&nbsp;; ce dernier est la valeur par défaut.
         </para>
       </listitem>
     </varlistentry>
     
     </variablelist>
    </sect3>
     <sect3 id="runtime-config-query-other">
     <title>Autres options du planificateur</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
      <term><varname>default_statistics_target</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>default_statistics_target</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise la cible par défaut des statistiques pour les colonnes de
        table qui n'ont pas une cible spécifique de colonne configurée via
        <command>ALTER TABLE SET STATISTICS</>. Des valeurs plus importantes
        accroissent le temps nécessaire à exécuter <command>ANALYZE</> mais
        pourrait améliorer les estimations du planificateurs. La valeur par
	défaut est de 10. Pour plus d'informations sur l'utilisation des
	statistiques par le planificateur de requêtes de
	<productname>PostgreSQL</>, référez-vous à la <xref
	linkend="planner-stats">.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>from_collapse_limit</></primary>
      </indexterm>
      <listitem>
       <para>
        Le planificateur assemblera les sous-requêtes dans des requêtes
	supérieures si la liste <literal>FROM</literal> résultante n'aurait pas
	plus de ce nombre d'éléments. Des valeurs plus petites réduisent le
	temps de planification mais ramènent des plans de requêtes inférieurs.
	La valeur par défaut est huit. Il est généralement conseillé de conserver
	cette valeur inférieure à <xref linkend="guc-geqo-threshold">.
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>join_collapse_limit</></primary>
      </indexterm>
      <listitem>
        <para>
	  Le planificateur réécrira les constructions <literal>JOIN</> internes
	  explicites en listes d'éléments <literal>FROM</> à chaque fois qu'une
	  liste d'au plus ce nombre d'éléments au total en résulterait. Avant
	  <productname>PostgreSQL</> 7.4, les jointures spécifiées via la
	  construction <literal>JOIN</literal> ne seraient jamais réordonnées.
	  Le planificateur de la requête a du coup été amélioré pour que les
	  jointures internes écrites de cette forme puissent être
	  ré-ordonnées&nbsp;; ce paramètre de configuration contrôle à quel
	  point ce ré-ordonnancement sera réalisé.

        <note>
	<para>
	  À présent, l'ordre des jointures externes spécifiée via la construction
	  <literal>JOIN</> n'est jamais ajusté par le planificateur de requêtes&nbsp;;
	  du coup, <varname>join_collapse_limit</> n'a aucun effet sur ce
	  comportement. Le planificateur pourrait être amélioré pour ré-ordonner
	  certaines classes de jointures externes dans une prochaine version de
	  <productname>PostgreSQL</productname>.
        </para>
        </note>
        </para>

        <para>
	  Par défaut, cette variable est configurée de la même façon que
	  <varname>from_collapse_limit</varname>, qui est approprié pour la
	  plupart des utilisations. Configurer cette variable à 1 empêche le réordonnancement
	  des <literal>JOIN</>tures internes. Du coup, l'ordre de jointure explicite
	  spécifiée dans la requête sera l'ordre réel dans lequel les relations
	  sont jointes. Le planificateur de la requête ne choisit pas toujours
	  l'ordre de jointure optimal&nbsp;; les utilisateurs avancées pourraient
	  choisir d'initialiser temporairement cette variable à 1, puis de
	  spécifier l'ordre de jointure qu'ils désirent explicitement. Une autre
	  conséquence en l'initialisant à 1 est que le planificateur de requêtes
	  se comporte plus comme le planificateur de requête de
	  <productname>PostgreSQL</productname> 7.3, ce que certains utilisateurs
	  trouvent utile pour des raisons de compatibilités descendantes.
        </para>

        <para>
	Configurer cette variable à une valeur entre 1 et
	<varname>from_collapse_limit</varname> pourrait être utile pour
	négocier entre le temps de planification et la qualité du plan choisie
	(les grandes valeurs produisent les meilleures plans).
        </para>
      </listitem>
    </varlistentry>

     </variablelist>
    </sect3>
   </sect2>

   <sect2 id="runtime-config-logging">
    <title>Rapports d'erreur et traces</title>

    <indexterm zone="runtime-config-logging">
     <primary>traces serveur</primary>
    </indexterm>

    <sect3 id="runtime-config-logging-where">
     <title>Où tracer</title>

     <indexterm zone="runtime-config-logging-where">
      <primary>où tracer</primary>
     </indexterm>

     <variablelist>

       <varlistentry id="guc-log-destination" xreflabel="log_destination">
         <term><varname>log_destination</varname> (<type>string</type>)</term>
         <indexterm>
           <primary>paramètre de configuration 
             <varname>log_destination</></primary>
       </indexterm>
       <listitem>
         <para>
           <productname>PostgreSQL</productname> supporte plusieurs méthodes
           pour la journalisation des messages du serveur, dont
           <systemitem>stderr</systemitem> et
           <systemitem>syslog</systemitem>. Sur Windows, 
           <systemitem>eventlog</systemitem> est aussi supporté. Configurez
           cette option avec une liste de destinations désirées pour les
           journaux, séparées par des virgules. Par défaut, les traces vont
           seulement sur <systemitem>stderr</systemitem>. Cette option est
           seulement disponible au lancement du serveur et dans le fichier de
           configuration de <filename>postgresql.conf</filename>.
         </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-redirect-stderr" xreflabel="redirect_stderr">
       <term><varname>redirect_stderr</varname> (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>redirect_stderr</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Cette option autorise la capture et la redirection des messages
           envoyés vers <application>stderr</> dans des journaux de traces.
           Cette option, en combinaison avec les traces
           <application>stderr</>, est souvent plus utile que de tracer dans
           <application>syslog</> car certains types de messages pourraient ne
           pas apparaître dans la sortie <application>syslog</> (un exemple
           habituel concerne les messages d'échecs de l'éditeur de liens).
           Cette option est seulement disponible au lancement du serveur.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-directory" xreflabel="log_directory">
       <term><varname>log_directory</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_directory</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Quand <varname>redirect_stderr</> est activé, cette option
           détermine le répertoire dans lequel les fichiers de trace seront
           créés. Elle pourrait être spécifiée avec un chemin absolu ou
           relatif au répertoire des données du groupe. Cette option est
           seulement disponible au lancement du serveur ou dans le fichier
           <filename>postgresql.conf</filename>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-filename" xreflabel="log_filename">
       <term><varname>log_filename</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_filename</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, cette option
	   initialise les noms des fichiers des journaux créés. La valeur est
	   traitée comme un modèle <systemitem>strftime</systemitem>, du coup
	   les échappements <literal>%</literal> peuvent être utilisés pour
	   spécifier des noms de fichiers dépendant de l'heure. Si aucun
	   échappement <literal>%</literal> n'est présent,
	   <productname>PostgreSQL</productname> ajoutera l'époque de l'heure
	   d'ouverture du nouveau journal. Par exemple, si
	   <varname>log_filename</varname> valait <literal>server_log</literal>,
	   alors le nom de fichier choisi serait
	   <literal>server_log.1093827753</literal> pour un journal commençant
	   le dimanche 29 août 19:02:33 2004 MST. Cette option est seulement
	   disponible au lancement du serveur ou dans le fichier de configuration
	   <filename>postgresql.conf</filename>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
       <term><varname>log_rotation_age</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_rotation_age</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, cette option
	   détermine la durée de vie maximum d'un journal individuel. Après
	   que cette durée se soit écoulée, un nouveau journal sera créé.
	   Initialisez-la à zéro pour désactiver la création des nouveaux
	   journaux suivant un délai. Cette option est seulement disponible
	   au lancement du serveur ou dans le fichier de configuration
	   <filename>postgresql.conf</filename>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
       <term><varname>log_rotation_size</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_rotation_size</></primary>
       </indexterm>
       <listitem>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, cette option
	   détermine la taille maximum d'un journal individuel. Après ce nombre
	   d'octets, un nouveau journal est créé. Initialiser cette taille à
	   zéro désactive la création de nouveaux journaux suivant leur taille.
	   Cette option est seulement disponible au lancement du serveur ou dans
	   le fichier de configuration <filename>postgresql.conf</filename>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
       <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_truncate_on_rotation</></primary>
       </indexterm>
       <listitem>
         <para>
           Quand <varname>redirect_stderr</varname> est activé, cette option
	   fera que <productname>PostgreSQL</productname> tronque (surcharge),
	   plutôt qu'il n'ajoute à un journal de même nom. Néanmoins, ce
	   tronquage ne surviendra qu'à partir du moment où un nouveau fichier
	   sera ouvert à cause d'une rotation basée sur le temps, et non pas
	   suite au lancement du serveur ou suite à une rotation basée sur la
	   taille. Si false, les
	   fichiers déjà existants se verront ajoutés les nouvelles traces 
	   dans tous les cas. Par exemple, en utilisant cette option en
	   combinaison avec un <varname>log_filename</varname> comme
	   <literal>postgresql-%H.log</literal> résulterait en la génération
	   de 24 journaux (un pour chaque heure) puis les surchargera
	   cycliquement. Cette option est seulement disponible au lancement
	   du serveur ou dans le fichier de configuration
	   <filename>postgresql.conf</filename>.
         </para>
         <para>
           Exemple&nbsp;: pour conserver sept jours de traces, un fichier par
	   jour nommé <literal>server_log.Mon</literal>,
	   <literal>server_log.Tue</literal>, etc. et surcharger automatiquement
	   les traces de la semaine dernière avec ceux de cette semaine,
	   configurez <varname>log_filename</varname> à <literal>server_log.%a</literal>, 
	   <varname>log_truncate_on_rotation</varname> à <literal>true</literal>
	   et <varname>log_rotation_age</varname> à <literal>1440</literal>.
         </para>
         <para>
           Exemple&nbsp;: pour conserver 24 heures de traces, un journal par
	   heure mais aussi, faire une rotation plus souvent si le journal dépasse
	   1&nbsp;Go, configurez
	   <varname>log_filename</varname> à <literal>server_log.%H%M</literal>, 
	   <varname>log_truncate_on_rotation</varname> à <literal>true</literal>, 
	   <varname>log_rotation_age</varname> à <literal>60</literal> et
	   <varname>log_rotation_size</varname> à <literal>1000000</literal>.
	   Inclure <literal>%M</> dans <varname>log_filename</varname> permet des
	   rotations conduites par la taille qui pourraient survenir pour
	   sélectionner un nom de fichier différent du nom de fichier initial.
         </para>
       </listitem>
     </varlistentry>

<varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
  <term><varname>syslog_facility</varname> (<type>string</type>)</term>
  <indexterm>
    <primary>paramètre de configuration <varname>syslog_facility</></primary>
</indexterm>
       <listitem>
        <para>
          Lors que les traces <application>syslog</> sont activées, cette option
          détermine le niveau (<quote>facility</quote>) utilisé par
          <application>syslog</application>. Vous pouvez choisir entre
          <literal>LOCAL0</>, <literal>LOCAL1</>,
          <literal>LOCAL2</>, <literal>LOCAL3</>, <literal>LOCAL4</>,
          <literal>LOCAL5</>, <literal>LOCAL6</>, <literal>LOCAL7</>&nbsp;;
          la valeur par défaut est <literal>LOCAL0</>. Voir aussi la
          documentation du démon <application>syslog</application> de votre
	  serveur. Cette option ne se configure qu'au lancement du système.
        </para>
       </listitem>
     </varlistentry>
     
     <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
      <term><varname>syslog_ident</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>syslog_identity</></primary>
      </indexterm>
       <listitem>
        <para>
         Si <application>syslog</> est activé, cette option détermine le nom
         du programme utilisé pour identifier les messages de
         <productname>PostgreSQL</productname> dans les journaux de traces de
         <application>syslog</application>. La valeur par défaut est
	 <literal>postgres</literal>. Cette option ne se configure qu'au lancement du système.
        </para>
       </listitem>
      </varlistentry>
      
      </variablelist>
    </sect3>
     <sect3 id="runtime-config-logging-when">
     <title>Quand tracer</title>

     <variablelist>

     <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
      <term><varname>client_min_messages</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>client_min_messages</></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle les niveaux des messages envoyés au client. Les valeurs
        valides peuvent être <literal>DEBUG5</>,
        <literal>DEBUG4</>, <literal>DEBUG3</>, <literal>DEBUG2</>,
        <literal>DEBUG1</>, <literal>LOG</>, <literal>NOTICE</>,
        <literal>WARNING</> et <literal>ERROR</>. Chaque niveau inclut tous les
        niveaux qui le suivent. La valeur par défaut est <literal>NOTICE</>.
        Notez que <literal>LOG</> a un niveau différent que dans
        <varname>log_min_messages</>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
      <term><varname>log_min_messages</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_messages</></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle les niveaux des messages écrits dans les journaux de traces.
        Les valeurs valides sont <literal>DEBUG5</>, <literal>DEBUG4</>,
        <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>,
        <literal>INFO</>, <literal>NOTICE</>, <literal>WARNING</>,
        <literal>ERROR</>, <literal>LOG</>, <literal>FATAL</> et
        <literal>PANIC</>. Chaque niveau inclut tous les niveaux qui le
        suivent. Le niveau le plus bas obtient le plus petit nombre de
        messages. La valeur par défaut est <literal>NOTICE</>. Notez que
        <literal>LOG</> a un niveau différent que dans
        <varname>client_min_messages</>. Seuls les superutilisateurs peuvent
        modifier ce paramétrage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
      <term><varname>log_error_verbosity</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>log_error_verbosity</></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle le nombre de détails écrits dans les journaux de traces pour
        chaque message tracé. Les valeurs valides sont <literal>TERSE</>,
        <literal>DEFAULT</> et <literal>VERBOSE</>, chacune ajoutant plus de
	champs aux messages affichés. Seuls les superutilisateurs peuvent
        modifier ce paramétrage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
      <term><varname>log_min_error_statement</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_error_statement</></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle si l'instruction SQL ayant causé une erreur sera aussi
        enregistrée dans le journal des traces. Toutes les instructions SQL, qui
        causent une erreur du niveau spécifié ou d'un niveau plus haut, seront
        tracées. La valeur par défaut est <literal>PANIC</literal> (désactivant
        réellement cette fonctionnalité en production). Les valeurs valides sont
        <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>FATAL</literal> et <literal>PANIC</literal>. Par exemple, si
        vous l'initialisez à <literal>ERROR</literal>, alors toutes les
        instructions SQL causant des erreurs, fatales ou non, ou des paniques
        seront tracées. Activer cette option est utile pour localiser la source
        de toute erreur apparaissant dans le journal des traces. Seuls les
        superutilisateurs peuvent modifier ce paramétrage.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>log_min_duration_statement</></primary>
      </indexterm>
       <listitem>
        <para>
         Initialise un temps d'exécution minimum (en millisecondes) pour que
         l'instruction soit tracée. Toutes les instructions SQL exécutées dans
         le temps imparti ou prenant plus de temps seront tracées avec leur
         durée. L'initialiser à zéro tracera toutes les requêtes avec leur
         durée. -1 (la valeur par défaut) désactive cette fonctionnalité. Par exemple,
         si vous la configurez à <literal>250</literal>, toutes les instructions
         SQL s'exécutant en au moins 250&nbsp;ms seront tracées. Activer cette
         option peut se révéler utile pour tracer les requêtes non optimisées
         dans vos applications. Seuls les superutilisateurs peuvent modifier ce
	 paramétrage.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-silent-mode" xreflabel="silent_mode">
       <term><varname>silent_mode</varname> (<type>boolean</type>)</term>
       <indexterm>
        <primary>paramètre de configuration <varname>silent_mode</></primary>
       </indexterm>
       <listitem>
        <para>
         Exécute le serveur silencieusement. Si cette option est configurée, le
	 serveur se lancera automatiquement en tâche de fond et tout terminal
	 de contrôle sera dissocié (même effet que l'option <option>-S</option>
	 de <command>postmaster</>). La sortie standard et la sortie standard
	 des erreurs du serveur sont redirigées vers <literal>/dev/null</>, donc
	 tout message qui leur est adressé sera perdu. Sauf si le journal
	 <application>syslog</> est sélectionné ou que <varname>redirect_stderr</>
	 est activé, utiliser cette option n'est pas encouragé car il empêche de
	 voir les messages d'erreurs.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

       <para>
        Voici une liste des niveaux de sévérité utilisés dans ces
        paramétrages&nbsp;:
        <variablelist>
         <varlistentry>
          <term><literal>DEBUG[1-5]</literal></term>
          <listitem>
           <para>
            Fournit des informations utiles aux développeurs.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>INFO</literal></term>
          <listitem>
           <para>
            Fournit des informations implicitement demandées par l'utilisateur,
            par exemple lors d'un <command>VACUUM VERBOSE</>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>NOTICE</literal></term>
          <listitem>
           <para>
            Fournit des informations qui pourraient être utiles aux
            utilisateurs, par exemple lors du tronquage d'identifiants longs ou
            la création d'index faisant partie de clés primaires.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>WARNING</literal></term>
          <listitem>
           <para>
            Fournit des avertissements aux utilisateurs, par exemple un
            <command>COMMIT</> en dehors d'un bloc de transactions.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>ERROR</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a annulé la commande en cours.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>LOG</literal></term>
          <listitem>
           <para>
            Rapporte des informations intéressant les administrateurs, par
            exemple l'activité des points de vérification.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>FATAL</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a causé l'annulation de la session courante.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>PANIC</literal></term>
          <listitem>
           <para>
            Rapporte une erreur qui a causé l'annulation de toutes les sessions.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>

    </sect3>
     <sect3 id="runtime-config-logging-what">
     <title>Que tracer</title>
     
     <variablelist>
     
     <varlistentry>
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)</term>
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_parse</></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_rewritten</></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_print_plan</></primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_pretty_print</></primary>
      </indexterm>
      <listitem>
       <para>
        Ces options activent plusieurs sorties de débogage. Pour chaque requête
        exécutée, elles affichent l'arbre d'analyse résultant.
        <varname>debug_pretty_print</varname> indente ces affichages pour
        produire un format de sortie plus lisible mais plus long. 
        <varname>client_min_messages</varname> ou
        <varname>log_min_messages</varname> doivent valoir
        <literal>DEBUG1</literal> ou plus bas pour réellement envoyer cette
	sortie vers le client ou les traces du serveur, respectivement. Ces
	options sont désactivées par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-connections" xreflabel="log_connections">
      <term><varname>log_connections</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>log_connections</></primary>
      </indexterm>
      <listitem>
       <para>
        Ceci affiche une ligne dans les traces du serveur détaillant chaque
        connexion réussie. Désactivée par défaut, elle est probablement très
        utile. Cette option peut seulement être configurée au lancement du
        serveur ou dans le fichier de configuration
        <filename>postgresql.conf</filename>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
       <term><varname>log_disconnections</varname> (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_disconnections</></primary>
       </indexterm>
       <listitem>
         <para>
	 Ceci affiche dans les journaux du serveur une ligne similaire à
         <varname>log_connections</varname> mais à la fin d'une session
	 et inclut la durée de la session. Elle est désactivée par défaut.
	 Cette option est seulement disponible au lancement et dans le fichier
	 de configuration <filename>postgresql.conf</filename>.
         </para>
       </listitem>
     </varlistentry>


     <varlistentry id="guc-log-duration" xreflabel="log_duration">
       <term><varname>log_duration</varname> (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_duration</></primary>
       </indexterm>
       <listitem>
         <para>
           Fait que la durée d'une instruction terminée satisfaisant
           <varname>log_statement</> est tracée. En utilisant cette option, si
           vous n'utilisez pas <application>syslog</>, il est recommandé que
           vous traciez le PID ou l'ID de la session en utilisant
	   <varname>log_line_prefix</>, de façon à ce que vous puissiez lier
	   l'instruction  à la durée en utilisant l'ID du processus ou de la
	   session. Cette variable est désactivée par défaut. Seuls les
	   superutilisateurs peuvent modifier ce paramétrage.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
       <term><varname>log_line_prefix</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_line_prefix</></primary>
       </indexterm>
       <listitem>
       <para>
         Ceci est une chaîne style <function>printf</> qui est affichée au début
	 de chaque ligne de trace. La valeur par défaut est une chaîne vide.
	 Chaque échappement reconnu est remplacé comme indiqué ci-dessous - tout
	 ce qui reste et qui ressemble à un échappement est ignoré. Les autres
	 caractères sont copiés directement sur la ligne. Certains échappements
	 sont seulement reconnus par les processus de session et ne s'appliquent
	 pas aux processus en tâche de fond comme le postmaster.
	 <application>Syslog</> produit son propre marquage horaire et
	 informations d'ID sur le processus, donc vous ne voudrez probablement
	 pas utiliser ces échappements si vous utilisez <application>syslog</>.
	 Cette option est seulement disponible au lancement du serveur et dans le
	 fichier de configuration <filename>postgresql.conf</filename>.

<informaltable>
  <tgroup cols="3">
    <thead>
      <row>
        <entry>Échappement</entry>
        <entry>Effet</entry>
        <entry>Session seulement</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry><literal>%u</literal></entry>
        <entry>Nom de l'utilisateur</entry>
        <entry>oui</entry>
      </row>
      <row>
        <entry><literal>%d</literal></entry>
        <entry>Nom de la base de données</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%r</literal></entry>
        <entry>Nom ou adresse IP de l'hôte distant et port distant</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%p</literal></entry>
        <entry>ID du processus</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%t</literal></entry>
        <entry>Marquage horaire</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%i</literal></entry>
        <entry>Balise de commande&nbsp;: la commande qui a généré cette trace.</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%c</literal></entry>
        <entry>ID de session&nbsp;: un identifiant unique pour chaque session.
          Ce sont deux numéros hexadécimaux sur quatre octets (sans zéros devant)
          séparés par un point. Les nombres sont l'heure de début de la session et
	  son ID de processus, donc ceci peut aussi être utilisé comme moyen de
	  sauvegarde  pour ces éléments.</entry>
        <entry>oui</entry>
      </row>
      <row>
        <entry><literal>%l</literal></entry>
        <entry>Numéro de la ligne de traces pour chaque processus, commençant à 1</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%s</literal></entry>
        <entry>Marquage horaire du début de session</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%x</literal></entry>
        <entry>ID de la transaction</entry>
	<entry>oui</entry>
      </row>
      <row>
        <entry><literal>%q</literal></entry>
        <entry>Ne produit aucune sortie, mais indique aux autres processus
	  de stopper à cet endroit dans la chaîne. Ignoré par les processus
          de session.</entry>
        <entry>non</entry>
      </row>
      <row>
        <entry><literal>%%</literal></entry>
        <entry>Littéral <literal>%</></entry>
        <entry>non</entry>
    </row>
  </tbody>
</tgroup>
</informaltable>
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement" xreflabel="log_statement">
       <term><varname>log_statement</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_statement</></primary>
       </indexterm>
       <listitem>
         <para>
           Contrôle les instructions SQL tracées. Les valeurs valides sont 
	   <literal>none</>, <literal>ddl</>, <literal>mod</> et
	   <literal>all</>. <literal>ddl</> trace toutes les commandes de
	   définition comme <literal>CREATE</>, <literal>ALTER</> et
	   <literal>DROP</>. <literal>mod</> trace toutes les instructions
	   <literal>ddl</>, plus <literal>INSERT</>,
	   <literal>UPDATE</>, <literal>DELETE</>, <literal>TRUNCATE</>
	   et <literal>COPY FROM</>. Les instructions <literal>PREPARE</> et
	   <literal>EXPLAIN ANALYZE</> sont aussi tracées si leur commande
	   contenue est d'un type approprié.
         </para>

         <para>
           La valeur par défaut est <literal>none</>. Seuls les superutilisateurs
	   peuvent changer ce paramétrage.
	</para>

	<note>
	  <para>
            L'instruction <command>EXECUTE</command> n'est pas considérée comme
	    une instruction <literal>ddl</> ou <literal>mod</>. Quand elle est
	    tracée, seul le nom de l'instruction préparée est rapporté, pas
	    l'instruction préparée réelle.
	  </para>

	  <para>
	    Quand une fonction est définie dans le langage côté serveur
	    <application>PL/pgSQL</application>, toute requête exécutée par
	    la fonction sera seulement tracée la première fois que la fonction
	    est appelée d'une session particulière. Ceci est dû au fait que
	    <application>PL/pgSQL</application> conserve un cache des plans de
	    requête produits par les instructions SQL dans la fonction.
	  </para>
	</note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
       <term><varname>log_hostname</varname> (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>log_hostname</></primary>
       </indexterm>
       <listitem>
         <para>
           Par défaut, les messages de traces de connexion affichent seulement
	   l'adresse IP de l'hôte se connectant. Activer cette option causera
	   la trace du nom de l'hôte. Notez que, suivant votre configuration de
	   résolution de nom d'hôte, ceci pourrait imposer une pénalité de
	   performance non négligeable. Cette option est seulement disponible
	   au lancement du serveur ou dans le fichier
	   <filename>postgresql.conf</filename>.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
    </sect3>
   </sect2>

   <sect2 id="runtime-config-statistics">
    <title>Statistiques d'exécution</title>

    <sect3 id="runtime-config-statistics-monitor">
     <title>Surveillance des statistiques</title>
     <variablelist>

     <varlistentry>
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>log_statement_stats</></primary>
      </indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>log_parser_stats</></primary>
      </indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>log_planner_stats</></primary>
      </indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>log_executor_stats</></primary>
      </indexterm>
      <listitem>
       <para>
        Pour chaque requête, écrit les statistiques de performance du module
        respectif dans les journaux de trace. Ceci est un outil brut de
	profilage. <varname>log_statement_stats</varname> rapporte les statistiques
	totales sur les instructions alors que les autres rapportent des statistiques
	par module. <varname>log_statement_stats</varname> ne peut pas être activé
	avec toute option par module. Toutes ces options sont désactivées par
	défaut. Seuls les superutilisateurs peuvent modifier ces paramétrages.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect3>
    <sect3 id="runtime-config-statistics-collector">
     <title>Collecteur des statistiques sur les requêtes et les index</title>
     <variablelist>

     <varlistentry id="guc-stats-start-collector" xreflabel="stats_start_collector">
      <term><varname>stats_start_collector</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_start_collector</></primary>
      </indexterm>
      <listitem>
       <para>
        Contrôle si le serveur doit lancer le sous-processus de récupération de
        statistiques. Il est activé par défaut mais pourrait être enlevé si
        vous n'avez aucun intérêt dans la récupération de statistiques.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-command-string" xreflabel="stats_command_string">
      <term><varname>stats_command_string</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_command_string</></primary>
      </indexterm>
      <listitem>
       <para>
        Active la récupération de statistiques sur les commandes en cours
        d'exécution par chaque session, avec le moment de l'exécution de la
        commande. Cette option est désactivée par défaut. Notez que, même après
        son activation, cette information n'est pas visible par tous les
        utilisateurs, mais seulement par les superutilisateurs et l'utilisateur
        possédant la session. Donc, cela ne devrait pas représenter un risque de
        sécurité. La donnée est accessible via la vue système
        <structname>pg_stat_activity</structname>&nbsp;; référez-vous au <xref
        linkend="monitoring"> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-block-level" xreflabel="stats_block_level">
      <term><varname>stats_block_level</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_block_level</></primary>
      </indexterm>
      <listitem>
       <para>
        Active la récupération des statistiques au niveau bloc sur l'activité
	de la base de données. Cette option est désactivée par défaut. Si cette
	option est activée, les données produites sont accessibles via la
	famille de vues système <structname>pg_stat</structname> et
	<structname>pg_statio</structname>&nbsp;; référez-vous au
	<xref linkend="monitoring"> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-row-level" xreflabel="stats_row_level">
      <term><varname>stats_row_level</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_row_level</></primary>
      </indexterm>
      <listitem>
       <para>
        Active la récupération de statistiques au niveau ligne sur l'activité
	de la base de données. Cette option est désactivée par défaut. Si cette
	option est activée, les données produites sont accessibles via la
	famille de vues système <structname>pg_stat</structname> et
	<structname>pg_statio</structname>&nbsp;; référez-vous au
	<xref linkend="monitoring"> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-reset-on-server-start" xreflabel="stats_reset_on_server_start">
      <term><varname>stats_reset_on_server_start</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>stats_reset_on_server_start</></primary>
      </indexterm>
      <listitem>
       <para>
        Si elle est activée, les statistiques récupérées sont vidées à chaque
	fois que le serveur est redémarré. Dans le cas contraire, les statistiques
	sont cumulées après les redémarrages de serveur. Actif par défaut. Cette
	option peut seulement être configuré au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect3>
   </sect2>

   <sect2 id="runtime-config-client">
    <title>Valeurs par défaut des connexions client</title>

    <sect3 id="runtime-config-client-statement">
     <title>Comportement des instructions</title>
     <variablelist>

     <varlistentry id="guc-search-path" xreflabel="search_path">
      <term><varname>search_path</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>search_path</></primary>
      </indexterm>
      <indexterm><primary>path</><secondary>pour schémas</></>
      <listitem>
       <para>
        Cette variable spécifie l'ordre dans lequel les schémas sont recherchés
        lorsqu'un objet (table, type de données, fonction, etc.) est référencé
        par un simple nom sans son composant schéma. Quand il existe des noms
        identiques dans différents schémas, le premier trouvé dans le chemin de
        recherche est utilisé. Un objet qui ne fait partie d'aucun des schémas
        du chemin de recherche peut seulement être référencé en spécifiant son
        schéma conteneur avec un nom qualifié.
       </para>

       <para>
        La valeur de <varname>search_path</varname> doit être une liste de noms
        de schémas séparés par des virgules. Si un des éléments de la liste est
        la valeur spéciale <literal>$user</literal>, alors le schéma ayant le
        nom renvoyé par <function>SESSION_USER</> est substitué, si un tel
        schéma existe (sinon <literal>$user</literal> est ignoré).
       </para>

       <para>
        Le schéma du catalogue système, <literal>pg_catalog</>, est toujours
        recherché, qu'il soit ou non mentionné dans le chemin. S'il est
        mentionné, alors il sera cherché dans l'ordre spécifié. Si
        <literal>pg_catalog</> ne fait pas partie du chemin, alors il sera
        cherché <emphasis>avant</> tout élément du chemin. Il devrait aussi être
        noté que le schéma des tables temporaires,
        <literal>pg_temp_<replaceable>nnn</></>, est cherché implicitement avant
        tout autre.
       </para>

       <para>
        Lorsque des objets sont créés sans spécifier un schéma cible
        particulier, ils sont placés dans le premier schéma listé dans le chemin
        de recherche. Une erreur est rapportée si le chemin de recherche est
        vide.
       </para>

       <para>
        La valeur par défaut de ce paramètre est <literal>'$user,
        public'</literal> (où la deuxième partie sera ignorée s'il n'existe pas
        de schéma nommé <literal>public</>). Elle supporte l'utilisation
        partagée d'une base de données (où aucun utilisateur n'a de schémas
        privés et tous partagent l'utilisation de <literal>public</>), de
        schémas privés par utilisateur et une combinaison des deux. D'autres
        effets peuvent être obtenus en modifiant le chemin de recherche par
        défaut soit globalement soit par utilisateur.
       </para>

       <para>
        La valeur réelle actuelle du chemin de recherche peut être examinée via
        la fonction <acronym>SQL</acronym> <function>current_schemas()</>. 
        Elle n'est pas identique à la valeur de <varname>search_path</varname>,
        car <function>current_schemas()</> affiche comment la requête
        apparaissant dans <varname>search_path</varname> sera résolue.
       </para>

       <para>
        Pour plus d'informations sur la gestion des schémas, voir la <xref
        linkend="ddl-schemas">.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
       <term><varname>default_tablespace</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>default_tablespace</></primary>
       </indexterm>
       <indexterm><primary>espace logique</><secondary>par défaut</></>
       <listitem>
         <para>
           Cette variable spécifie l'espace logique par défaut dans lequel créé
	   les objets (tables et index) quand une commande <command>CREATE</> ne
	   spécifie par explicitement un espace logique.
	</para>

	<para>
	  La valeur est soit le nom de l'espace logique soit une chaîne vide pour
	  indiquer l'utilisation de l'espace logique par défaut de la base de
	  données en cours. Si la valeur ne correspond pas au nom d'une base de
	  données existantes, <productname>PostgreSQL</> utilisera automatiquement
	  l'espace logique par défaut de la base de données en cours.
	</para>

	<para>
	  Pour plus d'informations sur les espaces logiques, voir la <xref
	  linkend="manage-ag-tablespaces">.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>check_function_bodies</></primary>
      </indexterm>
      <listitem>
        <para>
          Ce paramètre est habituellement à true. Lorsqu'il vaut false, il
	  désactive la validation de la chaîne du corps de la fonction lors
	  de <xref linkend="sql-createfunction"
	  endterm="sql-createfunction-title">. Désactiver la validation est
	  quelque fois utile pour éviter des problèmes tels que les références
	  avant lors de la restauration des définitions de fonctions à partir
	  d'une sauvegarde.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
      <indexterm>
        <primary>niveau d'isolation de la transaction</primary>
      </indexterm>
      <indexterm>
        <primary>paramètre de configuration <varname>default_transaction_isolation</></primary>
      </indexterm>
      <term><varname>default_transaction_isolation</varname> (<type>string</type>)</term>
      <listitem>
        <para>
          Chaque transaction SQL a un niveau d'isolation, qui peut être soit
	  <quote>read uncommitted</quote>, soit <quote>read committed</quote>,
	  soit <quote>repeatable read</quote> soit <quote>serializable</quote>.
	  Ce paramètre contrôle le niveau d'isolation par défaut de chaque
	  nouvelle transaction. Par défaut, <quote>read committed</quote>.
        </para>

        <para>
          Consultez <xref linkend="mvcc"> et <xref linkend="sql-set-transaction">
          pour plus d'informations.
        </para>
      </listitem>
    </varlistentry>

     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
      <indexterm>
       <primary>transaction en lecture seule</primary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>default_transaction_read_only</></primary>
      </indexterm>

      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        Une transaction SQL en lecture seule ne pourrait pas modifier les 
        tables non temporaires. Ce paramètre contrôle le statut de lecture seule
        par défaut de chaque nouvelle transaction. La valeur par défaut est faux
        (lecture/écriture).
       </para>

       <para>
        Consultez <xref linkend="sql-set-transaction"> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
      <term><varname>statement_timeout</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>statement_timeout</></primary>
      </indexterm>
      <listitem>
       <para>
        Annule toute instruction prenant plus que le nombre spécifié de
        millisecondes. Une valeur de zéro désactive le chronomètre et est la
        valeur par défaut.
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
    </sect3>
     <sect3 id="runtime-config-client-format">
     <title>Locale et formatage</title>

     <variablelist>

       <varlistentry id="guc-datestyle" xreflabel="DateStyle">
         <term><varname>DateStyle</varname> (<type>string</type>)</term>
         <indexterm>
           <primary>paramètre de configuration <varname>DateStyle</></primary>
       </indexterm>
       <listitem>
         <para>
           Configure le format d'affichage pour les valeurs de type date et
           heure, ainsi que les règles d'interprétation des valeurs de saisie
           des dates ambiguës. Pour des raisons historiques, cette variable
           contient deux composants indépendants&nbsp;: la spécification du
           format en sortie (<literal>ISO</>, <literal>Postgres</>,
           <literal>SQL</> ou <literal>German</>) et la spécification en
           entrée/sortie pour l'ordre année/mois/jour (<literal>DMY</>,
           <literal>MDY</> ou <literal>YMD</>). Elles peuvent être
           configurées séparément ou ensemble. Les mots clés <literal>Euro</>
           et <literal>European</> sont un synonyme pour
           <literal>DMY</>&nbsp;; les mots clés <literal>US</>,
           <literal>NonEuro</> et <literal>NonEuropean</> sont des synonymes
           pour <literal>MDY</>. Voir la <xref linkend="datatype-datetime"> pour
           plus d'informations. La valeur par défaut est <literal>ISO, MDY</>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="timezone">
       <term><varname>timezone</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>timezone</></primary>
       </indexterm>
       <indexterm><primary>fuseau horaire</></>
       <listitem>
         <para>
           Configure le fuseau horaire pour l'affichage et l'interprétation
           de la date et de l'heure. Par défaut, vaut 'unknown', ce qui
           signifie qu'il utilise ce que l'environnement système spécifie
           comme fuseau horaire. Voir la <xref linkend="datatype-datetime">
           pour plus d'informations.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-australian-timezones"
       xreflabel="australian_timezones">
       <term><varname>australian_timezones</varname>
         (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>australian_timezones</>
           </primary>
       </indexterm>
       <indexterm><primary>fuseau horaire</><secondary>Australie</></>
      <listitem>
       <para>
        Si vrai, <literal>ACST</literal>,
        <literal>CST</literal>, <literal>EST</literal> et
        <literal>SAT</literal> sont interprétés comme des fuseaux horaires
        australiens plutôt que comme des fuseaux horaires d'Amérique Nord/Sud.
        Par défaut à faux.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
      <indexterm>
       <primary>chiffres significatifs</primary>
      </indexterm>
      <indexterm>
       <primary>nombre à virgule flottante</primary>
       <secondary>affichage</secondary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>extra_float_digits</></primary>
      </indexterm>

      <term><varname>extra_float_digits</varname> (<type>integer</type>)</term>
      <listitem>
       <para>
        Ce paramètre ajuste le nombre de chiffres affichés par les valeurs à
        virgule flottante, ceci incluant <type>float4</>, <type>float8</> et les
        types de données géométriques. La valeur du paramètre est ajouté au
        nombre standard de chiffres (<literal>FLT_DIG</> ou <literal>DBL_DIG</>
        comme approprié). La valeur peut être initialisée à une valeur maximum
        de 2 pour inclure les chiffres partiellement significatifs&nbsp;; c'est
        tout spécialement utile pour sauvegarder les données à virgule flottante
        qui ont besoin d'être restaurées exactement. Cette variable peut aussi
        être négative pour supprimer les chiffres non souhaités.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
      <term><varname>client_encoding</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>client_encoding</></primary>
      </indexterm>
      <indexterm><primary>character set</></>
      <listitem>
       <para>
        Initialise le codage côté client (ensemble de caractères). Par défaut,
        utilise le codage de la base de données.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
      <term><varname>lc_messages</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_messages</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise la langue dans laquelle les messages sont affichés. Les
        valeurs acceptables sont dépendantes du système&nbsp;; voir <xref
        linkend="locale"> pour plus d'informations. Si cette variable est
        initialisée en tant que chaîne vide (ce qui est la valeur par défaut),
        alors la valeur est héritée de l'environnement d'exécution du serveur.
       </para>

       <para>
        Avec certains systèmes, cette catégorie de locale n'existe pas.
        Initialiser cette variable fonctionnera toujours mais n'aura aucun
        effet. De même, il existe une chance pour qu'aucun message traduit
        n'existe pour la langue sélectionnée. Dans ce cas, vous continuerez de
        voir les messages en anglais.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
      <term><varname>lc_monetary</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_monetary</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise la locale à utiliser pour formater les montants de monnaie,
        par exemple avec la famille de fonctions <function>to_char</function>.
        Les valeurs acceptables dépendent du système&nbsp;; voir la <xref
        linkend="locale"> pour plus d'informations. Si cette variable est une
        chaîne vide (la valeur par défaut), alors la valeur est héritée de
        l'environnement d'exécution du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
      <term><varname>lc_numeric</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_numeric</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise la locale à utiliser pour formater les nombres, par exemple
        avec la famille de fonctions <function>to_char</function>. Les valeurs
        acceptables dépendent du système&nbsp;; voir la <xref linkend="locale">
        pour plus d'informations. Si cette variable est une chaîne vide (valeur
        par défaut), alors la valeur est héritée de l'environnement d'exécution
        du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
      <term><varname>lc_time</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_time</></primary>
      </indexterm>
      <listitem>
       <para>
        Initialise la locale à utiliser pour formater les valeurs de date et
        d'heure (actuellement, ce paramétrage ne fait rien mais il le pourrait
        dans le futur). Les valeurs acceptables dépendent du système&nbsp;; voir
        la <xref linkend="locale"> pour plus d'informations. Si cette variable est
        une chaîne vide (la valeur par défaut), alors la valeur est héritée de
        l'environnement système du serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect3>
     <sect3 id="runtime-config-client-other">
     <title>Autres valeurs par défaut</title>

     <variablelist>

     <varlistentry id="guc-explain-pretty-print" xreflabel="explain_pretty_print">
      <term><varname>explain_pretty_print</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>explain_pretty_print</></primary>
      </indexterm>
      <listitem>
       <para>
        Détermine si <command>EXPLAIN VERBOSE</> utilise le format indenté ou
        non pour l'affichage des arbres détaillés des requêtes. Activé par
        défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-dynamic-library-path" 
       xreflabel="dynamic_library_path">
       <term><varname>dynamic_library_path</varname>
         (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration 
           <varname>dynamic_library_path</></primary>
       </indexterm>
       <indexterm><primary>chargement dynamique</></>
       <listitem>
         <para>
           Si un module chargeable dynamiquement a besoin d'être ouvert et
           que le nom de fichier spécifié dans la commande <command>CREATE
           FUNCTION</command> ou <command>LOAD</command> ne contient pas de
           répertoire (c'est-à-dire que le nom ne contient pas de slash), le
           système cherchera ce chemin pour le fichier requis.
         </para>
  
         <para>
           La valeur pour <varname>dynamic_library_path</varname> doit être
           une liste de chemins absolus séparés par des virgules (ou des
           points virgules sous Windows).  Si un élément de la liste commence
           avec la chaîne spéciale <literal>$libdir</literal>, le répertoire
           des bibliothèques internes du paquetage
           <productname>PostgreSQL</productname> est substitué à
           <literal>$libdir</literal>. C'est l'emplacement où sont installés
           les modules fournis par la distribution
           <productname>PostgreSQL</productname> standard (utilisez
           <literal>pg_config --pkglibdir</literal> pour connaître le nom de
           ce répertoire). Par exemple&nbsp;:
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
           ou dans un environnement Windows&nbsp;:
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
         </para>

       <para>
        La valeur par défaut de ce paramètre est <literal>'$libdir'</literal>.
        Si la valeur est une chaîne vide, la recherche automatique du chemin est
        désactivée.
       </para>

       <para>
        Ce paramètre peut être modifié à l'exécution par les superutilisateurs
        mais un paramétrage réalisé de cette façon ne persistera que pendant la
        durée de la connexion du client, donc cette méthode devrait être
        réservée à des buts de développements. La façon recommandée
        pour initialiser ce paramètre est d'utiliser le fichier de configuration
        <filename>postgresql.conf</filename>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect3>
   </sect2>

   <sect2 id="runtime-config-locks">
    <title>Gestion des verrous</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>deadlock_timeout</></primary>
      </indexterm>

      <term><varname>deadlock_timeout</varname> (<type>integer</type>)</term>
      <listitem>
       <para>
        Temps total, en millisecondes, d'attente d'un verrou avant de vérifier
        s'il s'agit d'une condition de verrous morts (deadlock condition). La
        vérification d'un verrou mort est assez lente, donc le serveur ne le
        fait pas à chaque fois qu'il attend pour un verrou. Nous supposons (de
        façon optimiste) que les verrous morts ne sont pas communs pour les
        applications de production et nous attendons simplement un verrou
        pendant un certain temps avant de lancer une recherche de blocage.
        Augmenter cette valeur réduit le temps perdu en recherche inutile de
        verrous morts mais ralentit la détection de vraies erreurs de verrous
        morts. La valeur par défaut est de 1000 (c'est-à-dire une par seconde),
        ce qui est probablement la plus petite valeur que vous pourriez vouloir
        en pratique. Sur un serveur déjà chargé, vous pouvez
        l'augmenter. Idéalement, ce paramétrage devrait dépasser le temps
        typique d'une transaction de façon à améliorer la probabilité qu'un
        verrou soit abandonné avant que le processus en attente ne décide de
        lancer une recherche de verrous morts.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>max_locks_per_transaction</></primary>
      </indexterm>
      <listitem>
       <para>
        La table des verrous partagés a une taille basée sur la supposition
        que au moins <varname>max_locks_per_transaction</varname> *
        <varname>max_connections</varname> objets distincts seront nécessaires
	pour être verrouillés en même temps. (De coup, le nom de ce paramètre
	pourrait rendre confus&nbsp;: il n'y a pas de limite dur sur le nombre
	de verrous pris par une transaction, mais plutôt une valeur moyenne
	oui	maximum.) Par défaut, 64, qui a prouvé son
        adéquation historiquement mais vous pourriez avoir besoin d'augmenter
        cette valeur si vous avez des clients qui touchent beaucoup de tables
        différentes dans une seule transaction. Cette option est initialisée au
        lancement du serveur uniquement.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect2>

   <sect2 id="runtime-config-compatible">
    <title>Compatibilité de version et de plateforme</title>

    <sect3 id="runtime-config-compatible-version">
     <title>Précédentes versions de PostgreSQL</title>
     <variablelist>

     <varlistentry id="guc-add-missing-from" xreflabel="add_missing_from">
      <term><varname>add_missing_from</varname> (<type>boolean</type>)</term>
      <indexterm><primary>FROM</><secondary>manquant</></>
      <indexterm>
       <primary>paramètre de configuration <varname>add_missing_from</></primary>
      </indexterm>
      <listitem>
       <para>
        Si <literal>true</>, les tables qui sont référencées par une requête
        seront automatiquement ajoutées dans la clause <literal>FROM</> si elles
        n'y sont pas déjà présentes. La valeur par défaut est <literal>true</>
        pour des raisons de compatibilité avec les versions précédentes de
        <productname>PostgreSQL</>. Néanmoins, ce comportement n'appartient pas
        au standard SQL et beaucoup de personnes ne l'aiment pas car elle peut
	masquer les erreurs (comme référencer une table où vous devriez avoir
        référencé son alias). L'initialiser à <literal>false</> pour avoir un
        comportement en compatibilité avec le standard SQL permet de rejeter les
        références non listés dans la clause <literal>FROM</>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>string</type>)</term>
      <indexterm><primary>strings</><secondary>backslash quotes</></>
      <indexterm>
       <primary>paramètre de configuration <varname>backslash_quote</></primary>
      </indexterm>
      <listitem>
       <para>
        Ceci contrôle si un guillemet peut être représenté par un
        <literal>\'</> dans une chaîne. Le moyen préféré, standard SQL, pour
        représenter un guillemet est de le doubler (<literal>''</>) mais,
        historiquement, <productname>PostgreSQL</> accepte aussi
        <literal>\'</>. Néanmoins, l'utilisation de <literal>\'</> ajoute des
        problèmes liés à la sécurité car certains codages d'ensembles de caractères
	des clients contiennent des caractères multi-octets dans lesquel le dernier
	octet est l'équivant ASCII numérique d'un <literal>\</>. Si le code côté
	client ne fait pas un échappement correct, alors une attaque par injection
	SQL est possible. Ce risque peut être annihilé en s'assurant que le 
	serveur rejette les requêtes dans lesquelles apparait un guillemet à
	échapper avec un antislash. Les valeurs autorisées de
	<varname>backslash_quote</> sont
        <literal>on</> (autorise <literal>\'</> en permanence),
        <literal>off</> (rejette en permanence) et
        <literal>safe_encoding</> (l'autorise seulement si le codage du client
	n'autorise pas l'ASCII <literal>\</> dans un caractère multioctet).
        <literal>safe_encoding</> est le paramétrage par défaut.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-with-oids" xreflabel="default_with_oids">
       <term><varname>default_with_oids</varname>
         (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>default_with_oids</>
           </primary>
       </indexterm>
       <listitem>
         <para>
           Elle contrôle si les commandes <command>CREATE TABLE</command> et
           <command>CREATE TABLE AS</command> incluent une colonne OID dans
           les tables nouvellement créées, si ni <literal>WITH OIDS</literal>
           ni <literal>WITHOUT OIDS</literal> ne sont spécifiées. Elle
           détermine aussi si les OID seront inclus dans les tables créés par
           <command>SELECT INTO</command>. Dans 
           <productname>PostgreSQL</productname> &version;, la valeur par
           défaut de <varname>default_with_oids</varname> est true. C'est
           aussi le comportement des versions précédentes de
           <productname>PostgreSQL</productname>. Néanmoins, supposer que les
           tables contiendront des OID par défaut n'est pas encouragé. Cette
           option aura probablement la valeur false par défaut dans une future
           version de <productname>PostgreSQL</productname>.
         </para>
       
         <para>
           Pour faciliter la compatibilité avec les applications utilisant les
           OID, cette option devrait être activée. Pour faciliter la 
           compatibilité avec les futures versions de 
           <productname>PostgreSQL</productname>, cette option devrait être
           désactivée et les applications réclamant des OID sur certaines
           tables devraient spécifier explicitement <literal>WITH
           OIDS</literal> lors de la création de ces tables.
         </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-regex-flavor" xreflabel="regex_flavor">
      <term><varname>regex_flavor</varname> (<type>string</type>)</term>
      <indexterm><primary>expressions rationnelles</></>
      <indexterm>
       <primary>paramètre de configuration <varname>regex_flavor</></primary>
      </indexterm>
      <term><varname>regex_flavor</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        La <quote>saveur</> des expressions rationnelles peut être
        <literal>advanced</> (avancée), <literal>extended</> (étendue) ou
        <literal>basic</> (basique). La valeur par défaut est
        <literal>advanced</>. Le paramétrage <literal>extended</> peut être
        utile pour une compatibilité ascendante exacte avec les versions
	précédant la 7.4 de <productname>PostgreSQL</>. Voir la
        <xref linkend="posix-syntax-details"> pour les détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sql-inheritance" xreflabel="sql_inheritance">
      <term><varname>sql_inheritance</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>sql_inheritance</></primary>
      </indexterm>
      <indexterm><primary>inheritance</></>
      <listitem>
       <para>
        Ceci contrôle la sémantique de l'héritage, en particulier si les
        sous-tables sont incluses par les différentes commandes par défaut.
        Elles ne l'étaient pas dans les versions antérieures à la 7.1. Si vous
        avez besoin de l'ancien comportement, vous pouvez désactiver cette
        variable mais, à long terme, vous êtes encouragé à changer vos
        applications pour utiliser le mot clé <literal>ONLY</literal> qui exclut
        les sous-tables. Voir la <xref linkend="ddl-inherit"> pour plus
        d'informations sur les héritages.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
    </sect3>
    
    <sect3 id="runtime-config-compatible-clients">
     <title>Compatibilité de la plateforme et du client</title>
     <variablelist>

     <varlistentry id="guc-transform-NULL-equals" xreflabel="transform_NULL_equals">
      <term><varname>transform_NULL_equals</varname> (<type>boolean</type>)</term>
      <indexterm><primary>IS NULL</></>
      <indexterm>
       <primary>paramètre de configuration <varname>transform_NULL_equals</></primary>
      </indexterm>
      <listitem>
       <para>
        Une fois activée, les expressions de la forme
        <literal><replaceable>expr</> = NULL</literal> (ou <literal>NULL
        = <replaceable>expr</></literal>) sont traitées comme
        <literal><replaceable>expr</> IS NULL</literal>, c'est-à-dire qu'elles
        renvoient vrai si <replaceable>expr</> s'évalue par la valeur NULL, et
        faux sinon. Le bon comportement, compatible avec le standard SQL, de
	<literal><replaceable>expr</> = NULL</literal> est de toujours renvoyer
	NULL (inconnu). Du coup, cette option est désactivée par défaut.
       </para>

       <para>
        Néanmoins, les formulaires filtrés dans <productname>Microsoft
        Access</productname> génèrent des requêtes qui utilisent
        <literal><replaceable>expr</> = NULL</literal> pour tester les valeurs
        NULL, donc si vous utilisez cette interface pour accéder à une base de
        données, vous souhaiterez activer cette option. Comme les
        expressions de la forme <literal><replaceable>expr</> = NULL</literal>
        renvoient toujours la valeur NULL (en utilisant la bonne
        interprétation), elles ne sont pas très utiles et n'apparaissent pas
        souvent dans les applications normales, donc cette option a peu
        d'utilité en pratique. Mais les nouveaux utilisateurs confondent
        fréquemment la sémantique des expressions impliquant des valeurs NULL.
        Du coup, cette option n'est pas activée par défaut.
       </para>

       <para>
        Notez que cette option affecte seulement la forme exacte
        <literal>= NULL</>, aucun autre opérateur de comparaison ou aucune autre
        expression qui sont équivalentes en terme de calcul à des expressions
        impliquant l'opérateur égal (telles que <literal>IN</literal>). Du coup,
        cette option n'est pas un correctif général pour une mauvaise
programmation.
       </para>

       <para>
        Référez-vous à la <xref linkend="functions-comparison"> pour des
        informations en relation.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect3>
   </sect2>

   <sect2 id="runtime-config-preset">
     <title>Options préconfigurées</title>

     <para>
       Les <quote>paramètres</> suivant sont en lecture seule et sont
       déterminés lors de la compilation ou de l'installation de
       <productname>PostgreSQL</productname>. Ainsi, ils ont été exclus du
       fichier <filename>postgresql.conf</> d'exemple. Ces options rapportent
       différents aspects du comportement de <productname>PostgreSQL</productname>
       qui pourraient avoir un intérêt pour certaines applications,
       particulièrement pour les interfaces d'administration.
     </para>

     <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
       <term><varname>block_size</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>block_size</></primary>
       </indexterm>
       <listitem>
         <para>
           Affiche la taille d'un bloc disque. Elle est déterminée par la valeur
           de <literal>BLCKSZ</> à la construction du serveur. La valeur par
           défaut est de 8192&nbsp;octets. La signification de quelques variables
	   de configuration (comme <xref linkend="guc-shared-buffers">) est
	   influencée par <varname>block_size</varname>. Voir la <xref
	   linkend="runtime-config-resource"> pour plus d'informations.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
       <term><varname>integer_datetimes</varname> (<type>boolean</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>integer_datetimes</></primary>
       </indexterm>
       <listitem>
         <para>
           Affiche si <productname>PostgreSQL</productname> a été construit avec
	   le support des dates et heures sur des entiers de 64 bits. Il est
	   configuré en utilisant <literal>--enable-integer-datetimes</literal>
	   au moment de la construction de <productname>PostgreSQL</productname>.
	   La valeur par défaut est <literal>off</literal>.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
       <term><varname>lc_collate</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>lc_collate</></primary>
       </indexterm>
       <listitem>
         <para>
           Affiche la locale utilisée pour le tri des données de type texte.
	   Voir la <xref linkend="locale"> pour plus d'informations. La valeur est
	   déterminée lors de l'initialisation du groupe de bases de données.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
       <term><varname>lc_ctype</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>lc_ctype</></primary>
       </indexterm>
       <listitem>
         <para>
           Affiche la locale déterminant les classifications de caractères.
	   Voir la <xref linkend="locale"> pour plus d'informations. La valeur
	   est déterminée au moment de l'initialisation du groupe de bases de
	   données. D'habitude, elle sera identique à <varname>lc_collate</varname>
	   mais, pour des applications particulières, elle pourrait être
	   configurée différemment.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
       <term><varname>max_function_args</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>max_function_args</></primary>
       </indexterm>
       <listitem>
         <para>
           Affiche le nombre maximum d'arguments des fonctions. Ce nombre est
	   déterminé par la valeur de <literal>FUNC_MAX_ARGS</> lors de la
	   construction du serveur. La valeur par défaut est de 32.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
       <term><varname>max_identifier_length</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>max_identifier_length</></primary>
       </indexterm>
       <listitem>
         <para>
           Affiche la longueur maximum d'un identifiant. Elle est déterminée comme
	   valant <literal>NAMEDATALEN</> moins un lors de la construction du
	   serveur. La valeur par défaut de <literal>NAMEDATALEN</> est 64&nbsp;;
	   du coup, la valeur par défaut de <varname>max_identifier_length</varname>
	   est 63.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
       <term><varname>max_index_keys</varname> (<type>integer</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>max_index_keys</></primary>
       </indexterm>
       <listitem>
         <para>
           Affiche le nombre maximum de clés d'index. Ce nombre est déterminé
	   par la valeur de <literal>INDEX_MAX_KEYS</> lors de la construction
	   du serveur. La valeur par défaut est 32.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
       <term><varname>server_encoding</varname> (<type>string</type>)</term>
       <indexterm>
         <primary>paramètre de configuration <varname>server_encoding</></primary>
       </indexterm>
       <indexterm><primary>ensemble de caractères</></>
       <listitem>
         <para>
           Affiche le codage de la base de données (ensemble de caractères).
	   Il est déterminé lors de la création de la base de données.
	   Habituellement, les clients sont seulement concernés par la valeur
	   de <xref linkend="guc-client-encoding">.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
       <term><varname>server_version</varname> (<type>string</type>)</term>
       <indexterm>
         <primary><varname>server_version</> configuration parameter</primary>
       </indexterm>
       <listitem>
         <para>
           Affiche le numéro de version du serveur. Il est déterminé par la
	   valeur de <literal>PG_VERSION</> lors de la construction du serveur.
         </para>
       </listitem>
     </varlistentry>

     </variablelist>
   </sect2>

   <sect2 id="runtime-config-custom">
    <title>Options personnalisées</title>

    <para>
      Cette fonctionnalité a été conçue pour permettre l'ajout d'options
      habituellement inconnues de <productname>PostgreSQL</productname> 
      car ajoutées par des modules supplémentaires (comme les langages de
      procédures). Ceci autorise les modules à être configuré de la façon
      standard.
    </para>

  <variablelist>

    <varlistentry id="guc-custom-variable-classes" xreflabel="custom_variable_classes">
      <term><varname>custom_variable_classes</varname> (<type>string</type>)</term>
      <indexterm>
        <primary>paramètre de configuration <varname>custom_variable_classes</></primary>
      </indexterm>
      <listitem>
        <para>
          Cette variable spécifie un ou plusieurs noms de classe à utiliser
	  par des variables personnalisées, de la forme d'une liste séparée par
	  des virgules. Une variable personnalisée est une variable habituellement
	  inconnue de <productname>PostgreSQL</productname> lui-même mais
	  utilisée par certains modules supplémentaires. Ces variables doivent
	  avoir des noms consistant en un nom de classe, un point et un nom de
	  variable. <varname>custom_variable_classes</> spécifie tous les noms
	  de classe utilisés dans une installation particulière. Cette option est
	  seulement disponible au lancement du serveur ou dans le fichier de
	  configuration <filename>postgresql.conf</filename>.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

     <para>
       La difficulté avec la configuration de variables personnalisées dans
       <filename>postgresql.conf</> est que le fichier doit être lu avant que
       les modules supplémentaires ne soient chargés et, du coup, les variables
       seraient habituellement rejetées comme étant inconnues. Lorsque
       <varname>custom_variable_classes</> est initialisé, le serveur acceptera
       les définitions de variables arbitraires à l'intérieur de chaque classe
       spécifiée. Ces variables seront traitées comme des emplacements vides et
       n'auront aucune fonction tant que le module qui les définit n'est pas
       chargé. Quand un module d'une classe spécifique est chargé, il ajoute les
       bonnes définitions de variables pour son nom de classe, convertit les
       valeurs des emplacements suivant les définitions et émet des messages
       d'avertissement pour tout emplacement restant dans sa classe (qui seraient
       à priori des noms de variables mal saisis).
     </para>

     <para>
       Voici un exemple de ce que pourrait contenir <filename>postgresql.conf</>
       en utilisant des variables personnalisées&nbsp;:

<programlisting>
custom_variable_classes = 'plr,pljava'
plr.path = '/usr/lib/R'
pljava.foo = 1
plruby.bar = true        # generates error, unknown class name
</programlisting>
     </para>
   </sect2>

   <sect2 id="runtime-config-developer">
    <title>Options pour les développeurs</title>

    <para>
     Les options suivantes ont pour but de travailler sur les sources de
     <productname>PostgreSQL</productname> et, dans certains cas, d'assister
     à une récupération sur des bases de données sévèrement endommagées. Il n'y
     a aucune raison pour les utiliser dans la configuration d'un système de
     production. En tant que tel, elles ont été exclues du fichier d'exemple de
     <filename>postgresql.conf</>. Notez qu'un certain nombre d'entre elles
     requièrent des options de compilation spéciales pour fonctionner.
    </para>

    <variablelist>
     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
      <term><varname>debug_assertions</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_assertions</></primary>
      </indexterm>
      <listitem>
       <para>
        Active différentes vérifications des affectations. C'est une aide au
        débogage. Si vous expérimentez des problèmes étranges ou des arrêts
        brutaux, vous pouvez l'activer car cette option pourrait
        exposer des erreurs de programmation. Pour utiliser cette option, la
	macro <symbol>USE_ASSERT_CHECKING</symbol> doit être définie lors de
        la construction de <productname>PostgreSQL</productname> (ceci
        s'accomplit par l'option <option>--enable-cassert</option> de
        <command>configure</command>). Notez que la valeur de
	<varname>debug_assertions</varname> est par défaut active si
        <productname>PostgreSQL</productname> a été construit après ajout
        de l'option ci-dessus.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-shared-buffers" xreflabel="debug_shared_buffers">
      <term><varname>debug_shared_buffers</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_shared_buffers</></primary>
      </indexterm>
      <listitem>
       <para>
	Nombre de secondes entre les rapports des tampons freelist. Si plus grand que zéro, émet
	des statistiques freelist sur le journal toutes les
	<varname>debug_shared_buffers</varname> secondes. Zéro (par défaut) désactive
	les rapports.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>pre_auth_delay</></primary>
      </indexterm>
      <listitem>
       <para>
        Si différent de zéro, un délai de ce nombre de secondes arrive juste
        après qu'un nouveau processus ne soit créé, avant le processus
        d'authentification. Ceci a pour but de donner une opportunité d'attacher
        un débogueur au processus serveur pour tracer les mauvais comportements
        pendant l'authentification.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
      <term><varname>trace_notify</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_notify</></primary>
      </indexterm>
      <listitem>
       <para>
        Génère un grand nombre de sorties de débogage pour les commandes
        <command>LISTEN</command> et <command>NOTIFY</command>.
	<xref linkend="guc-client-min-messages"> ou
        <xref linkend="guc-log-min-messages"> doivent être
        <literal>DEBUG1</literal> ou plus bas pour envoyer cette sortie sur les
        traces client ou serveur, respectivement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_locks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lock_oidmin</varname> (<type>boolean</type>)</term>
      <term><varname>trace_lock_table</varname> (<type>boolean</type>)</term>
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)</term>
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        Différentes autres options de trace et de débogage.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
      <term><varname>wal_debug</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_debug</></primary>
      </indexterm>
      <listitem>
       <para>
        Si true, émet une sortie de débogage relative aux WAL. Cette option est
	seulement disponible si la macro <symbol>WAL_DEBUG</symbol> était définie
	au moment de la compilation de <productname>PostgreSQL</productname>.
       </para>
      </listitem>
     </varlistentry>

      <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
       <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)</term>
       <indexterm>
        <primary>paramètre de configuration <varname>zero_damaged_pages</></primary>
       </indexterm>
      <listitem>
       <para>
        La détection d'une en-tête de page endommagée cause généralement le
        rapport d'une erreur par <productname>PostgreSQL</>, l'annulation de la
        commande courante. Initialiser <varname>zero_damaged_pages</> à vrai
        fait que le système rapporte à la place un avertissement, supprime la
        page endommagée et continue son traitement. Ce comportement
        <emphasis>détruira les données</>, nommément toutes les lignes de la
        page endommagée. Mais cela vous permettra de passer l'erreur et de
        récupérer les lignes des pages non endommagées qui pourraient être
        présentes dans la table. Donc, c'est utile pour récupérer les données si
        la corruption est dûe à une erreur matérielle ou logicielle. Vous ne
        devriez généralement pas configurer cette option à vrai sauf si vous
        abandonnez l'espoir de récupérer les données des pages endommagées d'une
        table. Le paramétrage par défaut est désactivé, et ne peut être modifié
        que par un superutilisateur.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </sect2>
  <sect2 id="runtime-config-short">
   <title>Options courtes</title>

   <para>
    Pour le côté pratique, voici les options sur une lettre en ligne de
    commande disponibles pour certains paramètres. Elles sont décrites dans
    le <xref linkend="runtime-config-short-table">.
   </para>

    <table id="runtime-config-short-table">
     <title>Clés des options courtes</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Option courte</entry>
        <entry>Équivalent</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</></entry>
       </row>
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-i</option></entry>
	<entry><literal>listen_addresses = '*'</></entry>
       </row>
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directory = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</></entry>
       </row>
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></></entry>
       </row>

       <row>
        <entry>
          <option>-fi</option>, <option>-fh</option>,
          <option>-fm</option>, <option>-fn</option>,
          <option>-fs</option>, <option>-ft</option><footnote
          id="fn.runtime-config-short">
           <para>
            Pour des raisons historiques, ces options doivent êtres passées au
            processus serveur individuel via l'option <option>-o</option> de
            <command>postmaster</command>, par exemple,
<screen>
$ <userinput>postmaster -o '-S 1024 -s'</userinput>
</screen>
            ou via <envar>PGOPTIONS</envar> du côté client, comme expliqué
            ci-dessous.
           </para>
          </footnote>
         </entry>
         <entry>
          <literal>enable_indexscan=off</>,
          <literal>enable_hashjoin=off</>,
          <literal>enable_mergejoin=off</>,
          <literal>enable_nestloop=off</>,
          <literal>enable_seqscan=off</>,
          <literal>enable_tidscan=off</>
         </entry>
       </row>

       <row>
        <entry><option>-s</option><footnoteref linkend="fn.runtime-config-short"></entry>
        <entry><literal>log_statement_stats = on</></entry>
       </row>

       <row>
        <entry><option>-S <replaceable>x</replaceable></option><footnoteref linkend="fn.runtime-config-short">
        </entry>
        <entry><literal>work_mem = <replaceable>x</replaceable></></entry>
       </row>

       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option><footnoteref linkend="fn.runtime-config-short"></entry>
        <entry><literal>log_parser_stats=on</>,
        <literal>log_planner_stats=on</>, 
        <literal>log_executor_stats=on</></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect2>
 </sect1>


 <sect1 id="kernel-resources">
  <title>Gérer les ressources du noyau</title>

  <para>
   Une installation importante de <productname>PostgreSQL</> peut rapidement
   épuiser les limites des ressources du système d'exploitation. (Sur certains
   systèmes, les valeurs par défaut sont trop basses que vous n'avez même pas
   besoin d'une installation <quote>importante</>.) Si vous avez rencontré ce
   type de problème, continuez votre lecture.
  </para>

  <sect2 id="sysvipc">
   <title>Mémoire partagée et sémaphore</title>

   <indexterm zone="sysvipc">
    <primary>mémoire partagée</primary>
   </indexterm>

   <indexterm zone="sysvipc">
    <primary>sémaphores</primary>
   </indexterm>

   <para>
    La mémoire partagée et les sémaphores sont nommés collectivement
    <quote><acronym>IPC</><systemitem class="osname">System V</></quote>
    (ensemble avec les queues de messages, qui n'ont pas d'importance pour
    <productname>PostgreSQL</>). Pratiquement tous les systèmes d'exploitation
    modernes fournissent ces fonctionnalités mais parmi elles toutes ne sont pas
    activées ou dimensionnées suffisamment par défaut, spécialement les systèmes
    ayant l'héritage BSD. (Pour les ports <systemitem class="osname">QNX</> et
    <systemitem class="osname">BeOS</>, <productname>PostgreSQL</> fournit sa
    propre implémentation de remplacement de ces fonctionnalités.)
   </para>

   <para>
    Le manque complet de fonctionnalités est généralement manifesté par 
    une erreur <errorname>Illegal system call</> au lancement du serveur. Dans
    ce cas, il n'y a rien à faire à part reconfigurer votre noyau.
    <productname>PostgreSQL</> ne fonctionnera pas sans.
   </para>

   <para>
    Quand <productname>PostgreSQL</> dépasse une des nombreuses limites
    <acronym>IPC</>, le serveur refusera de s'exécuter et lèvera un
    message d'erreur instructif décrivant le problème rencontré et que faire
    avec (voir aussi la <xref linkend="postmaster-start-failures">). Les
    paramètres adéquats du noyau sont nommés de façon cohérente parmi les
    différents systèmes&nbsp;; le <xref linkend="sysvipc-parameters"> donne un
    aperçu. Néanmoins, les méthodes pour les obtenir varient. Les suggestions
    pour quelques plateformes sont données ci-dessous. Attention, il est souvent
    nécessaire de redémarrer votre machine, voire même de recompiler le noyau,
    pour changer ces paramétrages.
   </para>


   <table id="sysvipc-parameters">
    <title>Paramètres <systemitem class="osname">System V</> <acronym>IPC</></>

    <tgroup cols="3">
     <thead>
      <row>
       <entry>Name</>
       <entry>Description</>
       <entry>Valeurs raisonnables</>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><varname>SHMMAX</></>
       <entry>Taille maximum du segment de mémoire partagée (octets)</>
       <entry>250 Ko + 8.2 Ko * <xref linkend="guc-shared-buffers"> + 14.2 Ko *
         <xref linkend="guc-max-connections"> jusqu'à l'infini</entry>
      </row>

      <row>
       <entry><varname>SHMMIN</></>
       <entry>Taille minimum du segment de mémoire partagée (octets)</>
       <entry>1</>
      </row>

      <row>
       <entry><varname>SHMALL</></>
       <entry>Total de la mémoire partagée disponible (octets ou pages)</>
       <entry>Si octets, identique à <varname>SHMMAX</varname>&nbsp;; si pages,
        <literal>ceil(SHMMAX/PAGE_SIZE)</literal></>
      </row>

      <row>
       <entry><varname>SHMSEG</></>
       <entry>Nombre maximum de segments de mémoire partagée par
        processus</>
       <entry>Seul un segment est nécessaire mais la valeur par défaut est
        bien plus importante</>
      </row>

       <row>
        <entry><varname>SHMMNI</></>
        <entry>Nombre maximum de segments de mémoire partagée pour
         tout le système</>
        <entry>Comme <varname>SHMSEG</> plus la place pour les autres
         applications</>
       </row>

       <row>
        <entry><varname>SEMMNI</></>
        <entry>Nombre maximum d'identifiants de sémaphores (c'est-à-dire
         d'ensembles)</>
        <entry>Au moins <literal>ceil(max_connections / 16)</literal></>
       </row>

       <row>
        <entry><varname>SEMMNS</></>
        <entry>Nombre maximum de sémaphores rapartis dans le système</>
        <entry><literal>ceil(max_connections / 16) * 17</literal> plus la place
         pour les autres applications</>
       </row>

       <row>
        <entry><varname>SEMMSL</></>
        <entry>Nombre maximum de sémaphores par ensemble</>
        <entry>Au moins 17</>
       </row>

       <row>
        <entry><varname>SEMMAP</></>
        <entry>Nombre d'entrées dans la carte des sémaphores</>
        <entry>Voir le texte</>
       </row>

       <row>
        <entry><varname>SEMVMX</></>
        <entry>Valeur maximum d'une sémaphore</>
        <entry>Au moins 1000 (vaut souvent par défaut 32767, ne pas changer
         sauf si vous êtes forcé.)</>
       </row>

     </tbody>
    </tgroup>
   </table>


   <para>
    <indexterm><primary>SHMMAX</primary></indexterm> Le paramètre de mémoire
    partagé le plus important est <varname>SHMMAX</>, la taille maximum, en
    octets, d'un segment de mémoire partagée. Si vous obtenez un message
    d'erreur à partir de <function>shmget</> comme <errorname>Invalid
    argument</>, il est possible que cette limite soit dépassée. La taille du
    segment de mémoire partagée requise varie à la fois avec le nombre de
    tampons requis (option <option>-B</>) et le nombre de connexions autorisées
    (option <option>-N</>), bien que le premier soir le plus important. (Vous
    pouvez, en solution temporaire, baisser ces paramétrages pour supprimer
    l'échec.) Tout message d'erreur que vous obtiendriez contiendra la taille
    de la demande d'allocation échouée.
   </para>

   <para>
    Certains systèmes ont aussi une limite sur le nombre total de mémoire partagée
    dans le système (<varname>SHMALL</>). Assurez-vous que cela soit suffisamment
    important pour <productname>PostgreSQL</> et quelque autres applications
    utilisant des segments de mémoire partagée. (Attention&nbsp;:
    <varname>SHMALL</> est mesuré en pages plutôt qu'en octets sur beaucoup de
    systèmes.)
   </para>



   <para>
    Moins sensible aux problèmes est la taille minimum des segments de mémoire
    partagée (<varname>SHMMIN</>), qui devrait être au plus à environ
    256&nbsp;Ko pour <productname>PostgreSQL</> (il est habituellement à 1). Le
    nombre maximum de segments au travers du système (<varname>SHMMNI</>) ou par
    processus (<varname>SHMSEG</>) a peu de chances de causer un problème sauf
    s'ils sont configurés à zéro sur votre système.
   </para>

   <para>
    <productname>PostgreSQL</> utilise une sémaphore par connexion autorisée
    (option <option>-N</>), par ensemble de 16. Chacun de ces ensembles
    contiendra aussi une 17è sémaphore qui contient un <quote>nombre
    magique</quote>, pour détecter la collision avec des ensembles de sémaphore
    utilisé par les autres applications. Le nombre maximum de sémaphores dans le
    système est initialisé par <varname>SEMMNS</>, qui en conséquence doit être
    au moins aussi haut que <varname>max_connections</> plus un extra de chacune
    des 16 connexions autorisées (voir la formule dans <xref
    linkend="sysvipc-parameters">). Le paramètre <varname>SEMMNI</> détermine la
    limite sur le nombre d'ensembles de sémaphores qui peuvent exister sur le
    système à un instant précis. Donc, ce paramètre doit être au moins égal à
    <literal>ceil(max_connections / 16)</>. Baisser le nombre de connexions
    autorisées est un contournement temporaire pour les échecs qui sont
    habituellement indiqués par le message <errorname>No space left on
    device</>, à partir de la fonction <function>semget</>.
   </para>

   <para>
    Dans certains cas, il pourrait être nécessaire d'augmenter
    <varname>SEMMAP</> pour être au moins dans l'ordre de <varname>SEMMNS</>. Ce
    paramètre définit la taille de la carte de ressources de sémaphores, dans
    laquelle chaque bloc contigu de sémaphores disponibles ont besoin d'une
    entrée. Lorsqu'un ensemble de sémaphore est libéré ou qu'il est enregistré
    sous une nouvelle entrée de carte. Si la carte est pleine, les sémaphores
    libérées sont perdues (jusqu'au redémarrage). La fragmentation de l'espace
    des sémaphores pourrait amener dans le temps à moins de sémaphores
    disponibles.
   </para>

   <para>
    La paramètre <varname>SEMMSL</>, qui détermine le nombre de sémaphores dans
    un ensemble, pourrait valoir au moins 17 pour <productname>PostgreSQL</>.
   </para>

   <para>
    D'autres paramètres en relation avec l'<quote>annulation de sémaphores</>,
    tels que <varname>SEMMNU</> et <varname>SEMUME</>, ne concernent pas
    <productname>PostgreSQL</>.
   </para>

    <variablelist>

     <varlistentry>
      <term><systemitem class="osname">BSD/OS</></term>
      <indexterm><primary>BSD/OS</><secondary>configuration IPC</></>
      <listitem>
       <formalpara>
        <title>Mémoire partagée</>
        <para>
         Par défaut, seulement 4&nbsp;Mo de mémoire partagée est supportée.
         Gardez en tête que la mémoire partagée n'est pas paginable&nbsp;; elle
         est verrouillée en RAM. Pour accroître la mémoire partagée supportée
         par votre système, ajoutez ce qui suit à la configuration de votre
         noyau. Une valeur de 1024 pour <varname>SHMALL</> représente 4&nbsp;Mo
         de mémoire partagée. Pour argumenter la mémoire partagée supportée par
	 votre système, ajoutez quelque chose comme ceci à votre configuration
	 du noyau&nbsp;:
<programlisting>
options "SHMALL=8192"
options "SHMMAX=\(SHMALL*PAGE_SIZE\)"
</programlisting>
         <varname>SHMALL</> est mesuré en pages de 4&nbsp;Ko, donc une valeur
	 de 1024 représente 4&nbsp;Mo de mémoire partagée. Du coup, la
	 configuration ci-dessus augmente l'aire de mémoire partagée à 32&nbsp;Mo.
         Pour ceux utilisant une version 4.3 ou ultérieure, vous aurez
         probablement besoin d'augmenter <varname>KERNEL_VIRTUAL_MB</> au-dessus
         de la valeur par défaut, <literal>248</>. Une fois tous les changements
         effectués, recompilez le noyau et redémarrez.
        </para>
       </formalpara>

       <para>
        Pour ceux utilisant une version 4.0 ou antérieures, utilisez
         <command>bpatch</> pour connaître la valeur <varname>sysptsize</> dans
         le noyau actuel. Elle est calculée dynamiquement au démarrage.
<screen>
$ <userinput>bpatch -r sysptsize</>
<computeroutput>0x9 = 9</>
</screen>
        Ensuite, ajoutez <varname>SYSPTSIZE</> comme valeur codée en dur dans
        le fichier de configuration du noyau. Augmentez la valeur que vous
        trouvez en utilisant <command>bpatch</>. Ajoutez 1 pour chaque
        4&nbsp;Mo supplémentaire de mémoire partagée que vous souhaitez.
<programlisting>
options "SYSPTSIZE=16"
</programlisting>
        <varname>sysptsize</> ne peut pas être modifié
        avec <command>sysctl</command>.
       </para>

       <formalpara>
        <title>Sémaphores</>
        <para>
	 Vous voudrez probablement aussi augmenter le nombre de sémaphores&nbsp;;
	 la somme totale par défaut du système (60) n'autorisera seulement que
	 50 connexions <productname>PostgreSQL</productname>. Initialisez les
         valeurs que vous souhaitez dans le fichier de configuration du
         noyau&nbsp;:
<programlisting>
options "SEMMNI=40"
options "SEMMNS=240"
</programlisting>
        </para>
       </formalpara>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">FreeBSD</></term>
      <term><systemitem class="osname">NetBSD</></term>
      <term><systemitem class="osname">OpenBSD</></term>
      <indexterm><primary>FreeBSD</><secondary>IPC configuration</></>
      <indexterm><primary>NetBSD</><secondary>IPC configuration</></>
      <indexterm><primary>OpenBSD</><secondary>configuration IPC</></>
      <listitem>
       <para>
        Les options <varname>SYSVSHM</> et <varname>SYSVSEM</> doivent être
         activées à la compilation du noyau. (Ils le sont par défaut.) La taille
         maximum de mémoire partagée est déterminée par l'option
         <varname>SHMMAXPGS</> (en pages). Ce qui suit montre un exemple de
         l'initialisation des différents paramètres&nbsp;:
<programlisting>
options         SYSVSHM
options         SHMMAXPGS=4096
options         SHMSEG=256

options         SYSVSEM
options         SEMMNI=256
options         SEMMNS=512
options         SEMMNU=256
options         SEMMAP=256
</programlisting>
        (Sur <systemitem class="osname">OpenBSD</>, le mot clé est en fait
        <literal>option</literal> au singulier.)
       </para>
       <para>
        Vous pourriez aussi vouloir configurer votre noyau pour verrouiller la
        mémoire partagée en RAM et l'empêcher d'être paginée en swap. Utilisez
        le paramétrage <literal>kern.ipc.shm_use_phys</> de <command>sysctl</>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">HP-UX</></term>
      <indexterm><primary>HP-UX</><secondary>configuration IPC</></>
      <listitem>
       <para>
        Les paramètres par défaut tendent à suffire pour des installations
        normales. Sur <productname>HP-UX</> 10, la valeur par défaut de
        <varname>SEMMNS</> est 128, qui pourrait être trop basse pour de gros
        sites de bases de données.
       </para>
       <para>
        Les paramètres <acronym>IPC</> peuvent être initialisés dans 
        <application>System Administration Manager</> (<acronym>SAM</>) sous
        <menuchoice><guimenu>Kernel Configuration</><guimenuitem>Configurable
        Parameters</></>. Allez sur <guibutton>Create A New Kernel</> une fois
        terminée.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">Linux</></term>
      <indexterm><primary>Linux</><secondary>configuration IPC</></>
      <listitem>
       <para>
        La limite de mémoire partagée par défaut (à la fois
        <varname>SHMMAX</varname> et <varname>SHMALL</varname>) est de
        32&nbsp;Mo pour les noyaux 2.2 mais cela peut se changer dans le système
        de fichiers <filename>proc</filename> (sans redémarrage). Par exemple,
        pour permettre 128&nbsp;Mo&nbsp;:
<screen>
<prompt>$</prompt> <userinput>echo 134217728 &gt;/proc/sys/kernel/shmall</userinput>
<prompt>$</prompt> <userinput>echo 134217728 &gt;/proc/sys/kernel/shmmax</userinput>
</screen>
        Vous pouvez placer ces commandes dans un script exécuté au démarrage.
       </para>

       <para>
        Autrement, vous pouvez utiliser <command>sysctl</command>, si cette
        commande est disponible, pour contrôler ces paramètres. Cherchez un
        fichier nommé <filename>/etc/sysctl.conf</filename> et ajoutez les
        lignes qui suivent&nbsp;:
<programlisting>
kernel.shmall = 134217728
kernel.shmmax = 134217728
</programlisting>
        Ce fichier est habituellement traité au démarrage mais
        <command>sysctl</command> peut aussi être appelé explicitement plus
        tard.
       </para>

       <para>
        D'autres paramètres ont une taille suffisante pour toute application.
        Si vous voulez voir par vous-même, jetez un &oelig;il dans
        <filename>/usr/src/linux/include/asm-<replaceable>xxx</>/shmparam.h</>
        et <filename>/usr/src/linux/include/linux/sem.h</>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">MacOS X</></term>
      <indexterm><primary>MacOS X</><secondary>configuration IPC</></>
      <listitem>
       <para>
        Avec OS X 10.2 et antérieures, éditez le fichier
        <filename>/System/Library/StartupItems/SystemTuning/SystemTuning</>
	et modifiez les valeurs avec les commandes suivantes&nbsp;:
<programlisting>
sysctl -w kern.sysv.shmmax
sysctl -w kern.sysv.shmmin
sysctl -w kern.sysv.shmmni
sysctl -w kern.sysv.shmseg
sysctl -w kern.sysv.shmall
</programlisting>
        Avec OS X 10.3, ces commandes ont été déplacées dans
	<filename>/etc/rc</> et doivent être éditées là-bas. Vous aurez besoin
	de redémarrer pour que les modifications prennent effet. Notez que
	<filename>/etc/rc</> est habituellement surchargé par les mises à jour
	d'OS X (comme celle de 10.3.6 à 10.3.7) donc vous devez vous attendre à
	avoir à refaire votre édition après chaque mise à jour.
       </para>
       <para>
	<varname>SHMALL</> est mesuré en pages de 4&nbsp;Ko sur cette plateforme.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">SCO OpenServer</></term>
      <indexterm><primary>SCO OpenServer</><secondary>configuration IPC</></>
      <listitem>
       <para>
        Dans la configuration par défaut, seuls 512&nbsp;Ko de mémoire partagée
        par segment est autorisé, ce qui est assez pour <option>-B 24 -N
        12</>. Pour augmenter ce paramétrage, allez tout d'abord dans le
        répertoire <filename>/etc/conf/cf.d</>. Pour afficher la valeur courante
        de <varname>SHMMAX</>, lancez
<programlisting>
./configure -y SHMMAX
</programlisting>
        Pour configurer une nouvelle valeur de <varname>SHMMAX</>, lancez
<programlisting>
./configure SHMMAX=<replaceable>valeur</>
</programlisting>
        où <replaceable>value</> est la nouvelle valeur que vous voulez utiliser
        (en octets). Après avoir configuré <varname>SHMMAX</>, reconstruisez le
        noyau&nbsp;:
<programlisting>
./link_unix
</programlisting>
        et redémarrez.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">AIX</></term>
      <indexterm><primary>AIX</><secondary>configuration IPC</></>
      <listitem>
       <para>
	Au moins à partir de la version 5.1, il ne devrait plus être nécessaire
	de faire une configuration spéciale pour tel paramètre comme
	<varname>SHMMAX</varname> car il apparaît qu'il est configuré pour
	autoriser l'utilisation de toute la mémoire comme mémoire partagée.
	C'est la sorte de configuration utilisée habituellement pour les autres
	bases de données comme <application>DB/2</application>.
       </para>

       <para>
	Néanmoins, cela pourrait être nécessaire pour modifier l'information
	globale <command>ulimit</command> dans
	<filename>/etc/security/limits</filename> car les limites dures par
	défaut pour les tailles de fichiers (<varname>fsize</varname>) et les
	nombres de fichiers (<varname>nofiles</varname>) pourraient être trop
	bas.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><systemitem class="osname">Solaris</></term>
      <indexterm><primary>Solaris</><secondary>configuration IPC</></>
      <listitem>
       <para>
        Au moins dans la version 2.6, la taille maximum par défaut des segments
        de mémoire partagée est trop basse pour <productname>PostgreSQL</>. Le
        paramétrage adéquat peut être modifié dans <filename>/etc/system</>, par
        exemple&nbsp;:
<programlisting>
set shmsys:shminfo_shmmax=0x2000000
set shmsys:shminfo_shmmin=1
set shmsys:shminfo_shmmni=256
set shmsys:shminfo_shmseg=256

set semsys:seminfo_semmap=256
set semsys:seminfo_semmni=512
set semsys:seminfo_semmns=512
set semsys:seminfo_semmsl=32
</programlisting>
        Vous avez besoin de redémarrer pour que les modifications prennent
        effet.
       </para>

       <para>
        Voir aussi <ulink      
url="http://sunsite.uakom.sk/sunworldonline/swol-09-1997/swol-09-insidesolaris.html"></>
        pour des informations sur la mémoire partagée sous
        <productname>Solaris</>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">UnixWare</></term>
      <indexterm><primary>UnixWare</><secondary>configuration IPC</></>
      <listitem>
       <para>
        Avec <productname>UnixWare</> 7, la taille maximum des segments de
        mémoire partagée est de 512&nbsp;Ko dans la configuration par défaut.
        Ceci est suffisant pour <option>-B 24 -N 12</>. Pour afficher la valeur
        courante de <varname>SHMMAX</>, lancez
<programlisting>
/etc/conf/bin/idtune -g SHMMAX
</programlisting>
        qui affiche la valeur courante, par défaut, minimum et
        maximum. Pour configurer une nouvelle valeur de <varname>SHMMAX</>,
        lancez
<programlisting>
/etc/conf/bin/idtune SHMMAX <replaceable>valeur</>
</programlisting>
        où <replaceable>valeur</> est la nouvelle valeur que vous voulez
        utiliser (en octets). Après avoir initialisé <varname>SHMMAX</>,
        reconstruisez le noyau&nbsp;:
<programlisting>
/etc/conf/bin/idbuild -B
</programlisting>
        et relancez.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect2>


  <sect2>
   <title>Limites de ressources</title>

   <para>
    Les systèmes d'exploitation style Unix renforcent différents types de
    limites de ressources qui pourraient interférer avec les opérations de votre
    serveur <productname>PostgreSQL</productname>. Les limites sur le nombre de
    processus par utilisateur, le nombre de fichiers ouverts par un processus et la
    taille mémoire disponible pour chaque processus sont d'une grande
    importance. Chacun d'entre elles ont une limite <quote>dure</quote> et une
    limite <quote>souple</quote>. La limite souple est réellement ce qui compte
    mais cela pourrait être changé par l'utilisateur jusqu'à la limite dure. La
    limite dure pourrait seulement être modifiée par l'utilisateur root. L'appel
    système <function>setrlimit</function> est responsable de l'initialisation
    de ces paramètres. La commande interne du shell <command>ulimit</command>
    (shells Bourne) ou <command>limit</command> (<application>csh</>) est
    utilisé pour contrôler les limites de ressource à partir de la ligne de
    commande. Sur les systèmes dérivés BSD, le fichier
    <filename>/etc/login.conf</filename> contrôle les différentes limites de
    ressource initialisées à la connexion. Voir la documentation du système
    d'exploitation pour les détails. Les paramètres en question sont
    <varname>maxproc</varname>, <varname>openfiles</varname> et
    <varname>datasize</varname>. Par exemple&nbsp;:
<programlisting>
default:\
...
        :datasize-cur=256M:\
        :maxproc-cur=256:\
        :openfiles-cur=256:\
...
</programlisting>
    (<literal>-cur</literal> est la limite douce. Ajoutez
    <literal>-max</literal> pour configurer la limite dure.)
   </para>

   <para>
    Les noyaux peuvent aussi avoir des limites sur le système complet pour
    certaines ressources.
    <itemizedlist>
     <listitem>
      <para>
      Sur <productname>Linux</productname>,
      <filename>/proc/sys/fs/file-max</filename> détermine le nombre maximum de
      fichiers ouverts que le noyau supportera. Ce nombre est modifiable en
      écrivant un autre nombre dans le fichier ou en ajoutant une affectation
      dans <filename>/etc/sysctl.conf</filename>. La limite des fichiers par
      processus est fixée lors de la compilation du noyau&nbsp;; voir
      <filename>/usr/src/linux/Documentation/proc.txt</filename> pour plus
      d'informations.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    Le serveur <productname>PostgreSQL</productname> utilise un processus par
    connexion de façon à ce que vous puissiez fournir au moins autant de
    processus que de connexions autorisées, en plus de ce dont vous avez besoin
    pour le reste de votre système. Ceci n'est habituellement pas un problème
    mais si vous exécutez plusieurs serveurs sur une seule machine, cela
    pourrait devenir étroit.
   </para>

   <para>
    La limite par défaut des fichiers ouverts est souvent initialisée pour être
    <quote>amicalement sociale</quote>, pour permettre à de nombreux
    utilisateurs de coexister sur une machine sans utiliser une fraction
    inappropriée des ressources du système. Si vous lancez un grand nombre de
    serveurs sur une machine, cela pourrait être quelque chose que vous
    souhaitez mais sur les serveurs dédiés, vous pourriez vouloir augmenter
    cette limite.
   </para>

   <para>
    D'un autre côté, certains systèmes autorisent l'ouverture d'un grand
    nombre de fichiers à des processus individuels&nbsp;; si un plus grand
    nombre le font, alors les limites du système peuvent facilement être
    dépassées. Si vous rencontrez ce cas et que vous ne voulez pas modifier la
    limite du système, vous pouvez initialiser le paramètre de configuration
    <xref linkend="guc-max-files-per-process"> de
    <productname>PostgreSQL</productname> pour limiter la consommation de
    fichiers ouverts.
   </para>
  </sect2>

  <sect2>
   <title>Linux Memory Overcommit</title>

   <para>
    Dans Linux 2.4 et ultérieurs, le comportement par défaut de la mémoire
    virtuelle n'est pas optimale pour <productname>PostgreSQL</productname>. À
    cause de la façon dont le noyau implémente le <quote>memory
    overcommit</quote>, le noyau pourrait arrêter le serveur
    <productname>PostgreSQL</productname> (le processus
    <filename>postmaster</filename>) si la mémoire demande un autre processus et
    que le système est en manque de mémoire virtuelle.
   </para>

   <para>
    Si ceci arrive, vous verrez un message du noyau qui ressemble à ceci
    (consultez la documentation et la configuration de votre système pour savoir
    où chercher un tel message)&nbsp;:
<programlisting>
Out of Memory: Killed process 12345 (postmaster). 
</programlisting>
    Ceci indique que le processus <filename>postmaster</filename> a été terminé
    à cause d'un problème de mémoire. Bien que les connexions en cours
    continueront de fonctionner normalement, aucune nouvelle
    connexion ne sera acceptée. Pour revenir à un état normal,
    <productname>PostgreSQL</productname> devra être relancé.
   </para>

   <para>
    Une façon d'éviter ce problème revient à lancer
    <productname>PostgreSQL</productname> sur une machine où vous pouvez vous
    assurer que les autres processus ne mettront pas la machine en manque de
    mémoire.
   </para>

   <para>
    Sur Linux 2.6 et ultérieure, une meilleure solution est de modifier le
    comportement du noyau de façon à ce qu'il n'<quote>overcommit</> pas la
    mémoire. Ceci se fait en sélectionnant le mode overcommit strict via
    <command>sysctl</command>&nbsp;:
<programlisting>
sysctl -w vm.overcommit_memory=2
</programlisting>
    ou en plaçant une entrée équivalente dans <filename>/etc/sysctl.conf</>.
    Vous pourriez souhaiter modifier le paramétrage relatif
    <literal>vm.overcommit_ratio</>. Pour les détails, voir la documentation du
    noyau (<filename>Documentation/vm/overcommit-accounting</>).
   </para>

   <para>
    Quelques noyaux 2.4 de vendeurs ont des pré-versions de l'overcommit du
    2.6. Néanmoins, configurer <literal>vm.overcommit_memory</> à 2 sur un noyau
    qui n'a pas le code correspondant rendra les choses pires qu'elles
    n'étaient. Il est recommandé d'inspecter le code source du noyau (voir la
    fonction <function>vm_enough_memory</> dans le fichier
    <filename>mm/mmap.c</>) pour vérifier ce qui est supporté dans votre copie
    avant d'essayer ceci avec une installation 2.4. La présence du fichier de
    documentation <filename>overcommit-accounting</> ne devrait <emphasis>pas</>
    être pris comme une preuve de la présence de cette fonctionnalité. En cas de
    doute, consultez un expert du noyau ou le vendeur de votre noyau.
   </para>
  </sect2>
 </sect1>


 <sect1 id="postmaster-shutdown">
  <title>Arrêter le serveur</title>

  <indexterm zone="postmaster-shutdown">
   <primary>arrêt</>
  </indexterm>

  <para>
   Il existe plusieurs façons d'arrêter le serveur de bases de données. Vous
   contrôlez le type d'arrêt en envoyant différents signaux au processus
   <command>postmaster</command>.

   <variablelist>
    <varlistentry>
     <term><systemitem>SIGTERM</systemitem><indexterm><primary>SIGTERM</></></term>
     <listitem>
      <para>
       Après réception de <systemitem>SIGTERM</systemitem>, le serveur
       désactive les nouvelles connexions mais permet aux sessions en cours de
       terminer leur travail normalement. Il s'arrête seulement après que toutes
       les sessions se sont terminées normalement. C'est l'arrêt intelligent
       (<firstterm>Smart Shutdown</firstterm>).
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGINT</systemitem><indexterm><primary>SIGINT</></></term>
     <listitem>
      <para>
       Le serveur désactive les nouvelles connexions et envoie à tous
       les processus serveur le signal <systemitem>SIGTERM</systemitem>, qui les
       fera annuler leurs transactions courantes pour quitter rapidement. Il
       attend ensuite la fin des processus serveur et s'arrête finalement.
       C'est l'arrêt rapide (<firstterm>Fast Shutdown</firstterm>).
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGQUIT</systemitem><indexterm><primary>SIGQUIT</></></term>
     <listitem>
      <para>
      Voici l'arrêt immédiat (<firstterm>Immediate Shutdown</firstterm>), qui
       demande au processus <command>postmaster</command> d'envoyer un signal
       <systemitem>SIGQUIT</systemitem> à tous les processus fils et à quitter
       immédiatement non proprement. Les processus fils quittent immédiatement
       à réception du signal <systemitem>SIGQUIT</systemitem>. Ceci amènera une
       tentative de récupération (en rejouant les traces WAL) au prochain
       lancement. Ceci n'est recommandé que dans les cas d'urgence.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
   Le programme <xref linkend="app-pg-ctl"> fournit une interface agréable
   pour envoyer ces signaux dans le but d'arrêter le serveur.
  </para>

  <para>
  Autrement, vous pouvez envoyer le signal directement en utilisant
  <command>kill</>. Le <acronym>PID</> du processus <command>postmaster</command>
  peut être trouvé en utilisant le programme <command>ps</command> ou à partir du
  fichier <filename>postmaster.pid</filename> dans le répertoire des données.
  Par exemple, pour exécuter un arrêt rapide&nbsp;:
<screen>
$ <userinput>kill -INT `head -1 /usr/local/pgsql/data/postmaster.pid`</userinput>
</screen>
  </para>

  <important>
   <para>
    Il est mieux de ne pas utiliser <systemitem>SIGKILL</systemitem> pour arrêter
    le serveur. Le faire empêchera le serveur de libérer la mémoire partagée et
    les sémaphores, ce qui pourrait devoir être fait manuellement avant qu'un
    nouveau serveur ne soit lancé. De plus, <systemitem>SIGKILL</systemitem> tue
    le processus <command>postmaster</command> sans que celui-ci ait le temps de
    relayer ce signal à ses sous-processus, donc il sera aussi nécessaire de tuer
    les sous-processus individuels à la main.
   </para>
  </important>
 </sect1>

 <sect1 id="encryption-options">
  <title>Options de cryptage</title>

  <indexterm zone="encryption-options">
   <primary>cryptage</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname> offre du cryptage sur plusieurs niveaux
   et fournit une flexibilité pour protéger les données d'être révélées suite à
   un vol du serveur de la base de données, des administrateurs non scrupuleux
   et des réseaux non sécurisés. Le cryptage pourrait aussi être requis par des
   demandes du gouvernement, par exemple pour des informations médicales ou des
   transactions financières.
  </para>

  <variablelist>

  <varlistentry>
   <term>Chiffrement du mot de passe stocké</term>
   <listitem>

    <para>
     Par défaut, les mots de passe des utilisateurs de la base de données sont
     stockées suivant des hachages MD5, donc l'administrateur ne peut pas
     déterminer le mot de passe affecté à l'utilisateur. Si le cryptage MD5
     est utilisé pour l'authentification du client, le mot de passe non crypté
     n'est jamais présent temporairement sur le serveur parce que le client
     le crypte en MD5 avant de l'envoyer sur le réseau. MD5 est un cryptage à
     sens unique &mdash; il n'existe pas d'algorithme de décryptage.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Chiffrement de colonnes spécifiques</term>

   <listitem>
    <para>
     La bibliothèque de fonctions <filename>/contrib</>
     <function>pgcrypto</function> autorise le stockage crypté de certains
     champs. Ceci est utile si seulement certaines données sont sensibles.
     Le client fournit la clé de décryptage et la donnée est décryptée sur
     le serveur puis elle est envoyée au client.
    </para>

    <para>
     La donnée décryptée et la clé de déchiffrement sont présente sur le serveur
     pendant un bref moment où la donnée est décryptée, puis envoyée entre le
     client et le serveur. Ceci présente un bref moment où la données et les
     clés peuvent être interceptées par quelqu'un ayant un accès complet au
     serveur de bases de données, tel que l'administrateur du système.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Chiffrement de la partition de données</term>

   <listitem>
    <para>
     Sur Linux, le chiffrement peut se faire au niveau du montage d'un système
     de fichiers en utilisant un <quote>périphérique loopback</quote>. Ceci
     permet à une partition entière du système de fichiers d'être cryptée et
     décryptée par le système d'exploitation. Sur FreeBSD, la fonctionnalité
     équivalent est appelé <quote>GEOM Based Disk Encryption</quote>, ou
     <acronym>gbde</acronym>.
    </para>

    <para>
     Ce mécanisme empêche la lecture de données non cryptées à partir des
     disques si ceux-ci ou le serveur sont volés. Ce mécanisme ne protège en
     rien contre les attaques quand le système de fichiers est monté parce que,
     dans ce cas, le système d'exploitation fournit une vue non cryptée des
     données. Néanmoins, pour monter le système de fichiers, vous avez besoin
     de passer la clé de cryptage au système d'exploitation et, quelque fois,
     cette clé est stocké quelque part sur l'hôte qui monte le disque.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Cryptage des mots de passe sur le réseau</term>

   <listitem>
     <para>
      La méthode d'authentification <literal>MD5</> crypte deux fois le mot de
      passe sur le client avant de l'envoyer au serveur. Il le crypte tout
      d'abord à partir du nom de l'utilisateur puis il le crypte à partir d'un
      élément du hasard envoyé par le serveur au moment de la connexion. Cette
      valeur, deux fois cryptée, est envoyée sur le réseau au serveur. Le double
      cryptage empêche non seulement la découverte du mot de passe, il empêche
      aussi une autre connexion en rejouant la même valeur de double cryptage
      dans une connexion future.
     </para>
    </listitem>
  </varlistentry>

  <varlistentry>
   <term>Chiffrement des données sur le réseau</term>

    <listitem>
     <para>
      Les connexions SSL cryptent toutes les données envoyées sur le
      réseau&nbsp;: le mot de passe, les requêtes et les données renvoyées. Le
      fichier <filename>pg_hba.conf</> permet aux administrateurs de spécifier
      quels hôtes peuvent utiliser des connexions non cryptées (<literal>host</>)
      et lesquels requièrent des connexions SSL (<literal>hostssl</>). De plus,
      les clients peuvent spécifier qu'ils se connectent aux serveurs seulement
      via SSL. <application>Stunnel</> ou <application>SSH</> peuvent aussi
      être utilisés pour crypter les transmissions.
     </para>
    </listitem>
  </varlistentry>

  <varlistentry>
   <term>Authentification de l'hôte SSL</term>

   <listitem>
    <para> 
     Il est possible que le client et le serveur fournissent des clés SSL ou
     des certificats à l'autre. Cela demande une configuration supplémentaire
     de chaque côté mais cela fournit une vérification plus forte de l'identité
     que la simple utilisation de mots de passe. Cela empêche un ordinateur de
     se faire passer pour le serveur assez longtemps pour lire le mot de passe
     envoyé par le client. Cela empêche aussi les attaques du type <quote>man
     in the middle</quote> où un ordinateur, entre le client et le serveur,
     prétend être le serveur, lit et envoie les données entre le client et le
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Chiffrement côté client</term>

   <listitem>
    <para>
     Si vous n'avez pas confiance en l'administrateur système, il est nécessaire
     que le client crypte les données&nbsp;; de cette façon, les données non
     cryptées n'apparaissent jamais sur le serveur de la base de données. Les
     données sont cryptées sur le client avant d'être envoyé au serveur, et les
     résultats de la base de données doivent être décryptés sur le client avant
     d'être utilisés. Le livre de Peter Wayner, <citation>Translucent
     Databases</citation>, parle de cela de façon très détaillé.
    </para>
   </listitem>
  </varlistentry>

  </variablelist>

 </sect1>

 <sect1 id="ssl-tcp">
  <title>Connexions TCP/IP sécurisées avec SSL</title>

  <indexterm zone="ssl-tcp">
   <primary>SSL</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</> dispose d'un support natif pour l'utilisation de
    connexions <acronym>SSL</>, cryptant ainsi les communications
    clients/serveurs pour une sécurité améliorée. Ceci requiert l'installation
    d'<productname>OpenSSL</productname> à la fois sur le système client et sur
    le système serveur et que ce support soit activé au moment de la
    construction de <productname>PostgreSQL</> (voir le <xref
    linkend="installation">).
  </para>

  <para>
   Avec le support <acronym>SSL</> compilé, le serveur
   <productname>PostgreSQL</> peut être lancé avec
   <acronym>SSL</> activé en activant <varname>ssl</varname> dans
   <filename>postgresql.conf</>. Lors d'un démarrage en mode <acronym>SSL</>, le
   serveur cherchera les fichiers <filename>server.key</> et
   <filename>server.crt</> dans le répertoire des données, qui doivent
   contenir respectivement la clé privée du serveur et le certificat. Ces
   fichiers doivent être configurés correctement avant qu'un serveur dont le
   mode <acronym>SSL</> est activé puisse démarrer. Si la clé privée est
   protégée avec une phrase, le serveur la demandera  et ne se lancera pas tant
   que celle-ci n'aura pas été saisie.
  </para>

  <para>
   Le serveur écoutera les connexions <acronym>SSL</> et standard sur le même
   port TCP et négociera avec tout client se connectant qu'il utilise ou non
   <acronym>SSL</>. Voir le <xref linkend="client-authentication"> pour savoir
   comment forcer l'utilisation de <acronym>SSL</> pour certaines connexions.
  </para>

  <para>
   Pour les détails sur la création de la clé privé et du certificat du serveur,
   référez-vous à la documentation d'<productname>OpenSSL</>. Un
   simple certificat signé par soi-même peut être utilisé pour des 
   tests mais un certificat signé par une autorité (<acronym>CA</>) (soit un des
   <acronym>CA</> globaux soit un local) devrait être utilisé en production de
   façon à ce que le client puisse vérifier l'identité du serveur. Pour créer
   rapidement un certificat signé soi-même, utilisez la commande
   <productname>OpenSSL</productname> suivante&nbsp;:
<programlisting>
openssl req -new -text -out server.req
</programlisting>
   Remplissez les informations que <command>openssl</> réclame. Assurez-vous
   que vous entrez le nom local de l'hôte sur <quote>Common Name</>&nbsp;; le
   mot de passe de challenge peut être laissé vide. Le programme générera une
   clé qui est protégée par une phrase&nbsp;; elle n'acceptera pas une phrase
   qui fait moins de quatre caractères. Pour supprimer la phrase (ce que vous
   devez faire si vous voulez automatiser le lancement du serveur), lancez les
   commandes
<programlisting>
openssl rsa -in privkey.pem -out server.key
rm privkey.pem
</programlisting>
   Saisissez l'ancienne phrase pour débloquer la clé existante. Maintenant,
   saisissez
<programlisting>
openssl req -x509 -in server.req -text -key server.key -out server.crt
chmod og-rwx server.key
</programlisting>
   pour remplacer le certificat en un certificat signé par soi-même et copiez la
   clé et le certificat là où le serveur les cherchera.
  </para>

  <para>
   Si la vérification des certificats du client est requise, placez les
   certificats du <acronym>CA</acronym> que vous souhaitez vérifier dans le
   fichier <filename>root.crt</filename> du répertoire des données. S'il est
   présent, un certificat client sera demandé à partir du client lors
   du lancement d'une connexion SSL et il doit y avoir des certificats
   présent dans <filename>root.crt</filename>.
  </para>

  <para>
   Quand le fichier <filename>root.crt</filename> est absent, les certificats
   du client ne seront ni demandés ni vérifiés. Dans ce mode, SSL fournit
   la sécurité de la communication pas l'authentification.
  </para>

  <para>
   Les fichiers <filename>server.key</>, <filename>server.crt</>,
   et <filename>root.crt</filename> sont seulement examinés lors du lancement
   du serveur&nbsp;; donc vous devez relancer le serveur pour prendre en
   compte les modifications.
</para>
 </sect1>

 <sect1 id="ssh-tunnels">
  <title>Connexions TCP/IP sécurisées avec des tunnels
   <application>SSH</application> Tunnels</title>

  <indexterm zone="ssh-tunnels">
   <primary>ssh</primary>
  </indexterm>

  <para>
   Vous pouvez utiliser <application>SSH</application> pour crypter la
   connexion réseau entre les clients et un serveur
   <productname>PostgreSQL</productname>. Réalisé correctement, ceci fournit une
   connexion réseau sécurisée, y compris pour les clients non SSL.
  </para>

  <para>
   Tout d'abord, assurez-vous qu'un serveur <application>SSH</application> est
   en cours d'exécution sur la même machine que le serveur
   <productname>PostgreSQL</productname> et que vous pouvez vous connecter via
   <command>ssh</command> en tant qu'un utilisateur quelconque. Ensuite, vous
   pouvez établir un tunnel sécurisé avec une commande comme ceci sur la machine
   cliente&nbsp;:
<programlisting>
ssh -L 3333:foo.com:5432 joe@foo.com
</programlisting>
   Le premier numéro de l'argument <option>-L</option>, 3333, est le numéro de
port de votre bout du tunnel&nbsp;; il peut être choisi librement. Le second
numéro, 5432, est le bout distant du tunnel&nbsp;: le numéro de port que votre
serveur utilise. Le nom ou l'adresse entre les numéros de port est l'hôte
disposant du serveur de bases de données auquel vous souhaitez vous connecter.
Pour cela, vous vous connectez au port 3333 de votre machine locale&nbsp;:
<programlisting>
psql -h localhost -p 3333 template1
</programlisting>
   Sur le serveur de bases de données, il semblera que vous êtes réellement
   l'utilisateur <literal>joe@foo.com</literal> et il utilisera la procédure
   d'authentification adéquate pour cet utilisateur. Pour que la configuration
   du serveur réussisse, vous devez être autorisé à vous connecter via
   <command>ssh</command> en tant que <literal>joe@foo.com</literal>, comme si
   vous essayez d'utiliser <command>ssh</command> pour configurer une session
   terminal.
  </para>

  <tip>
   <para>
    Plusieurs autres applications existantes peuvent fournir des tunnels
   sécurisés en utilisant une procédure similaire dans le concept à celle que
   nous venons de décrire.
   </para>
  </tip>

 </sect1>

</Chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
