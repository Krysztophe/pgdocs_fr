<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/lib/cvs/pgsql-fr/sgml/wal.sgml,v 1.9 2005/07/15 06:14:30 guillaume Exp $ -->

<chapter id="wal">
 <title>Fiabilité et journaux de transaction</title>

 <para>
  Ce chapitre explique comment les journaux de transaction sont utilisés pour
  obtenir des traitements efficaces et fiables.
 </para>

 <sect1 id="wal-reliability">
 <title>Fiabilité</title>

  <para>
   La fiabilité est une propriété importante de tout système de base de
   données sérieux. <productname>PostgreSQL</productname> fait tout ce qui est
   en son pouvoir pour garantir une fiabilité à toute épreuve. Un des aspects
   de cette fiabilité est que toutes les données enregistrées par une
   transaction
   validée doivent être stockées dans un espace non volatile, un espace
   non sensible aux coupures de courant, aux bogues du système d'exploitation
   et aux problèmes matériels (sauf en cas de problème sur l'espace non
   volatile, bien sûr). Écrire avec succès les données sur le stockage
   permanent de l'ordinateur (disque dur ou un équivalent) est habituellement
   suffisant pour cela. En fait, même si un ordinateur est vraiment
   endommagé, si le disque dur survit, il peut être placé dans un autre
   ordinateur avec un matériel similaire et toutes les transactions validées
   resteront intactes.
  </para>

  <para>
   Bien que forcer l'enregistrement des données périodiquement sur le disque
   semble être une opération simple, ce n'est pas le cas. Comme les disques
   durs sont beaucoup plus lents que la mémoire principale et les
   processeurs, plusieurs niveaux de cache existent entre la mémoire principale
   de l'ordinateur et les disques. Tout d'abord, il existe le tampon cache du
   système d'exploitation, qui met en cache les blocs disque fréquemment utilisés
   et combine les écritures sur le disque. Heureusement, tous les systèmes
   d'exploitation donne un moyen de forcer les écritures du cache disque vers
   le disque et <productname>PostgreSQL</productname> utilise ces fonctions (voir le
   paramètre <xref linkend="guc-wal-sync-method"/> pour voir comment cela
   se fait).
  </para>

  <para>
   Ensuite, il pourrait y avoir un cache dans le contrôleur du disque dur&nbsp;;
   ceci est assez commun sur les cartes contrôleur <acronym>RAID</acronym>. Certains
   de ces caches sont <firstterm>write-through</firstterm>, signifiant que les écritures
   sont passées au lecteur dès qu'elles arrivent. D'autres sont
   <firstterm>write-back</firstterm>, signifiant que les données sont passées au lecteur
   un peu après. De tels caches peuvent apporter une faille dans la fiabilité car
   la mémoire du cache du disque contrôleur est volatile et qu'elle perdra son
   contenu à la prochaine coupure de courant. Des cartes contrôleur de meilleure
   qualité ont des caches <firstterm>avec batterie</firstterm>, signifiant que la carte
   dispose d'une batterie qui maintient le courant dans le cache en cas de perte
   de courant. Une fois le courant revenu, les données seront écrites sur les
   disques durs.
  </para>

  <para>
   Et enfin, la plupart des disques durs ont des caches. Certains sont
   <quote>write-through</quote> alors que d'autres sont
   <quote>write-back</quote>. Les mêmes soucis sur la perte de données existent
   pour ces deux types de cache. Les lecteurs IDE ont principalement des caches
   <quote>write-back</quote> qui ne survivront pas à une perte de courant.
  </para>

  <para>
   Quand le système d'exploitation envoie une demande d'écriture au disque,
   il ne peut pas faire grand chose pour s'assurer que les données sont
   arrivées dans un espace de stockage non volatile. Ce travail incombe à
   l'administrateur&nbsp;: ce dernier doit s'assurer que tous les composants de
   stockage assurent l'intégrité des données. Évitez les contrôleurs disques
   ne disposant pas de caches protégés par batterie. Au niveau du disque,
   désactivez le cache <quote>write-back</quote> si le disque ne garantit pas
   que les données seront écrites avant un arrêt.
  </para>

  <para>
   Un autre risque concernant la perte des données est dû aux opérations
   d'écriture sur les plateaux du disque. Les plateaux sont divisés en
   secteur de 512 octets généralement. Chaque opération de lecture ou écriture
   physique traite un secteur entier. Quand la demande d'écriture arrive au
   lecteur, elle pourrait contenir 512 octets, 1024 octets ou 8192 octets et
   le processus d'écriture pourrait échouer à cause d'une perte de courant à
   tout moment signifiant que certains octets pourraient être écrits et les
   autres perdus. Pour se prévenir contre ce type d'échec,
   <productname>PostgreSQL</productname> écrit périodiquement des images de page complète
   sur le stockage permanent <emphasis>avant</emphasis> de modifier la page réelle sur
   disque. En effectuant ceci, lors d'une récupération après un arrêt brutal,
   <productname>PostgreSQL</productname> peut restaurer des pages écrites partiellement. Si
   vous avez un contrôleur disque avec un cache préservé par batterie ou un
   logiciel pour le système de fichiers (c'est-à-dire Reiser4) qui protège les
   écritures de pages incomplètes, vous pouvez désactiver la création des images
   de page en utilisant le paramètre <xref linkend="guc-full-page-writes"/>.
  </para>

 </sect1>

  <sect1 id="wal-intro">
   <title>Write-Ahead Logging (<acronym>WAL</acronym>)</title>

 <indexterm zone="wal">
  <primary>WAL</primary>
 </indexterm>

 <indexterm>
  <primary>log transaction</primary>
  <see>WAL</see>
 </indexterm>

  <para>
   <firstterm>Write-Ahead Logging</firstterm> (<acronym>WAL</acronym>)
   est une approche conventionnelle pour l'écriture d'un journal de
   transactions.  Sa description détaillée peut être trouvée dans la
   plupart (si ce n'est tous) des livres sur le traitement
   transactionnel. Brièvement, le concept central des
   <acronym>WAL</acronym> est d'effectuer les changements des fichiers de
   données (où résident les tables et les index) 
   uniquement après que ces changements ont été écrits dans un journal,
   c'est-à-dire quand l'enregistrement du journal décrivant les changements a
   été écrit vers le
   stockage permanent.  Si nous suivons cette procédure, nous n'avons
   pas besoin d'écrire les pages de données vers le disque à chaque
   validation de transaction car nous savons que, dans l'éventualité
   d'une défaillance, nous serons capables de récupérer la base de
   données en utilisant le journal&nbsp;: chaque changement qui n'a pas été
   appliqué aux pages de données peut être ré-exécuté depuis les
   enregistrements du journal (ceci est une récupération roll-forward,
   aussi connue sous le nom de REDO).
  </para>

   <para>
    Un avantage majeur en utilisant les <acronym>WAL</acronym>
    est la réduction significative du nombre d'écritures sur le disque
    puisque seul le journal des transactions a besoin d'être écrit sur le
    disque au moment où la transaction est validée plutôt que d'écrire dans chaque fichier de
    données modifié par la transaction. Dans un environnement
    multi-utilisateurs, la validation de nombreuses transactions peut être
    accomplie avec un seul <function>fsync()</function> du journal.  De plus, ce
    dernier est écrit séquentiellement et donc, le coût de
    synchronisation du journal est largement moindre que le coût d'écriture des
    pages de données. Ceci est spécialement vrai pour les serveurs gérant
    beaucoup de petites transactions touchant différentes parties du stockage de
    données.
   </para>

   <para>
    Les <acronym>WAL</acronym> rendent possible le support de sauvegarde
    en ligne et de récupération à un moment, comme décrit dans la <xref
    linkend="backup-online"/>. En archivant les données WAL, nous pouvons
    supporter le retour à tout instant couvert par les données disponibles
    dans les WAL&nbsp;: nous installons simplement une ancienne sauvegarde
    physique de la base de données et nous rejouons les journaux WAL jusqu'au
    moment désiré. Qui plus est, la sauvegarde physique n'a pas besoin d'être
    une image instantanée de l'état de la base de données &mdash; si elle a été
    faite pendant une période de temps, alors rejouer les journaux WAL pour
    cette période corrigera toute incohérence interne.
   </para>
  </sect1>

 <sect1 id="wal-configuration">
  <title>Configuration de journaux de transaction</title>

  <para>
   Il y a plusieurs paramètres de configuration associés aux
   journaux de transaction qui affectent les performances de la base de
   données.  Cette section explique leur utilisation.  Consultez le
   <xref linkend="runtime-config"/> pour des détails sur la
   mise en place de ces paramètres de configuration.
  </para>

  <para>
   Dans la séquence des transactions, les
   <firstterm>points de contrôles</firstterm><indexterm><primary>points de
   contrôle</primary></indexterm> (appelés
   <foreignphrase>checkpoints</foreignphrase>) sont des
   points qui garantissent que les fichiers de données ont été mis à
   jour avec toutes les informations enregistrées dans le journal avant le
   point de contrôle.  Au moment du point de contrôle, toutes les
   pages de données non propres sont écrites sur le disque et une
   entrée spéciale, pour le point de contrôle, est écrite dans le
   journal. En cas de défaillance, la procédure de récupération recherche le
   dernier enregistrement d'un point de vérification dans les traces
   (enregistrement connus sous le nom de <quote>redo log</quote>) à partir
   duquel il devra lancer l'opération
   REDO. Toute modification effectuée sur les fichiers de données avant ce point
   est sûre d'avoir été enregistrée sur disque. Du coup, après qu'un point de
   vérification est réalisé, tous les segments représentant des journaux de
   transaction précédant celui
   contenant le <quote>redo record</quote> ne sont plus nécessaires et peuvent
   être soit recyclés soit supprimés (quand l'archivage des journaux de
   transaction est activé, ces derniers doivent être archivés avant d'être
   recyclés ou supprimés).
  </para>

  <para>
   Le processus d'écriture en tâche de fond lance automatiquement un point de
   contrôle de temps en temps&nbsp;: tous les <xref
   linkend="guc-checkpoint-segments"/> journaux de transaction ou dès que <xref
   linkend="guc-checkpoint-timeout"/> secondes se sont
   écoulées.  Les paramètres par défaut sont respectivement de trois journaux
   et de 300 secondes.  Il est également possible de forcer la création
   d'un point de contrôle en utilisant la commande SQL
   <command>CHECKPOINT</command>.
  </para>

  <para>
   Réduire <varname>checkpoint_segments</varname> et/ou
   <varname>checkpoint_timeout</varname> a pour conséquence de faire
   des points de contrôle plus fréquent.  Ceci permet une récupération
   plus rapide après une défaillance (puisque moins de travail a
   besoin d'être récupéré).  Cependant, il faut équilibrer cela avec
   l'augmentation du coût d'écriture des pages de données non propres.
   Si <xref linkend="guc-full-page-writes"/> est configuré (comme la valeur par
   défaut), il reste un autre facteur à considérer. Pour s'assurer de la
   cohérence des pages de données, la première modification d'une page de
   données après chaque point de vérification résulte dans le traçage du contenu
   entier de la page. Dans ce cas, un intervalle de points de vérification
   plus petit augmentera le volume en sortie des traces WAL, dégradant
   partiellement le but d'utiliser un intervalle plus petit et impliquant
   de toute façon plus d'entrées/sorties au niveau disque.
  </para>

  <para>
   Les points de contrôle sont assez coûteux, tout d'abord parce qu'ils
   écrivent tous les tampons utilisés, et ensuite parce que cela suscite un
   trafic WAL supplémentaire comme indiqué ci-dessus. Du coup, il est conseillé
   de configurer les paramètres en relation assez haut pour que ces points de
   contrôle ne surviennent pas trop fréquemment. En tant que simple vérification
   de santé de vos paramètres, vous pouvez configurer le paramètre <xref
   linkend="guc-checkpoint-warning"/>. Si les points de contrôle arrivent plus
   rapidement que <varname>checkpoint_warning</varname> secondes, un message sera
   affiché dans les journaux du serveur recommandant d'accroître
   <varname>checkpoint_segments</varname>. Une apparition occasionnelle d'un
   message ne doit pas vous alarmer mais, s'il apparaît souvent, alors les
   paramètres de contrôle devraient être augmentés. Les opérations en masse,
   comme les gros transferts via <command>COPY</command>, pourraient être la cause
   de l'apparition d'un tel nombre de messages d'avertissements si
   vous n'avez pas configuré <varname>checkpoint_segments</varname> avec une valeur
   suffisamment haute.
  </para>

  <para>
   Il y aura au moins un fichier segment WAL et normalement
   pas plus de 2 * <varname>checkpoint_segments</varname> + 1
   fichiers.  Chaque fichier de segment fait normalement 16&nbsp;Mo (bien
   que cette taille puisse être modifiée lors de la compilation du serveur). Vous pouvez
   utiliser cela pour estimer l'espace disque
   nécessaire pour <acronym>WAL</acronym>. D'habitude, quand les vieux fichiers 
   segment de journaux ne sont plus nécessaires, ils sont recyclés
   (renommés pour devenir les prochains segments dans une séquence
   numérotée).  S'il y a plus de 2 * <varname>checkpoint_segments</varname> + 1
   fichiers segments à cause d'un pic temporaire du taux d'écriture des journaux,
   ceux inutilisés seront effacés au lieu d'être
   recyclés jusqu'à ce que le système soit en-dessous de cette limite.
  </para>

  <para>
   Il y a deux fonctions <acronym>WAL</acronym> internes couramment
   utilisées&nbsp;:
   <function>LogInsert</function> et <function>LogFlush</function>.
   <function>LogInsert</function> est utilisée pour placer une
   nouvelle entrée à l'intérieur des tampons <acronym>WAL</acronym> en mémoire
   partagée. S'il n'y a plus
   d'espace pour une nouvelle entrée, <function>LogInsert</function>
   devra écrire (bouger dans le cache du noyau) quelques tampons
   <acronym>WAL</acronym> remplis.  Ceci n'est pas désirable parce que
   <function>LogInsert</function> est utilisée lors de chaque
   modification bas niveau de la base (par exemple, insertion d'une
   ligne) quand un verrou exclusif est posé sur des pages de données
   affectées, donc l'opération nécessite d'être aussi rapide que
   possible.  Pire encore, écrire des tampons <acronym>WAL</acronym>
   peut aussi forcer la création d'un nouveau segment de journal ce qui
   peut prendre beaucoup plus de temps.  Normalement, les tampons
   <acronym>WAL</acronym> devraient être écrits et vidés par une requête
   de <function>LogFlush</function> qui est faite, la plupart du
   temps, au moment de la validation d'une transaction pour assurer
   que les entrées de la transaction sont écrites vers un stockage
   permanent.  Sur les systèmes avec une importante écriture de journaux,
   les requêtes de <function>LogFlush</function> peuvent ne pas
   arriver assez souvent pour empêcher <function>LogInsert</function> d'avoir
   à écrire.  Sur de tels systèmes, on devrait augmenter le nombre de tampons
   <acronym>WAL</acronym> en modifiant le paramètre de configuration <xref
   linkend="guc-wal-buffers"/>. Par défaut, le nombre de tampons est de 8. 
   Augmenter cette valeur augmentera considérablement l'utilisation de la
   mémoire partagée. Quand <xref linkend="guc-full-page-writes"/> est configuré
   et que le système est très occupé, configurer cette variable avec une valeur
   plus importante aidera à avoir des temps de réponse plus réguliers
   lors de la période suivant chaque point de vérification.
  </para>

  <para>
   Le paramètre <xref linkend="guc-commit-delay"/> définit combien de
   micro-secondes le processus serveur dormira après l'écriture d'une
   entrée de validation dans le journal avec
   <function>LogInsert</function> avant d'exécuter un 
   <function>LogFlush</function>.  Ce délai permet aux autres
   processus du serveur d'ajouter leurs entrées de validation dans le
   fichier de journal afin de tout écrire vers le disque avec une seule
   synchronisation du journal.  Aucune mise en sommeil n'aura lieu si
   <xref linkend="guc-fsync"/> n'est pas disponible ou si moins de
   <xref linkend="guc-commit-siblings"/> autres sessions sont, à ce
   moment, dans des transactions actives&nbsp;; cela évite de dormir quand
   il est improbable qu'une autre session fasse bientôt une
   validation.  Notez que dans la plupart des plate-formes, la
   résolution d'une requête de sommeil est de 10 millisecondes, donc
   un <varname>commit_delay</varname> différent de zéro et configuré
   entre 1 et 10000 micro-secondes aura le même effet.  Les bonnes
   valeurs pour ce paramètre ne sont pas encore claires&nbsp;; les essais
   sont encouragés.
  </para>

  <para>
   Le paramètre <xref linkend="guc-wal-sync-method"/> détermine comment 
   <productname>PostgreSQL</productname> demandera au noyau de forcer les mises
   à jour <acronym>WAL</acronym> sur le disque. Toutes les options devraient
   être les mêmes dans la mesure où la fiabilité ne disparaît pas,
   mais c'est avec des options spécifiques à la plate-forme que ça
   sera le plus rapide.  Notez que ce paramètre est ignoré si
   <varname>fsync</varname> a été désactivé.
  </para>

  <para>
   Configurer le paramètre <xref linkend="guc-wal-debug"/> avec une
   valeur différente de zéro aura pour résultat d'enregistrer dans les
   journaux du serveur l'appel WAL à chaque <function>LogInsert</function>
   et <function>LogFlush</function>.  En ce moment, il n'est fait
   aucune différence entre les valeurs supérieures à zéro.  Cette
   option pourra être remplacée par un mécanisme plus général dans le
   futur.
  </para>
   <para>
   Activer le paramètre de configuration <xref linkend="guc-wal-debug"/> (à
   supposer que <productname>PostgreSQL</productname> ait été compilé avec le
   support de ce paramètre) résultera dans l'enregistrement de chaque appel
   <acronym>WAL</acronym> à <function>LogInsert</function> et
   <function>LogFlush</function> dans les journaux du serveur. Cette option
   pourrait être remplacée par un mécanisme plus général dans le futur.
  </para>
</sect1>

 <sect1 id="wal-internals">
  <title>Vue interne des WAL</title>

  <para>
   <acronym>WAL</acronym> est automatiquement disponible&nbsp;; aucune
   action n'est requise de la part de l'administrateur excepté
   de s'assurer que l'espace disque requis par les journaux
   WAL soit présent et que tous les réglages soient faits (regardez
   la <xref linkend="wal-configuration"/>).
  </para>

  <para>
   Les journaux <acronym>WAL</acronym> sont stockés dans le répertoire
   <filename>pg_xlog</filename> sous le répertoire de données, comme un ensemble
   de fichiers segments, chacun d'une taille de 16&nbsp;Mo généralement. Chaque
   segment est divisé en pages de généralement 8&nbsp;Ko. Les en-têtes de
   l'entrée du journal sont décrites dans
   <filename>access/xlog.h</filename>&nbsp;; le contenu de l'entrée dépend
   du type de l'événement qui est enregistré.  Les fichiers segments
   sont nommés avec un chiffre qui est toujours incrémenté et qui
   commence à <filename>000000010000000000000000</filename>.  Les nombres ne
   bouclent pas actuellement, mais cela devrait prendre beaucoup de temps
   pour épuiser le stock de nombres disponibles.
  </para>

  <para>
   Il est avantageux que le journal soit situé sur un autre disque que
   celui des fichiers principaux de la base de données.  Cela peut
   se réaliser en déplaçant le répertoire
   <filename>pg_xlog</filename> vers un autre emplacement (alors que
   le serveur est arrêté, naturellement) et en créant un lien
   symbolique de l'endroit d'origine dans le répertoire principal de
   données au nouvel emplacement.
  </para>

  <para>
   Le but de <acronym>WAL</acronym>, s'assurer que le journal est écrit
   avant l'altération des entrées dans la base, peut être mis en échec par
   les disques<indexterm><primary>disques durs</primary></indexterm> qui
   rapportent une écriture
   réussie au noyau quand, en fait, ils ont seulement mis en cache
   les données et ne les ont pas encore stockés sur le disque.  Une
   coupure de courant dans ce genre de situation peut toujours mener à
   une corruption irrécupérable des données.  Les administrateurs
   devraient s'assurer que les disques contenant les journaux de
   transaction de <productname>PostgreSQL</productname> ne
   produisent pas ce genre de faux rapports.
  </para>

  <para>
   Après qu'un point de contrôle ait été fait et que le journal ait été
   écrit, la position du point de contrôle est sauvegardée dans le
   fichier <filename>pg_control</filename>.  Donc, quand la
   restauration doit se faire, le serveur lit en premier
   <filename>pg_control</filename> et ensuite l'entrée du point de
   contrôle&nbsp;; ensuite, il exécute l'opération REDO en parcourant vers
   l'avant à partir de la position du journal indiquée dans l'entrée du
   point de contrôle. Parce que l'ensemble du contenu des pages de
   données est sauvegardé dans le journal à la première modification de
   page après un point de contrôle, toutes les pages changées depuis
   le point de contrôle seront restaurées dans un état cohérent.
  </para>

  <para>
   Pour gérer le cas où <filename>pg_control</filename> est corrompu, nous
   devons permettre le parcours des segments de journaux
   existants en ordre inverse &mdash; du plus récent au plus ancien &mdash; pour
   trouver le dernier point de vérification. Ceci n'a pas encore été implémenté.
   <filename>pg_control</filename> est assez petit (moins d'une page disque)
   pour ne pas être sujet aux problèmes d'écriture partielle et, au moment où
   ceci est écrit, il n'y a eu aucun rapport d'échecs de la base de données
   uniquement à cause de son incapacité à lire <filename>pg_control</filename>.
   Donc, bien que cela soit théoriquement un point faible,
   <filename>pg_control</filename> ne semble pas être un problème en pratique.
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->

