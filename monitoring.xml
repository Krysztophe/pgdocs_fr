<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<chapter id="monitoring">
 <title>Surveiller l'activité de la base de données</title>

 <indexterm zone="monitoring">
  <primary>surveiller</primary>
  <secondary>activité de la base de données</secondary>
 </indexterm>

 <indexterm zone="monitoring">
  <primary>activité de la base de données</primary>
  <secondary>suveiller</secondary>
 </indexterm>

 <para>
  Un administrateur de bases de données se demande fréquemment&nbsp;: <quote>Que
  fait le système en ce moment&nbsp;?</quote> Ce chapitre discute de la façon
  de le savoir.
 </para>

  <para>
   Plusieurs outils sont disponibles pour surveiller l'activité de la base de
   données et pour analyser les performances. Une grande partie de ce chapitre
   concerne la description du récupérateur de statistiques de
   <productname>PostgreSQL</productname> mais personne ne devrait négliger les
   programmes de surveillance Unix standards tels que <command>ps</command>,
   <command>top</command>, <command>iostat</command> et <command>vmstat</command>. De plus, une fois
   qu'une requête peu performante a été identifiée, des investigations
   supplémentaires pourraient être nécessaires en utilisant la commande <xref
   linkend="sql-explain" endterm="sql-explain-title"/> de
   <productname>PostgreSQL</productname>. La <xref linkend="using-explain"/>
   discute de <command>EXPLAIN</command> et des autres méthodes pour comprendre le
   comportement d'une seule requête.
  </para>

 <sect1 id="monitoring-ps">
  <title>Outils Unix standard</title>

  <indexterm zone="monitoring-ps">
   <primary>ps</primary>
   <secondary>pour surveiller l'activité</secondary>
  </indexterm>

  <para>
   Sur la plupart des plateformes, <productname>PostgreSQL</productname> modifie
   son titre de commande reporté par <command>ps</command> de façon à ce que les
   processus serveur individuels puissent être rapidement identifiés. Voici un
   affichage d'exemple&nbsp;:

<screen>$ ps auxww | grep ^postgres
postgres   960  0.0  1.1  6104 1480 pts/1    SN   13:17   0:00 postgres -i
postgres   963  0.0  1.1  7084 1472 pts/1    SN   13:17   0:00 postgres: writer process   
postgres   965  0.0  1.1  6152 1512 pts/1    SN   13:17   0:00 postgres: stats collector process   
postgres   998  0.0  2.3  6532 2992 pts/1    SN   13:18   0:00 postgres: tgl runbogue 127.0.0.1 idle
postgres  1003  0.0  2.4  6532 3128 pts/1    SN   13:19   0:00 postgres: tgl regression [local] SELECT waiting
postgres  1016  0.1  2.4  6532 3080 pts/1    SN   13:19   0:00 postgres: tgl regression [local] idle in transaction</screen>

   (L'appel approprié de <command>ps</command> varie suivant les différentes
   plateformes, de même que les détails affichés. Cet exemple est
   tiré d'un système Linux récent.) Le premier processus affiché ici est le
   processus serveur maître, le processus serveur maître. Les arguments
   affichés pour cette commande sont les mêmes qu'à son lancement. Les deux
   processus suivant sont des processus en tâche de fond lancés
   automatiquement par le processus maître (le processus
   <quote>stats collector</quote> n'est pas présent si
   vous avez configuré le système pour qu'il ne lance pas le récupérateur de
   statistiques). Chacun des autres processus est un processus serveur gérant
   une connexion cliente. Tous ces processus restant initialisent l'affichage de
   la ligne de commande de la forme

<screen>postgres: <replaceable>utilisateur</replaceable> <replaceable>base_de_données</replaceable> <replaceable>hôte</replaceable> <replaceable>activité</replaceable></screen>

  L'utilisateur, la base de données et les éléments de l'hôte de connexion
  restent identiques pendant toute la vie de connexion du client mais
  l'indicateur d'activité change. L'activité pourrait être <literal>idle</literal>
  (c'est-à-dire en attente d'une commande du client), <literal>idle in
  transaction</literal> (en attente du client à l'intérieur d'un bloc de
  <command>BEGIN</command>/<command>COMMIT</command>) ou un nom de commande du type
  <literal>SELECT</literal>. De plus, <literal>waiting</literal> est attaché si le processus
  serveur est en attente d'un verrou détenu par un autre processus serveur.
  Dans l'exemple ci-dessus, nous pouvons supposer que le processus 1003 attend
  que le processus 1016 ait terminé sa transaction et, du coup, libère un verrou.
  </para>

  <para>
   Si vous avez désactivé <xref linkend="guc-update-process-title"/>, alors
   l'indicateur d'activité n'est pas mis à jour&nbsp;; le titre du processus
   est configuré une seule fois quand un nouveau processus est lancé. Sur
   certaines plateformes, ceci permet d'économiser du temps. Sur d'autres,
   cette économie est insignifiante.
  </para>

  <tip>
  <para>
  <productname>Solaris</productname> requiert une gestion particulière. Vous
  devez utiliser <command>/usr/ucb/ps</command> plutôt que
  <command>/bin/ps</command>. Vous devez aussi utiliser deux options
  <option>w</option> et non pas seulement une. En plus, votre appel original de
  la commande <command>postgres</command> doit avoir un affichage de statut
  dans <command>ps</command> plus petit que celui fourni par les autres
  processus serveur. Si vous échouez dans les trois, l'affichage de
  <command>ps</command> pour chaque processus serveur sera la ligne de commande
  originale de <command>postgres</command>.
  </para>
  </tip>
 </sect1>

 <sect1 id="monitoring-stats">
  <title>Le récupérateur de statistiques</title>

  <indexterm zone="monitoring-stats">
   <primary>statistiques</primary>
  </indexterm>

  <para>
   Le <firstterm>récupérateur de statistiques</firstterm> de
   <productname>PostgreSQL</productname> est un sous-système qui supporte la
   récupération et les rapports d'informations sur l'activité du serveur.
   Actuellement, le récupérateur peut compter les accès aux tables et index à la
   fois en terme de blocs disque et de lignes individuelles. Il conserve aussi
   la trace de nombre total de lignes dans chaque table ainsi que la date et
   l'heure du dernier VACUUM et du dernier ANALYZE pour chaque table.
  </para>

  <para>
   <productname>PostgreSQL</productname> supporte aussi
   la détermination de la commande exacte en cours d'exécution par les autres
   processus serveur. Cette fonctionnalité indépendante ne dépend pas du
   récupérateur de statistiques.
  </para>

 <sect2 id="monitoring-stats-setup">
  <title>Configuration de la récupération de statistiques</title>

  <para>
   Comme la récupération de statistiques ajoute un temps supplémentaire à
   l'exécution de la requête, le système peut être configuré pour récupérer ou
   non des informations. Ceci est contrôlé par les paramètres de configuration
   qui sont normalement initialisés dans <filename>postgresql.conf</filename> (voir
   <xref linkend="runtime-config"/> pour plus de détails sur leur
   initialisation).
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-counts"/> contrôle si l'information
   est déjà envoyée au processus de récupération des statistiques et détermine
   du coup s'il y a une surcharge à l'exécution pour le décompte des événements.
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-activities"/> active la surveillance
   de la commande en cours d'exécution par un processus serveur.
  </para>

  <para>
   Normalement, ces paramètres sont configurés dans
   <filename>postgresql.conf</filename> de façon à ce qu'ils s'appliquent à tous les
   processus serveur mais il est possible de les activer/désactiver sur des
   sessions individuelles en utilisant la commande <xref
   linkend="sql-set" endterm="sql-set-title"/> (pour empêcher les utilisateurs
   ordinaires de cacher leur activité à l'administrateur, seuls les
   superutilisateurs sont autorisés à modifier ces paramètres avec
   <command>SET</command>).
  </para>

 </sect2>

 <sect2 id="monitoring-stats-views">
  <title>Visualiser les statistiques récupérées</title>

  <para>
   Plusieurs vues prédéfinies, listées dans le <xref
   linkend="monitoring-stats-views-table"/>, sont disponibles pour afficher
   les résultats de la récupération de statistiques. Autrement, vous pouvez
   construire des vues personnalisées en utilisant les fonctions statistiques
   existantes.
  </para>

  <para>
   En utilisant les statistiques pour surveiller l'activité en cours, il est
   important de réaliser que l'information n'est pas mise à jour instantanément.
   Chaque processus serveur individuel transmet les nouvelles statistiques au
   récupérateur juste avant l'attente d'une
   nouvelle commande du client&nbsp;; donc une requête toujours en cours
   n'affecte pas les totaux affichés. De plus, le récupérateur lui-même émet un
   nouveau rapport une fois par <varname>PGSTAT_STAT_INTERVAL</varname>
   millisecondes (500, sauf si cette valeur a été modifiée lors de la
   construction du serveur). Donc, les totaux affichés sont bien derrière
   l'activité réelle. Néanmoins, l'information sur la requête en cours récupérée
   par <varname>track_activities</varname> est toujours à jour.
  </para>

  <para>
   Un autre point important est que, lorsqu'un processus serveur se voit
   demander d'afficher une des statistiques, il récupère tout d'abord le rapport
   le plus récent émis par le processus de récupération, puis continue
   d'utiliser cette image de toutes les vues et fonctions statistiques jusqu'à
   la fin de sa transaction en cours. De façon similaire, les informations sur
   les requêtes en cours, quelque soit le processus, sont récupérées quand une
   telle information est demandée dans une transaction, et cette même information
   sera affichée lors de la transaction. Donc, les statistiques ne sembleront pas
   changer tant que vous restez dans la même transaction. Ceci est une
   fonctionnalité, et non pas un bogue, car il vous permet de traiter plusieurs
   requêtes sur les statistiques et de corréler les résultats sans vous
   inquiéter que les nombres aient pu changer. Mais si vous voulez voir les
   nouveaux résultats pour chaque requête, assurez-vous de lancer les requêtes
   en dehors de tout bloc de transaction. Autrement, vous pouvez appeler
   <function>pg_stat_clear_snapshot</function>(), qui annulera l'image statistique
   de la transaction en cours. L'utilisation suivante des informations
   statistiques causera la récupération d'une nouvelle image.
  </para>

  <table id="monitoring-stats-views-table">
   <title>Vues statistiques standards</title>

   <tgroup cols="2">
    <colspec colnum="1" colwidth="0.4*"/>
    <colspec colnum="2" colwidth="1.6*"/>
    <thead>
     <row>
      <entry>Nom de la vue</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structname>pg_stat_activity</structname></entry>
      <entry>Une ligne par processus serveur, affichant l'OID de la base de
      données, le nom de la base, l'<acronym>ID</acronym> du processus, l'OID de
      l'utilisateur, son nom, la requête en cours, l'état d'attente de la requête,
      le moment où a commencé l'exécution de la requête et de la transaction, le
	  moment où le processus serveur a été lancé ainsi que l'adresse
      et le numéro de port du client. Les colonnes renvoyant des données sur la
      requête en cours sont disponibles sauf si le paramètre
      <varname>track_activities</varname> a été désactivé. De
      plus, ces colonnes sont seulement visibles si l'utilisateur examinant
      cette vue est un superutilisateur ou est le propriétaire du processus en
      cours de rapport.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_bgwriter</structname></entry>
      <entry>Une seule ligne indiquant des statistiques du cluster complet
      provenant du processus d'écriture en tâche de fond&nbsp;: nombre
      de points de vérification planifiés, points de vérification demandés,
      tampons écrits par les points de vérification et parcours de nettoyage,
      et le nombre de fois où le processus d'écriture en tâche de fond a stoppé
      un parcours de nettoyage parce qu'il a écrit trop de tampons. Cela inclut
      aussi des statistiques sur les tampons partagés dont le nombre de
      tampons écrit par les processus serveur (c'est-à-dire par autre chose
      que le processus d'écriture en tâche de fond) et le nombre total de
      tampons alloués.
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_database</structname></entry>
      <entry>Une ligne par base de données, affichant l'OID de la base de
      données, son nom, le nombre de processus serveur actifs connectés à cette
      base, le nombre total de transactions validées et le nombre de
      celles qui ont été annulées, le nombre total de blocs disque lus, le
      nombre total de succès du tampon (c'est-à-dire le nombre de lectures de
      blocs évitées en trouvant déjà le bloc dans le cache du tampon), le
	  nombre de lignes renvoyées, insérées, mises à jour et supprimées.
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_tables</structname></entry>
      <entry>Pour chaque table dans la base de données en cours (ceci 
      incluant les tables TOAST), l'OID de la table, le nom du schéma et de la
      table, le nombre de parcours séquentiels réalisés, le nombre de lignes
      vivantes récupérées par des parcours séquentiels, le nombre de lignes
      vivantes récupérées par des parcours séquentiels, le nombre de parcours
      d'index réalisés (pour tous les index appartenant à cette table), le
      nombre de lignes vivantes récupérées par les parcours d'index, le nombre
      d'insertions, de modifications et de suppressions de ligne, le nombre de
      mises à jour de ligne via HOT (donc sans mise à jour séparée des index),
      le nombre de lignes vivantes et mortes, la dernière
      fois que la table a été la cible d'un VACUUM manuel, la dernière fois
      qu'elle a été la cible d'un VACUUM exécuté par le démon autovacuum, la
      dernière fois que la table a été la cible d'un ANALYZE manuel, la dernière
      fois qu'elle a été la cible d'un ANALYZE exécuté par le démon autovacuum.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_tables</structname></entry>
      <entry>Identique à <structname>pg_stat_all_tables</structname>, sauf que seules les
      tables systèmes sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_tables</structname></entry>
      <entry>Identique à <structname>pg_stat_all_tables</structname>, sauf que seules les
      tables utilisateurs sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_indexes</structname></entry>
      <entry>Pour chaque index de la base de données en cours, l'OID de la
      table et de l'index, le nom du schéma, de la table et de l'index, le
      nombre de parcours d'index initiés sur cet index, le nombre d'entrées de
      l'index renvoyées par les parcours d'index, et le nombre de lignes actives
      de table récupérées par de simples parcours d'index utilisant cet index.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_indexes</structname></entry>
      <entry>Identique à <structname>pg_stat_all_indexes</structname>, sauf que seules les
      tables systèmes sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_indexes</structname></entry>
      <entry>Identique à <structname>pg_stat_all_indexes</structname>, sauf que seules
      les tables utilisateurs sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_tables</structname></entry>
      <entry>Pour chaque table de la base de données en cours (ceci incluant les
      tables TOAST), l'OID de la table, le nom du schéma et de la table, le
      nombre de blocs disque lus à partir de cette table, le nombre de lectures
      tampon réussies dans tous les index de cette table, le nombre de blocs
      disque lus et de lectures tampon réussies à partir de la table TOAST
      (si elle existe), et, enfin, le nombre de blocs disque lus et le nombre
      de lectures tampon réussies à partir de l'index de la table TOAST.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_tables</structname></entry>
      <entry>Identique à <structname>pg_statio_all_tables</structname>, sauf que seules
      les tables systèmes sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_tables</structname></entry>
      <entry>Identique à <structname>pg_statio_all_tables</structname>, sauf que seules
      les tables utilisateur sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_indexes</structname></entry>
      <entry>Pour chaque index de la base de données en cours, l'OID de la table
      et de l'index, le nom du schéma, de la table et de l'index, le nombre
      de blocs disque lus et le nombre de lectures tampon réussies pour
      cet index.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_indexes</structname></entry>
      <entry>Identique à <structname>pg_statio_all_indexes</structname>, sauf que seuls
      les index systèmes sont affichés.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_indexes</structname></entry>
      <entry>Identique à <structname>pg_statio_all_indexes</structname>, sauf que seuls
      les index utilisateur sont affichés.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_sequences</structname></entry>
      <entry>Pour chaque séquence de la base de données en cours, l'OID de la
      séquence, le nom du schéma et de la séquence, le nombre de blocs disque
      lus et le nombre de lectures réussies du tampon pour cette séquence.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_sequences</structname></entry>
      <entry>Identique à <structname>pg_statio_all_sequences</structname>, sauf que
      seules les séquences système sont affichées (actuellement, aucune
      séquence système n'est définie, donc cette vue est toujours vide)</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_sequences</structname></entry>
      <entry>Identique à <structname>pg_statio_all_sequences</structname>, sauf que
      seules les séquences utilisateur sont affichées.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Les statistiques par index sont particulièrement utiles pour déterminer
   les index utilisés et leur efficacité.
  </para>

  <para>
   À partir de la version 8.1 de <productname>PostgreSQL</productname>, les
   index peuvent être utilisés soit directement soit via des <quote>parcours de
   bitmap</quote>. Dans un parcours de bitmap, les résultats de plusieurs index
   peuvent être combinés via des règles AND ou OR&nbsp;; donc il est difficile
   d'associer des récupérations de lignes d'en-têtes individuelles avec des
   index spécifiques quand un parcours de bitmap est utilisé. Du coup, un
   parcours de bitmap incrémente le nombre dans
   <structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_read</structfield>
   pour les index qu'il utilise et il incrémente le nombre
   <structname>pg_stat_all_tables</structname>.<structfield>idx_tup_fetch</structfield>
   pour la table, mais il n'affecte pas
   <structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_fetch</structfield>.
  </para>

  <note>
   <para>
    Avant <productname>PostgreSQL</productname> 8.1, les totaux
    <structfield>idx_tup_read</structfield> et <structfield>idx_tup_fetch</structfield> étaient
    pratiquement toujours égaux. Maintenant, ils peuvent être différents même
    sans considérer les parcours de bitmap parce que
    <structfield>idx_tup_read</structfield> compte les entrées d'index récupérées à partir
    de l'index alors que <structfield>idx_tup_fetch</structfield> compte les lignes actives
    récupérées à partir de la table&nbsp;; ce dernier sera moindre si des lignes
    mortes ou pas-encore-validées sont récupérées en utilisant l'index.
   </para>
  </note>

  <para>
   Les vues <structname>pg_statio_</structname> sont principalement utiles pour
   déterminer l'efficacité du cache tampon. Quand le nombre de lectures disques
   réelles est plus petit que le nombre de récupérations valides par le tampon,
   alors le cache satisfait la plupart des demandes de lecture sans faire appel
   au noyau. Néanmoins, ces statistiques ne nous donnent pas l'histoire
   complète&nbsp;: à cause de la façon dont <productname>PostgreSQL</productname> gère les
   entrées/sorties disque, les données qui ne sont pas dans le tampon de
   <productname>PostgreSQL</productname> pourraient toujours résider dans le tampon
   d'entrées/sorties du noyau et pourraient, du coup, être toujours récupérées
   sans nécessiter une lecture physique. Les utilisateurs intéressés pour
   obtenir des informations plus détaillées sur le comportement des
   entrées/sorties dans <productname>PostgreSQL</productname> sont invités à utiliser le
   récupérateur de statistiques de <productname>PostgreSQL</productname> avec les outils du
   système d'exploitation permettant une vue de la gestion des
   entrées/sorties par le noyau.
  </para>

  <para>
   Il existe d'autres façons de regarder les statistiques. Cela se fait en
   écrivant des requêtes qui utilisent les mêmes fonctions d'accès aux
   statistiques que les vues standards. Ces fonctions sont listées
   dans le <xref linkend="monitoring-stats-funcs-table"/>. Les fonctions d'accès
   par base de données prennent un OID de la base de données comme argument pour
   identifier la base de données du rapport. Les fonctions par table et par
   index prennent l'OID de la table ou de l'index (notez que seuls les tables
   et les index de la base de données en cours peuvent être vus par ces
   fonctions). Les fonctions d'accès au processus prennent le numéro
   d'identifiant du processus.
  </para>

  <table id="monitoring-stats-funcs-table">
   <title>Fonctions d'accès aux statistiques</title>

   <tgroup cols="3">
    <colspec colnum="1" colwidth="2.0*"/>
    <colspec colnum="2" colwidth="0.3*"/>
    <colspec colnum="3" colwidth="1.2*"/>
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Code de retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><function>pg_stat_get_db_numbackends</function>(<type>oid</type>)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       Nombre de processus actifs pour la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_xact_commit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Transactions validées dans la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_xact_rollback</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Transactions annulées dans la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_blocks_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de récupérations de blocs disque pour la base de
       données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_blocks_hit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de récupérations de blocs disque trouvés dans le
       tampon pour la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_returned</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes renvoyées pour la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes récupérées pour la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_inserted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes insérées dans la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour dans la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_deleted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes supprimées dans la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_numscans</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de parcours séquentiels réalisés lorsque l'argument est une
       table, ou nombre de parcours d'index lorsque l'argument est un index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_returned</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes lues par les parcours séquentiels lorsque l'argument
       est une table, ou nombre de lignes d'index lues lorsque l'argument est un
       index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre de lignes de table récupérées par des parcours de bitmap quand
       l'argument est une table, ou les lignes de table récupérées par de
       simples parcours d'index en utilisant cet index quand l'argument est un
       index.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_inserted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes insérées dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour dans la table (incluant les mises à jour
	   via HOT)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_deleted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes supprimées dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_hot_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour via HOT dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_live_tuples</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes vivantes dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_dead_tuples</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mortes dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de récupération de blocs disques pour la table ou
       l'index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_hit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de blocs disque récupérés dans le tampon pour la
       table ou l'index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_deleted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes supprimées dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes de récupération de blocs disque pour les tables ou index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_hit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes de blocs disque trouvés en cache pour les tables ou index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_vacuum_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier VACUUM survenu sur cette table à la demande de
       l'utilisateur
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_autovacuum_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier ANALYZE lancé par le démon autovacuum survenu sur
       cette table.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_analyze_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier VACUUM survenu sur cette table à la demande de
       l'utilisateur
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_autoanalyze_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier ANALYZE lancé par le démon autovacuum survenu sur
       cette table.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_idset</function>()</literal></entry>
      <entry><type>set of integer</type></entry>
      <entry>
       Ensemble d'identifiants de processus actifs (de 1 au nombre de processus
       actifs). Voir l'exemple d'utilisation dans le texte.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_backend_pid</function>()</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       ID du processus pour le processus serveur attaché à la session en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_pid</function>(<type>integer</type>)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       ID du processus pour le processus serveur donné
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_dbid</function>(<type>integer</type>)</literal></entry>
      <entry><type>oid</type></entry>
      <entry>
       ID de la base de données pour le processus serveur en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_userid</function>(<type>integer</type>)</literal></entry>
      <entry><type>oid</type></entry>
      <entry>
       ID de l'utilisateur pour le processus serveur en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_activity</function>(<type>integer</type>)</literal></entry>
      <entry><type>text</type></entry>
      <entry>
       Commande active du processus serveur indiqué mais seulement si l'utilisateur
       courant est un superutilisateur ou le même utilisateur dont vient la commande
       (et que <varname>track_activities</varname> est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_waiting</function>(<type>integer</type>)</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>
       True si le processus serveur indiqué attend un verrou mais seulement si l'utilisateur
       courant est un superutilisateur ou le même utilisateur dont vient la commande
       (et que <varname>track_activities</varname> est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_activity_start</function>(<type>integer</type>)</literal></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
       Date/heure du lancement de la requête en cours d'exécution sur le processus
       serveur indiqué, mais seulement si l'utilisateur courant est un
       superutilisateur ou le même utilisateur dont vient la commande (et que
       <varname>track_activities</varname> est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_xact_start</function>(<type>integer</type>)</literal></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
       Le moment auquel le processus serveur indiqué a été exécuté.
       Seulement si l'utilisateur est un superutilisateur ou le même utilisateur
       que celui qui a lancé la session (et que <varname>track_activities</varname>
       est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_start</function>(<type>integer</type>)</literal></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
       L'heure à laquelle le processus serveur donné a été lancé ou NULL si
       l'utilisateur en cours n'est ni un superutilisateur ni l'utilisateur
       de la session requêtée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_client_addr</function>(<type>integer</type>)</literal></entry>
      <entry><type>inet</type></entry>
      <entry>
       L'adresse IP du client connecté au processus serveur donné. NULL si
       la connexion est établie sur un socket de domaine Unix. Aussi NULL si
       l'utilisateur en cours n'est ni un superutilisateur ni l'utilisateur
       de la session requêtée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_client_port</function>(<type>integer</type>)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       Le numéro de port du client connecté au processus serveur donné. -1 si
       la connexion est établie sur un socket de domaine Unix. NULL si
       l'utilisateur en cours n'est ni un superutilisateur ni l'utilisateur
       de la session requêtée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_timed_checkpoints</function>()</literal></entry>
       <entry><type>bigint</type></entry>
       <entry>
        Le nombre de fois où le processus d'écriture en tâche de fond a lancé des points de vérification
	planifiés (donc parce que <varname>checkpoint_timeout</varname> est
	arrivé à expiration)
       </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_requested_checkpoints</function>()</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre de fois où le processus d'écriture en tâche de fond a lancé des points de vérification en se
       basant sur les demandes des processus serveur parce que
       <varname>checkpoint_segments</varname> a été dépassé ou parce que la
       commande <command>CHECKPOINT</command> a été lancée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_buf_written_checkpoints</function>()</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre de tampons écrits par le processus d'écriture en tâche de fond lors de points de vérification
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_buf_written_clean</function>()</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre de tampons écrits par le processus d'écriture en tâche de fond pour le nettoyage de routine
       des pages sales
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_maxwritten_clean</function>()</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre de fois où le processus d'écriture en tâche de fond est arrêté son parcours de nettoyage parce
       qu'il a écrit plus de tampons que ce qui est spécifié par le paramètre
       <varname>bgwriter_lru_maxpages</varname>
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_buf_written_backend</function>()</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre de tampons écrits par les processus serveur parce qu'ils ont
       besoin d'allouer un nouveau tampon
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_buf_alloc</function>()</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre total d'allocations de tampons
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_clear_snapshot</function>()</literal></entry>
      <entry><type>void</type></entry>
      <entry>
       Annule l'image statistique actuelle
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset</function>()</literal></entry>
      <entry><type>void</type></entry>
      <entry>
       Réinitialise à zéro tous les compteurs statistiques pour la base de
       données actuelle (nécessite les droits superutilisateur)
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

   <note>
    <para>
     <function>blocks_fetched</function> moins
     <function>blocks_hit</function> donne le nombre d'appels
     lancés pour la table, l'index ou la base de données&nbsp;; mais le nombre 
     réel de lectures physiques est habituellement moindre à cause des tampons
     du noyau.
    </para>
   </note>

  <para>
   La fonction <function>pg_stat_get_backend_idset</function> fournit un moyen
   agréable de générer une ligne pour chaque processus serveur actif. Par
   exemple, pour afficher les <acronym>PID</acronym> et les requêtes en cours pour
   tous les processus serveur&nbsp;:

<programlisting>SELECT pg_stat_get_backend_pid(s.backendid) AS procpid,
       pg_stat_get_backend_activity(s.backendid) AS current_query
    FROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s;</programlisting>
  </para>

 </sect2>
 </sect1>

 <sect1 id="monitoring-locks">
  <title>Visualiser les verrous</title>

  <indexterm zone="monitoring-locks">
   <primary>verrou</primary>
   <secondary>surveillance</secondary>
  </indexterm>

  <para>
   Un autre outil utile pour surveiller l'activité des bases de données est la
   table système <structname>pg_locks</structname>. Elle permet à
   l'administrateur système de visualiser des informations sur les verrous
   restant dans le gestionnaire des verrous. Par exemple, cette fonctionnalité
   peut être utilisée pour&nbsp;:
	
   <itemizedlist>
    <listitem>
     <para>
      Visualiser tous les verrous en cours, tous les verrous sur les relations
      d'une base de données particulière ou tous les verrous détenus par une
      session <productname>PostgreSQL</productname> particulière.
     </para>
    </listitem>

    <listitem>
     <para>
      Déterminer la relation de la base de données disposant de la plupart des
      verrous non autorisés (et qui, du coup, pourraient être une source de
      contention parmi les clients de la base de données).
     </para>
    </listitem>

    <listitem>
     <para>
      Déterminer l'effet de la contention des verrous sur les performances
      générales des bases de données, ainsi que l'échelle dans laquelle varie la
      contention sur le trafic de la base de données.
     </para>
    </listitem>
   </itemizedlist>

   Les détails sur la vue <structname>pg_locks</structname> apparaissent dans la
   <xref linkend="view-pg-locks"/>. Pour plus d'informations sur les verrous et
   la gestion des concurrences avec <productname>PostgreSQL</productname>,
   référez-vous au <xref linkend="mvcc"/>.
  </para>
 </sect1>

 <sect1 id="dynamic-trace">
  <title>Traces dynamiques</title>

 <indexterm zone="dynamic-trace">
  <primary>DTrace</primary>
 </indexterm>

  <para>
   <productname>PostgreSQL</productname> fournit un support pour les traces
   dynamiques du serveur de bases de données. Ceci permet l'appel à un outil
   externe à certains points du code pour tracer son exécution. Actuellement,
   cette fonctionnalité a pour cible les développeurs de bases de données car
   il requiert une certaine familiarité avec le code.
  </para>

  <para>
   Un certain nombre de points de trace, souvent appelés sondes, sont déjà
   insérés dans le code source. Par défaut, les sondes sont désactivées
   et l'utilisateur doit explicitement demander au script configure de les
   rendre disponibles pour <productname>PostgreSQL</productname>.
  </para>

  <para> 
   Actuellement, seul l'outil DTrace est supporté, outil qui est disponible
   uniquement sur Solaris Express et Solaris 10+. Il est attendu que DTrace
   soit disponible dans le futur sur FreeBSD et Mac OS X. Supporter des
   outils de traces dynamiques est théoriquement possible en modifiant les
   définitions des macros <literal>PG_TRACE</literal> dans
   <filename>src/include/pg_trace.h</filename>.
  </para>

  <sect2 id="compiling-for-trace">
   <title>Compiler en activant les traces dynamiques</title>

  <para>
   Par défaut, les sondes sont désactivées, donc vous aurez besoin d'indiquer
   explicitement au script configure de les activer dans
   <productname>PostgreSQL</productname>. Pour inclure le support de DTrace,
   ajoutez <option>--enable-dtrace</option> aux options de configure. Lire
   <xref linkend="install-procedure"/> pour plus d'informations.
  </para>
  </sect2>

  <sect2 id="trace-points">
   <title>Sondes disponibles</title>

  <para>
   Quelques sondes standards sont fournies dans le code source (bien sûr,
   d'autres peuvent être ajoutés si nécessaire pour un problème particulier).
   Elles sont précisées dans <xref linkend="trace-point-table"/>.
  </para>

 <table id="trace-point-table">
  <title>Sondes disponibles</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Nom</entry>
     <entry>Paramètres</entry>
     <entry>Aperçu</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry>transaction__start</entry>
     <entry>(int transactionId)</entry>
     <entry>Début d'une nouvelle transaction.</entry>
    </row>
    <row>
     <entry>transaction__commit</entry>
     <entry>(int transactionId)</entry>
     <entry>Fin réussie d'une transaction.</entry>
    </row>
    <row>
     <entry>transaction__abort</entry>
     <entry>(int transactionId)</entry>
     <entry>Échec d'une transaction.</entry>
    </row>
             
    <row>
     <entry>lwlock__acquire</entry>
     <entry>(int lockid, int mode)</entry>
     <entry>Un LWLock a été acquis.</entry>
    </row>
    <row>
     <entry>lwlock__release</entry>
     <entry>(int lockid, int mode)</entry>
     <entry>Un LWLock a été lâché.</entry>
    </row>
    <row>
     <entry>lwlock__startwait</entry>
     <entry>(int lockid, int mode)</entry>
     <entry>Un LWLock n'était pas immédiatement disponible et un processus
      a commencé à attendre la disponibilité du verrou.
     </entry>
    </row>    
    <row>
     <entry>lwlock__endwait</entry>
     <entry>(int lockid, int mode)</entry>
     <entry>Un processus a été libéré de son attente d'un LWLock.
     </entry>
    </row>
    <row>
     <entry>lwlock__condacquire</entry>
     <entry>(int lockid, int mode)</entry>
     <entry>Un LWLock a été acquis avec succès quand l'appelant indiquait sans
      attente.</entry>
    </row> 
    <row>
     <entry>lwlock__condacquire__fail</entry>
     <entry>(int lockid, int mode)</entry>
     <entry>Un LWLock n'a pas été acquis quand l'appelant indiquait sans attente.
     </entry>
    </row>
    <row>
     <entry>lock__startwait</entry>
     <entry>(int locktag_field2, int lockmode)</entry>
     <entry>Une requête pour un verrou lourd (lmgr lock) est en attente car le
      verrou n'est pas disponible.
     </entry>
    </row>
    <row>
     <entry>lock__endwait</entry>
     <entry>(int locktag_field2, int lockmode)</entry>
     <entry>Une requête pour un verrou lourd (lmgr lock) a terminé son attente
      (autrement dit, il a acquis le verrou).
     </entry>
    </row>
   </tbody>
   </tgroup>
  </table>
  </sect2>

  <sect2 id="using-trace-points">
   <title>Utiliser les sondes</title>

  <para>
   L'exemple ci-dessous montre un script DTrace pour l'analyse du nombre de
   transactions sur le système, comme alternative à l'interrogation régulière
   de <structname>pg_stat_database</structname> avant et après un test de
   performance&nbsp;:
<programlisting>#!/usr/sbin/dtrace -qs 

postgresql$1:::transaction-start
{
      @start["Start"] = count();
      self->ts  = timestamp;
}

postgresql$1:::transaction-abort
{
      @abort["Abort"] = count();
}

postgresql$1:::transaction-commit
/self->ts/
{
      @commit["Commit"] = count();
      @time["Total time (ns)"] = sum(timestamp - self->ts);
      self->ts=0;
}
</programlisting>
   Notez comment le souligné double dans les noms de sonde doit être remplacé
   par un trait d'union lors de l'utilisation d'un script DTrace. À son
   exécution, le script de l'exemple D donne une sortie comme&nbsp;:
<screen># ./txn_count.d `pgrep -n postgres`
^C

Start                                          71
Commit                                         70
Total time (ns)                        2312105013
</screen>
  </para>
  <para>
   Vous devez vous rappeler que les programmes de trace doivent être écrits
   soigneusement, sinon les informations récoltées pourraient ne rien valoir.
   Dans la plupart des cas où des problèmes sont découverts, c'est
   l'instrumentation qui est erronée, pas le système sous-jacent. En discutant
   des informations récupérées en utilisant un tel système, il est essentiel de
   s'assurer que le script utilisé est lui-aussi vérifié et discuter.
  </para>
  </sect2>

  <sect2 id="defining-trace-points">
   <title>Définir les sondes</title>

  <para>
   De nouvelles sondes peuvent être définies dans le code partout où le
   développeur le souhaite bien que cela nécessite une nouvelle compilation.
  </para>

  <para>
   Une sonde peut être insérée en utilisant une des macros de trace.
   Elles sont choisies suivant le nombre de variables à mettre à disposition
   pour l'inspection de cette sonde. Tracer l'occurence d'un événement se fait
   en une seule ligne, en utilisant seulement le nom de la sonde, par
   exemple&nbsp;:
<programlisting>PG_TRACE (ma__nouvelle__sonde);
</programlisting>
   Des sondes plus complexes peuvent fournir une ou plusieurs variables à
   l'inspection de l'outil des traces dynamiques en utilisant la macro
   <literal>PG_TRACE</literal><replaceable>n</replaceable> qui correspond
   au nombre de paramètres après le nom de la sonde&nbsp;:
<programlisting>PG_TRACE3 (mon__evenement__complexe, varX, varY, varZ);
</programlisting>
   La définition de la sonde transaction__start est montrée ci-dessous&nbsp;:
<programlisting>static void
StartTransaction(void)
{
    ...

    /*
     * génère un nouvel id de transaction
     */
    s->transactionId = GetNewTransactionId(false);

    XactLockTableInsert(s->transactionId);

    PG_TRACE1(transaction__start, s->transactionId);

    ...
}    
</programlisting>
   Notez comment l'ID de transaction est rendu disponible à l'outil de traces
   dynamiques.
  </para>

  <para>
   L'outil de traces dynamiques peut nécessiter une définition plus complète de
   ces sondes. Par exemple, DTrace requiert que vous ajoutez de nouvelles sondes
   dans le fichier <filename>src/backend/utils/probes.d</filename> comme
   indiqué ici&nbsp;:
<programlisting>provider postgresql {
      ...
      probe transaction__start(int);
      ...
 };
</programlisting>
  </para>

  <para>
   Vous devez faire attention que les types de données spécifiés pour les
   arguments de la sonde correspondent aux types de données des variables
   utilisées dans la macro <literal>PG_TRACE</literal>. Ceci n'est pas vérifié
   au moment de la compilation. Vous pouvez vérifier que votre sonde
   nouvellement ajoutée est disponible en recompilant, puis en exécutant le
   nouveau binaire et, en tant que root, en exécutant une commande DTrace tel
   que&nbsp;:
<programlisting>dtrace -l -n transaction-start
</programlisting>
  </para>
  </sect2>

 </sect1>

</chapter>
