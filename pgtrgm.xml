<sect1 id="pgtrgm">
 <title>pg_trgm</title>
 
 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>

 <para>
  Le module <literal>pg_trgm</literal> fournit des fonctions et des classes
  d'index pour déterminer la similarité d'un texte suivant une correspondance
  de trigramme.
 </para>

 <sect2>
  <title>Trigramme (ou trigraphe)</title>
  <para>
   Un trigramme est un ensemble de trois caractères consécutifs pris dans une
   chaîne. Une est considérée avoir deux espaces en préfixe e un espace en
   suffixe lors de la détermination de l'ensemble de trigrammes qui comprennent
   la chaîne.
  </para>
  <para>
   Par exemple, l'ensemble de trigrammes dans le mot <quote>cat</quote>
   est <quote>  c</quote>, <quote> ca</quote>, <quote>at </quote> et
   <quote>cat</quote>.
  </para>
 </sect2>

 <sect2>
  <title>Fonctions publics</title>
  <table>
   <title>Fonctions <literal>pg_trgm</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>real similarity(text, text)</literal></entry>
      <entry>
       <para>
        Renvoie un nombre indiquant le niveau de correspondance des
	deux arguments. Un résultat zéro indique que les deux mots sont
	complétement similaires, et un résultat de un indique que les deux
	mots sont identiques.
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>real show_limit()</literal></entry>
      <entry>
       <para>
        Renvoie la limite de similarité en cours utilisé par l'opérateur
	%. Ceci configure le niveau de similarité minimum entre deux mots
	pour qu'ils soient considérés suffisamment similaires par rapport
	aux erreurs de saisie par exemple.
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>real set_limit(real)</literal></entry>
      <entry>
       <para>
        Initialise la limite de similarité utilisée par l'opérateur %
	et qui est renvoyée par la fonction show_limit().
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>text[] show_trgm(text)</literal></entry>
      <entry>
       <para>
        Renvoie une tableau de tous les trigrammes du texte fourni en
	argument.
       </para>
      </entry>
     </row>
     <row>
      <entry>Opérateur&nbsp;: <literal>text % text (renvoie
       boolean)</literal></entry> 
      <entry>
       <para>
        L'opérateur % renvoie TRUE si deux arguments ont une similarité plus
	grande que la limite configurée par set_limit(). Il renverra FALSE
	si la similarité est moindre que la limite actuelle.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Classe d'opérateur</title>
  <para>
   Le module <literal>pg_trgm</literal> vient avec une classe d'opérateur
   <literal>gist_trgm_ops</literal> qui permet à un développeur de
   créer un index sur une colonne texte pour obtenir des recherches de
   similarité très rapides.
  </para>
  <para>
   Pour utiliser cet index, l'opérateur % doit être utilisé et une limite
   appropriée de similarité doit être initialisée. Exemple&nbsp;:
  </para>
  <programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING gist (t gist_trgm_ops);
  </programlisting>
  <para>
   À ce point, vous aurez un index sur la colonne texte t que vous pouvez
   utiliser pour des recherches de similarité. Exemple&nbsp;:
  </para>
  <programlisting>
SELECT
        t,
        similarity(t, 'word') AS sml
FROM
        test_trgm
WHERE
        t % 'word'
ORDER BY
        sml DESC, t;
  </programlisting>
  <para>
   Ceci renverra toutes les valeurs dans la colonne de texte qui sont
   suffisamment proche de <quote>word</quote>, trié suivant le niveau
   de correspondance, du meilleur au pire. L'index sera utilisé pour
   accélérer l'opération sur de grands ensembles de données.
  </para>
 </sect2>

 <sect2>
  <title>Intégration de la recherche plein texte</title>
  <para>
   La correspondance de trigramme est un outil très intéressant
   lorsqu'elle est utilisée en conjonction avec un index plein texte.
  </para>
  <para>
   La première étape est de générer une table auxiliaire contenant tous les
   mots uniques dans les documents&nbsp;:
  </para>
  <programlisting>
CREATE TABLE words AS SELECT word FROM 
        stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
  </programlisting>
  <para>
   où <structname>documents</structname> est une table disposant d'un
   champ texte, <structfield>bodytext</structfield>, sur lequel nous
   souhaitons pouvoir faire des recherches. L'utilisation de la configuration
   <literal>simple</literal> avec la fonction <function>to_tsvector</function>,
   au lieu d'utiliser simplement le vecteur existant, est d'éviter la création
   d'une liste de mots déjà uniques. De cette façon, seuls les mots originaux
   sont ajoutés à la liste des termes courants.
  </para>
  <para>
   Ensuite, créons un index trigramme sur la colonne word&nbsp;:
  </para>
  <programlisting>
CREATE INDEX words_idx ON words USING gist(word gist_trgm_ops);
  </programlisting>
  <para>
   ou
  </para>
  <programlisting>
CREATE INDEX words_idx ON words USING gin(word gist_trgm_ops);
  </programlisting>
  <para>
   Maintenant, une requête <literal>SELECT</literal> similaire à l'exemple
   ci-dessus peut être utilisée pour suggérer des écritures différentes
   pour un mot mal orthographié dans les termes de la recherche. Une
   clause supplémentaire utile est de s'assurer que les mots similaires
   sont aussi de longueur similaire au mot mal orthographié.
  </para>
  <para>
   <note>
    <para>
     Comme la table <structname>words</structname> a été créée en tant que
     table statique et séparée, elle devra être mise à jour périodiquement.
    </para>
   </note>
  </para>
 </sect2>

 <sect2>
  <title>Références</title>
  <para>
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/">Site de
   développement GiST</ulink>
  </para>
  <para>
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/">Site
   de développement de TSearch2</ulink>
  </para>
 </sect2>

 <sect2>
  <title>Auteurs</title>
  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscou, Université de
   Moscou, Russie
  </para>
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscou, Delta-Soft Ltd.,
   Russie
  </para>
  <para>
   Documentation&nbsp;: Christopher Kings-Lynne
  </para>
  <para>
   Ce module est sponsorisé par Delta-Soft Ltd., Moscou, Russie.
  </para>
 </sect2>

</sect1>

