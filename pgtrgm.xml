<?xml version="1.0" encoding="ISO-8859-15"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="pgtrgm">
 <title>pg_trgm</title>

 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>

 <para>
  Le module <filename>pg_trgm</filename> fournit des fonctions et opérateurs
  qui permettent de déterminer des similarités de textes en fonction de
  correspondances de trigrammes. Il fournit également des classes d'opérateur
  accélérant les recherches de chaînes similaires.
 </para>

 <sect2>
  <title>Concepts du trigramme (ou trigraphe)</title>

  <para>
   Un trigramme est un groupe de trois caractères consécutifs pris dans une
   chaîne. Nous pouvons mesurer la similarité de deux chaînes en comptant le
   nombre de trigrammes qu'elles partagent. Cette idée simple est
   très efficace pour mesurer la similarité des mots dans la plupart des
   langues.
  </para>

  <!-- SAS 20081203 : Cette présentation rend mal-aisée la compréhension de
  l'exemple du fait des espaces induites par les <quote> -->
  <note>
   <para>
    Une chaîne est considérée avoir deux espaces en préfixe et une espace en
    suffixe lors de la détermination de l'ensemble de trigrammes contenu dans
    la chaîne. Par exemple, l'ensemble des trigrammes dans la chaîne
    <quote><literal>cat</literal></quote> est
    <quote><literal>  c</literal></quote> ('  c'),
    <quote><literal> ca</literal></quote> (' ca'),
    <quote><literal>cat</literal></quote> et
    <quote><literal>at </literal></quote> ('at '). (Les espaces de début et de
    fin de chaînes sont importantes.)
   </para>
  </note>
 </sect2>

 <sect2>
  <title>Fonctions et opérateurs</title>

  <table id="pgtrgm-func-table">
   <title>Fonctions de <filename>pg_trgm</filename></title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>similarity(text, text)</function></entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie un nombre indiquant la similarité des deux arguments. L'échelle
       du résultat va de zéro (indiquant que les deux chaînes sont complètement
       différentes) à un (indiquant que les deux chaînes sont identiques).
      </entry>
     </row>
     <row>
      <entry><function>show_trgm(text)</function></entry>
      <entry><type>text[]</type></entry>
      <entry>
       Renvoie un tableau de tous les trigrammes d'une chaîne donnée. (En
       pratique, ceci est peu utile, sauf pour le débogage.)
      </entry>
     </row>
     <row>
      <entry><function>show_limit()</function></entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie la limite de similarité utilisée par l'opérateur
       <literal>%</literal>. Ceci configure la similarité minimale entre deux
       mots pour qu'ils soient considérés suffisamment proches.
      </entry>
     </row>
     <row>
      <entry><function>set_limit(real)</function></entry>
      <entry><type>real</type></entry>
      <entry>
       Configure la limite de similarité actuelle utilisée par l'opérateur
       <literal>%</literal>. Le limite se positionne entre 0 et 1, elle vaut
       par défaut 0,3. Renvoie la valeur passée.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="pgtrgm-op-table">
   <title>Opérateurs de <filename>pg_trgm</filename></title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Opérateur</entry>
      <entry>Retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>text</type> <literal>%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Renvoie <literal>true</literal> si les arguments ont une similarité
       supérieure à la limite configurée par <function>set_limit</function>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Support des index</title>

  <para>
   Le module <filename>pg_trgm</filename> fournit des classes d'opérateurs
   pour les index GiST et GIN qui vous permettent de créer un index sur une
   colonne de type text dans le but d'accélérer les recherches de similarité.
   Ces types d'index supportent l'opérateur de similarité <literal>%</literal>
   (et aucun autre opérateur, donc vous pouvez aussi créer un index btree
   standard).
  </para>

  <para>
   Exemple&nbsp;:

  <programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING gist (t gist_trgm_ops);
  </programlisting>
ou
  <programlisting>
CREATE INDEX trgm_idx ON test_trgm USING gin (t gin_trgm_ops);
  </programlisting>
  </para>

  <para>
   À ce point, vous aurez un index sur la colonne <structfield>t</structfield>
   que vous pouvez utiliser pour une recherche de similarité. Une requête
   typique est&nbsp;:
  </para>
  <programlisting>
SELECT t, similarity(t, '<replaceable>word</replaceable>') AS sml
  FROM test_trgm
  WHERE t % '<replaceable>word</replaceable>'
  ORDER BY sml DESC, t;
  </programlisting>
  <para>
   Ceci renverra toutes les valeurs dans la colonne texte qui sont suffisamment
   similaire à <replaceable>word</replaceable>, triées de la meilleure
   correspondance à la pire. L'index sera utilisé pour accélérer l'opération
   même sur un grand ensemble de données.
  </para>

  <para>
   Le choix d'un indexage GiST ou IN dépend des caractéristiques relatives
   de performance qui sont discutées ailleurs. Comme règle de base, un index
   GIN est plus rapide pour la recherche qu'un index GiST mais plus lent
   pour la construction et la mise à jour&nbsp;; donc GIN est préférable pour
   des données statiques et GiST pour des données souvent mises à jour.
  </para>
 </sect2>

 <sect2>
  <title>Intégration à la recherche plein texte</title>

  <para>
   La correspondance de trigramme est un outil très utile lorsqu'il est
   utilisé en conjonction avec un index plein texte. En particulier, il peut
   aider à la reconnaissance des mots mal orthographiés (ou tout simplement
   mal saisis), mots pour lesquels le mécanisme de recherche plein texte ne
   pourra pas faire une reconnaissance.
  </para>

  <para>
   La première étape est la génération d'une table auxiliaire contenant tous
   les mots uniques dans les documents&nbsp;:
  </para>

  <programlisting>
CREATE TABLE words AS SELECT word FROM
        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
  </programlisting>

  <para>
   où <structname>documents</structname> est une table qui a un champ texte
   <structfield>bodytext</structfield> où nous voulons faire nos recherches.
   La raison de l'utilisation de la configuration <literal>simple</literal>
   avec la fonction <function>to_tsvector</function>, au lieu d'une
   configuration spécifique à la langue, est que nous voulons une liste des
   mots originaux.
  </para>

  <para>
   Ensuite, nous créons un index trigramme sur la colonne word&nbsp;:
  </para>

  <programlisting>
CREATE INDEX words_idx ON words USING gin(word gin_trgm_ops);
  </programlisting>

  <para>
   Maintenant, une requête <command>SELECT</command> similaire à l'exemple
   précédent peut être utilisé pour suggérer des mots dans les termes de la
   recherche de l'utilisateur. Un test utile supplémentaire vient à demander
   que les mots sélectionnés soient aussi d'une longueur similaire au mot
   mal orthographié.
  </para>

  <note>
   <para>
    Comme la table <structname>words</structname> a été générée comme une table
    statique, séparée, il sera nécessaire de la regénérer périodiquement
    pour qu'elle reste raisonnablement à jour avec la collection des
    documents. Qu'elle soit exactement identique en permanence n'est
    habituellement pas nécessaire.
   </para>
  </note>
 </sect2>

 <sect2>
  <title>Références</title>

  <para>
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/">Site de
   développement de GiST</ulink>
  </para>
  <para>
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/">Site de
   développement de TSearch2</ulink>
  </para>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscou, Université de Moscou,
   Russie
  </para>
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscou, Delta-Soft Ltd.,
   Russie
  </para>
  <para>
   Documentation&nbsp;: Christopher Kings-Lynne
  </para>
  <para>
   Ce module est sponsorisé par Delta-Soft Ltd., Moscou, Russie.
  </para>
 </sect2>

</sect1>
