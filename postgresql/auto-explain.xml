<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="auto-explain" xreflabel="auto_explain">
 <title>auto_explain</title>
 
 <indexterm zone="auto-explain">
  <primary>auto_explain</primary>
 </indexterm>
 
 <para>
  Le module <filename>auto_explain</filename> fournit un moyen de tracer les
  plans d'exécution des requêtes lentes automatiquement, sans qu'il soit
  nécessaire de lancer <xref linkend="sql-explain"/>
  manuellement. C'est particulièrement utile pour repérer les requêtes
  non optimisées sur de grosses applications.
 </para>
 
 <para>
  Le module ne fournit pas de fonctions accessibles par SQL.
  Pour l'utiliser, il suffit de le charger sur le serveur.
  Il peut être chargé dans une session individuelle&nbsp;:
  
  <programlisting>
    LOAD 'auto_explain';
  </programlisting>
  
  (Seul le super-utilisateur peut le faire.)
  Un usage plus caractéristique est de le précharger dans toutes les sessions
  en incluant <literal>auto_explain</literal> dans
  <xref linkend="guc-shared-preload-libraries"/> dans le fichier
  <filename>postgresql.conf</filename>. Il est alors possible de récupérer les requêtes
  lentes non prévues, quel que soit le moment où elles se produisent. Évidemment, il y a un prix
  à payer pour cela.
 </para>
	
<sect2>
 <title>Paramètres de configuration</title>
 
 <para>
  Plusieurs paramètres de configuration contrôlent le comportement
  d'<filename>auto_explain</filename>. Le comportement par défaut est
  de ne rien faire. Il est donc nécessaire de préciser au minimum
  <varname>auto_explain.log_min_duration</varname> pour obtenir un résultat.
 </para>
 
 <variablelist>
  <varlistentry>
   <term>
    <varname>auto_explain.log_min_duration</varname> (<type>integer</type>)
   </term>
   <indexterm>
    <primary>paramètre de configuration <varname>auto_explain.log_min_duration</varname></primary>
   </indexterm>
   <listitem>
    <para>
     <varname>auto_explain.log_min_duration</varname> est la durée minimale
     d'exécution de requête à partir de laquelle le plan d'exécution
     sera tracé. Son unité est la milliseconde. La positionner à zéro trace
     tous les plans. -1 (la valeur par défaut) désactive l'écriture des plans.
     Positionnée à <literal>250ms</literal>, 
     tous les ordres qui durent 250&nbsp;ms ou plus seront tracés. Seuls les
     super-utilisateurs peuvent modifier ce paramétrage.
    </para>
   </listitem>
  </varlistentry>
  
  <varlistentry>
   <term>
    <varname>auto_explain.log_analyze</varname> (<type>boolean</type>)
   </term>
   <indexterm>
    <primary>paramètre de configuration <varname>auto_explain.log_analyze</varname></primary>
   </indexterm>
   <listitem>
    <para>
     <varname>auto_explain.log_analyze</varname> entraîne
     l'écriture du résultat de <command>EXPLAIN ANALYZE</command>,
     à la place du résultat de <command>EXPLAIN</command>,
     lorsqu'un plan d'exécution est tracé.
     Ce paramètre est désactivé par défaut.
     Seuls les super-utilisateurs peuvent modifier ce paramètre.
    </para>
    <note>
     <para>
      Lorsque ce paramètre est activé, un chronométrage par
      n&oelig;ud du plan est calculé pour 
      tous les ordres exécutés, qu'ils durent suffisamment longtemps pour être réellement tracés, ou non.
      Ceci peut avoir des conséquences très négatives sur les performances.
       Désactiver <varname>auto_explain.log_timing</varname> améliore les
       performances au prix d'une information moindre.
     </para>
    </note>
   </listitem>
  </varlistentry>
  
  <varlistentry>
   <term>
    <varname>auto_explain.log_buffers</varname> (<type>boolean</type>)
   </term>
   <indexterm>
    <primary>paramètre de configuration <varname>auto_explain.log_buffers</varname></primary>
   </indexterm>
   <listitem>
    <para>
      <varname>auto_explain.log_buffers</varname> contrôle l'affichage des
      statistiques sur l'utilisation des buffers quand un plan d'exécution est
      tracé&nbsp;; il s'agit de l'équivalent de l'option <literal>BUFFERS</literal>
      d'<command>EXPLAIN</command>. Ce paramètre n'a d'effet que si
      <varname>auto_explain.log_analyze</varname> est activé. Ce paramètre est
      désactivé par défaut.
    </para>
   </listitem>
  </varlistentry>
  
   <varlistentry>
    <term>
     <varname>auto_explain.log_timing</varname> (<type>boolean</type>)
    </term>
    <indexterm>
     <primary>paramètre de configuration <varname>auto_explain.log_timing</varname></primary>
    </indexterm>
    <listitem>
     <para>
      <varname>auto_explain.log_timing</varname> contrôle l'horodatage des
      nœuds du plan d'exécution quand ce dernier est tracé&nbsp;; il s'agit de
      l'équivalent de l'option <literal>TIMING</literal>
      d'<command>EXPLAIN</command>. La surcharge relative à la lecture répétée
      de l'horloge système peut ralentir de façon significative les requêtes
      sur certains systèmes, donc il peut être utile de désactiver ce paramètre
      quand seul le décompte de lignes est important, et non pas la durée. Ce
      paramètre n'a pas d'effet si <varname>auto_explain.log_analyze</varname>
      n'est pas activé. Ce paramètre est activé par défaut. Seuls les
      superutilisateurs peuvent modificer ce paramétrage.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_verbose</varname> (<type>enum</type>)
    </term>
    <indexterm>
     <primary>paramètre de configuration <varname>auto_explain.log_verbose</varname></primary>
    </indexterm>
    <listitem>
     <para>
      <varname>auto_explain.log_verbose</varname> contrôle l'affichage de détails
      verbeux lorsqu'un plan d'exécution est tracé&nbsp;; il s'agit de l'équivalent
      de l'option <literal>VERBOSE</literal> d'<command>EXPLAIN</command>. Ce
      paramètre est désactivé par défaut.
     </para>
    </listitem>
   </varlistentry>

  <varlistentry>
   <term>
     <varname>auto_explain.log_format</varname> (<type>boolean</type>)
    </term>
    <indexterm>
     <primary>paramètre de configuration <varname>auto_explain.log_format</varname></primary>
    </indexterm>
    <listitem>
     <para>
      <varname>auto_explain.log_format</varname> sélectionne le format en sortie
      de la commande <command>EXPLAIN</command>. Les valeurs autorisées sont
      <literal>text</literal>, <literal>xml</literal>, <literal>json</literal>
      et <literal>yaml</literal>. La valeur par défaut est <literal>text</literal>.
      Seuls les superutilisateurs peuvent modifier ce paramétrage.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term>
    <varname>auto_explain.log_nested_statements</varname> (<type>boolean</type>)
   </term>
   <indexterm>
    <primary>paramètre de configuration <varname>auto_explain.log_nested_statements</varname></primary>
   </indexterm>
   <listitem>
    <para>
     <varname>auto_explain.log_nested_statements</varname> entraîne
     la prise en compte des ordres imbriqués
     (les requêtes exécutées dans une fonction) dans la trace.
     Quand il est désactivé, seuls les plans d'exécution
     de plus haut niveau sont tracés. Ce paramètre est désactivé par
     défaut. Seuls les super-utilisateurs peuvent modifier ce paramètre.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 
 <para>
   D'ordinaire, ces paramètres sont configurés dans le fichier
   <filename>postgresql.conf</filename>, bien que les superutilisateurs puissent
   les modifier à la volée dans leur session. Voici un exemple typique
   d'utilisation&nbsp;:
 </para>
 
 <programlisting>
 	# postgresql.conf
 	shared_preload_libraries = 'auto_explain'
 	
 	auto_explain.log_min_duration = '3s'
 </programlisting>
</sect2>
	
<sect2>
 <title>Exemple</title>
	
 <programlisting>
		postgres=# LOAD 'auto_explain';
		postgres=# SET auto_explain.log_min_duration = 0;
    postgres=# SET auto_explain.log_analyze = true;
		postgres=# SELECT count(*)
		FROM pg_class, pg_index
		WHERE oid = indrelid AND indisunique;
 </programlisting>
	
 <para>
  Ceci devrait produire un résultat de ce style dans les journaux applicatifs&nbsp;:
 </para>
	
  <screen><![CDATA[
  LOG:  duration: 3.651 ms  plan:
    Query Text: SELECT count(*)
                FROM pg_class, pg_index
               WHERE oid = indrelid AND indisunique;
    Aggregate  (cost=16.79..16.80 rows=1 width=0) (actual time=3.626..3.627 rows=1 loops=1)
      ->  Hash Join  (cost=4.17..16.55 rows=92 width=0) (actual time=3.349..3.594 rows=92 loops=1)
            Hash Cond: (pg_class.oid = pg_index.indrelid)
            ->  Seq Scan on pg_class  (cost=0.00..9.55 rows=255 width=4) (actual time=0.016..0.140 rows=255 loops=1)
            ->  Hash  (cost=3.02..3.02 rows=92 width=4) (actual time=3.238..3.238 rows=92 loops=1)
                  Buckets: 1024  Batches: 1  Memory Usage: 4kB
                  ->  Seq Scan on pg_index  (cost=0.00..3.02 rows=92 width=4) (actual time=0.008..3.187 rows=92 loops=1)
                        Filter: indisunique
]]>
 </screen>
</sect2>
	
<sect2>
 <title>Auteur</title>
		
 <para>
  Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>
 </para>
</sect2>
	
</sect1>
