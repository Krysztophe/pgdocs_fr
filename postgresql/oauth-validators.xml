<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/oauth-validators.sgml -->

<chapter id="oauth-validators">
 <title>Modules de validation OAuth</title>
 <indexterm zone="oauth-validators">
  <primary>Validateurs OAuth</primary>
 </indexterm>
 <para>
  <productname>PostgreSQL</productname> fournit une infrastructure permettant de créer
  des modules personnalisés pour effectuer la validation côté serveur des jetons
  de porteur OAuth. Les implémentations d'OAuth étant extrêmement variées, et la
  validation des jetons fortement dépendante de l'émetteur, le serveur ne peut pas
  vérifier lui-même le jeton&nbsp;; les modules de validation assurent l'intégration entre
  le serveur et le fournisseur OAuth utilisé.
 </para>
 <para>
  Les modules de validation OAuth doivent au minimum contenir une fonction
  d'initialisation (voir <xref linkend="oauth-validator-init"/>) ainsi que le callback
  requis pour effectuer la validation (voir <xref linkend="oauth-validator-callback-validate"/>).
 </para>
 <warning>
  <para>
   Un validateur mal implémenté pourrait autoriser l'accès à des utilisateurs non
   autorisés, compromettant ainsi la sécurité du serveur. La mise en œuvre correcte
   est donc cruciale. Voir <xref linkend="oauth-validator-design"/> pour les
   considérations de conception.
  </para>
 </warning>

 <sect1 id="oauth-validator-design">
  <title>Concevoir un module de validation de manière sécurisée</title>
  <warning>
   <para>
    Lire et comprendre entièrement cette section avant d'implémenter un module
    de validation est crucial. Un validateur défaillant est potentiellement pire
    qu'une absence totale d'authentification, car il donne une fausse impression de sécurité
    et peut être utilisé dans le cadre d'attaques ciblant d'autres composants de l'écosystème
    OAuth.
   </para>
  </warning>

  <sect2 id="oauth-validator-design-responsibilities">
   <title>Responsabilités du validateur</title>
   <para>
    Bien que les modules puissent adopter des approches très différentes pour valider
    les jetons, une implémentation doit généralement effectuer trois actions distinctes&nbsp;:
   </para>
   <variablelist>
    <varlistentry>
     <term>Valider le jeton</term>
     <listitem>
      <para>
       Le validateur doit d'abord s'assurer que le jeton présenté est bien un jeton
       Bearer valide pour l'authentification du client. La manière exacte dépend du
       fournisseur, mais elle implique généralement soit des opérations cryptographiques
       pour prouver que le jeton a été émis par une entité de confiance (validation
       hors ligne), soit la présentation du jeton à cette entité afin qu'elle effectue la
       validation à sa place (validation en ligne).
      </para>
      <para>
       La validation en ligne, généralement mise en œuvre via
       <ulink url="https://datatracker.ietf.org/doc/html/rfc7662">OAuth Token
       Introspection</ulink>, demande moins d'étapes de la part du module et
       permet la révocation centralisée des jetons en cas de vol ou de mauvaise
       attribution. Cependant, elle nécessite au minimum un appel réseau par
       tentative d'authentification (tous devant être réalisés dans le délai défini par
       <xref linkend="guc-authentication-timeout"/>). De plus, certains fournisseurs
       n'exposent pas de point d'introspection pour les serveurs de ressources externes.
      </para>
      <para>
       La validation hors ligne est beaucoup plus complexe, nécessitant souvent que le
       validateur maintienne une liste de clés de signature de confiance et vérifie
       la signature cryptographique du jeton ainsi que son contenu. L'implémentation
       doit respecter à la lettre les directives du fournisseur, y compris la vérification
       de l'émetteur («&nbsp;d'où vient ce jeton&nbsp;?&nbsp;»), du destinataire («&nbsp;pour qui est
       ce jeton&nbsp;?&nbsp;») et de la période de validité («&nbsp;quand ce jeton est-il utilisable&nbsp;?&nbsp;»).
       Comme il n'y a pas de communication avec le fournisseur, la révocation centralisée
       n'est pas possible&nbsp;; les validateurs hors ligne peuvent vouloir restreindre la durée
       maximale de validité d'un jeton.
      </para>
      <para>
       Si le jeton ne peut pas être validé, le module doit immédiatement échouer.
       Toute tentative d'authentification/autorisation est inutile si le jeton
       Bearer n'a pas été émis par une entité de confiance.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Autoriser le client</term>
     <listitem>
      <para>
       Ensuite, le validateur doit s'assurer que l'utilisateur final a bien donné
       au client l'autorisation d'accéder au serveur en son nom. Cela implique
       généralement de vérifier les portées (scopes) associées au jeton, afin de
       s'assurer qu'elles couvrent l'accès à la base de données selon les paramètres
       HBA actuels.
      </para>
      <para>
       L'objectif de cette étape est d'éviter qu'un client OAuth n'obtienne un
       jeton sous de faux prétextes. Si le validateur exige que tous les jetons
       comportent des portées couvrant l'accès à la base de données, le fournisseur
       doit alors inciter explicitement l'utilisateur à accorder cet accès lors du
       processus. Cela lui donne l'opportunité de refuser la demande si le client
       n'est pas censé utiliser ses identifiants pour se connecter à des bases de
       données.
      </para>
      <para>
       Bien qu'il soit possible d'établir l'autorisation du client sans portées
       explicites, en s'appuyant sur une connaissance externe de l'architecture
       déployée, cela écarte l'utilisateur du processus, l'empêchant ainsi de
       détecter d'éventuelles erreurs de déploiement, erreurs qui pourraient alors
       être exploitées silencieusement. L'accès à la base de données doit être
       strictement limité aux seuls clients de confiance
       <footnote>
        <para>
         C'est-à-dire, «&nbsp;de confiance&nbsp;» dans le sens où le client OAuth et le
         serveur <productname>PostgreSQL</productname> sont contrôlés par la même
         entité. Notamment, le flux de client d'autorisation par appareil
         (Device Authorization) pris en charge par libpq ne répond généralement
         pas à ce critère, car il est conçu pour des clients publics ou non fiables.
        </para>
       </footnote>
       si aucune invite ne demande à l'utilisateur des portées supplémentaires.
      </para>
      <para>
       Même si l'autorisation échoue, un module peut choisir de continuer à
       extraire les informations d'authentification du jeton à des fins d'audit
       et de débogage.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Authentifier l'utilisateur final</term>
     <listitem>
      <para>
       Enfin, le validateur doit déterminer un identifiant d'utilisateur associé
       au jeton, soit en demandant cette information au fournisseur, soit en l'extrayant
       directement du jeton, puis renvoyer cet identifiant au serveur (qui prendra
       ensuite une décision finale d'autorisation selon la configuration HBA).
       Cet identifiant sera disponible durant la session via
       <link linkend="functions-info-session-table"><function>system_user</function></link>
       et enregistré dans les journaux du serveur si <xref linkend="guc-log-connections"/>
       est activé.
      </para>
      <para>
       Les différents fournisseurs peuvent enregistrer divers types d'informations
       d'authentification pour un utilisateur final, généralement appelés
       <emphasis>claims</emphasis> (revendications). En général, les fournisseurs
       documentent quelles revendications sont suffisamment fiables pour être
       utilisées dans les décisions d'autorisation, et lesquelles ne le sont pas
       (par exemple, il ne serait probablement pas judicieux d'utiliser le nom complet
       d'un utilisateur comme identifiant d'authentification, car beaucoup de fournisseurs
       permettent aux utilisateurs de modifier leur nom d'affichage de manière arbitraire).
       En définitive, le choix de la ou des revendications à utiliser dépend de
       l'implémentation du fournisseur et des besoins de l'application.
      </para>
      <para>
       Note que la connexion anonyme ou pseudonyme est également possible, en activant
       la délégation via une table de correspondance des utilisateurs (<foreignphrase>usermap delegation</foreignphrase>)&nbsp;;
       voir <xref linkend="oauth-validator-design-usermap-delegation"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="oauth-validator-design-guidelines">
   <title>Recommandations générales de développement</title>
   <para>
    Les développeurs doivent garder à l'esprit les éléments suivants lors de
    l'implémentation de la validation de jetons&nbsp;:
   </para>
   <variablelist>
    <varlistentry>
     <term>Confidentialité des jetons</term>
     <listitem>
      <para>
       Les modules ne doivent jamais écrire les jetons, ni même des parties de
       jetons, dans les journaux du serveur. Cela reste vrai même si le module
       considère le jeton comme invalide&nbsp;; un attaquant qui parvient à tromper
       un client pour qu'il communique avec le mauvais fournisseur ne doit pas
       pouvoir récupérer ce jeton (valide par ailleurs) depuis le disque.

      </para>
      <para>
       Les implémentations qui envoient des jetons sur le réseau (par exemple,
       pour effectuer une validation en ligne auprès d'un fournisseur) doivent
       authentifier le pair distant et s'assurer qu'un transport fortement
       sécurisé est utilisé.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Journalisation</term>
     <listitem>
      <para>
       Les modules peuvent utiliser les mêmes
       <link linkend="error-message-reporting">mécanismes de journalisation</link>
       que les extensions standards&nbsp;; toutefois, les règles pour l'émission de
       messages vers le client sont légèrement différentes pendant la phase
       d'authentification de la connexion. En règle générale, les modules doivent
       consigner les problèmes de vérification au niveau <symbol>COMMERROR</symbol>
       et retourner normalement, au lieu d'utiliser <symbol>ERROR</symbol>
       ou <symbol>FATAL</symbol> pour dérouler la pile, afin d'éviter toute fuite
       d'informations vers les clients non authentifiés.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Interruptibilité</term>
     <listitem>
      <para>
       Les modules doivent rester interruptibles par des signaux, afin que le serveur
       puisse gérer correctement les délais d'authentification et les signaux d'arrêt
       émis par <application>pg_ctl</application>. Par exemple, les appels
       bloquants sur des sockets doivent généralement être remplacés
       par du code capable de gérer à la fois les évènements sur les sockets et
       les interruptions sans condition de course (voir <function>WaitLatchOrSocket()</function>,
       <function>WaitEventSetWait()</function>, etc.), et les boucles longues
       doivent périodiquement appeler <function>CHECK_FOR_INTERRUPTS()</function>.
       Ne pas suivre ces recommandations peut entraîner des sessions serveur
       non réactives.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Tests</term>
     <listitem>
      <para>
       La couverture de tests complète d'un système OAuth dépasse le cadre de cette
       documentation, mais à minima, les tests négatifs doivent être considérés comme
       obligatoires. Il est trivial de concevoir un module qui laisse entrer les
       utilisateurs autorisés&nbsp;; tout l'enjeu est d'empêcher l'accès aux utilisateurs
       non autorisés.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Documentation</term>
     <listitem>
      <para>
       Les implémentations de validateurs doivent documenter le contenu et le format
       de l'identifiant authentifié qui est transmis au serveur pour chaque utilisateur,
       car les administrateurs de base de données (DBA) peuvent avoir besoin de cette
       information pour créer les correspondances dans <filename>pg_ident.conf</filename>
       (par exemple, s'agit-il d'une adresse e-mail&nbsp;? d'un identifiant organisationnel&nbsp;?
       d'un UUID&nbsp;?).
       Elles doivent aussi indiquer s'il est sûr d'utiliser le module avec l'option
       <symbol>delegate_ident_mapping=1</symbol>, ainsi que les éventuelles
       configurations supplémentaires nécessaires.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="oauth-validator-design-usermap-delegation">
   <title>Autorisation des utilisateurs (Délégation via usermap)</title>
   <para>
    Le résultat standard d'un module de validation est un identifiant
    utilisateur, que le serveur comparera ensuite aux correspondances définies
    dans <link linkend="auth-username-maps"><filename>pg_ident.conf</filename></link>
    pour déterminer si l'utilisateur final est autorisé à se connecter.
    Toutefois, OAuth est en lui-même un cadre d'autorisation, et les jetons
    peuvent contenir des informations relatives aux privilèges de l'utilisateur.
    Par exemple, un jeton peut être associé aux groupes organisationnels auxquels
    appartient un utilisateur, ou à la liste des rôles qu'il peut assumer, et
    reproduire ces informations dans des fichiers de correspondance locaux sur
    chaque serveur n'est pas forcément souhaitable.
   </para>
   <para>
    Pour contourner entièrement la correspondance des noms d'utilisateur et
    confier au module de validation la responsabilité supplémentaire
    d'autoriser les connexions utilisateur, le HBA peut être configuré avec
    <xref linkend="auth-oauth-delegate-ident-mapping"/>. Le module peut alors
    utiliser les portées (scopes) du jeton ou une méthode équivalente pour décider
    si l'utilisateur est autorisé à se connecter avec le rôle souhaité.
    L'identifiant utilisateur sera toujours enregistré par le serveur, mais il
    n'interviendra plus dans la décision de poursuite de la connexion.
   </para>
   <para>
    Avec ce mécanisme, l'authentification devient optionnelle, tant que le module
    signale que la connexion est autorisée, l'ouverture de session se poursuit,
    même si aucun identifiant utilisateur n'est renseigné. Cela permet de mettre
    en œuvre un accès anonyme ou pseudonyme à la base de données, où le fournisseur
    tiers effectue toute l'authentification nécessaire, sans fournir aucune
    information permettant d'identifier l'utilisateur au serveur (certains
    fournisseurs peuvent générer un identifiant anonymisé à enregistrer à des fins
    d'audit ultérieur).
   </para>
   <para>
    La délégation via usermap offre une flexibilité architecturale maximale,
    mais elle fait du module de validation un point de défaillance unique pour
    l'autorisation des connexions. À utiliser avec prudence.
   </para>
  </sect2>
 </sect1>

 <sect1 id="oauth-validator-init">
  <title>Fonctions d'initialisation</title>
  <indexterm zone="oauth-validator-init">
   <primary>_PG_oauth_validator_module_init</primary>
  </indexterm>
  <para>
   Les modules de validation OAuth sont chargés dynamiquement à partir des
   bibliothèques partagées listées dans <xref linkend="guc-oauth-validator-libraries"/>.
   Les modules sont chargés à la demande lorsqu'une tentative de connexion le requiert.
   Le chemin de recherche standard des bibliothèques est utilisé pour localiser la
   bibliothèque. Pour fournir les fonctions de callback du validateur et indiquer que la
   bibliothèque est bien un module de validation OAuth, une fonction nommée
   <function>_PG_oauth_validator_module_init</function> doit être définie.
   La valeur de retour de cette fonction doit être un pointeur vers une structure
   de type <structname>OAuthValidatorCallbacks</structname>, qui contient un nombre
   magique ainsi que des pointeurs vers les fonctions de validation du module.
   Le pointeur retourné doit avoir une durée de vie égale à celle du serveur,
   ce qui est généralement obtenu en le définissant comme une variable
   <literal>static const</literal> dans la portée globale.
<programlisting>
typedef struct OAuthValidatorCallbacks
{
    uint32        magic;            /* doit être défini à PG_OAUTH_VALIDATOR_MAGIC */

    ValidatorStartupCB startup_cb;
    ValidatorShutdownCB shutdown_cb;
    ValidatorValidateCB validate_cb;
} OAuthValidatorCallbacks;

typedef const OAuthValidatorCallbacks *(*OAuthValidatorModuleInit) (void);
</programlisting>

   Seule la fonction callback <structfield>validate_cb</structfield> est obligatoire, les autres
    sont optionnelles.
  </para>
 </sect1>

 <sect1 id="oauth-validator-callbacks">
  <title>Fonctions callbacks du validateur OAuth</title>
  <para>
   Les modules de validation OAuth implémentent leur fonctionnalité en définissant
   un ensemble de fonctions callbacks. Le serveur les appelle selon les besoins
   pour traiter la demande d'authentification de l'utilisateur.
  </para>

  <sect2 id="oauth-validator-callback-startup">
   <title>Callback d'initialisation (Startup)</title>
   <para>
    La fonction callback <function>startup_cb</function> est appelée immédiatement après
    le chargement du module. Cette fonction peut être utilisée pour initialiser un état
    local et effectuer d'autres actions d'initialisation si nécessaire.
    Si le module de validation conserve un état, il peut l'enregistrer dans
    <structfield>state->private_data</structfield>.

<programlisting>
typedef void (*ValidatorStartupCB) (ValidatorModuleState *state);
</programlisting>
   </para>
  </sect2>

  <sect2 id="oauth-validator-callback-validate">
   <title>Callback de validation</title>
   <para>
    La fonction callback <function>validate_cb</function> est exécutée lors de l'échange OAuth
    lorsqu'un utilisateur tente de s'authentifier à l'aide d'OAuth. Tout état défini
    dans des appels précédents sera disponible via <structfield>state->private_data</structfield>.

<programlisting>
typedef bool (*ValidatorValidateCB) (const ValidatorModuleState *state,
                                     const char *token, const char *role,
                                     ValidatorModuleResult *result);
</programlisting>

    <replaceable>token</replaceable> contiendra le jeton Bearer à valider.
    <application>PostgreSQL</application> garantit que le jeton est syntaxiquement valide,
    mais aucune autre validation n'a encore été effectuée.
    <replaceable>role</replaceable> contiendra le rôle avec lequel l'utilisateur
    souhaite se connecter. La fonction doit renseigner les paramètres de sortie
    dans la structure <literal>result</literal>, qui est définie comme suit&nbsp;:

<programlisting>
typedef struct ValidatorModuleResult
{
    bool        authorized;
    char       *authn_id;
} ValidatorModuleResult;
</programlisting>

    La connexion ne se poursuivra que si le module définit
    <structfield>result->authorized</structfield> à <literal>true</literal>.
    Pour authentifier l'utilisateur, le nom d'utilisateur authentifié (déterminé
    via le jeton) doit être alloué avec <function>palloc</function> et renvoyé
    dans le champ <structfield>result->authn_id</structfield>.
    Alternativement, <structfield>result->authn_id</structfield> peut être défini à
    <literal>NULL</literal> si le jeton est valide, mais que l'identité de l'utilisateur
    associée ne peut pas être déterminée.
   </para>
   <para>
    Un validateur peut retourner <literal>false</literal> pour signaler une erreur interne,
    dans ce cas, les autres paramètres du résultat sont ignorés et la connexion échoue.
    Sinon, le validateur doit retourner <literal>true</literal> pour indiquer
    que le jeton a été traité et qu'une décision d'autorisation a été prise.
   </para>
   <para>
    Le comportement après le retour de <function>validate_cb</function> dépend de la
    configuration HBA spécifique. Normalement, le nom d'utilisateur dans
    <structfield>result->authn_id</structfield> doit correspondre exactement au rôle
    avec lequel l'utilisateur tente de se connecter (ce comportement peut être modifié
    à l'aide d'une table de correspondance d'utilisateurs). Mais lorsqu'on utilise
    une règle HBA avec <literal>delegate_ident_mapping</literal> activé,
    <productname>PostgreSQL</productname> ne vérifiera pas la valeur de
    <structfield>result->authn_id</structfield>&nbsp;; dans ce cas, il revient
    au validateur de s'assurer que le jeton confère les privilèges nécessaires
    pour que l'utilisateur puisse se connecter avec le
    <replaceable>role</replaceable> spécifié.
   </para>
  </sect2>

  <sect2 id="oauth-validator-callback-shutdown">
   <title>Callback d'arrêt (Shutdown)</title>
   <para>
    La fonction callback <function>shutdown_cb</function> est appelée lorsque le processus
    backend associé à la connexion se termine. Si le module de validation a
    alloué de la mémoire ou d'autres ressources, cette fonction doit les libérer afin
    d'éviter les fuites de mémoire.
<programlisting>
typedef void (*ValidatorShutdownCB) (ValidatorModuleState *state);
</programlisting>
   </para>
  </sect2>

 </sect1>
</chapter>
