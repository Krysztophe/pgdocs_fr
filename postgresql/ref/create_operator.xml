<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createoperator">
 <indexterm zone="sql-createoperator">
  <primary>CREATE OPERATOR</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE OPERATOR</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE OPERATOR</refname>
  <refpurpose>Définir un nouvel opérateur</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>CREATE OPERATOR <replaceable>nom</replaceable> (
    {FUNCTION|PROCEDURE} = <replaceable class="parameter">nom_fonction</replaceable>
    [, LEFTARG = <replaceable class="parameter">type_gauche</replaceable> ]
    [, RIGHTARG = <replaceable class="parameter">type_droit</replaceable> ]
    [, COMMUTATOR = <replaceable class="parameter">op_com</replaceable> ]
    [, NEGATOR = <replaceable class="parameter">op_neg</replaceable> ]
    [, RESTRICT = <replaceable class="parameter">proc_res</replaceable> ]
    [, JOIN = <replaceable class="parameter">proc_join</replaceable> ]
    [, HASHES ] [, MERGES ]
)
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE OPERATOR</command> définit un nouvel opérateur,
   <replaceable class="parameter">nom</replaceable>. L'utilisateur qui définit
   un opérateur en devient propriétaire. Si un nom de schéma est donné,
   l'opérateur est créé dans le schéma spécifié. Sinon, il est créé dans
   le schéma courant.
  </para>

  <para>
   Le nom de l'opérateur est une séquence d'au plus <symbol>NAMEDATALEN</symbol>-1
   (63 par défaut) caractères parmi la liste suivante&nbsp;:
   <literallayout>+ - * / &lt; &gt; = ~ ! @ # % ^ &amp; | ` ?
   </literallayout>

   Il existe quelques restrictions dans le choix du nom&nbsp;:
   <itemizedlist>
    <listitem>
     <para>
      <literal>--</literal> et <literal>/*</literal> ne peuvent pas apparaître
      dans le nom d'un opérateur car ils sont pris pour le début
      d'un commentaire.
     </para>
    </listitem>
    <listitem>
     <para>
      Un nom d'opérateur multicaractères ne peut pas finir avec
      <literal>+</literal> ou <literal>-</literal> sauf si le nom contient
      l'un, au moins, de ces caractères&nbsp;:
      <literallayout>~ ! @ # % ^ &amp; | ` ?
      </literallayout>
      Par exemple, <literal>@-</literal> est un nom d'opérateur autorisé mais
      <literal>*-</literal> n'en est pas un. Cette restriction permet à
      <productname>PostgreSQL</productname> d'analyser les commandes compatibles
      SQL sans nécessiter d'espaces entre les lexèmes.
     </para>
    </listitem>
    <listitem>
     <para>
      Le symbole <literal>=&gt;</literal> est réservé par la grammaire SQL,
      donc il ne peut pas être utilisé comme nom d'opérateur.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   L'opérateur <literal>!=</literal> est remplacé par
   <literal>&lt;&gt;</literal> à la saisie, ces deux noms sont donc toujours
   équivalents.
  </para>

  <note>
   <para>
    Les opérateurs unaires droits, aussi appelés postfix, sont obsolètes et
    seront supprimés dans <productname>PostgreSQL</productname> version 14.
   </para>
  </note>

  <para>
   Pour les opérateurs binaires, <literal>LEFTARG</literal> et
   <literal>RIGHTARG</literal> doivent être définis.
   Pour les opérateurs préfixes, seul <literal>RIGHTARG</literal> devrait être
   défini.
   La fonction <replaceable class="parameter">nom_fonction</replaceable> doit avoir
   été précédemment définie par <command>CREATE FUNCTION</command> et
   doit accepter le bon nombre d'arguments (un ou deux) des types indiqués.
  </para>

  <para>
   Dans la syntaxe de <literal>CREATE OPERATOR</literal>, les mot-clés
   <literal>FUNCTION</literal> et <literal>PROCEDURE</literal> sont
   équivalents mais la fonction référencée doit dans tous les cas être une
   fonction et non pas une procédure. L'utilisation du mot clé
   <literal>PROCEDURE</literal> est ici historique et dépréciée.
  </para>

  <para>
   Les autres clauses spécifient des attributs optionnels d'optimisation
   d'opérateur. Leur signification est détaillée dans <xref linkend="xoper-optimization"/>.
  </para>

  <para>
   Pour pouvoir créer un opérateur, vous devez avoir le droit <literal>USAGE</literal>
   sur le type des arguments et sur le type en retour. Vous devez aussi avoir le
   droit <literal>EXECUTE</literal> sur la fonction sous-jacente. Si un opérateur de
   commutation ou de négation est spécifié, vous devez être le propriétaire de ces
   opérateurs.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom de l'opérateur à définir. Voir ci-dessus pour les caractères
      autorisés. Le nom peut être qualifié du nom du schéma, par
      exemple <literal>CREATE OPERATOR monschema.+ (...)</literal>. Dans le cas contraire,
      il est créé dans le schéma courant. Deux opérateurs dans le
      même schéma peuvent avoir le même nom s'ils opérent sur des types de
      données différents. On parle alors de <firstterm>surchargement</firstterm>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_fonction</replaceable></term>
    <listitem>
     <para>
      La fonction utilisée pour implanter cet opérateur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_gauche</replaceable></term>
    <listitem>
     <para>
      Le type de données de l'opérande gauche de l'opérateur, s'il existe.
      Cette option est omise pour un opérateur préfixe.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_droit</replaceable></term>
    <listitem>
     <para>
      Le type de données de l'opérande droit de l'opérateur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">op_com</replaceable></term>
    <listitem>
     <para>
      Le commutateur de cet opérateur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">op_neg</replaceable></term>
    <listitem>
     <para>
      La négation de cet opérateur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">proc_res</replaceable></term>
    <listitem>
     <para>
      La fonction d'estimation de la sélectivité de restriction pour cet
      opérateur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">proc_join</replaceable></term>
    <listitem>
     <para>
      La fonction d'estimation de la sélectivité de jointure pour cet
      opérateur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>HASHES</literal></term>
    <listitem>
     <para>
      L'opérateur peut supporter une jointure de hachage.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>MERGES</literal></term>
    <listitem>
     <para>
      L'opérateur peut supporter une jointure de fusion.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   La syntaxe <literal>OPERATOR()</literal> est utilisée pour préciser un nom
   d'opérateur qualifié d'un schéma dans <replaceable class="parameter">op_com</replaceable>
   ou dans les autres arguments optionnels.
   Par exemple&nbsp;:
   <programlisting>COMMUTATOR = OPERATOR(mon_schema.===) ,
   </programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   <xref linkend="xoper"/> et <xref linkend="xoper-optimization"/> fournissent
   de plus amples informations.
  </para>

  <para>
   Quand vous définissez un opérateur auto-commutatif, vous le faites
   directement. Quand vous définissez une paire d'opérateurs commutatifs,
   cela devient un peu plus compliqué&nbsp;: comment pouvez-vous définir le
   premier qui fait référence au second que vous n'avez pas encore
   défini&nbsp;? Il existe trois solutions à ce problème&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      Un premier moyen est d'omettre la clause <literal>COMMUTATOR</literal>
      dans le premier opérateur que vous définissez, puis de fournir le
      premier dans la définition du second. Comme
      <productname>PostgreSQL</productname> sait que les opérateurs commutatifs
      viennent en paire, alors quand il voit la deuxième définition, il
      retourne sur la première définition et remplit automatiquement la
      clause <literal>COMMUTATOR</literal> manquante.
     </para>
    </listitem>

    <listitem>
     <para>
      Une autre moyen, plus direct, revient juste à inclure les clauses
      <literal>COMMUTATOR</literal> dans les deux définitions. Quand
      <productname>PostgreSQL</productname> traite la première définition et
      réalise que <literal>COMMUTATOR</literal> fait référence à un opérateur
      inexistant, le système fait une entrée inopérante pour cet opérateur
      dans le catalogue système. Cette entrée aura des données valides
      uniquement pour le nom de l'opérateur, les types d'opérande gauche et
      droit, et le propriétaire car ce sont les seuls que
      <productname>PostgreSQL</productname> peut déduire à ce moment.
      L'entrée du catalogue pour le premier opérateur se liera à cette
      entrée inopérante. Plus tard, quand vous définirez le deuxième opérateur,
      le système mettra à jour l'entre inopérante avec l'information
      supplémentaire provenant de la deuxième définition. Si vous essayez
      d'utiliser l'entrée inopérante avant qu'elle ne soit complètement
      remplie, vous obtiendrez un message d'erreur.
     </para>
    </listitem>

    <listitem>
     <para>
      Enfin, les deux opérateurs peuvent être définis sans les clauses
      <literal>COMMUTATOR</literal>, puis <command>ALTER OPERATOR</command>
      peut être utilisé pour configurer les liens des commutateurs. Il
      est suffisant d'utiliser <command>ALTER</command> sur chaque paire.
     </para>
    </listitem>
   </itemizedlist>

   Dans les trois cas, vous devez être propriétaire des deux opérateurs pour
   les marquer comme commutateurs.
  </para>

  <para>
   Les paires d'opérateurs de nagétion peuvent être définies en utilisant les
   mêmes méthodes que celles des paires de commutateurs.
  </para>

  <para>
   Il n'est pas possible de spécifier la précédence lexicale d'un opérateur
   dans <command>CREATE OPERATOR</command> car le comportement de précédence
   de l'analyseur n'est pas modifiable. Voir <xref linkend="sql-precedence"/>
   pour des détails sur la gestion de la précédence.
  </para>

  <para>
   Les options obsolètes, <literal>SORT1</literal>, <literal>SORT2</literal>,
   <literal>LTCMP</literal> et <literal>GTCMP</literal> étaient utilisées
   auparavant pour spécifier les noms des opérateurs de tris associés avec un
   opérateur joignable par fusion (<literal>mergejoinable</literal>). Ceci
   n'est plus nécessaire car l'information sur les opérateurs associés est
   disponible en cherchant les familles d'opérateur B-tree. Si une des ces
   options est fournie, elle est ignorée mais configure implicitement
   <literal>MERGES</literal> à true.
  </para>

  <para>
   <link linkend="sql-dropoperator"><command>DROP OPERATOR</command></link>
   est utilisé pour supprimer les opérateurs utilisateur,
   <link linkend="sql-alteroperator"><command>ALTER OPERATOR</command></link>
   pour les modifier.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   La commande suivante définit un nouvel opérateur,
   <quote>area-equality</quote>, pour le type de données <type>box</type>&nbsp;:
   <programlisting>CREATE OPERATOR === (
    LEFTARG = box,
    RIGHTARG = box,
    FUNCTION = area_equal_function,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = area_restriction_function,
    JOIN = area_join_function,
    HASHES, MERGES
);
   </programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CREATE OPERATOR</command> est une extension
   <productname>PostgreSQL</productname>. Il n'existe pas d'opérateurs utilisateur dans le standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteroperator"/></member>
   <member><xref linkend="sql-createopclass"/></member>
   <member><xref linkend="sql-dropoperator"/></member>
  </simplelist>
 </refsect1>
</refentry>
