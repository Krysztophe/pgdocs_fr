<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createsubscription">
 <indexterm zone="sql-createsubscription">
  <primary>CREATE SUBSCRIPTION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE SUBSCRIPTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Ordres du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE SUBSCRIPTION</refname>
  <refpurpose>définir une nouvelle souscription</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
CREATE SUBSCRIPTION <replaceable class="parameter">nom_souscription</replaceable>
    CONNECTION '<replaceable class="parameter">conninfo</replaceable>'
    PUBLICATION <replaceable class="parameter">nom_publication</replaceable> [, ...]
    [ WITH ( <replaceable class="parameter">param_souscription</replaceable> [= <replaceable class="parameter">valeur</replaceable>] [, ... ] ) ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE SUBSCRIPTION</command> ajoute une nouvelle souscription de
   réplication logique. The user that creates a subscription becomes the owner
   of the subscription. Le nom de la souscription doit être différent
   du nom de toutes les autres souscriptions existantee dans la base.
  </para>

  <para>
   Une souscription représente une connexion de réplication vers un serveur
   publiant des données. De ce fait, en plus d'ajouter les définitions dans les
   catalogues locaux, cette commence crée normalement un slot de réplication sur
   le publieur.
  </para>

  <para>
   Un worker de réplication logique sera démarré pour répliquer les données pour
   la nouvelle souscription à la validation de la transaction dans laquelle
   cette commande est lancée, sauf si la souscription est désactivé à sa
   création.
  </para>

  <para>
   To be able to create a subscription, you must have the privileges of the
   the <literal>pg_create_subscription</literal> role, as well as
   <literal>CREATE</literal> privileges on the current database.
  </para>

  <para>
   Des informations supplémentaires sur la souscription et la réplication
   logique dans son ensemble sont également disponible sur <xref
   linkend="logical-replication-subscription"/> et <xref
   linkend="logical-replication"/>.
  </para>

 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry id="sql-createsubscription-name">
    <term><replaceable class="parameter">nom_souscription</replaceable></term>
    <listitem>
     <para>
      Le nom de la nouvelle souscriptions.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="sql-createsubscription-connection">
    <term><literal>CONNECTION '<replaceable class="parameter">conninfo</replaceable>'</literal></term>
    <listitem>
     <para>
      La chaîne de connexion <application>libpq</application> définissant la
      façon de se connecter à la base publieur. Pour plus de détails voir <xref
      linkend="libpq-connstring"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="sql-createsubscription-publication">
    <term><literal>PUBLICATION <replaceable class="parameter">publication_name</replaceable> [, ...]</literal></term>
    <listitem>
     <para>
      Nom des publications sur le serveur publiant les données auxquelles souscrire.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="sql-createsubscription-with">
    <term><literal>WITH ( <replaceable class="parameter">param_souscription</replaceable> [= <replaceable class="parameter">valeur</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      Cette clause indique les paramètres optionnelles pour une souscription.
     </para>

     <para>
      Les paramètres suivants contrôlent ce qui arrive lors de la création de
      la souscription&nbsp;:

      <variablelist>
       <varlistentry id="sql-createsubscription-with-connect">
        <term><literal>connect</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Indique si la commande <command>CREATE SUBSCRIPTION</command> doit se
          connecter au publieur. La valeur par défaut est
          <literal>true</literal>. Configuré à <literal>false</literal>, cela
          forcera les valeurs de <literal>create_slot</literal>,
          <literal>enabled</literal> et <literal>copy_data</literal> à
          <literal>false</literal>.  (Vous ne pouvez pas combiner
          <literal>connect</literal> à <literal>false</literal> avec
          <literal>create_slot</literal>, <literal>enabled</literal> et/ou
          <literal>copy_data</literal> à <literal>true</literal>.)
         </para>

         <para>
          Comme aucune connexion n'a lieu quand cette option vaut
          <literal>false</literal>, no tables are subscribed. To initiate
          replication, you must manually create the replication slot, enable
          the subscription, and refresh the subscription. See
          <xref linkend="logical-replication-subscription-examples-deferred-slot"/>
          for examples.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-create-slot">
        <term><literal>create_slot</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si la commande devrait créer le slot de réplication sur le
          serveur publiant les données.  La valeur par défaut est
          <literal>true</literal>.
         </para>
         <para>
          If set to <literal>false</literal>, you are responsible for
          creating the publisher's slot in some other way. See
          <xref linkend="logical-replication-subscription-examples-deferred-slot"/>
          for examples.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-enabled">
        <term><literal>enabled</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si la souscription devrait répliquer activement, ou si elle
          devrait uniquement configurée mais pas démarrée.  La valeur par
          défaut est <literal>true</literal>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-slot-name">
        <term><literal>slot_name</literal> (<type>string</type>)</term>
        <listitem>
         <para>
          Nom du slot de réplication à utiliser. Par défaut, le nom
          de la souscription est utilisé comme nom du slot.
         </para>

         <para>
          Configurer <literal>slot_name</literal> à <literal>NONE</literal>
          means there will be no replication slot associated with the
          subscription. Such subscriptions must also have both
          <literal>enabled</literal> and <literal>create_slot</literal> set to
          <literal>false</literal>.  Use this when you will be creating the
          replication slot later manually. See
          <xref linkend="logical-replication-subscription-examples-deferred-slot"/>
          for examples.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>

     <para>
      Les paramètres suivants contrôlent le comportement de la réplication pour
      la souscription après sa création&nbsp;:

      <variablelist>

       <varlistentry id="sql-createsubscription-with-binary">
        <term><literal>binary</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Specifies whether the subscription will request the publisher to send
          the data in binary format (as opposed to text). The default is
          <literal>false</literal>. Any initial table synchronization copy
          (see <literal>copy_data</literal>) also uses the same format. Binary
          format can be faster than the text format, but it is less portable
          across machine architectures and <productname>PostgreSQL</productname>
          versions. Binary format is very data type specific; for example, it
          will not allow copying from a <type>smallint</type> column to an
          <type>integer</type> column, even though that would work fine in text
          format. Even when this option is enabled, only data types having binary
          send and receive functions will be transferred in binary. Note that
          the initial synchronization requires all data types to have binary
          send and receive functions, otherwise the synchronization will fail
          (see <xref linkend="sql-createtype"/> for more about send/receive
          functions).
         </para>

         <para>
          Lors d'une réplication entre versions différentes, le publieur
          pourrait avoir une fonction d'envoi binaire pour certains types de
          données mais que le souscripteur n'ait pas de fonction de réception
          binaire pour ce type.  Dans ce cas, le transfert de données échouera
          et l'option <literal>binary</literal> ne pourra pas être utilisée.
         </para>

         <para>
          If the publisher is a <productname>PostgreSQL</productname> version
          before 16, then any initial table synchronization will use text format
          even if <literal>binary = true</literal>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-copy-data">
        <term><literal>copy_data</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si les données existantes dans les publications qui sont
          en train d'être souscrites devraient être copiées une fois la
          réplication démarrée. La valeur par défaut est
          <literal>true</literal>.
         </para>
         <para>
          Si les publications contiennent des clauses <literal>WHERE</literal>,
          elles affecteront les données copiées. Référez-vous à <xref
          linkend="sql-createsubscription-notes" /> pour les détails.
         </para>
         <para>
          See <xref linkend="sql-createsubscription-notes"/> for details of how
          <literal>copy_data = true</literal> can interact with the
          <literal>origin</literal> parameter.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-streaming">
        <term><literal>streaming</literal> (<type>enum</type>)</term>
        <listitem>
         <para>
          Spécifie l'activation du flux de transactions en cours pour cette
          souscription. The default value is <literal>off</literal>,
          meaning all transactions are fully decoded on the publisher and only
          then sent to the subscriber as a whole.
         </para>

         <para>
          If set to <literal>on</literal>, the incoming changes are written to
          temporary files and then applied only after the transaction is
          committed on the publisher and received by the subscriber.
         </para>

         <para>
          If set to <literal>parallel</literal>, incoming changes are directly
          applied via one of the parallel apply workers, if available. If no
          parallel apply worker is free to handle streaming transactions then
          the changes are written to temporary files and applied after the
          transaction is committed. Note that if an error happens in a
          parallel apply worker, the finish LSN of the remote transaction
          might not be reported in the server log.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-synchronous-commit">
        <term><literal>synchronous_commit</literal> (<type>enum</type>)</term>
        <listitem>
         <para>
          La valeur de ce paramètre surcharge le paramètre <xref
          linkend="guc-synchronous-commit"/> pour les processus workers
          d'application de cette souscription. La valeur par défaut est
          <literal>off</literal>.
         </para>

         <para>
          Il est sans danger d'utiliser <literal>off</literal> pour la
          réplication logique&nbsp;: Si le souscripteur perd des transactions à
          cause d'une synchronisation manquante, les données seront renvoyée par
          le serveur publiant les données.
         </para>

         <para>
          Un paramétrage différent pourrait être appropriée lorsque la
          réplication logique est utilisée.  Les workers de réplication logique
          rapportent la position d'écriture et de synchronisation au serveur
          publiant les données, et lorsque la réplication synchrone est
          utilisée, le serveur publiant les données attendra la synchronisation.
          Cela veut dire que positionner <literal>synchronous_commit</literal>
          pour le souscripteur à <literal>off</literal> quand la souscription
          est utilisée pour de la réplication synchrone pourrait augmenter la
          latence des <command>COMMIT</command> sur le serveur publiant les
          données. Dans ce scénario, il peut être avantageux de positionner
          <literal>synchronous_commit</literal> à <literal>local</literal> ou au
          dessus.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-two-phase">
        <term><literal>two_phase</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si la validation en deux phases est activée pour cette
          souscription. La valeur par défaut est <literal>false</literal>.
         </para>

         <para>
          Quand la validation en deux phases est activée, les transactions
          préparées sont envoyés au souscripteur au moment du <command>PREPARE
          TRANSACTION</command>, et sont traitées comme des transactions en deux
          phases, y compris sur le souscripteur. Sinon, les requêtes préparées
          sont envoyés au souscripteur uniquement quand elles sont validées, et
          elles sont traitées immédiatement après par le souscripteur.
         </para>

         <para>
          L'implémentation de la validation en deux phases requiert que la
          réplication ait terminée avec succès la synchronisation initiale des
          tables.  Donc même si <literal>two_phase</literal> est activé pour une
          souscription, l'état interne de la validation en deux phases reste en
          attente temporaire jusqu'à ce que la phase d'initialisation se
          termine. Voir la colonne <structfield>subtwophasestate</structfield>
          de <link
          linkend="catalog-pg-subscription"><structname>pg_subscription</structname></link>
          pour connaître l'état actuel de two-phase.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-disable-on-error">
        <term><literal>disable_on_error</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Spécifie si la souscription doit être désactivée automatiquement si
          des erreurs sont détectées par les workers de la souscription lors de
          la réplication des données du publieur. La valeur par défaut est
          <literal>false</literal>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-password-required">
        <term><literal>password_required</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          Specifies whether connections to the publisher made as a result
          of this subscription must use password authentication. This setting
          is ignored when the subscription is owned by a superuser.
          The default is <literal>true</literal>. Only superusers can set
          this value to <literal>false</literal>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-run-as-owner">
        <term><literal>run_as_owner</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
          If true, all replication actions are performed as the subscription
          owner. If false, replication workers will perform actions on each
          table as the owner of that table. The latter configuration is
          generally much more secure; for details, see
          <xref linkend="logical-replication-security" />.
          The default is <literal>false</literal>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="sql-createsubscription-with-origin">
        <term><literal>origin</literal> (<type>string</type>)</term>
        <listitem>
         <para>
          Specifies whether the subscription will request the publisher to only
          send changes that don't have an origin or send changes regardless of
          origin. Setting <literal>origin</literal> to <literal>none</literal>
          means that the subscription will request the publisher to only send
          changes that don't have an origin. Setting <literal>origin</literal>
          to <literal>any</literal> means that the publisher sends changes
          regardless of their origin. The default is <literal>any</literal>.
         </para>
         <para>
          See <xref linkend="sql-createsubscription-notes"/> for details of how
          <literal>copy_data = true</literal> can interact with the
          <literal>origin</literal> parameter.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   When specifying a parameter of type <type>boolean</type>, the
   <literal>=</literal> <replaceable class="parameter">value</replaceable>
   part can be omitted, which is equivalent to
   specifying <literal>TRUE</literal>.
  </para>
 </refsect1>

 <refsect1 id="sql-createsubscription-notes" xreflabel="Notes">
  <title>Notes</title>

  <para>
   Voir <xref linkend="logical-replication-security"/> pour plus de
   détail sur comment configurer le contrôle d'accès entre la souscription et
   l'instance de publication.
  </para>

  <para>
   Lors de la création d'un slot de réplication (comportement par défaut),
   <command>CREATE SUBSCRIPTION</command> ne peut pas être exécuté à
   l'intérieur d'un bloc de transaction.
  </para>

  <para>
   Créer une souscription qui connecte la même instance (par exemple, pour
   répliquer entre des bases de données de la même instance ou pour répliquer
   dans la même base de données) réussira seulement si le slot de réplication
   n'est pas créé dans la même commande. Sinon, l'appel à <command>CREATE
    SUBSCRIPTION</command> va pauser. Pour le faire fonctionner, créer le slot
   de réplication séparément (en utilisant la fonction
   <function>pg_create_logical_replication_slot</function> avec le nom de
   plugin <literal>pgoutput</literal>) et créer la souscription en utilisant
   le paramètre <literal>create_slot = false</literal>. See
   <xref linkend="logical-replication-subscription-examples-deferred-slot"/>
   for examples. C'est une restriction
   d'implémentation qui pourrait être supprimé dans une prochaine version.
  </para>

  <para>
   Si une table dans la publication a une clause <literal>WHERE</literal>, les
   lignes pour lesquelles l'<replaceable
   class="parameter">expression</replaceable> s'évalue à false ou null ne
   seront pas publiées. Si la souscription a plusieurs publications dans
   lesquelles la même table a été publiée avec des clauses
   <literal>WHERE</literal> différentes, une ligne sera publiée si une des
   expressions (référant à cette opération de publication) sera publiée si une
   des expressions (référant à cette opération de publication) sont
   satisfaites. Dans le cas où différentes clauses <literal>WHERE</literal>,
   si une des publications n'a pas de clause <literal>WHERE</literal>
   (référant à cette opération de publication) ou si la publication est
   déclarée <link linkend="sql-createpublication-for-all-tables"><literal>FOR
   ALL TABLES</literal></link> ou <link
   linkend="sql-createpublication-for-tables-in-schema"><literal>FOR TABLES IN
   SCHEMA</literal></link>>, les lignes sont toujours publiées quelque soit la
   définition des autres expressions.  Si le souscripteur est une version
   <productname>PostgreSQL</productname> avant la 15, puis toute ligne
   filtrante est ignorée lors de la phase de synchronisation initiale des
   données. Pour ce cas, l'utilisateur pourrait vouloir considérer la
   suppression des données copiées initialement qui serait incompatible avec un
   filtrage précédent.  Comme la synchronisation des données ne prend pas en
   compte le paramètre de publication <link
   linkend="sql-createpublication-with-publish"><literal>publish</literal></link>
   lors de la copie des tables existantes, certaines lignes pourraient être
   copiées sans être répliquées en utilisant DML. Voir <xref
   linkend="logical-replication-subscription-examples"/> pour des exemples.
  </para>

  <para>
   Les souscriptions ayant plusieurs publications pour lesquels la même table
   a été publiée avec des listes de colonnes différentes ne sont pas
   supportées.
  </para>

  <para>
   Nous autorisons que des publications inexistantes soient indiquées pour que
   les utilisateurs puissent les ajouter après coup. Ceci signifie que <link
   linkend="catalog-pg-subscription"><structname>pg_subscription</structname></link>
   peut avoir des publications inexistantes.
  </para>

  <para>
   When using a subscription parameter combination of
   <literal>copy_data = true</literal> and <literal>origin = NONE</literal>,
   the initial sync table data is copied directly from the publisher, meaning
   that knowledge of the true origin of that data is not possible. If the
   publisher also has subscriptions then the copied table data might have
   originated from further upstream. This scenario is detected and a WARNING is
   logged to the user, but the warning is only an indication of a potential
   problem; it is the user's responsibility to make the necessary checks to
   ensure the copied data origins are really as wanted or not.
  </para>

  <para>
   To find which tables might potentially include non-local origins (due to
   other subscriptions created on the publisher) try this SQL query:
<programlisting>
# substitute &lt;pub-names&gt; below with your publication name(s) to be queried
SELECT DISTINCT PT.schemaname, PT.tablename
FROM pg_publication_tables PT,
     pg_subscription_rel PS
     JOIN pg_class C ON (C.oid = PS.srrelid)
     JOIN pg_namespace N ON (N.oid = C.relnamespace)
WHERE N.nspname = PT.schemaname AND
      C.relname = PT.tablename AND
      PT.pubname IN (&lt;pub-names&gt;);
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer une souscription à un serveur distant qui réplique les tables dans la
   publication <literal>mypublication</literal> et
   <literal>insert_only</literal> et démarre la réplication immédiatement après
   le commit :
   <programlisting>
CREATE SUBSCRIPTION mysub
         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'
        PUBLICATION mypublication, insert_only;
   </programlisting>
  </para>

  <para>
   Crée une souscription vers un serveur distant qui réplique les tables
   dans la publication <literal>insert_only</literal> et ne commence pas
   la réplication jusqu'à ce qu'elle soit activée plus tard.
   <programlisting>
CREATE SUBSCRIPTION mysub
         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'
        PUBLICATION insert_only
               WITH (enabled = false);
   </programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CREATE SUBSCRIPTION</command> est une extension
   <productname>PostgreSQL</productname> au standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altersubscription"/></member>
   <member><xref linkend="sql-dropsubscription"/></member>
   <member><xref linkend="sql-createpublication"/></member>
   <member><xref linkend="sql-alterpublication"/></member>
  </simplelist>
 </refsect1>
</refentry>
