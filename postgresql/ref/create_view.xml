<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createview">
 <indexterm zone="sql-createview">
  <primary>CREATE VIEW</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE VIEW</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE VIEW</refname>
  <refpurpose>Définir une vue</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] [ RECURSIVE ] VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="parameter">nom_option_vue</replaceable> [= <replaceable class="parameter">valeur_option_vue</replaceable>] [, ... ] ) ]
    AS <replaceable class="parameter">requête</replaceable>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE VIEW</command> définit une vue d'après une requête. La
   vue n'est pas matérialisée physiquement. Au lieu de cela, la requête
   est lancée chaque fois qu'une vue est utilisée dans une requête.
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> a la même finalité, mais
   si une vue du même nom existe déjà, elle est remplacée. La nouvelle requête
   doit générer les mêmes colonnes que celles de l'ancienne requête (c-est-à-dire
   les mêmes noms de colonnes dans le même ordre avec les mêmes types de données).
   Par contre, elle peut ajouter des colonnes supplémentaires en fin de liste.
   Les traitements qui donnent les colonnes en sortie pourraient être complètement
   différents.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple
   <literal>CREATE VIEW monschema.mavue ...</literal>),
   alors la vue est créée dans ce schéma.
   Dans le cas contraire, elle est créée dans le schéma courant. Les vues
   temporaires existent dans un schéma spécial. Il n'est donc pas nécessaire
   de fournir de schéma pour les vues temporaires. Le
   nom de la vue doit être différent du nom de toute autre relation (table, séquence,
   index, vue, vue matérialisée ou table distante) du même schéma.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> ou <literal>TEMP</literal></term>
    <listitem>
     <para>
      La vue est temporaire. Les vues temporaires sont automatiquement supprimées
	  en fin de session. Les relations permanentes qui portent le même nom ne sont plus
      visibles pour la session tant que la vue temporaire existe, sauf
      s'il y est fait référence avec le nom du schéma.
     </para>

     <para>
      Si l'une des tables référencées par la vue est temporaire, la vue est alors elle-aussi
      temporaire (que <literal>TEMPORARY</literal> soit spécifié ou non).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RECURSIVE</literal>
      <indexterm zone="sql-createview">
       <primary>RECURSIVE</primary>
       <secondary>dans les vues</secondary>
      </indexterm>
    </term>
    <listitem>
     <para>
      Crée une vue récursive. La syntaxe
<synopsis>
CREATE RECURSIVE VIEW [ <replaceable>schéma</replaceable> . ] <replaceable>nom</replaceable> (<replaceable>colonnes</replaceable>) AS SELECT <replaceable>...</replaceable>;
  </synopsis>
  est équivalente à
  <synopsis>
CREATE VIEW [ <replaceable>schéma</replaceable> . ] <replaceable>nom</replaceable> AS WITH RECURSIVE <replaceable>nom</replaceable> (<replaceable>colonnes</replaceable>) AS (SELECT <replaceable>...</replaceable>) SELECT <replaceable>colonne</replaceable> FROM <replaceable>nom</replaceable>;
  </synopsis>
  Une liste de noms de colonne doit être spécifiée pour la vue récursive.
 </para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="parameter">nom</replaceable></term>
<listitem>
 <para>
  Le nom de la vue à créer (éventuellement qualifié du nom du schéma).
 </para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="parameter">nom de colonne</replaceable></term>
<listitem>
 <para>
  Une liste optionnelle de noms à utiliser pour les colonnes de la vue.
  Si elle n'est pas donnée, le nom des colonnes est déduit de la requête.
 </para>
</listitem>
</varlistentry>

<varlistentry>
<term><literal>WITH ( <replaceable class="parameter">nom de l'option de vue</replaceable> [= <replaceable class="parameter">valeur de l'option</replaceable>] [, ... ] )</literal></term>
<listitem>
 <para>
  Cette clause spécifie des paramètres optionnels pour une vue. Les
  paramètres supportés sont les suivants&nbsp;:

  <variablelist>
   <varlistentry>
    <term><literal>check_option</literal> (<type>enum</type>)</term>
    <listitem>
     <para>
      Ce paramètre peut avoir soit <literal>local</literal> soit
      <literal>cascaded</literal>, et est l'équivalent de spécifier
      <literal>WITH [ CASCADED | LOCAL ] CHECK OPTION</literal> (voir
      ci-dessous).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>security_barrier</literal> (<type>boolean</type>)</term>
    <listitem>
     <para>
      Ceci doit être utilisé si la vue a pour but de fournir une sécurité
      au niveau ligne. Voir <xref linkend="rules-privileges"/> pour plus
      de détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>security_invoker</literal> (<type>boolean</type>)</term>
    <listitem>
     <para>
      Cette option fait que les relations de base sous-jacentes soient vérifiées
      par rapport aux droits de l'utilisateur de la base, plutôt que par rapport
      à son créateur. Voir les notes ci-dessous pour plus de détails.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  Toutes les options ci-dessous peuvent être modifiées sur les vues existantes
  en utilisant <link
  linkend="sql-alterview"><command>ALTER VIEW</command></link>.
 </para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="parameter">requête</replaceable></term>
<listitem>
 <para>
  Une commande <link linkend="sql-select"><command>SELECT</command></link> ou
  <link linkend="sql-values"><command>VALUES</command></link> qui fournira
  les colonnes et lignes de la vue.
 </para>
</listitem>
</varlistentry>

<varlistentry>
<term><literal>WITH [ CASCADED | LOCAL ] CHECK OPTION</literal>
 <indexterm zone="sql-createview">
  <primary>CHECK OPTION</primary>
 </indexterm>
 <indexterm zone="sql-createview">
  <primary>WITH CHECK OPTION</primary>
 </indexterm></term>
<listitem>
 <para>
  Cette option contrôle le comportement des vues automatiquement modifiables.
  Quand cette option est spécifiée, les commandes <command>INSERT</command>,
  <command>UPDATE</command> et <command>MERGE</command> sur la vue seront
  vérifiées pour s'assurer que
  les nouvelles lignes satisfont la condition définie dans la vue (autrement
  dit, les nouvelles lignes sont vérifiées pour s'assurer qu'elles sont
  visibles par la vue). Dans le cas contraire, la mise à jour est rejetée.
  Si l'option <literal>CHECK OPTION</literal> n'est pas indiquée, les commandes
  <command>INSERT</command>, <command>UPDATE</command> et <command>MERGE</command>
  sur la vue sont
  autorisées à créer des lignes qui ne sont pas visibles avec la vue. Les
  options de vérification suivantes sont supportées&nbsp;:

  <variablelist>
   <varlistentry>
    <term><literal>LOCAL</literal></term>
    <listitem>
     <para>
      Les nouvelles lignes sont seulement vérifiées avec les conditions
      définies directement dans la vue. Toute condition définie dans les
      relations sous-jacentes ne sont pas vérifiées (sauf si elles disposent
      elles-même de l'option <literal>CHECK OPTION</literal>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADED</literal></term>
    <listitem>
     <para>
      Les nouvelles lignes sont vérifiées avec les conditions de la vue et
      de toutes les relations sous-jacentes. Si l'option <literal>CHECK
       OPTION</literal> est précisée, et que ni <literal>LOCAL</literal> ni
      <literal>CASCADED</literal> ne le sont, alors
      <literal>CASCADED</literal> est supposé.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>

 <para>
  L'option <literal>CHECK OPTION</literal> ne peut pas être utilisé dans les
  vues <literal>RECURSIVE</literal>.
 </para>

 <para>
  Il faut noter que l'option <literal>CHECK OPTION</literal> est seulement
  acceptée sur les vues qui sont automatiquement modifiables, et n'ont pas
  de triggers <literal>INSTEAD OF</literal> ou de règles
  <literal>INSTEAD</literal>. Si une vue modifiable automatiquement est
  définie au-dessus d'une vue de base qui dispose de triggers
  <literal>INSTEAD OF</literal>, alors l'option <literal>LOCAL CHECK
   OPTION</literal> peut être utilisé pour vérifier les conditions de la
  vue automatiquement modifiable mais les conditions de la vue de base
  comprenant des triggers <literal>INSTEAD OF</literal> ne seront pas
  vérifiées (une option de vérification en cascade ne continuera pas après
  vue avec trigger et toute option de vérification définie directement sur
  une vue automatiquement modifiable sera ignorée). Si la vue ou une des
  relations sous-jacentes a une règle <literal>INSTEAD</literal> qui cause
  la réécriture des commandes <command>INSERT</command> ou
  <command>UPDATE</command>, alors toutes les options de vérification
  seront ignorées dans la requête réécrite, ainsi que toutes les
  vérifications provenant de vues automatiquement modifiables définies au
  niveau haut d'une relation avec la règle <literal>INSTEAD</literal>.
  <command>MERGE</command> is not
  supported if the view or any of its base relations have rules.
 </para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>

<refsect1>
<title>Notes</title>

<para>
L'instruction <link linkend="sql-dropview"><command>DROP VIEW</command></link>
est utilisée pour supprimer les vues.
</para>

<para>
Il est important de s'assurer que le nom et le type des colonnes de la vue
correspondent à ce qui est souhaité. Ainsi&nbsp;:
<programlisting>CREATE VIEW vista AS SELECT 'Hello World';
</programlisting>
est une mauvaise façon de procéder car le nom de la colonne vaudra par
défaut<literal>?column?</literal>; de plus, le type de donnée de la colonne vaudra par défaut
<type>text</type>, ce qui pourrait ne pas être ce que vous voulez.  Un
meilleur style pour une chaîne litérale dans le résultat d'une vue est
quelque chose comme :
<programlisting>CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
</programlisting>
</para>

   <para>
    Par défaut, l'accès aux relations de base sous-jacentes est déterminée par
    les droits du propriétaire de la vue. Dans certains cas, ceci peut être
    utilisé pour fournir des accès sécurisé et restreint aux tables
    sous-jacentes. Néanmoins, les vues ne sont pas toutes sécurisées contre des
    accès inattendus&nbsp;; voir <xref linkend="rules-privileges"/> pour plus de
    détails.
   </para>

   <para>
    Si la propriété <literal>security_invoker</literal> de la vue est configurée
    à <literal>true</literal>, l'accès aux relations de base sous-jacentes est
    déterminée par les droits de l'utilisateur exécutant la requête, plutôt que
    par ceux de son propriétaire.  De ce fait, l'utilisateur d'une vue
    <foreignphrase>security invoker</foreignphrase> doit avoir les droits
    adéquats sur la vue et sur les relations de base sous-jacentes.
   </para>

   <para>
    Si une des relations de base sous-jacentes est une vue
    <foreignphrase>security invoker</foreignphrase>, elle sera traitée comme si
    elle avait été accédée directement depuis la requête originale.  De ce fait,
    une vue <foreignphrase>security invoker</foreignphrase> vérifiera toujours
    ses relations de base sous-jacentes en utilisant les droits de l'utilisateur
    courant, même si elle est accédée à partir d'une vue sans propriété
    <literal>security_invoker</literal>.
   </para>

   <para>
    Si une des relations de base sous-jacentes dispose de l'activation de la
    <link linkend="ddl-rowsecurity">sécurité niveau ligne</link>, alors, par
    défaut, les politiques de sécurité niveau ligne du propriétaire de la vue
    sont appliquées, et l'accès à toute relation supplémentaire auquel ces
    politiques font références est déterminé par les droits du propriétaire de
    la vue. Néanmoins, si l'option <literal>security_invoker</literal> de la vue
    est configurée à <literal>true</literal>, alors les politiques et les droits
    de l'utilisateur invoqué sont utilisés à la place, comme si les relations de
    base avaient été référencées directement à partir de la requête utilisant la
    vue.
   </para>

   <para>
    Les fonctions appelées dans la vue sont traitées de la même façon que si
    elles avaient été appelées directement à partir de la requête utilisant la
    vue.  De ce fait, l'utilisateur d'une vue doit avoir les droits pour appeler
    toutes les fonctions utilisées par la vue. Les fonctions dans la vue sont
    exécutées avec les droits de l'utilisateur exécutant la requête ou le
    propriétaire de la fonction, suivant si les fonctions sont définies comme
    <literal>SECURITY INVOKER</literal> ou <literal>SECURITY DEFINER</literal>.
    Par exemple, appeler <literal>CURRENT_USER</literal> directement dans une
    vue renverra toujours l'utilisateur appelant, et non pas le propriétaire de
    la vue. Ceci n'est pas affecté par la configuration
    <literal>security_invoker</literal>, et donc une vue pour laquelle
    <literal>security_invoker</literal> est configurée à
    <literal>false</literal> n'est <emphasis>pas</emphasis> équivalent à une
    fonction <literal>SECURITY DEFINER</literal> et ces concepts ne doivent pas
    être confondus.
   </para>

   <para>
    L'utilisateur créant et remplaçant une vue doit avoir les droits
    <literal>USAGE</literal> sur tout schéma référencé dans la requête de la
    vue, pour rechercher les objets référencés dans ces schémas. Néanmoins,
    notez que cette recherche survient seulement quand la vue est créée ou
    remplacée. De ce fait, l'utilisateur de la vue a uniquement besoin du droit
    <literal>USAGE</literal> sur le schéma contenant la vue, pas sur les schémas
    référencés dans la requête de la vue, y compris pour une vue
    <foreignphrase>security invoker</foreignphrase>.
   </para>

   <para>

    Quand <command>CREATE OR REPLACE VIEW</command> est utilisé sur une vue
    existante, seuls la règle SELECT définissant la vue, plus tout paramètre
    <literal>WITH ( ... )</literal> et ses <literal>CHECK OPTION</literal> sont
    modifiés.  Les autres propriétés, comme les droits, le propriétaire et les
    règles autres que le SELECT, ne sont pas modifiées. Vous devez être le
    propriétaire de la vue pour la remplacer (ceci incluant aussi les membres du
    rôle propriétaire).

   </para>

<refsect2 id="sql-createview-updatable-views">
<title>Vues modifiables</title>

<indexterm zone="sql-createview-updatable-views">
<primary>vues modifiables</primary>
</indexterm>

<para>
Les vues simples sont automatiquement modifiables&nbsp;: le système autorise
l'utilisation des commandes <command>INSERT</command>,
<command>UPDATE</command>, <command>DELETE</command> et
<command>MERGE</command> sur les vues comme
sur les tables. Une vue est modifiable automatiquement si elle satisfait les
conditions suivantes&nbsp;:

<itemizedlist>
 <listitem>
  <para>
   La vue doit avoir exactement une entrée (une table ou une autre vue
   modifiable) dans la liste <literal>FROM</literal>.
  </para>
 </listitem>

 <listitem>
  <para>
   La définition de la vue ne doit pas contenir de clauses
   <literal>WITH</literal>, <literal>DISTINCT</literal>, <literal>GROUP
    BY</literal>, <literal>HAVING</literal>, <literal>LIMIT</literal> ou
   <literal>OFFSET</literal> au niveau le plus haut.
  </para>
 </listitem>

 <listitem>
  <para>
   La définition de la vue ne doit pas contenir d'opérations sur des
   ensembles (<literal>UNION</literal>, <literal>INTERSECT</literal> ou
   <literal>EXCEPT</literal>) au niveau le plus haut.
  </para>
 </listitem>

 <listitem>
  <para>
   La liste de sélection de la vue ne doit pas contenir d'agrégats, de
   fonctions de fenêtrage ou de fonctions renvoyant des ensembles de
   lignes.
  </para>
 </listitem>
</itemizedlist>
</para>

<para>
Une vue à mise à jour automatique peut contenir un mélange de colonnes
modifiables et non modifiables. Une colonne est modifiable si elle est
une référence simple à une colonne modifiable de la relation sous-jacente.
Dans le cas contraire, la colonne est en lecture seule et une erreur sera
levée si une instruction <command>INSERT</command>,
<command>UPDATE</command> ou <command>MERGE</command> tente d'assigner
une valeur à cette colonne.
</para>

<para>
Si la vue est modifiable automatiquement, le système convertira automatiquement
toute commande <command>INSERT</command>, <command>UPDATE</command>,
<command>DELETE</command> ou <command>MERGE</command> sur la vue dans la commande
correspondante sur la
relation sous-jacente. Les requêtes <command>INSERT</command> qui ont une
clause <literal>ON CONFLICT UPDATE</literal> sont supportées.
</para>

<para>
Si une vue modifiable automatiquement contient une condition
<literal>WHERE</literal>, la condition restreint les lignes modifiables
dans la relation de base par une commande <command>UPDATE</command>,
<command>DELETE</command> et <command>MERGE</command>. Néanmoins, un
<command>UPDATE</command> ou un <command>MERGE</command> peut
modifier une ligne qui ne satisfait plus la condition
<literal>WHERE</literal>, et du coup qui n'est plus visible par la vue.
De la même façon, une commande <command>INSERT</command> ou
<command>MERGE</command> peut insérer des
lignes dans la relation de base qui ne satisfont par la condition
<literal>WHERE</literal> et qui, du coup, ne sont pas visibles via la vue
(<literal>ON CONFLICT UPDATE</literal> pourrait aussi impacter une ligne non
visible au travers de la vue).
La clause <literal>CHECK OPTION</literal> peut être utilisée pour empêcher
que les commandes <command>INSERT</command>, <command>UPDATE</command> et
<command>MERGE</command>
créent de telles lignes qui ne sont pas visibles au travers de la vue.
</para>

<para>
Si une vue modifiable automatiquement est marquée avec la propriété
<literal>security_barrier</literal>, alors toutes les conditions de
la clause <literal>WHERE</literal> (et toutes les conditions utilisant des
opérateurs marqués <literal>LEAKPROOF</literal>) seront toujours évaluées
avant les conditions ajoutées par l'utilisateur de la vue. Voir <xref
linkend="rules-privileges"/> pour les détails complets. Notez qu'à cause de
ce comportement, les lignes qui ne sont pas renvoyées (parce qu'elles ne
satisfont pas les conditions de la clause <literal>WHERE</literal> de
l'utilisateur) pourraient quand même se trouver bloquées.
<command>EXPLAIN</command> peut être utilisé pour voir les conditions
appliquées au niveau de la relation (pas de verrou des lignes dans ce cas)
et celles qui ne le sont pas.
</para>

<para>
Une vue plus complexe qui ne satisfait par toutes les conditions ci-dessus
est par défaut en lecture seule&nbsp;: le système ne permettra ni
<command>INSERT</command>, ni <command>UPDATE</command> ni
<command>DELETE</command> ni <command>MERGE</command> sur la vue. Vous pouvez
obtenir le même effet
qu'une vue modifiable en créant des triggers <literal>INSTEAD OF</literal>
sur la vue. Ces triggers doivent convertir l'insertion, ... tentée sur la
vue par l'action appropriée sur les autres tables. Pour plus d'informations,
voir <xref linkend="sql-createtrigger"/>. Une autre possibilité revient à
créer des règles (voir <xref linkend="sql-createrule"/>). Cependant, en
pratique, les triggers sont plus simples à comprendre et à utiliser
correctement. Also note that <command>MERGE</command>
is not supported on relations with rules.
</para>

<para>
Notez que l'utilisateur réalisant l'insertion, la mise à jour ou la
suppression sur la vue doit avoir les droits correspondants sur la vue. De
plus, par défaut, le propriétaire de la vue doit avoir les droits correspondants sur
les relations sous-jacentes mais l'utilisateur réalisant la mise à jour
n'a pas besoin de droits sur les relations sous-jacentes (voir
<xref linkend="rules-privileges"/>). Néanmoins, si l'option
<literal>security_invoker</literal> de la vue est configurée à <literal>true</literal>,
l'utilisateur réalisant la mise à jour, plutôt que celui qui a créé la vue, doit avoir
les droits adéquats sur les relations de base sous-jacentes.
</para>
</refsect2>
</refsect1>

<refsect1>
<title>Exemples</title>

<para>
Créer une vue composée des comédies&nbsp;:

<programlisting>CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE genre = 'Comédie';
</programlisting>
Cette requête crée une vue contenant les colonnes de la table
<literal>film</literal> au moment de la création de la vue. Bien que l'étoile
(<literal>*</literal>) soit utilisée pour créer la vue, les colonnes
ajoutées par la suite à la table <literal>film</literal> ne feront pas
partie de la vue.
</para>

<para>
Créer une vue avec l'option <literal>LOCAL CHECK OPTION</literal>&nbsp;:

<programlisting>
CREATE VIEW comedies_universelles AS
    SELECT *
    FROM comedies
    WHERE classification = 'U'
    WITH LOCAL CHECK OPTION;
</programlisting>
Ceci créera une vue basée sur la vue <literal>comedies</literal>, ne montrant
que les films pour lesquels <literal>kind = 'Comedy'</literal> et
<literal>classification = 'U'</literal>. Toute tentative d'<command>INSERT</command>
ou d'<command>UPDATE</command> d'une ligne dans la vue sera rejeté si la
nouvelle ligne ne correspond pas à <literal>classification = 'U'</literal>,
mais le type du film (colonne <literal>genre</literal>) ne sera pas vérifié.
</para>

<para>
Créer une vue avec <literal>CASCADED CHECK OPTION</literal>&nbsp;:

<programlisting>
CREATE VIEW pg_comedies AS
    SELECT *
    FROM comedies
    WHERE classification = 'PG'
    WITH CASCADED CHECK OPTION;
</programlisting>
Ceci créera une vue qui vérifie les colonnes <literal>kind</literal> et
<literal>classification</literal> de chaque nouvelle ligne.
</para>

<para>
Créer une vue avec un ensemble de colonnes modifiables et non
modifiables&nbsp;:

<programlisting>
CREATE VIEW comedies AS
    SELECT f.*,
           code_pays_a_nom(f.code_pays) AS pays,
           (SELECT avg(r.score)
            FROM utilisateurs_score r
            WHERE r.film_id = f.id) AS score_moyen
    FROM films f
    WHERE f.genre = 'Comedy';
</programlisting>
Cette vue supportera les commandes <command>INSERT</command>,
<command>UPDATE</command> et <command>DELETE</command>. Toutes les colonnes
de la table <literal>films</literal> seront modifiables, alors que les
colonnes calculées, <literal>pays</literal> et <literal>score_moyen</literal>
seront en lecture seule.
</para>

<para>
Créer une vue récursive consistant en des nombres 1 à 100&nbsp;:
<programlisting>
CREATE RECURSIVE VIEW public.nums_1_100 (n) AS
    VALUES (1)
UNION ALL
    SELECT n+1 FROM nums_1_100 WHERE n &lt; 100;
</programlisting>
Notez que, bien que le nom de la vue récursive est qualifié du schéma dans
cette commande <command>CREATE</command>, sa propre référence interne n'est
pas qualifiée du schéma. Ceci est dû au fait que le nom, implicitement
créé, de la CTE ne peut pas être qualifié d'un schéma.
</para>
</refsect1>

<refsect1>
<title>Compatibilité</title>

<para>
Le standard SQL spécifie quelques possibilités supplémentaires pour
l'instruction <command>CREATE VIEW</command>&nbsp;:
<synopsis>CREATE VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    AS <replaceable class="parameter">requête</replaceable>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
</synopsis>
</para>

<para>
<command>CREATE OR REPLACE VIEW</command> est une extension
<productname>PostgreSQL</productname>, tout comme le concept de vue temporaire.
La clause <literal>WITH ( ... )</literal> est aussi une extension, comme le
sont les vues avec barrière de sécurité et les vues <foreignphrase>
security invoker</foreignphrase>.
</para>
</refsect1>

<refsect1>
<title>Voir aussi</title>

<simplelist type="inline">
<member><xref linkend="sql-alterview"/></member>
<member><xref linkend="sql-dropview"/></member>
<member><xref linkend="sql-creatematerializedview"/></member>
</simplelist>
</refsect1>
</refentry>
