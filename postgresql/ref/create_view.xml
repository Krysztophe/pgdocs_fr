<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060618 -->

<refentry id="sql-createview">
 <refmeta>
  <refentrytitle>CREATE VIEW</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE VIEW</refname>
  <refpurpose>Définir une vue</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] [ RECURSIVE ] VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="PARAMETER">nom de l'option de vue</replaceable> [= <replaceable class="PARAMETER">valeur de l'option de vue</replaceable>] [, ... ] ) ]
    AS <replaceable class="parameter">requête</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-createview">
   <primary>CREATE VIEW</primary>
  </indexterm>

  <para>
   <command>CREATE VIEW</command> définit une vue d'après une requête. La
   vue n'est pas matérialisée physiquement. Au lieu de cela, la requête
   est lancée chaque fois qu'une vue est utilisée dans une requête.
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> a la même finalité, mais
   si une vue du même nom existe déjà, elle est remplacée. La nouvelle requête
   doit générer les mêmes colonnes que celles de l'ancienne requête (c-est-à-dire
   les mêmes noms de colonnes dans le même ordre avec les mêmes types de données).
   Par contre, elle peut ajouter des colonnes supplémentaires en fin de liste.
   Les traitements qui donnent les colonnes en sortie pourraient être complètement
   différents.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple
   <literal>CREATE VIEW monschema.mavue ...</literal>),
   alors la vue est créée dans ce schéma.
   Dans le cas contraire, elle est créée dans le schéma courant. Les vues
   temporaires existent dans un schéma spécial. Il n'est donc pas nécessaire
   de fournir de schéma pour les vues temporaires. Le
   nom de la vue doit être différent du nom de toute autre vue, table, séquence,
   index ou table distante du même schéma.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> ou <literal>TEMP</literal></term>
    <listitem>
     <para>
      La vue est temporaire. Les vues temporaires sont automatiquement supprimées
	  en fin de session. Les relations permanentes qui portent le même nom ne sont plus
      visibles pour la session tant que la vue temporaire existe, sauf
      s'il y est fait référence avec le nom du schéma.
     </para>

     <para>
      Si l'une des tables référencées par la vue est temporaire, la vue est alors elle-aussi
      temporaire (que <literal>TEMPORARY</literal> soit spécifié ou non).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RECURSIVE</literal></term>
    <listitem>
     <para>
      Crée une vue récursive. La syntaxe
<synopsis>
CREATE RECURSIVE VIEW [ <replaceable>schéma</replaceable> . ] <replaceable>nom</replaceable> (<replaceable>colonnes</replaceable>) AS SELECT <replaceable>...</replaceable>;
</synopsis>
      est équivalente à
<synopsis>
CREATE VIEW [ <replaceable>schéma</replaceable> . ] <replaceable>nom</replaceable> AS WITH RECURSIVE <replaceable>nom</replaceable> (<replaceable>colonnes</replaceable>) AS (SELECT <replaceable>...</replaceable>) SELECT <replaceable>colonne</replaceable> FROM <replaceable>nom</replaceable>;
</synopsis>
      Une liste de noms de colonne doit être spécifiée pour la vue récursive.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
       Le nom de la vue à créer (éventuellement qualifié du nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom de colonne</replaceable></term>
    <listitem>
     <para>
      Une liste optionnelle de noms à utiliser pour les colonnes de la vue.
      Si elle n'est pas donnée, le nom des colonnes est déduit de la requête.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">nom de l'option de vue</replaceable> [= <replaceable class="PARAMETER">valeur de l'option</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      Cette clause spécifie des paramètres optionnels pour une vue.
      Actuellement le seul nom de paramètre supporté est
      <literal>security_barrier</literal>, qui doit être activé si une vue est censée fournir une sécurité au niveau de la ligne.
      Voir <xref linkend="rules-privileges"/> pour plus de détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">requête</replaceable></term>
    <listitem>
     <para>
      Une commande <xref linkend="sql-select"/> ou
      <xref linkend="sql-values"/> qui fournira
      les colonnes et lignes de la vue.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

   <para>
    L'instruction <xref linkend="sql-dropview"/> est utilisée pour supprimer
    les vues.
   </para>

   <para>
	Il est important de s'assurer que le nom et le type des colonnes de la vue
	correspondent à ce qui est souhaité. Ainsi&nbsp;:
<programlisting>CREATE VIEW vista AS SELECT 'Hello World';
</programlisting>
    présente deux défauts majeurs&nbsp;: le nom de la colonne prend la valeur implicite
	<literal>?column?</literal> et son type de données le type implicite <type>unknown</type>.
	Pour obtenir une chaîne de caractères dans le résultat de la vue, on peut écrire&nbsp;:
<programlisting>CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
</programlisting>
   </para>

   <para>
    L'accès aux tables référencées dans la vue est déterminé par les droits
    du propriétaire de la vue. Dans certains cas, cela peut être utilisé pour
    fournir un accès sécurisé. Cependant, toutes les vues ne sont pas
    sécurisables&nbsp;; voir <xref linkend="rules-privileges"/> pour des
    détails.  Les fonctions appelées dans la vue sont traitées de la même façon
    que si elles avaient été appelées directement dans la requête utilisant la
    vue. Du coup, l'utilisateur d'une vue doit avoir les droits pour appeler
    toutes les fonctions utilisées par la vue.
   </para>

   <para>
    Quand <command>CREATE OR REPLACE VIEW</command> est utilisé sur une vue
    existante, seule la règle SELECT définissant la vue est modifiée. Les
    autres propriétés, comme les droits, le propriétaire et les règles autres
    que le SELECT, ne sont pas modifiées. Vous devez être le propriétaire de
    la vue pour la remplacer (ceci incluant aussi les membres du rôle
    propriétaire).
   </para>

  <refsect2 id="sql-createview-updatable-views">
   <title id="sql-createview-updatable-views-title">Vues modifiables</title>

   <indexterm zone="sql-createview-updatable-views">
    <primary>vues modifiables</primary>
   </indexterm>

   <para>
    Les vues simples sont automatiquement modifiables&nbsp;: le système autorise
    l'utilisation des commandes <command>INSERT</command>,
    <command>UPDATE</command> et <command>DELETE</command> sur les vues comme
    sur les tables. Une vue est modifiable automatiquement si elle satisfait les
    conditions suivantes&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       La vue doit avoir exactement une entrée (une table ou une autre vue
       modifiable) dans la liste <literal>FROM</literal>.
      </para>
     </listitem>

     <listitem>
      <para>
       La défintion de la vue ne doit pas contenir de clauses
       <literal>WITH</literal>, <literal>DISTINCT</literal>, <literal>GROUP
       BY</literal>, <literal>HAVING</literal>, <literal>LIMIT</literal> ou
       <literal>OFFSET</literal> au niveau le plus haut.
      </para>
     </listitem>

     <listitem>
      <para>
       La définition de la vue ne doit pas contenir d'opérations sur des
       ensembles (<literal>UNION</literal>, <literal>INTERSECT</literal> ou
       <literal>EXCEPT</literal>) au niveau le plus haut.
      </para>
     </listitem>

     <listitem>
      <para>
       Toutes les colonnes dans la liste du SELECT de la vue doivent être des
       références simples aux colonnes de la relation sous-jacente. Elles ne
       peuvent pas être des expressions, litéraux ou fonctions. Les colonnes
       systèmes ne peuvent pas non plus être référencées.
      </para>
     </listitem>

     <listitem>
      <para>
       Aucune colonne de la relation sous-jacente ne peut apparaître plus d'une
       vois dans la liste de sélection de la vue.
      </para>
     </listitem>

     <listitem>
      <para>
       La vue ne doit pas avoir la propriété <literal>security_barrier</literal>.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    Si la vue est modifiable automatiquement, le système convertira automatiquement
    toute commande <command>INSERT</command>, <command>UPDATE</command> ou
    <command>DELETE</command> sur la vue dans la commande correspondante sur la
    relation sous-jacente.
   </para>

   <para>
    Si une vue modifiable automatiquement contient une condition
    <literal>WHERE</literal>, la condition restreint les lignes modifiables
    dans la relation de base par une commande <command>UPDATE</command> ou
    <command>DELETE</command>. Néanmoins, un <command>UPDATE</command> peut
    modifier une ligne qui ne satisfait plus la condition
    <literal>WHERE</literal>, et du coup qui n'est plus visible par la vue.
    De la même façon, une commande <command>INSERT</command> peut insérer des
    lignes dans la relation de base qui ne satisfont par la condition
    <literal>WHERE</literal> et qui, du coup, ne sont pas visibles via la vue.
   </para>

   <para>
    Une vue plus complexe qui ne satisfait par toutes les conditions ci-dessus
    est par défaut en lecture seule&nbsp;: le système ne permettra ni insertion,
    ni mise à jour, ni suppression sur la vue. Vous pouvez obtenir le même effet
    qu'une vue modifiable en créant des triggers <literal>INSTEAD OF</literal>
    sur la vue. Ces triggers doivent convertir l'insertion, ... tentée sur la
    vue par l'action appropriée sur les autres tables. Pour plus d'informations,
    voir <xref linkend="sql-createtrigger"/>. Une autre possibilité revient à
    créer des règles (voir <xref linkend="sql-createrule"/>). Cependant, en
    pratique, les triggers sont plus simples à comprendre et à utiliser
    correctement.
   </para>

   <para>
    Notez que l'utilisateur réalisant l'insertion, la mise à jour ou la
    suppression sur la vue doit avoir les droits correspondants sur la vue. De
    plus, le propriétaire de la vue doit avoir les droits correspondants sur
    les relations sous-jacentes mais l'utilisateur réalisant la mise à jour
    n'a pas besoin de droits sur les relations sous-jacentes (voir
    <xref linkend="rules-privileges"/>).
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer une vue composée des comédies&nbsp;:

<programlisting>CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE genre = 'Comédie';
</programlisting>
   Cette requête crée une vue contenant les colonnes de la table
   <literal>film</literal> au moment de la création de la vue. Bien que l'étoile
   (<literal>*</literal>) soit utilisée pour créer la vue, les colonnes
   ajoutées par la suite à la table <literal>film</literal> ne feront pas
   partie de la vue.
  </para>

  <para>
   Créer une vue récursive consistant en des nombres 1 à 100&nbsp;:
<programlisting>
CREATE RECURSIVE VIEW public.nums_1_100 (n) AS
    VALUES (1)
UNION ALL
    SELECT n+1 FROM nums_1_100 WHERE n &lt; 100;
</programlisting>
   Notez que, bien que le nom de la vue récursive est qualifié du schéma dans
   cette commande <command>CREATE</command>, sa propre référence interne n'est
   pas qualifiée du schéma. Ceci est dû au fait que le nom, implicitement
   créé, de la CTE ne peut pas être qualifié d'un schéma.
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL spécifie quelques possibilités supplémentaires pour
   l'instruction <command>CREATE VIEW</command>&nbsp;:
<synopsis>CREATE VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    AS <replaceable class="parameter">requête</replaceable>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
</synopsis>
  </para>

  <para>
   Les clauses optionnelles de la commande SQL complète sont&nbsp;:

   <variablelist>
     <varlistentry>
      <term><literal>CHECK OPTION</literal></term>
      <listitem>
       <para>
        Cette option contrôle le comportement des vues automatiquement
        modifiables. Lorsqu'elle est utilisée, les commandes
        <command>INSERT</command> et <command>UPDATE</command> sur la vue seront
        vérifiées pour s'assurer que les nouvelles lignes satisfassent la
        condition de définition de la vue (autrement dit, les nouvelles
        lignes seront visibles via la vue). Si elles ne le sont pas, la mise
        à jour sera rejettée. Sans <literal>CHECK OPTION</literal>, les
        commandes <command>INSERT</command> et <command>UPDATE</command> sur
        la vue sont autorisées, y compris pour ajouter des lignes qui ne sont
        pas visibles avec la vue. (Ce dernier comportement est le seul
        actuellement fourni par <productname>PostgreSQL</productname>.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>LOCAL</literal></term>
      <listitem>
       <para>
        Contrôle d'intégrité de la vue.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CASCADED</literal></term>
      <listitem>
       <para>
        Contrôle d'intégrité de la vue et de toutes les
        vues dépendantes. <literal>CASCADED</literal> est implicite si
        ni <literal>CASCADED</literal> ni <literal>LOCAL</literal> ne sont
        précisés.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> est une extension
   <productname>PostgreSQL</productname>, tout comme le concept de vue temporaire.
   La clause <literal>WITH</literal> est aussi une extension.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterview"/></member>
   <member><xref linkend="sql-dropview"/></member>
   <member><xref linkend="sql-creatematerializedview"/></member>
  </simplelist>
 </refsect1>
</refentry>
