<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-set-role">
 <indexterm zone="sql-set-role">
  <primary>SET ROLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>SET ROLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SET ROLE</refname>
  <refpurpose>initialise l'identifiant utilisateur courant de la session en cours</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>SET [ SESSION | LOCAL ] ROLE <replaceable class="parameter">nom_rôle</replaceable>
SET [ SESSION | LOCAL ] ROLE NONE
RESET ROLE
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   Cette commande positionne l'identifiant utilisateur courant suivant la
   session SQL en cours à <replaceable
   class="parameter">nom_rôle</replaceable>. Le nom du rôle peut être un
   identifiant ou une chaîne littérale. Après <command>SET ROLE</command>, la
   vérification des droits sur les commandes SQL est identique à ce qu'elle
   serait si le rôle nommé s'était lui-même connecté. Note that <command>SET
   ROLE</command> and <command>SET SESSION AUTHORIZATION</command> are
   exceptions; permissions checks for those continue to use the current
   session user and the initial session user (the <firstterm>authenticated
   user</firstterm>), respectively.
  </para>

  <para>
   L'utilisateur actuel de la session doit avoir l'option <literal>SET</literal>
   pour l'utilisateur <replaceable class="parameter">nom_rôle</replaceable>
   indiqué, soit directement soit indirectement via une chaîne d'appartenance
   ayant l'option <literal>SET</literal>.
   (Si l'utilisateur de la session est superutilisateur, tous les rôles sont
   utilisables.)
  </para>

  <para>
   Les modificateurs <literal>SESSION</literal> et <literal>LOCAL</literal> agissent de la même
   façon que pour la commande <link linkend="sql-set"><command>SET</command></link>.
  </para>

  <para>
   <literal>SET ROLE NONE</literal> initialise l'identifiant utilisateur
   courant avec l'identifiant de la session en cours, tel qu'il est renvoyé
   par <function>session_user</function>. <literal>RESET ROLE</literal>
   initialise l'identifiant de l'utilisateur courant avec le paramètre à la
   connexion indiqué par les <link linkend="libpq-connect-options">options en
   ligne de commande</link>, <link linkend="sql-alterrole"><command>ALTER
   ROLE</command></link> ou <link linkend="sql-alterdatabase"><command>ALTER
   DATABASE</command></link>, si de tels paramètres existent. Sinon,
   <literal>RESET ROLE</literal> initialise l'identifiant utilisateur courant
   avec l'identifiant utilisateur courant. Ces formats peuvent être exécutés
   par tout utilisateur.
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   L'utilisation de cette commande permet d'étendre ou de restreindre les
   privilèges d'un utilisateur. Si le rôle de la session s'est vu donné
   des membres avec <literal>WITH INHERIT TRUE</literal>, il a
   automatiquement tous les droits de chacun de ces rôles. Dans ce cas,
   <command>SET ROLE</command> a pour effet de supprimer tous les droits sauf
   ceux que le rôle cible possède direcement ou hérite. D'un autre côté, si
   le rôle de la session s'est vu donné des membres avec <literal>WITH INHERIT
   FALSE</literal>, les droits des rôles donnés ne peuvent pas être utilisés
   par défaut. Néanmoins, si le rôle a été donné avec <literal>WITH SET
   TRUE</literal>, l'utilisateur de la session peut utiliser <command>SET
   ROLE</command> pour supprimer les droits affecttés directement à
   l'utilisateur de la session et acquérir à la place les droits du rôle
   nommé. Si le rôle a été donné avec <literal>WITH INHERIT
   FALSE, SET FALSE</literal>, alors les droits de ce rôle ne peuvent pas
   être utilisés, que ce soit avec ou sans <literal>SET ROLE</literal>.
  </para>

  <para>
   <command>SET ROLE</command> a des effets comparables à
   <link linkend="sql-set-session-authorization"><command>SET SESSION
   AUTHORIZATION</command></link> mais la vérification des
   droits diffère. De plus, <command>SET SESSION AUTHORIZATION</command>
   détermine les rôles autorisés
   dans les commandes <command>SET ROLE</command> ultérieures alors que
   <command>SET ROLE</command> ne modifie pas les rôles accessibles par
   un futur <command>SET ROLE</command>.
  </para>

  <para>
   <command>SET ROLE</command> ne traite pas les variables de session
   indiqué par les paramètres du rôle (et configurés avec <link
   linkend="sql-alterrole"><command>ALTER ROLE</command></link>&nbsp;; cela ne
   survient qu'à la connexion.
  </para>

  <para>
   <command>SET ROLE</command> ne peut pas être utilisé dans une
   fonction <literal>SECURITY DEFINER</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <programlisting>SELECT SESSION_USER, CURRENT_USER;

 session_user | current_user
--------------+--------------
 peter        | peter

SET ROLE 'paul';

SELECT SESSION_USER, CURRENT_USER;

 session_user | current_user
--------------+--------------
 peter        | paul
  </programlisting>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <productname>PostgreSQL</productname> autorise la syntaxe identifiant
   (<literal>"<replaceable>nom_role</replaceable>"</literal>) alors que le SQL
   standard impose une chaîne littérale pour le nom du rôle.
   SQL n'autorise pas cette commande lors d'une transaction&nbsp;;
   <productname>PostgreSQL</productname> n'est pas aussi restrictif,
   rien ne justifie cette interdiction. Les modificateurs
   <literal>SESSION</literal> et <literal>LOCAL</literal> sont des extensions
   <productname>PostgreSQL</productname> tout comme la syntaxe <literal>RESET</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-set-session-authorization"/></member>
  </simplelist>
 </refsect1>
</refentry>
