<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Header: /var/lib/cvs/pgsql-fr/sgml/query.sgml,v 1.14 2005/10/02 12:42:21 guillaume Exp $ -->

 <chapter id="tutorial-sql">
  <title>Le langage <acronym>SQL</acronym></title>

  <sect1 id="tutorial-sql-intro">
   <title>Introduction</title>

   <para>
    Ce chapitre fournit un panorama sur la façon d'utiliser
    <acronym>SQL</acronym> pour exécuter des opérations simples.  Ce
    tutoriel est seulement prévu pour vous donner une introduction et
    n'est, en aucun cas, un tutoriel complet sur
    <acronym>SQL</acronym>.  De nombreux livres ont été écrits sur
    <acronym>SQL</acronym>, incluant <xref linkend="melt93"/> et
    <xref linkend="date97"/>.  Vous devez être averti que certaines
    caractéristiques du langage de
    <productname>PostgreSQL</productname> sont des extensions de la
    norme.
   </para>

   <para>
    Dans les exemples qui suivent, nous supposons que vous avez créé
    une base de données appelée <literal>ma_base</literal>, comme cela a
    été décrit dans le chapitre précédent et que vous avez été capable de
    lancer <application>psql</application>.
   </para>

   <para>
    Les exemples dans ce manuel peuvent aussi être trouvés dans le
    répertoire <filename>src/tutorial/</filename> de la
    distribution source de <productname>PostgreSQL</productname>.
    Pour utiliser ces fichiers, commencez par changer de répertoire et lancez
    <application>make</application>&nbsp;:

<screen><prompt>$</prompt> <userinput>cd <replaceable>....</replaceable>/src/tutorial</userinput>
<prompt>$</prompt> <userinput>make</userinput></screen>

    Ceci crée les scripts et compile les fichiers C contenant des fonctions et
    types définis par l'utilisateur. (If you installed a pre-packaged version of
    <productname>PostgreSQL</productname> rather than building from source,
    look for a directory named <filename>tutorial</filename> within the
    <productname>PostgreSQL</productname> documentation.  The <quote>make</quote>
    part should already have been done for you.) Puis, pour lancer le tutoriel, faites ce qui
    suit&nbsp;:

<screen><prompt>$</prompt> <userinput>cd
<replaceable>....</replaceable>/tutorial</userinput>
<prompt>$</prompt> <userinput>psql -s ma_base</userinput>
<computeroutput>
...
</computeroutput>

<prompt>ma_base=&gt;</prompt> <userinput>\i basics.sql</userinput></screen>

    La commande <literal>\i</literal> lit les commandes depuis le
    fichier spécifié.  L'option <literal>-s</literal> vous place dans
    un mode pas à pas qui fait une pause avant d'envoyer chaque
    instruction au serveur.  Les commandes utilisées dans cette section
    sont dans le fichier <filename>basics.sql</filename>.
   </para>
  </sect1>


  <sect1 id="tutorial-concepts">
   <title>Concepts</title>

   <para>
    <indexterm><primary>base de données relationnelle</primary></indexterm>
    <indexterm><primary>base de données hiérarchique</primary></indexterm>
    <indexterm><primary>base de données orientée objets</primary></indexterm>
    <indexterm><primary>relation</primary></indexterm>
    <indexterm><primary>table</primary></indexterm>

    <productname>PostgreSQL</productname> est un <firstterm>système
    de gestion de bases de données relationnelles</firstterm>
    (<acronym>SGBDR</acronym>).  Cela signifie que c'est un système
    pour gérer les données stockées dans des
    <firstterm>relations</firstterm>. Relation est essentiellement un
    terme mathématique pour <firstterm>table</firstterm>.  La notion
    de stockage de données dans des tables est si commune aujourd'hui
    que cela peut sembler en soi évident mais il y a de nombreuses
    autres manières d'organiser des bases de données.  Les fichiers et
    répertoires dans les systèmes d'exploitation de type Unix forment
    un exemple de base de données hiérarchique.  Un développement plus
    moderne est une base de données orientée objets.
   </para>

   <para>
    <indexterm><primary>ligne</primary></indexterm>
    <indexterm><primary>colonne</primary></indexterm>

    Chaque table est un ensemble de <firstterm>lignes</firstterm>.
    Chaque ligne d'une table donnée a le même ensemble de
    <firstterm>colonnes</firstterm> et chaque colonne est d'un type de
    données particulier.  Tandis que les colonnes ont un ordre fixé
    dans chaque ligne, il est important de se rappeler que SQL ne
    garantit, d'aucune façon, l'ordre des lignes à l'intérieur de la
    table (bien qu'elles puissent être explicitement triées pour
    l'affichage).
   </para>

   <para>
    <indexterm><primary>groupe de bases de données</primary></indexterm>
    <indexterm><primary>groupe</primary><secondary>de bases de
    données</secondary><see>groupe de bases de données</see></indexterm>


    Les tables sont groupées dans des bases de données et un ensemble
    de bases gérées par une instance unique du serveur
    <productname>PostgreSQL</productname>  constitue un
    <firstterm>groupe</firstterm> de bases.
   </para>
  </sect1>


  <sect1 id="tutorial-table">
   <title>Créer une nouvelle table</title>

   <indexterm zone="tutorial-table">
    <primary>CREATE TABLE</primary>
   </indexterm>

   <para>
    Vous pouvez créer une nouvelle table en spécifiant le nom de la
    table, suivi de tous les noms des colonnes et de leur type&nbsp;:

<programlisting>CREATE TABLE temps (
    ville           varchar(80),
    t_basse         int,           -- température basse
    t_haute         int,           -- température haute
    prcp            real,          -- précipitation
    date            date
);</programlisting>

    Vous pouvez saisir cela dans <command>psql</command> avec les
    sauts de lignes.  <command>psql</command> reconnaîtra que la
    commande n'est pas terminée jusqu'à ce qu'il arrive au
    point-virgule.
   </para>

   <para>
    Les espaces blancs (c'est-à-dire les espaces, les tabulations et
    les nouvelles lignes) peuvent être librement utilisés dans les
    commandes SQL.  Cela signifie que vous pouvez saisir la commande
    ci-dessus alignée différemment ou même sur une seule ligne.
    Deux tirets (<quote><literal>--</literal></quote>) introduisent
    des commentaires.  Ce qui les suit est ignoré jusqu'à la fin de la
    ligne.  SQL est insensible à la casse pour les mots-clé et les
    identifiants excepté quand les identifiants sont entre double
    guillemets pour préserver leur casse (non fait ci-dessus).
   </para>

   <para>
    <type>varchar(80)</type> spécifie un type de données pouvant
    contenir une chaîne de caractères arbitraires de 80 caractères au
    maximum.  <type>int</type> est le type entier normal.
    <type>real</type> est un type pour les nombres décimaux
    en simple précision.  <type>date</type> devrait s'expliquer de lui-même
    (oui, la colonne de type <type>date</type> est aussi nommée
    <literal>date</literal>&nbsp;; cela peut être commode ou porter à
    confusion, à vous de choisir).
   </para>

   <para>
    <productname>PostgreSQL</productname> prend en charge les types
    <acronym>SQL</acronym> standards <type>int</type>,
    <type>smallint</type>, <type>real</type>, <type>double
    precision</type>, <type>char(<replaceable>N</replaceable>)</type>,
    <type>varchar(<replaceable>N</replaceable>)</type>, <type>date</type>,
    <type>time</type>, <type>timestamp</type> et
    <type>interval</type> ainsi que d'autres types d'utilité
    générale et un riche ensemble de types géométriques.
    <productname>PostgreSQL</productname> peut être personnalisé avec
    un nombre arbitraire de types de données définis par
    l'utilisateur. En conséquence, les noms des types ne sont pas des
    mots-clé syntaxiques sauf lorsqu'il est requis de supporter des
    cas particuliers dans la norme <acronym>SQL</acronym>.
   </para>

   <para>
    Le second exemple stockera des villes et leur emplacement
    géographique associé&nbsp;:
<programlisting>CREATE TABLE villes (
    nom            varchar(80),
    emplacement    point
);</programlisting>
    Le type <type>point</type> est un exemple d'un type de données
    spécifique à <productname>PostgreSQL</productname>.
   </para>

   <para>
    <indexterm>
     <primary>DROP TABLE</primary>
    </indexterm>

    Pour finir, vous devez savoir que si vous n'avez plus
    besoin d'une table ou que vous voulez la recréer différemment, vous
    pouvez la supprimer en utilisant la commande suivante&nbsp;:
<synopsis>DROP TABLE <replaceable>nom_table</replaceable>;</synopsis>
   </para>
  </sect1>


  <sect1 id="tutorial-populate">
   <title>Remplir une table avec des lignes</title>

   <indexterm zone="tutorial-populate">
    <primary>INSERT</primary>
   </indexterm>

   <para>
    L'instruction <command>INSERT</command> est utilisée pour remplir
    une table avec des lignes&nbsp;:

<programlisting>INSERT INTO temps VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');</programlisting>

    Notez que tous les types utilisent des formats d'entrées plutôt
    évident. Les constantes qui ne sont pas des valeurs numériques
    simples doivent être habituellement entourées par des guillemets
    simples (<literal>'</literal>) comme dans l'exemple.  Le type
    <type>date</type> est en réalité tout à fait flexible dans ce
    qu'il accepte mais, pour ce tutoriel, nous collerons au format non
    ambigu montré ici.
   </para>

   <para>
    Le type <type>point</type> demande une paire de coordonnées en
    entrée comme cela est montré ici&nbsp;:
<programlisting>INSERT INTO villes VALUES ('San Francisco', '(-194.0, 53.0)');</programlisting>
   </para>

   <para>
    La syntaxe utilisée jusqu'à maintenant nécessite de se rappeler
    l'ordre des colonnes.  Une syntaxe alternative vous autorise à
    lister les colonnes explicitement&nbsp;:
<programlisting>INSERT INTO temps (ville, t_basse, t_haute, prcp, date)
    VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');</programlisting>
    Vous pouvez lister les colonnes dans un ordre différent si vous le
    souhaitez ou même omettre certaines colonnes ; par exemple, si la
    précipitation est inconnue&nbsp;:
<programlisting>INSERT INTO temps (date, ville, t_haute, t_basse)
    VALUES ('1994-11-29', 'Hayward', 54, 37);</programlisting>
    De nombreux développeurs considèrent que le listage explicite des
    colonnes est un meilleur style que de compter sur l'ordre
    implicite.
   </para>

   <para>
    S'il vous plaît, entrez toutes les commandes vues ci-dessus de
    façon à avoir des données sur lesquelles travailler dans les
    prochaines sections.
   </para>

   <para>
    <indexterm>
     <primary>COPY</primary>
    </indexterm>

    Vous auriez pû aussi utiliser <command>COPY</command> pour charger
    de grandes quantités de données depuis des fichiers texte. C'est
    habituellement plus rapide car la commande
    <command>COPY</command> est optimisée pour cet emploi mais elle
    est moins flexible que <command>INSERT</command>. Par exemple&nbsp;:

<programlisting>COPY temps FROM '/home/user/temps.txt';</programlisting>

    où le nom du fichier source doit être disponible sur la
    machine serveur et non pas sur le client puisque le serveur lit le
    fichier directement. Vous avez plus d'informations sur la commande
    <command>COPY</command> dans <xref linkend="sql-copy" endterm="sql-copy-title"/>.
   </para>
  </sect1>


  <sect1 id="tutorial-select">
   <title>Interroger une table</title>

   <para>
    <indexterm><primary>requête</primary></indexterm>
    <indexterm><primary>SELECT</primary></indexterm>

    Pour retrouver les données d'une table, elle est
    <firstterm>interrogée</firstterm>.  Une instruction
    <acronym>SQL</acronym> <command>SELECT</command> est utilisée pour
    faire cela.  L'instruction est divisée en liste de sélection (la
    partie qui liste les colonnes à retourner), une liste de tables
    (la partie qui liste les tables à partir desquelles les données
    seront retrouvées) et une qualification optionnelle (la partie qui
    spécifie les restrictions).  Par exemple, pour retrouver toutes
    les lignes de la table <classname>temps</classname>, tapez&nbsp;:
<programlisting>SELECT * FROM temps;</programlisting>
    Ici, <literal>*</literal> est un raccourci pour <quote>toutes les
    colonnes</quote>.
    <footnote>
     <para>
      Alors que <literal>SELECT *</literal> est utile pour des requêtes rapides,
      c'est généralement considéré comme un mauvais style dans un code en
      production car l'ajout d'une colonne dans la table changerait les
      résultats.
     </para>
    </footnote>
    Donc, le même résultat pourrait être&nbsp;:
<programlisting>SELECT ville, t_basse, t_haute, prcp, date FROM temps;</programlisting>

    le résultat devrait être&nbsp;:

<screen>     ville     | t_basse | t_haute | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |   50    | 0.25 | 1994-11-27
 San Francisco |      43 |   57    |    0 | 1994-11-29
 Hayward       |      37 |   54    |      | 1994-11-29
(3 rows)</screen>
   </para>

   <para>
    Vous pouvez écrire des expressions, pas seulement des références à de
    simples colonnes, dans la liste de sélection. Par exemple, vous pouvez
    faire&nbsp;:
<programlisting>SELECT ville, (t_haute+t_basse)/2 AS temp_moy, date FROM temps;</programlisting>
    Cela devrait donné&nbsp;:
<screen>     ville     | temp_moy |    date
---------------+----------+------------
 San Francisco |       48 | 1994-11-27
 San Francisco |       50 | 1994-11-29
 Hayward       |       45 | 1994-11-29
(3 rows)</screen>
    Notez comment la clause <literal>AS</literal> est utilisée pour
    renommer la sortie d'une colonne (cette clause <literal>AS</literal> est
    optionnelle).
   </para>

   <para>
    Une requête peut être <quote>qualifiée</quote> en ajoutant une clause
    <literal>WHERE</literal> qui spécifie quelles lignes sont souhaitées. La clause
    <literal>WHERE</literal> contient une expression booléenne (vraie) et seules les
    lignes pour lesquelles l'expression booléenne est vraie sont renvoyées. Les
    opérateurs booléens habituels (<literal>AND</literal>,
    <literal>OR</literal> et <literal>NOT</literal>) sont autorisés
    dans la qualification.  Par exemple, ce qui suit recherche le temps à San
    Francisco les jours pluvieux&nbsp;:

<programlisting>SELECT * FROM temps
    WHERE ville = 'San Francisco' AND prcp > 0.0;</programlisting>
    Résultat&nbsp;:
<screen>     ville     | t_basse | t_haute | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
(1 row)</screen>
   </para>

   <para>
    <indexterm><primary>ORDER BY</primary></indexterm>

    Vous pouvez demander que les résultats d'une requêtes soient renvoyés dans
    un ordre trié&nbsp;:

<programlisting>SELECT * FROM temps
ORDER BY ville;</programlisting>

<screen> ville        | t_basse | t_haute | prcp |    date
--------------+---------+---------+------+------------
Hayward       |      37 |      54 |      | 1994-11-29
San Francisco |      43 |      57 |    0 | 1994-11-29
San Francisco |      46 |      50 | 0.25 | 1994-11-27</screen>

    Dans cet exemple, l'ordre de tri n'est pas spécifié complètement, donc vous
    pouvez obtenir les lignes San Francisco dans n'importe quel ordre. Mais,
    vous auriez toujours obtenu les résultats affichés ci-dessus si vous aviez
    fait

<programlisting>SELECT * FROM temps
ORDER BY ville, t_basse;</programlisting>
</para>

<para>
    <indexterm><primary>DISTINCT</primary></indexterm>
    <indexterm><primary>double</primary></indexterm>

    Vous pouvez demander que les lignes dupliquées soient supprimées du
    résultat d'une requête&nbsp;:

<programlisting>SELECT DISTINCT ville
    FROM temps;</programlisting>

<screen>     ville
---------------
 Hayward
 San Francisco
(2 rows)</screen>

    De nouveau, l'ordre des lignes résultats pourrait varier. Vous pouvez vous
    assurer des résultats cohérents en utilisant <literal>DISTINCT</literal>
    et <literal>ORDER BY</literal> ensemble&nbsp;:
    <footnote>
     <para>
      Dans certains systèmes de bases de données, ceci incluant les anciennes
      versions de <productname>PostgreSQL</productname>, l'implémentation de
      <literal>DISTINCT</literal> ordonne automatiquement les lignes. Du coup,
      <literal>ORDER BY</literal> n'est pas nécessaire. Mais, ceci n'est pas requis
      par le standard SQL et <productname>PostgreSQL</productname> ne vous
      garantie pas actuellement que <literal>DISTINCT</literal> ordonne les
      lignes.
     </para>
    </footnote>

<programlisting>SELECT DISTINCT ville
FROM temps
ORDER BY ville;</programlisting>
   </para>
  </sect1>


  <sect1 id="tutorial-join">
   <title>Jointures entre les tables</title>

   <indexterm zone="tutorial-join">
    <primary>jointure</primary>
   </indexterm>

   <para>
    Jusqu'ici, nos requêtes avaient seulement consulté une table à la
    fois.  Les requêtes peuvent accéder à plusieurs tables en même
    temps ou accéder à la même table de façon à ce que plusieurs
    lignes de la table soient traitées en même temps.  Une requête qui
    consulte plusieurs lignes de la même ou de différentes tables en
    même temps est appelée requête de <firstterm>jointure</firstterm>.
    Comme exemple, supposez que vous souhaitez lister toutes les
    entrées de la table temps avec la colonne des noms de toutes les lignes de
    la table des villes et que vous choisissez les paires de lignes où
    ces valeurs correspondent.
    <note>
     <para>
      Ceci est uniquement un modèle conceptuel.  La jointure est habituellement
      exécutée d'une manière plus efficace qu'en comparant chaque paire de lignes
      mais c'est invisible pour l'utilisateur.
     </para>
    </note>
    Ceci sera accompli avec la requête suivante&nbsp;:

<programlisting>SELECT *
    FROM temps, villes
    WHERE ville = nom;</programlisting>

<screen>     ville     | t_basse | t_haute | prcp |    date    |     nom       | emplacement
---------------+---------+---------+------+------------+---------------+-------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(2 rows)
</screen>

   </para>

   <para>
    Remarquez deux choses à propos du résultat&nbsp;:
    <itemizedlist>
     <listitem>
      <para>
       Il n'y a pas de lignes pour la ville de Hayward dans le résultat. C'est
       parce qu'il n'y a aucune entrée correspondante
       dans la table <classname>villes</classname> pour Hayward, donc
       la jointure ignore les lignes n'ayant pas de correspondance
       avec la table temps.  Nous verrons rapidement comment cela
       peut être résolu.
      </para>
     </listitem>

     <listitem>
      <para>
       Il y a deux colonnes contenant le nom des villes. C'est
       correct car les listes de colonnes des tables
       <classname>temps</classname> et <classname>villes</classname>
       sont concaténées.  En pratique, ceci est indésirable, vous
       voudrez probablement lister les colonnes explicitement plutôt
       que d'utiliser <literal>*</literal>&nbsp;:
<programlisting>SELECT ville, t_basse, t_haute, prcp, date, emplacement
    FROM temps, villes
    WHERE ville = nom;</programlisting>
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <formalpara>
    <title>Exercice&nbsp;:</title>

    <para>
     Essayez de trouver la sémantique de cette requête quand la clause
     <literal>WHERE</literal> est omise.
    </para>
   </formalpara>

   <para>
    Puisque toutes les colonnes ont un nom différent, l'analyseur a
    automatiquement trouvé à quelle table elles appartiennent. If there
    were duplicate column names in the two tables you'd need to
    <firstterm>qualify</firstterm> the column names to show which one you
    meant, as in:

<programlisting>SELECT temps.ville, temps.t_basse, temps.t_haute,
       temps.prcp, temps.date, villes.emplacement
    FROM temps, villes
    WHERE villes.nom = temps.ville;</programlisting>

    It is widely considered good style to qualify all column names
    in a join query, so that the query won't fail if a duplicate
    column name is later added to one of the tables.
   </para>

   <para>
    Les requêtes de jointure vues jusqu'ici peuvent aussi être écrites
    dans un format alternatif&nbsp;:

<programlisting>SELECT *
    FROM temps INNER JOIN villes ON (temps.ville = villes.nom);</programlisting>

    Cette syntaxe n'est pas aussi couramment utilisée que les
    précédentes mais nous la montrons ici pour vous aider à comprendre
    les sujets suivants.
   </para>

   <para>
   
<indexterm><primary>jointure</primary><secondary>externe</secondary></indexterm>

    Maintenant, nous allons essayer de comprendre comment nous pouvons
    avoir les entrées de Hayward. Nous voulons que la requête parcourt
    la table <classname>temps</classname> et que, pour chaque ligne,
    elle trouve la (ou les) ligne(s) de <classname>villes</classname>
    correspondante(s). Si aucune ligne correspondante n'est trouvée,
    nous voulons que les valeurs des colonnes de la table
    <classname>villes</classname> soient remplacées par des
    <quote>valeurs vides</quote>.  Ce genre de requêtes est appelé
    <firstterm>jointure externe</firstterm> (outer join). (les
    jointures que nous avons vus jusqu'ici sont des jointures internes
    &mdash; inner joins). La commande ressemble à cela&nbsp;:

<programlisting>SELECT *
    FROM temps LEFT OUTER JOIN villes ON (temps.ville = villes.nom);

     ville     | t_basse | t_haute | prcp |    date    |     nom       | emplacement
---------------+---------+---------+------+------------+---------------+-------------
 Hayward       |      37 |      54 |      | 1994-11-29 |               |
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(3 rows)</programlisting>

    Cette requête est appelée une <firstterm>jointure externe à gauche
    </firstterm> (left outer join) parce que la table mentionnée à la
    gauche de l'opérateur de jointure aura au moins une fois ses
    lignes dans le résultat tandis que la table sur la droite aura
    seulement les lignes qui correspondent à des lignes de la table de
    gauche.  Lors de l'affichage d'une ligne de la table de gauche
    pour laquelle il n'y a pas de correspondance dans la table de
    droite, des valeurs vides (NULL) sont mises pour les colonnes de
    la table de droite.
   </para>

   <formalpara>
    <title>Exercice&nbsp;:</title>

    <para>
     Il existe aussi des jointures externes à droite et des jointures
     externes complètes.  Essayez de trouver ce qu'elles font.
    </para>
   </formalpara>

   <para>
    <indexterm><primary>jointure</primary>
    <secondary>réflexive</secondary></indexterm>
    <indexterm><primary>alias</primary><secondary>pour le nom d'une table dans
    une requête</secondary></indexterm>

    Nous pouvons également joindre une table avec elle-même.  Ceci est
    appelé une <firstterm>jointure réflexive</firstterm>.  Comme
    exemple, supposons que nous voulons trouver toutes les entrées de
    temps qui sont dans un intervalle de température d'autres entrées
    de temps.  Nous avons donc besoin de comparer les colonnes
    <structfield>t_basse</structfield> et <structfield>t_haute</structfield> de chaque ligne
    de <classname>temps</classname> aux colonnes
    <structfield>t_basse</structfield> et
    <structfield>t_haute</structfield> de toutes les autres lignes de
    <classname>temps</classname>. Nous pouvons faire cela avec la
    requête suivante&nbsp;:

<programlisting>SELECT W1.ville, W1.t_basse AS bas, W1.t_haute AS haut,
    W2.ville, W2.t_basse AS bas, W2.t_haute AS haus
    FROM temps W1, temps W2
    WHERE W1.t_basse &lt; W2.t_basse
    AND W1.t_haute &gt; W2.t_haute;

     ville      | bas | haut |     ville     | bas | haut
----------------+-----+------+---------------+-----+------
  San Francisco |  43 |   57 | San Francisco |  46 |   50
  Hayward       |  37 |   54 | San Francisco |  46 |   50
(2 rows)</programlisting>

    Ici, nous avons renommé la table temps en <literal>W1</literal> et en
    <literal>W2</literal> pour être capable de distinguer le côté gauche et
    droit de la jointure.  Vous pouvez aussi utiliser ce genre
    d'alias dans d'autres requêtes pour économiser de la frappe,
    c'est-à-dire&nbsp;:
<programlisting>SELECT *
    FROM temps w, villes c
    WHERE w.ville = c.nom;</programlisting>
    Vous rencontrerez ce genre d'abréviation assez fréquemment.
   </para>
  </sect1>


  <sect1 id="tutorial-agg">
   <title>Fonctions d'agrégat</title>

   <indexterm zone="tutorial-agg">
    <primary>fonction d'agrégat</primary>
   </indexterm>

   <para>
    <indexterm><primary>moyenne</primary></indexterm>
    <indexterm><primary>compte</primary></indexterm>
    <indexterm><primary>max</primary></indexterm>
    <indexterm><primary>min</primary></indexterm>
    <indexterm><primary>somme</primary></indexterm>

    Comme la plupart des autres produits de bases de données
    relationnelles, <productname>PostgreSQL</productname> supporte les
    fonctions d'agrégat.  Une fonction d'agrégat calcule un seul
    résultat à partir de plusieurs lignes en entrée.  Par exemple, il
    y a des agrégats pour calculer le nombre
    (<function>count</function>), la somme (<function>sum</function>),
    la moyenne (<function>avg</function>), le maximum
    (<function>max</function>) et le minimum
    (<function>min</function>) d'un ensemble de lignes.
   </para>

   <para>
    Comme exemple, nous pouvons trouvez la température la plus haute
    parmi les températures basses avec&nbsp;:

<programlisting>SELECT max(t_basse) FROM temps;</programlisting>

<screen> max
-----
  46
(1 row)</screen>
   </para>

   <para>
    <indexterm><primary>sous-requêtes</primary></indexterm>

    Si nous voulons connaître dans quelle ville (ou villes) ces
    lectures se sont produites, nous pouvons essayer

<programlisting>SELECT ville FROM temps WHERE t_basse = max(t_basse);    
<lineannotation>FAUX</lineannotation></programlisting>

    mais cela ne marchera pas puisque l'agrégat
    <function>max</function> ne peut pas être utilisé dans une clause
    <literal>WHERE</literal> (cette restriction existe parce que la
    clause <literal>WHERE</literal> détermine les lignes qui seront
    traitées par l'agrégat&nbsp;; donc les lignes doivent être évaluées
    avant que les fonctions d'agrégat calculent).
    Cependant, comme cela est souvent le cas, la requête peut être
    répétée pour arriver au résultat attendu, ici en utilisant une
    <firstterm>sous-requête</firstterm>&nbsp;:

<programlisting>SELECT ville FROM temps
    WHERE t_basse = (SELECT max(t_basse) FROM temps);</programlisting>

<screen>     ville
---------------
 San Francisco
(1 row)</screen>

    Ceci est correct car la sous-requête est un calcul indépendant qui
    traite son propre agrégat séparément à partir de ce qui se passe
    dans la requête externe.
   </para>

   <para>
    <indexterm><primary>GROUP BY</primary></indexterm>
    <indexterm><primary>HAVING</primary></indexterm>

    Les agrégats sont également très utiles s'ils sont combinés avec
    les clauses <literal>GROUP BY</literal>.  Par exemple, nous
    pouvons obtenir température la plus haute parmi les températures
    basses observées dans chaque ville avec

<programlisting>SELECT ville, max(t_basse)
    FROM temps
    GROUP BY ville;</programlisting>

<screen>     ville     | max
---------------+-----
 Hayward       |  37
 San Francisco |  46
(2 rows)</screen>

    ce qui nous donne une ligne par ville dans le résultat.  Chaque
    résultat d'agrégat est calculé avec les lignes de la table
    correspondant à la ville.  Nous pouvons filtrer ces lignes
    groupées en utilisant <literal>HAVING</literal>&nbsp;:

<programlisting>SELECT ville, max(t_basse)
    FROM temps
    GROUP BY ville
    HAVING max(t_basse) &lt; 40;</programlisting>

<screen>  ville  | max
---------+-----
 Hayward |  37
(1 row)</screen>

    ce qui nous donnes le même résultat uniquement pour les villes qui
    ont toutes leurs valeurs de  <literal>t_basse</literal> en-dessous de 40.
    Pour finir, si nous nous préoccupons seulement des villes dont le
    nom commence par <quote><literal>S</literal></quote>, nous pouvons
    faire

<programlisting>SELECT ville, max(t_basse)
    FROM temps
    WHERE ville LIKE 'S%'<co id="co.tutorial-agg-like"/>
    GROUP BY ville
    HAVING max(t_basse) &lt; 40;</programlisting>
   <calloutlist>
    <callout arearefs="co.tutorial-agg-like">
     <para>
      L'opérateur <literal>LIKE</literal> fait la correspondance avec
      un modèle&nbsp;; cela est expliqué dans la
      <xref linkend="functions-matching"/>.
     </para>
    </callout>
   </calloutlist>
   </para>

   <para>
    Il est important de comprendre l'interaction entre les agrégats et
    les clauses <acronym>SQL</acronym> <literal>WHERE</literal> et
    <literal>HAVING</literal>. La différence fondamentale entre
    <literal>WHERE</literal> et <literal>HAVING</literal> est que
    <literal>WHERE</literal> sélectionne les lignes en entrée avant
    que les groupes et les agrégats ne soient traités (donc, cette clause
    contrôle les lignes qui se retrouvent dans le calcul de l'agrégat) tandis
    que <literal>HAVING</literal> sélectionne les lignes groupées
    après que les groupes et les agrégats aient été traités.  Donc, la
    clause <literal>WHERE</literal> ne doit pas contenir des fonctions
    d'agrégat&nbsp;; cela n'a aucun sens d'essayer d'utiliser un agrégat
    pour déterminer quelles lignes seront en entrée des agrégats.
    D'un autre côté, la clause <literal>HAVING</literal> contient
    toujours des fonctions d'agrégat (pour être précis, vous êtes
    autorisés à écrire une clause <literal>HAVING</literal> qui
    n'utilise pas d'agrégats mais c'est rarement utilisé. La même condition
    pourra être utilisée plus efficacement par un
    <literal>WHERE</literal>).
   </para>

   <para>
    Dans l'exemple précédent, nous pouvons appliquer la restriction sur le nom de
    la ville dans <literal>WHERE</literal> puisque cela n'a besoin
    d'aucun agrégat.  C'est plus efficace que d'ajouter la restriction
    dans <literal>HAVING</literal> parce que nous évitons le
    groupement et les calculs d'agrégat pour toutes les lignes qui
    ont échoué lors du contrôle fait par <literal>WHERE</literal>.
   </para>
  </sect1>


  <sect1 id="tutorial-update">
   <title>Mises à jour</title>

   <indexterm zone="tutorial-update">
    <primary>UPDATE</primary>
   </indexterm>

   <para>
    Vous pouvez mettre à jour une ligne existante en utilisant la
    commande <command>UPDATE</command>.  Supposez que vous découvrez
    que les températures sont toutes excédentes de 2 degrés après le
    28 novembre.  Vous pouvez corriger les données de la façon
    suivante&nbsp;:

<programlisting>UPDATE temps
    SET t_haute = t_haute - 2,  t_basse = t_basse - 2
    WHERE date &gt; '1994-11-28';</programlisting>
   </para>

   <para>
    Regardez le nouvel état des données&nbsp;:
<programlisting>SELECT * FROM temps;

     ville      | t_basse | t_haute | prcp |    date
----------------+---------+---------+------+------------
 San Francisco  |      46 |      50 | 0.25 | 1994-11-27
 San Francisco  |      41 |      55 |    0 | 1994-11-29
 Hayward        |      35 |      52 |      | 1994-11-29
(3 rows)</programlisting>
   </para>
  </sect1>

  <sect1 id="tutorial-delete">
   <title>Suppressions</title>

   <indexterm zone="tutorial-delete">
    <primary>DELETE</primary>
   </indexterm>

   <para>
    Les lignes peuvent être supprimées de la table avec la commande
    <command>DELETE</command>. Supposez que vous n'êtes plus intéressé par le
    temps de Hayward. Vous pouvez faire ce qui suit pour supprimer ses lignes
    de la table&nbsp;:
<programlisting>DELETE FROM temps WHERE ville = 'Hayward';</programlisting>

    Toutes les entrées de temps pour Hayward sont supprimées.

<programlisting>SELECT * FROM temps;</programlisting>

<screen>     ville     | t_basse | t_haute | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
 San Francisco |      41 |      55 |    0 | 1994-11-29
(2 rows)</screen>
   </para>

   <para>
    Faire très attention aux instructions de la forme
<synopsis>DELETE FROM <replaceable>nom_table</replaceable>;
</synopsis>

    Sans une qualification, <command>DELETE</command> supprimera
    <emphasis>toutes</emphasis> les lignes de la table donnée, la laissant
    vide. Le système le fera sans demander de confirmation&nbsp;!
   </para>
  </sect1>

 </chapter>
