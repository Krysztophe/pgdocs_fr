<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/alter_function.sgml,v 1.8 2005/09/15 07:03:25 guillaume Exp $
PostgreSQL documentation
-->

<refentry id="sql-alterfunction">
 <refmeta>
  <refentrytitle id="sql-alterfunction-title">ALTER FUNCTION</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER FUNCTION</refname>
  <refpurpose>change la définition d'une fonction</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>ALTER FUNCTION <replaceable>nom</replaceable> ( [ [ <replaceable class="parameter">modearg</replaceable> ] [ <replaceable class="parameter">nomarg</replaceable> ] <replaceable class="parameter">typearg</replaceable> [, ...] ] )
    <replaceable class="parameter">action</replaceable> [, ... ] [ RESTRICT ]
ALTER FUNCTION <replaceable>nom</replaceable> ( [ [ <replaceable class="parameter">modearg</replaceable> ] [ <replaceable class="parameter">nomarg</replaceable> ] <replaceable class="parameter">typearg</replaceable> [, ...] ] )
    RENAME TO <replaceable>nouveau_nom</replaceable>
ALTER FUNCTION <replaceable>nom</replaceable> ( [ [ <replaceable class="parameter">modearg</replaceable> ] [ <replaceable class="parameter">nomarg</replaceable> ] <replaceable class="parameter">typearg</replaceable> [, ...] ] )
    OWNER TO <replaceable>new_owner</replaceable>
ALTER FUNCTION <replaceable>nom</replaceable> ( [ [ <replaceable class="parameter">modearg</replaceable> ] [ <replaceable class="parameter">nomarg</replaceable> ] <replaceable class="parameter">typearg</replaceable> [, ...] ] )
    SET SCHEMA <replaceable>nouveau_schema</replaceable>

où <replaceable class="parameter">action</replaceable> fait partie de&nbsp;:

    CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
    IMMUTABLE | STABLE | VOLATILE
    [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
</synopsis>
 </refsynopsisdiv>
  
 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-alterfunction">
   <primary>ALTER FUNCTION</primary>
  </indexterm>

  <para>
   <command>ALTER FUNCTION</command> change la définition d'une fonction.
  </para>

  <para>
   Vous devez être le propriétaire de la fonction utilisée dans <command>ALTER
   FUNCTION</command>. Pour modifier le propriétaire, vous devez aussi être un membre
   direct ou indirect du nouveau rôle propriétaire et ce rôle doit avoir le
   droit <literal>CREATE</literal> sur le schéma de la fonction (ces
   restrictions imposent que la modification du propriétaire ne fait pas
   quelque chose que vous ne pourriez pas faire en supprimant et en re-créant
   la fonction&nbsp;; néanmoins, un superutilisateur peut modifier
   le propriétaire de toute fonction).
  </para>
 </refsect1>
  
 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom d'une fonction existante.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">modearg</replaceable></term>

    <listitem>
     <para>
      Le mode d'un argument&nbsp;: soit <literal>IN</literal>, soit <literal>OUT</literal>,
      soit <literal>INOUT</literal>. En cas d'omission, la valeur par défaut est
      <literal>IN</literal>. Notez qu'<command>ALTER FUNCTION</command> ne fait pas
      attention aux arguments <literal>OUT</literal> car seuls les arguments en entrée
      sont nécessaire pour déterminer l'identité de la fonction. Donc, il est
      suffisant de lister les arguments <literal>IN</literal> et <literal>INOUT</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nomarg</replaceable></term>

    <listitem>
     <para>
      Le nom d'un argument.
      Notez qu'<command>ALTER FUNCTION</command> ne fait pas actuellement
      attention aux noms des arguments car seul le type de données d'un argument
      est nécessaire pour déterminer l'identité d'une fonction.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">typearg</replaceable></term>

    <listitem>
     <para>
      Le(s) type(s) de données des arguments de la fonction (pouvant être
      qualifié par le nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nouveau_nom</replaceable></term>
    <listitem>
     <para>
      Le nouveau nom de la fonction.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nouveau_proprietaire</replaceable></term>
    <listitem>
     <para>
      Le nouveau propriétaire de la fonction. Notez que, si cette fonction est
      marquée <literal>SECURITY DEFINER</literal>, elle s'exécutera par la suite
      en tant que ce nouveau propriétaire.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nouveau_schema</replaceable></term>
    <listitem>
     <para>
      Le nouveau schéma pour cette fonction.
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>CALLED ON NULL INPUT</literal></term>
     <term><literal>RETURNS NULL ON NULL INPUT</literal></term>
     <term><literal>STRICT</literal></term>

     <listitem>
      <para>
       <literal>CALLED ON NULL INPUT</literal> modifie la fonction pour qu'elle
       soit appelée quand plusieurs ou tous ces arguments sont NULL. 
       <literal>RETURNS NULL ON NULL INPUT</literal> et
       <literal>STRICT</literal> modifie la fonction pour qu'elle ne soit pas
       appelée si un de ces arguments est NULL&nbsp;; à la place, un résultat
       NULL est automatiquement utilisé. Voir <xref
       linkend="sql-createfunction"/> pour plus d'informations.
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>IMMUTABLE</literal></term>
     <term><literal>STABLE</literal></term>
     <term><literal>VOLATILE</literal></term>

     <listitem>
      <para>
       Modifie la volatibilité de la fonction pour le type spécifié. Voir <xref
       linkend="sql-createfunction"/> pour plus d'informations.
      </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal><optional> EXTERNAL </optional> SECURITY INVOKER</literal></term>
    <term><literal><optional> EXTERNAL </optional> SECURITY DEFINER</literal></term>

    <listitem>
     <para>
      Modifie le fait que la fonction soit <literal>SECURITY DEFINER</literal>.
      Le mot clé <literal>EXTERNAL</literal> est ignoré pour la compatibilité
      SQL. Voir <xref linkend="sql-createfunction"/> pour plus d'informations
      sur cette fonctionnalité.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>

    <listitem>
     <para>
      Ignoré pour la conformité avec le standard SQL.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Pour renommer la fonction <literal>sqrt</literal> pour le type
   <type>integer</type> en <literal>square_root</literal>&nbsp;:
<programlisting>ALTER FUNCTION sqrt(integer) RENAME TO square_root;
</programlisting>
  </para>

  <para>
   Pour changer le propriétaire de la fonction <literal>sqrt</literal> pour 
   le type <type>integer</type> en <literal>joe</literal>&nbsp;:
<programlisting>ALTER FUNCTION sqrt(integer) OWNER TO joe;
</programlisting>
  </para>

  <para>
   Pour modifier le schéma de la fonction <literal>sqrt</literal> du type
   <type>integer</type> par <literal>maths</literal>&nbsp;:
<programlisting>ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
</programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Cette instruction est partiellement compatible avec l'instruction
   <command>ALTER FUNCTION</command> du standard SQL. Le standard autorise la
   modification d'un plus grand nombre de propriétés d'une fonction mais ne
   fournit pas la possibilité de renommer une fonction, de placer le commutateur
   <literal>SECURITY DEFINER</literal> sur la fonction ou de modifier le
   propriétaire, le schéma ou la volatibilité de cette fonction. Le standard
   requiert aussi le mot clé <literal>RESTRICT</literal>&nbsp;; il est optionnel avec
   <productname>PostgreSQL</productname>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction" endterm="sql-createfunction-title"/></member>
   <member><xref linkend="sql-dropfunction" endterm="sql-dropfunction-title"/></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->