<!--
$PostgreSQL: pgsql/doc/src/sgml/ref/alter_opfamily.sgml,v 1.3 2007/02/14 04:30:26 tgl Exp $
PostgreSQL documentation
-->

<refentry id="sql-alteropfamily">
 <refmeta>
  <refentrytitle id="sql-alteropfamily-title">ALTER OPERATOR FAMILY</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage SQL</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER OPERATOR FAMILY</refname>
  <refpurpose>Modifier la définition d'une famille d'opérateur</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
 
	 <indexterm zone="sql-alteropfamily">
	  <primary>ALTER OPERATOR FAMILY</primary>
	 </indexterm>
 
<synopsis>
ALTER OPERATOR FAMILY <replaceable>nom</replaceable> USING <replaceable class="parameter">methode_indexage</replaceable> ADD
  {  OPERATOR <replaceable class="parameter">numero_strategie</replaceable> <replaceable class="parameter">nom_operateur</replaceable> ( <replaceable class="parameter">tpe_op</replaceable>, <replaceable class="parameter">type_op</replaceable> ) [ RECHECK ]
   | FUNCTION <replaceable class="parameter">numero_support</replaceable> [ ( <replaceable class="parameter">type_op</replaceable> [ , <replaceable class="parameter">type_op</replaceable> ] ) ] <replaceable class="parameter">nom_fonction</replaceable> ( <replaceable class="parameter">type_argument</replaceable> [, ...] )
  } [, ... ]
ALTER OPERATOR FAMILY <replaceable>nom</replaceable> USING <replaceable class="parameter">methode_indexage</replaceable> DROP
  {  OPERATOR <replaceable class="parameter">numero_strategie</replaceable> ( <replaceable class="parameter">type_op</replaceable> [ , <replaceable class="parameter">type_op</replaceable> ] )
   | FUNCTION <replaceable class="parameter">numero_support</replaceable> ( <replaceable class="parameter">type_op</replaceable> [ , <replaceable class="parameter">type_op</replaceable> ] )
  } [, ... ]
ALTER OPERATOR FAMILY <replaceable>nom</replaceable> USING <replaceable class="parameter">methode_indexage</replaceable> RENAME TO <replaceable>nouveau_nom</replaceable>
ALTER OPERATOR FAMILY <replaceable>nom</replaceable> USING <replaceable class="parameter">methode_indexage</replaceable> OWNER TO <replaceable>nouveau_proprietaire</replaceable>
</synopsis>
 </refsynopsisdiv>
  
 <refsect1>
  <title>Description</title>

  <para>
   <command>ALTER OPERATOR FAMILY</command> changes the definition of
   an operator family.  You can add operators and support functions
   to the family, remove them from the family,
   or change the family's name or owner.
  </para>

  <para>
   When operators and support functions are added to a family with
   <command>ALTER OPERATOR FAMILY</command>, they are not part of any
   specific operator class within the family, but are just <quote>loose</quote>
   within the family.  This indicates that these operators and functions
   are compatible with the family's semantics, but are not required for
   correct functioning of any specific index.  (Operators and functions
   that are so required should be declared as part of an operator class,
   instead; see <xref linkend="sql-createopclass"
   endterm="sql-createopclass-title"/>.)
   <productname>PostgreSQL</productname> will allow loose members of a
   family to be dropped from the family at any time, but members of an
   operator class cannot be dropped without dropping the whole class and
   any indexes that depend on it.
   Typically, single-data-type operators
   and functions are part of operator classes because they are needed to
   support an index on that specific data type, while cross-data-type
   operators and functions are made loose members of the family.
  </para>

  <para>
   You must be a superuser to use <command>ALTER OPERATOR FAMILY</command>.
   (This restriction is made because an erroneous operator family definition
   could confuse or even crash the server.)
  </para>

  <para>
   <command>ALTER OPERATOR FAMILY</command> does not presently check
   whether the operator family definition includes all the operators and
   functions required by the index method, nor whether the operators and
   functions form a self-consistent set.  It is the user's
   responsibility to define a valid operator family.
  </para>

  <para>
   Refer to <xref linkend="xindex"/> for further information.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Parameters</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      The name (optionally schema-qualified) of an existing operator
      family.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">index_method</replaceable></term>
    <listitem>
     <para>
      The name of the index method this operator family is for.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">strategy_number</replaceable></term>
    <listitem>
     <para>
      The index method's strategy number for an operator
      associated with the operator family.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operator_name</replaceable></term>
    <listitem>
     <para>
      The name (optionally schema-qualified) of an operator associated
      with the operator family.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">op_type</replaceable></term>
    <listitem>
     <para>
      In an <literal>OPERATOR</literal> clause,
      the operand data type(s) of the operator, or <literal>NONE</literal> to
      signify a left-unary or right-unary operator.  Unlike the comparable
      syntax in <command>CREATE OPERATOR CLASS</command>, the operand data types
      must always be specified.
     </para>

     <para>
      In an <literal>ADD FUNCTION</literal> clause, the operand data type(s) the
      function is intended to support, if different from
      the input data type(s) of the function.  For B-tree and hash indexes
      it is not necessary to specify <replaceable
      class="parameter">op_type</replaceable> since the function's input
      data type(s) are always the correct ones to use.  For GIN and GiST
      indexes it is necessary to specify the input data type the function
      is to be used with.
     </para>

     <para>
      In a <literal>DROP FUNCTION</literal> clause, the operand data type(s) the
      function is intended to support must be specified.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RECHECK</literal></term>
    <listitem>
     <para>
      If present, the index is <quote>lossy</quote> for this operator, and
      so the rows retrieved using the index must be rechecked to
      verify that they actually satisfy the qualification clause
      involving this operator.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">support_number</replaceable></term>
    <listitem>
     <para>
      The index method's support procedure number for a
      function associated with the operator family.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">funcname</replaceable></term>
    <listitem>
     <para>
      The name (optionally schema-qualified) of a function that is an
      index method support procedure for the operator family.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argument_types</replaceable></term>
    <listitem>
     <para>
      The parameter data type(s) of the function.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">newname</replaceable></term>
    <listitem>
     <para>
      The new name of the operator family.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">newowner</replaceable></term>
    <listitem>
     <para>
      The new owner of the operator family.
     </para>
    </listitem>
   </varlistentry>
 </variablelist>

  <para>
   The <literal>OPERATOR</literal> and <literal>FUNCTION</literal>
   clauses can appear in any order.
  </para>

 </refsect1>
  
 <refsect1>
  <title>Notes</title>

  <para>
   Notice that the <literal>DROP</literal> syntax only specifies the <quote>slot</quote>
   in the operator family, by strategy or support number and input data
   type(s).  The name of the operator or function occupying the slot is not
   mentioned.  Also, for <literal>DROP FUNCTION</literal> the type(s) to specify
   are the input data type(s) the function is intended to support; for
   GIN and GiST indexes this might have nothing to do with the actual input
   argument types of the function.
  </para>

  <para>
   Because the index machinery does not check access permissions on functions
   before using them, including a function or operator in an operator family
   is tantamount to granting public execute permission on it.  This is usually
   not an issue for the sorts of functions that are useful in an operator
   family.
  </para>

  <para>
   The operators should not be defined by SQL functions.  A SQL function
   is likely to be inlined into the calling query, which will prevent
   the optimizer from recognizing that the query matches an index.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Exemples</title>

  <para>
   La commande exemple suivant ajoute des opérateurs inter-type de données et
   ajoute les fonctions de support pour une famille d'opérateur qui contient
   déjà les classes d'opérateur B_tree pour les types de données
   <type>int4</type> et <type>int2</type>.
  </para>

<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree ADD

  -- int4 vs int2
  OPERATOR 1 &lt; (int4, int2) ,
  OPERATOR 2 &lt;= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 &gt;= (int4, int2) ,
  OPERATOR 5 &gt; (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 &lt; (int2, int4) ,
  OPERATOR 2 &lt;= (int2, int4) ,
  OPERATOR 3 = (int2, int4) ,
  OPERATOR 4 &gt;= (int2, int4) ,
  OPERATOR 5 &gt; (int2, int4) ,
  FUNCTION 1 btint24cmp(int2, int4) ;
</programlisting>  

  <para>
   Pour supprimer de nouveau ces entrées&nbsp;:
  </para>

<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree DROP

  -- int4 vs int2
  OPERATOR 1 (int4, int2) ,
  OPERATOR 2 (int4, int2) ,
  OPERATOR 3 (int4, int2) ,
  OPERATOR 4 (int4, int2) ,
  OPERATOR 5 (int4, int2) ,
  FUNCTION 1 (int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 (int2, int4) ,
  OPERATOR 2 (int2, int4) ,
  OPERATOR 3 (int2, int4) ,
  OPERATOR 4 (int2, int4) ,
  OPERATOR 5 (int2, int4) ,
  FUNCTION 1 (int2, int4) ;
</programlisting>  
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Il n'existe pas d'instruction <command>ALTER OPERATOR FAMILY</command> dans
   le standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createopfamily" endterm="sql-createopfamily-title"/></member>
   <member><xref linkend="sql-dropopfamily" endterm="sql-dropopfamily-title"/></member>
   <member><xref linkend="sql-createopclass" endterm="sql-createopclass-title"/></member>
   <member><xref linkend="sql-alteropclass" endterm="sql-alteropclass-title"/></member>
   <member><xref linkend="sql-dropopclass" endterm="sql-dropopclass-title"/></member>
  </simplelist>
 </refsect1>
</refentry>
