<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/begin.sgml,v 1.10 2005/03/14 06:03:51 guillaume Exp $
PostgreSQL documentation
-->

<refentry id="sql-begin">
 <refmeta>
  <refentrytitle id="sql-begin-title">BEGIN</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>BEGIN</refname>
  <refpurpose>débute un bloc de transaction</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
BEGIN [ WORK | TRANSACTION ] [ <replaceable class="parameter">mode_transaction</replaceable> [, ...] ]

où <replaceable class="parameter">mode_transaction</replaceable> fait partie
de&nbsp;:

    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }
    READ WRITE | READ ONLY
</synopsis>
 </refsynopsisdiv>
 
 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-begin">
   <primary>BEGIN</primary>
  </indexterm>

  <para>
   <command>BEGIN</command> initie un bloc de transaction, c'est-à-dire que
   toutes les instructions après la commande <command>BEGIN</command> seront
   exécutées dans une seule transaction jusqu'à ce qu'un <xref
   linkend="sql-commit" endterm="sql-commit-title"/> ou <xref
   linkend="sql-rollback" endterm="sql-rollback-title"/> explicite soit exécuté.
   Par défaut (sans <command>BEGIN</command>),
   <productname>PostgreSQL</productname> exécute des
   transactions en mode <quote>autocommit</quote>, c'est-à-dire que chaque
   instruction est exécutée dans sa propre transaction et une validation
   (commit) est traitée implicitement à la fin de l'instruction (si l'exécution
   a réussi, sinon une annulation est exécutée).
  </para>

  <para>
   Les instructions sont exécutées plus rapidement dans un bloc de transaction
   parce que la séquence début/validation de transaction demande une activité
   significative du CPU et du disque. L'exécution de plusieurs instructions dans
   une transaction est aussi utile pour s'assurer d'une cohérence lors de la
   réalisation de certains modifications liées&nbsp;: les autres sessions ne
   seront pas capables de voir les états intermédiaires tant que toutes les
   mises à jour n'auront pas été réalisées.
  </para>

  <para>
   Si le niveau d'isolation ou le mode lecture/écriture est spécifié, la
   nouvelle transaction a ces caractéristiques, comme si <xref
   linkend="sql-set-transaction" endterm="sql-set-transaction-title"/> a été
   exécutée.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>WORK</literal></term>
    <term><literal>TRANSACTION</literal></term>
    <listitem>
     <para>
      Mots clés optionnels. Ils n'ont pas d'effet.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Référez-vous à <xref linkend="sql-set-transaction"
   endterm="sql-set-transaction-title"/> pour des informations sur la
   signification des autres paramètres de cette instruction.
  </para>
   
 </refsect1>
  
 <refsect1>
  <title>Notes</title>

  <para>
   <xref linkend="sql-start-transaction"
   endterm="sql-start-transaction-title"/> a la même fonctionnalité que
   <command>BEGIN</command>.
  </para>
   
  <para>
   Utilisez <xref linkend="sql-commit" endterm="sql-commit-title"/> ou
   <xref linkend="sql-rollback" endterm="sql-rollback-title"/> pour terminer un
   bloc de transaction.
  </para>

  <para>
   Lancer <command>BEGIN</command> en étant déjà dans un bloc de transaction
   provoquera l'apparition d'un message d'avertissement. L'état de la
   transaction n'en sera pas affecté. Pour intégrer des transactions à
   l'intérieur d'un bloc de transaction, utilisez les points de sauvegarde (voir
   <xref linkend="sql-savepoint" endterm="sql-savepoint-title"/>).
  </para>

  <para>
   Pour des raisons de compatibilité descendante, les virgules entre chaque
   <replaceable class="parameter">mode_transaction</replaceable> peuvent être
   omis.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Pour commencer un bloc de transaction&nbsp;:

<programlisting>
BEGIN;
</programlisting>
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>BEGIN</command> est une extension du langage
   <productname>PostgreSQL</productname>. C'est équivalent à la commande 
   <xref linkend="sql-start-transaction" endterm="sql-start-transaction-title"/>
   du standard SQL, qui donne des informations de compatibilité supplémentaires.
  </para>

  <para>
   Les autres systèmes de bases de données relationnels peuvent
   offrir une fonctionnalité autocommit en supplément.
  </para>

  <para>
   Incidemment, le mot clé <literal>BEGIN</literal> est utilisé dans un but
   différent en SQL embarqué. Faites attention à la sémantique de la transaction
   lors du portage d'applications de bases de données.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-commit" endterm="sql-commit-title"/></member>
   <member><xref linkend="sql-rollback" endterm="sql-rollback-title"/></member>
   <member><xref linkend="sql-start-transaction"
endterm="sql-start-transaction-title"/></member>
   <member><xref linkend="sql-savepoint" endterm="sql-savepoint-title"/></member>
  </simplelist>
 </refsect1>
</refentry>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
