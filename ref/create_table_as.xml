<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/create_table_as.sgml,v 1.10 2005/04/06 22:38:52 guillaume Exp $
PostgreSQL documentation
-->
<!-- SAS 20060618 -->

<refentry id="sql-createtableas">
 <refmeta>
  <refentrytitle id="sql-createtableas-title">CREATE TABLE AS</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TABLE AS</refname>
  <refpurpose>Définir une nouvelle table à partir des résultats d'une
   requête</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } ] TABLE <replaceable>nom_table</replaceable>
    [ (<replaceable>nom_colonne</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="PARAMETER">parametre_stockage</replaceable> [= <replaceable class="PARAMETER">valeur</replaceable>] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]
    [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
    [ TABLESPACE <replaceable class="PARAMETER">espace_logique</replaceable> ]
    AS <replaceable>requête</replaceable>
</synopsis>
 </refsynopsisdiv>
  
 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-createtableas">
   <primary>CREATE TABLE AS</primary>
  </indexterm>

  <para>
   <command>CREATE TABLE AS</command> crée une table et y insère les
   données récupérées par une commande <command>SELECT</command>. Les
   colonnes de la table ont les noms et les types de
   données associés aux colonnes en sortie du <command>SELECT</command>
   (les noms des colonnes peuvent toutefois être surchargés).
  </para>

  <para>
   <command>CREATE TABLE AS</command> semble possèder des similitudes avec la création 
   d'une vue mais est, en fait, assez différente&nbsp;: elle crée une nouvelle
   table et n'évalue la requête qu'une seule fois, pour le chargement initial de la nouvelle table.
   Les modifications ultérieures de la table source ne sont pas prises en compte. Au contraire, 
   une vue réévalue l'instruction <command>SELECT</command> de définition à chaque appel.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>GLOBAL</literal> ou <literal>LOCAL</literal></term>
    <listitem>
     <para>
      Ignoré. Conservé pour la compatibilité
      (cf. <xref linkend="sql-createtable" endterm="sql-createtable-title"/>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TEMPORARY</literal> ou <literal>TEMP</literal></term>
    <listitem>
     <para>
      Si spécifié, la table est temporaire
      (cf. <xref linkend="sql-createtable" endterm="sql-createtable-title"/>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom de la table à créer (éventuellement qualifié du nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>nom_colonne</replaceable></term>
    <listitem>
     <para>
      Le nom d'une colonne dans la nouvelle table. Si les noms de colonnes ne
      sont pas précisés, ils sont issus des noms des colonnes en sortie de la
      requête. Les noms des colonnes ne peuvent pas être précisés lorsque la table est créée à partir d'une commande
      <command>EXECUTE</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      This clause specifies optional storage parameters for the new table;
      see <xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title"/> for more
      information.  The <literal>WITH</literal> clause
      can also include <literal>OIDS=TRUE</literal> (or just <literal>OIDS</literal>)
      to specify that rows of the new table
      should have OIDs (object identifiers) assigned to them, or
      <literal>OIDS=FALSE</literal> to specify that the rows should not have OIDs.
      See <xref linkend="sql-createtable"
      endterm="sql-createtable-title"/> for more information.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH OIDS</literal></term>
    <term><literal>WITHOUT OIDS</literal></term>
    <listitem>
     <para>
      These are obsolescent syntaxes equivalent to <literal>WITH (OIDS)</literal>
      and <literal>WITH (OIDS=FALSE)</literal>, respectively.  If you wish to give
      both an <literal>OIDS</literal> setting and storage parameters, you must use
      the <literal>WITH ( ... )</literal> syntax; see above.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ON COMMIT</literal></term>
    <listitem>
     <para>
      The behavior of temporary tables at the end of a transaction
      block can be controlled using <literal>ON COMMIT</literal>.
      The three options are:

      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
         <para>
          No special action is taken at the ends of transactions.
          This is the default behavior.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <para>
          All rows in the temporary table will be deleted at the end
          of each transaction block.  Essentially, an automatic <xref
          linkend="sql-truncate" endterm="sql-truncate-title"/> is done
          at each commit.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <para>
          The temporary table will be dropped at the end of the current
          transaction block.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLESPACE <replaceable class="PARAMETER">tablespace</replaceable></literal></term>
    <listitem>
     <para>
      The <replaceable class="PARAMETER">tablespace</replaceable> is the name
      of the tablespace in which the new table is to be created.
      If not specified,
      <xref linkend="guc-default-tablespace"/> is used, or the database's
      default tablespace if <varname>default_tablespace</varname> is an empty
      string.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>query</replaceable></term>
    <listitem>
     <para>
      A <xref linkend="sql-select" endterm="sql-select-title"/> or
      <xref linkend="sql-values" endterm="sql-values-title"/> command,
      or an <xref linkend="sql-execute" endterm="sql-execute-title"/> command
      that runs a prepared <command>SELECT</command> or <command>VALUES</command> query.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Cette commande est fonctionnellement équivalente à
   <xref linkend="sql-selectinto" endterm="sql-selectinto-title"/>. Elle lui est
   cependant préférée car elle présente moins de risques de confusion avec les autres utilisations
   de la syntaxe <command>SELECT INTO</command>. De plus,
   <command>CREATE TABLE AS</command> offre plus de fonctionnalités 
   que <command>SELECT INTO</command>.
  </para>

  <para>
   Avant <productname>PostgreSQL</productname> 8.0,
   <command>CREATE TABLE AS</command> incluait toujours les OIDs dans la table créée.
   À partir de <productname>PostgresSQL</productname> 8.0, la commande
   <command>CREATE TABLE AS</command> autorise l'utilisateur à spécifier
   explicitement la présence des OID. En l'absence de précision,
   la variable de configuration <xref linkend="guc-default-with-oids"/> est utilisée. À partir de
   <productname>PostgreSQL</productname> 8.1, la valeur par défaut de cette variable est &laquo;&nbsp;faux&nbsp;&raquo;&nbsp;;
   le comportement par défaut n'est donc pas identique à celui des versions
   précédant la 8.0. Il est préférable que les applications qui nécessitent des OID dans la table créée
   par <command>CREATE TABLE AS</command> indiquent explicitement
   <literal>WITH (OIDS)</literal> pour s'assurer du comportement souhaité.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer une table <literal>films_recent</literal> contenant les
   entrées récentes de la table <literal>films</literal> :

<programlisting>CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod &gt;= '2006-01-01';
</programlisting>
  </para>

  <para>
   Create a new temporary table <literal>films_recent</literal>, consisting of
   only recent entries from the table <literal>films</literal>, using a
   prepared statement.  The new table has OIDs and will be dropped at commit:

<programlisting>
PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod &gt; $1;
CREATE TEMP TABLE films_recent WITH (OIDS) ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
</programlisting>
  </para>
 </refsect1>


 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CREATE TABLE AS</command> est conforme au standard
   <acronym>SQL</acronym>, avec les exceptions suivantes&nbsp;:

   <itemizedlist spacing="compact">
    <listitem>
     <para>
      Le standard requiert des parenthèses autour de la clause de la
      sous-requête&nbsp;; elles sont optionnelles dans <productname>PostgreSQL</productname>.
     </para>
    </listitem>

    <listitem>
     <para>
      The standard defines a <literal>WITH [ NO ] DATA</literal> clause;
      this is not currently implemented by <productname>PostgreSQL</productname>.
      The behavior provided by <productname>PostgreSQL</productname> is equivalent
      to the standard's <literal>WITH DATA</literal> case.
      <literal>WITH NO DATA</literal> can be simulated by appending
      <literal>LIMIT 0</literal> to the query.
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname> handles temporary tables in a way
      rather different from the standard; see
      <xref linkend="sql-createtable" endterm="sql-createtable-title"/>
      for details.
     </para>
    </listitem>

    <listitem>
     <para>
      The <literal>WITH</literal> clause is a <productname>PostgreSQL</productname>
      extension; neither storage parameters nor OIDs are in the standard.
     </para>
    </listitem>

    <listitem>
     <para>
      The <productname>PostgreSQL</productname> concept of tablespaces is not
      part of the standard.  Hence, the clause <literal>TABLESPACE</literal>
      is an extension.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtable" endterm="sql-createtable-title"/></member>
   <member><xref linkend="sql-execute" endterm="sql-execute-title"/></member>
   <member><xref linkend="sql-select" endterm="sql-select-title"/></member>
   <member><xref linkend="sql-selectinto" endterm="sql-selectinto-title"/></member>
   <member><xref linkend="sql-values" endterm="sql-values-title"/></member>
  </simplelist>
 </refsect1>
 
</refentry>
