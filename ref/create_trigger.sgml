<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/create_trigger.sgml,v 1.11 2005/09/15 07:03:26 guillaume Exp $
PostgreSQL documentation
-->

<refentry id="sql-createtrigger">
 <refmeta>
  <refentrytitle id="sql-createtrigger-title">CREATE TRIGGER</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <refpurpose>définit un nouveau déclencheur</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE TRIGGER <replaceable class="parameter">nom</replaceable> { BEFORE | AFTER } { <replaceable class="parameter">evenement</replaceable> [ OR ... ] }
    ON <replaceable class="parameter">table</replaceable> [ FOR [ EACH ] { ROW | STATEMENT } ]
    EXECUTE PROCEDURE <replaceable class="parameter">nomfonc</replaceable> ( <replaceable class="parameter">arguments</replaceable> )
</synopsis>
 </refsynopsisdiv>
 
 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE TRIGGER</command> crée un nouveau déclencheur. Le
   déclencheur sera associé avec la table spécifiée et exécutera la fonction
   spécifiée <replaceable class="parameter">nomfonc</replaceable> lorsque
   certains événements surviennent.
  </para>

  <para>
   Le déclencheur peut être spécifié pour être lancé soit avant que l'opération
   ne soit tentée sur une ligne (avant la vérification des contraintes et 
   que l'<command>INSERT</command>, l'<command>UPDATE</command> ou le
   <command>DELETE</command> ne soit tenté) ou une fois que l'opération s'est
   terminée (après la vérification des contraintes et que
   l'<command>INSERT</command>, l'<command>UPDATE</command> ou le
   <command>DELETE</command> ne soit terminé). Si le déclencheur est lancé avant
   l'événement, le déclencheur pourrait annuler l'opération pour la ligne
   courante ou modifier la ligne en cours d'insertion (seulement pour les
   opérations <command>INSERT</command> et <command>UPDATE</command>). Si le
   déclencheur se lance après l'événement, toute modification, incluant la
   dernière insertion, mise à jour ou suppression, sont <quote>visibles</quote>
   par le déclencheur.
  </para>

  <para>
   Un déclencheur qui est marqué <literal>FOR EACH ROW</literal> est appelé pour
   chaque ligne que l'opération modifie. Par exemple, un
   <command>DELETE</command> affectant dix lignes causera le lancement de tout
   déclencheur <literal>ON DELETE</literal> sur la relation cible dix fois
   séparément, une fois pour chaque ligne supprimée. Au contraire, un
   déclencheur marqué <literal>FOR EACH STATEMENT</literal> s'exécute seulement
   une fois pour toute opération donnée, quelque soit le nombre de lignes qu'il
   modifie (en particulier, une opération qui ne modifie aucune ligne, résultera
   toujours en l'exécution des déclencheurs <literal>FOR EACH
   STATEMENT</literal> applicables).
  </para>

  <para>
   Si plusieurs déclencheurs du même genre sont définis pour le même événement,
   ils sont déclenchés suivant l'ordre alphabétique de leur nom.
  </para>

  <para>
   <command>SELECT</command> ne modifie aucune ligne donc vous ne pouvez pas 
   créer de déclencheurs <command>SELECT</command>. Les règles et vues sont plus
   appropriées dans de tels cas.
  </para>

  <para>
   Référez-vous à <xref linkend="triggers"/> pour plus d'informations sur les
   déclencheurs.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom à donner au nouveau déclencheur. Il doit être distinct du nom de
      tout autre déclencheur pour la même table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <listitem>
     <para>
      Détermine si la fonction est appelée avant ou après l'événement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">événement</replaceable></term>
    <listitem>
     <para>
      Fait partie de <command>INSERT</command>, <command>UPDATE</command> ou
      <command>DELETE</command>&nbsp;; ceci spécifie l'événement qui lance le
      déclencheur. Plusieurs événements peuvent être donnés en utilisant
      <literal>OR</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table</replaceable></term>
    <listitem>
     <para>
      Le nom (pouvant être qualifié du nom du schéma) de la table à laquelle
      est rattaché le déclencheur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FOR EACH ROW</literal></term>
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
     <para>
      Ceci spécifie si la procédure du déclencheur doit être lancée une fois
      pour chaque ligne affectée par l'événement du déclencheur ou simplement
      une fois par instruction SQL. Si rien n'est indiqué, <literal>FOR EACH
      STATEMENT</literal> est la valeur par défaut.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nomfonc</replaceable></term>
    <listitem>
     <para>
      Une fonction fournie par l'utilisateur, déclarée comme ne prenant
      aucun argument et renvoyant le type <literal>trigger</literal>, qui est exécutée
      lorsque le déclencheur est lancé.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">arguments</replaceable></term>
    <listitem>
     <para>
      Une liste optionnelle d'arguments séparés par des virgules à fournir à la
      fonction lors le déclencheur est exécuté. Les arguments sont des
      constantes littérales de chaînes. Des noms simples et des constantes
      numériques peuvent être écrits ici aussi mais ils seront tous convertis
      en chaîne. Merci de vérifier la description du langage d'implémentation de
      la fonction déclencheur sur la façon dont les arguments du déclencheur
      sont accessibles à l'intérieur d'une fonction&nbsp;; cela pourrait être
      différents des arguments de fonctions standards.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-createtrigger-notes">
  <title>Notes</title>

  <para>
   Pour créer un déclencheur sur une table, l'utilisateur doit posséder le droit
   <literal>TRIGGER</literal> sur la table.
  </para>

  <para>
   Dans les versions de <productname>PostgreSQL</productname> antérieures à la
   7.3, il était nécessaire de déclarer que les fonctions déclencheur
   renvoyaient un type <type>opaque</type>, plutôt que <type>trigger</type>. Pour
   supporter le chargement des anciens fichiers de sauvegarde, <command>CREATE
   TRIGGER</command> acceptera qu'une fonction déclare une valeur de retour de type
   <type>opaque</type> mais il affichera un message d'avertissement et modifiera le
   type de retour déclaré de la fonction par <type>trigger</type>.
  </para>

  <para>
   Utilisez <xref linkend="sql-droptrigger" endterm="sql-droptrigger-title"/>
   pour supprimer un déclencheur.
  </para>
 </refsect1>

 <refsect1 id="r1-sql-createtrigger-2">
  <title>Exemples</title>

  <para>
   <xref linkend="trigger-example"/> contient un exemple complet.
  </para>
 </refsect1>

 <refsect1 id="sql-createtrigger-compatibility">
  <title>Compatibilité</title>

  <para>
   L'instruction <command>CREATE TRIGGER</command> de
   <productname>PostgreSQL</productname> implémente un sous-ensemble du standard
   <acronym>SQL</acronym>. Les fonctionnalités manquantes sont&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      SQL permet aux déclencheurs de se lancer dans des mises à jour de
      colonnes spécifiques (c'est-à-dire <literal>AFTER UPDATE OF col1,
      col2</literal>).
     </para>
    </listitem>

    <listitem>
     <para>
      SQL vous permet de définir des alias pour les lignes
      <quote>old</quote> et <quote>new</quote> ou pour les tables à utiliser
      dans la définition des actions déclenchées (c'est-à-dire <literal>CREATE
      TRIGGER ... ON nomtable REFERENCING OLD ROW AS unnom NEW ROW AS unautrenom
      ...</literal>). Comme <productname>PostgreSQL</productname> autorise
      l'écriture de procédures pour déclencheurs dans tout langage défini par
      l'utilisateur, l'accès aux données est géré d'une façon spécifique à
      chaque langage.
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname> permet seulement l'exécution d'une
      fonction définie par l'utilisateur pour l'action déclenchée. SQL
      permet l'exécution d'un certain nombres d'autres commandes SQL, telles que
      <command>CREATE TABLE</command> comme action déclenchée. Cette limitation
      n'est pas difficile à contourner en créant une fonction définie par
      l'utilisateur et qui exécute les commandes désirées.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   SQL spécifie que les déclencheurs multiples devraient être lancés dans 
   l'ordre de leur création. <productname>PostgreSQL</productname> utilise
   l'ordre alphabétique de leur nom, ce qui a été jugé plus agréable à utiliser.
  </para>

  <para>
   SQL spécifie que les déclencheurs <literal>BEFORE DELETE</literal> sur des
   suppressions en cascade se déclenchent <emphasis>après</emphasis> la fin du
   <literal>DELETE</literal> en cascade. Le comportement de
   <productname>PostgreSQL</productname> est pour que <literal>BEFORE
   DELETE</literal> se délenche toujours avant l'action de suppression, même
   dans une action en cascade. Ceci est bien plus cohérent. C'est un comportement
   imprévisible quand les déclencheurs <literal>BEFORE</literal> modifient des
   lignes qui seront ensuite modifiées par les actions de référence. Ceci peut
   amener des violations de contraintes ou à des données stockées qui n'honorent
   pas la contrainte de référence.
  </para>

  <para>
   La capacité à spécifier plusieurs actions pour un simple déclencheur en
   utilisant <literal>OR</literal> est une extension <productname>PostgreSQL</productname>
   du standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction" endterm="sql-createfunction-title"/></member>
   <member><xref linkend="sql-altertrigger" endterm="sql-altertrigger-title"/></member>
   <member><xref linkend="sql-droptrigger" endterm="sql-droptrigger-title"/></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
