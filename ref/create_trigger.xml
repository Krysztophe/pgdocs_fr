<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/create_trigger.sgml,v 1.11 2005/09/15 07:03:26 guillaume Exp $
PostgreSQL documentation
-->
<!-- SAS 20060522 -->

<refentry id="sql-createtrigger">
 <refmeta>
  <refentrytitle id="sql-createtrigger-title">CREATE TRIGGER</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <refpurpose>définir un nouveau déclencheur</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>CREATE TRIGGER <replaceable class="parameter">nom</replaceable> { BEFORE | AFTER } { <replaceable class="parameter">evenement</replaceable> [ OR ... ] }
    ON <replaceable class="parameter">table</replaceable> [ FOR [ EACH ] { ROW | STATEMENT } ]
    EXECUTE PROCEDURE <replaceable class="parameter">nomfonc</replaceable> ( <replaceable class="parameter">arguments</replaceable> )
</synopsis>
 </refsynopsisdiv>
 
 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-createtrigger">
   <primary>CREATE TRIGGER</primary>
  </indexterm>

  <para>
   <command>CREATE TRIGGER</command> crée un nouveau déclencheur. Le
   déclencheur est associé à la table spécifiée et exécute la fonction
   <replaceable class="parameter">nomfonc</replaceable> lorsque
   certains événements surviennent.
  </para>

  <para>
   L'appel du déclencheur peut avoir lieu avant que l'opération
   ne soit tentée sur une ligne (avant la vérification des contraintes et 
   la tentative d'<command>INSERT</command>, <command>UPDATE</command> ou
   <command>DELETE</command>) ou une fois que l'opération est
   terminée (après la vérification des contraintes et la fin de la commande
   <command>INSERT</command>, <command>UPDATE</command> ou 
   <command>DELETE</command>). Si le déclencheur est lancé avant
   l'événement, le déclencheur peut ignorer l'opération sur la ligne
   courante ou modifier la ligne en cours d'insertion (uniquement pour les
   opérations <command>INSERT</command> et <command>UPDATE</command>). Si le
   déclencheur est activé après l'événement, toute modification, dont la
   dernière insertion, mise à jour ou suppression, est <quote>visible</quote>
   par le déclencheur.
  </para>

  <para>
   Un déclencheur marqué <literal>FOR EACH ROW</literal> est appelé pour
   chaque ligne que l'opération modifie. Par exemple, un
   <command>DELETE</command> affectant dix lignes entraîne dix appels distincts
   de tout déclencheur <literal>ON DELETE</literal> sur la relation cible,
   une fois par ligne supprimée. Au contraire, un
   déclencheur marqué <literal>FOR EACH STATEMENT</literal> ne s'exécute
   qu'une fois pour une opération donnée, quelque soit le nombre de lignes
   modifiées (en particulier, une opération qui ne modifie aucune ligne résulte
   toujours en l'exécution des déclencheurs <literal>FOR EACH STATEMENT</literal> applicables).
  </para>

  <para>
   Si plusieurs déclencheurs du même genre sont définis pour le même événement,
   ils sont déclenchés suivant l'ordre alphabétique de leur nom.
  </para>

  <para>
   <command>SELECT</command> ne modifie aucune ligne&nbsp;; la création de
   déclencheurs sur <command>SELECT</command> n'est donc pas possible.
   Les règles et vues sont plus appropriées dans ce cas.
  </para>

  <para>
   <xref linkend="triggers"/> présente de plus amples informations sur les
   déclencheurs.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom du nouveau déclencheur. Il doit être distinct du nom de
      tout autre déclencheur sur la table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <listitem>
     <para>
      Détermine si la fonction est appelée avant ou après l'événement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">événement</replaceable></term>
    <listitem>
     <para>
      Peut-être <command>INSERT</command>, <command>UPDATE</command> ou
      <command>DELETE</command>&nbsp;; précise l'événement qui active le
      déclencheur. Plusieurs événements peuvent être précisés en les séparant par
      <literal>OR</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table</replaceable></term>
    <listitem>
     <para>
      Le nom (éventuellement qualifié du nom du schéma) de la table à laquelle
      est rattaché le déclencheur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FOR EACH ROW</literal></term>
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
     <para>
      Spécifie si la procédure du déclencheur doit être lancée 
      pour chaque ligne affectée par l'événement ou
      simplement pour chaque instruction SQL. <literal>FOR EACH STATEMENT</literal>
      est la valeur par défaut.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nomfonc</replaceable></term>
    <listitem>
     <para>
      Une fonction utilisateur, déclarée sans argument et renvoyant le type <literal>trigger</literal>, exécutée
      à l'activation du déclencheur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">arguments</replaceable></term>
    <listitem>
     <para>
      Une liste optionnelle d'arguments séparés par des virgules à fournir à la
      fonction lors de l'activation du déclencheur. Les arguments sont des
      chaînes littérales constantes. Il est possible d'écrire ici de 
      simples noms et des constantes numériques mais ils sont tous convertis
      en chaîne. L'accès aux arguments du trigger depuis la fonction peut
      différer de l'accès aux arguments d'une fonction standard&nbsp;; la consultation
      des caractéristiques d'implantation du langage de la fonction peut alors s'avérer
      utile.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-createtrigger-notes">
  <title>Notes</title>

  <para>
   Pour créer un déclencheur sur une table, l'utilisateur doit posséder le droit
   <literal>TRIGGER</literal> sur la table.
  </para>

  <para>
   Dans les versions de <productname>PostgreSQL</productname> antérieures à la
   7.3, il était nécessaire de déclarer un type <type>opaque</type> de 
   retour pour les fonctions déclencheur, plutôt que <type>trigger</type>. Pour
   pouvoir charger d'anciens fichiers de sauvegarde,
   <command>CREATE TRIGGER</command> accepte qu'une fonction déclare une valeur de retour de type
   <type>opaque</type>, mais il affiche un message d'avertissement et change le
   type de retour déclaré en <type>trigger</type>.
  </para>

  <para>
   <xref linkend="sql-droptrigger" endterm="sql-droptrigger-title"/>
   est utilisé pour supprimer un déclencheur.
  </para>
 </refsect1>

 <refsect1 id="r1-sql-createtrigger-2">
  <title>Exemples</title>

  <para>
   <xref linkend="trigger-example"/> contient un exemple complet.
  </para>
 </refsect1>

 <refsect1 id="sql-createtrigger-compatibility">
  <title>Compatibilité</title>

  <para>
   L'instruction <command>CREATE TRIGGER</command> de
   <productname>PostgreSQL</productname> implante un sous-ensemble du standard
   <acronym>SQL</acronym>. Les fonctionnalités manquantes sont&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      SQL permet aux déclencheurs de se lancer dans des mises à jour de
      colonnes spécifiques (c'est-à-dire <literal>AFTER UPDATE OF col1,
      col2</literal>).
     </para>
    </listitem>

    <listitem>
     <para>
      SQL permet de définir des alias pour les lignes
      <quote>old</quote> et <quote>new</quote> ou pour les tables utilisée
      dans la définition des actions déclenchées (c'est-à-dire
      <literal>CREATE TRIGGER ... ON nomtable REFERENCING OLD ROW AS unnom NEW ROW AS unautrenom...</literal>).
      <productname>PostgreSQL</productname> autorise
      l'écriture de procédures de déclencheurs dans tout langage
      l'utilisateur. De ce fait, l'accès aux données est géré spécifiquement pour
      chaque langage.
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname> n'autorise comme action déclenchée
      que l'exécution d'une fonction utilisateur. Le standard SQL, en revanche,
      autorise l'exécution d'autres commandes SQL, telles que
      <command>CREATE TABLE</command>. Cette limitation de <productname>PostgreSQL</productname>
      peut être facilement contournée par la création d'une fonction
      utilisateur qui exécute les commandes désirées.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Le standard SQL définit l'ordre de création comme ordre de lancement
   des déclencheurs multiples. <productname>PostgreSQL</productname> utilise
   l'ordre alphabétique de leur nom, jugé plus pratique.
  </para>

  <para>
   Le standard SQL précise que les déclencheurs <literal>BEFORE DELETE</literal> sur des
   suppressions en cascade se déclenchent <emphasis>après</emphasis> la fin du
   <literal>DELETE</literal> en cascade. 
   <productname>PostgreSQL</productname> définit que <literal>BEFORE DELETE</literal>
   se déclenche toujours avant l'action de suppression, même lors
   d'une action en cascade. Cela semble plus cohérent.
   Le comportement est imprévisible lorsque des déclencheurs <literal>BEFORE</literal> modifient des
   lignes elles-mêmes modifiées ensuite par les actions référentielles. Cela peut
   conduire à des violations de contraintes ou à des données stockées qui ne respectent
   plus la contrainte de référence.
  </para>

  <para>
   La capacité à préciser plusieurs actions pour un seul déclencheur avec
   <literal>OR</literal> est une extension <productname>PostgreSQL</productname>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction" endterm="sql-createfunction-title"/></member>
   <member><xref linkend="sql-altertrigger" endterm="sql-altertrigger-title"/></member>
   <member><xref linkend="sql-droptrigger" endterm="sql-droptrigger-title"/></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
