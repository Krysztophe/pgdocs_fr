<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060619 -->

<refentry id="sql-explain">
 <refmeta>
  <refentrytitle id="sql-explain-title">EXPLAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>EXPLAIN</refname>
  <refpurpose>Afficher le plan d'exécution d'une instruction</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>EXPLAIN [ ANALYZE ] [ VERBOSE ] <replaceable
class="parameter">instruction</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-explain">
   <primary>EXPLAIN</primary>
  </indexterm>

  <indexterm zone="sql-explain">
   <primary>instructions préparées</primary>
   <secondary>afficher le plan de requête</secondary>
  </indexterm>

  <indexterm zone="sql-explain">
   <primary>curseur</primary>
   <secondary>afficher le plan de requête</secondary>
  </indexterm>

  <para>
   Cette commande affiche le plan d'exécution que l'optimiseur
   de <productname>PostgreSQL</productname> engendre pour l'instruction fournie. 
   Le plan d'exécution décrit le parcours de la (des) table(s) utilisée(s) dans
   la requête &mdash; parcours séquentiel, parcours d'index, etc. &mdash;.
   Si plusieurs tables sont référencées, il présente également les algorithmes
   de jointures utilisés pour rassembler les lignes issues des différentes
   tables.
  </para>

  <para>
   La partie la plus importante de l'affichage concerne l'affichage des coûts 
   estimés d'exécution. Ils représentent l'estimation faite par le planificateur
   des temps d'exécution de la requête (mesurés en unités de récupération de pages
   sur le disque).
   Deux nombres sont affichés&nbsp;: le temps de démarrage, écoulé avant que la première
   ligne soit renvoyée, et le temps d'exécution total, nécessaire au renvoi
   de toutes les lignes.
   Pour la plupart des requêtes, le temps qui importe est celui d'exécution totale. 
   Mais dans certains cas, tel que pour une sous-requête dans la clause
   <literal>EXISTS</literal>, le planificateur choisira le temps de démarrage le 
   plus court, et non celui d'exécution totale (car, de toute façon, l'exécuteur
   s'arrête après la récupération d'une ligne).
   De même, lors de la limitation des résultats à retourner par une
   clause <literal>LIMIT</literal>, la planificateur effectue une interpolation
   entre les deux temps limites pour choisir le plan réellement le moins coûteux.
  </para>

  <para>
   L'option <literal>ANALYZE</literal> impose l'exécution de la requête en plus de 
   sa planification. Le temps total d'exécution de chaque n&oelig;ud du plan (en millisecondes)
   et le nombre total de lignes effectivement retournées sont ajoutés à l'affichage.
   C'est utile pour vérifier la véracité des informations fournies par le planificateur.
  </para>

  <important>
   <para>
    Il ne faut pas oublier que l'instruction est réellement exécutée avec l'option
    <literal>ANALYZE</literal>. 
    Bien qu'<command>EXPLAIN</command> inhibe l'affichage des retours d'une
    commande <command>SELECT</command>, les autres effets 
    de l'instruction sont présents. Si <command>EXPLAIN ANALYZE</command> 
    doit être utilisé sur une instruction
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command> <command>CREATE TABLE AS</command> ou
    <command>EXECUTE</command> sans que la commande
    n'affecte les données, l'approche suivante peut être envisagée&nbsp;:
<programlisting>BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
</programlisting>
   </para>
  </important>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>ANALYZE</literal></term>
    <listitem>
     <para>
      Exécute la commande et affiche les temps d'exécution réels.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
     <para>
      Inclut la liste des colonnes en sortie pour chaque n&oelig;ud de l'arbre
      du plan.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">instruction</replaceable></term>
    <listitem>
     <para>
      Toute instruction <command>SELECT</command>, <command>INSERT</command>,
      <command>UPDATE</command>, <command>DELETE</command>, <command>VALUES</command>
      <command>EXECUTE</command>, <command>DECLARE</command> ou
      <command>CREATE TABLE AS</command> dont le plan
      d'exécution est souhaité.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   La documentation sur l'utilisation faite par l'optimiseur des informations de coût
   est assez réduite dans <productname>PostgreSQL</productname>. On peut se référer
   à <xref linkend="using-explain"/> pour plus d'informations.
  </para>
  <para>
   Pour que le planificateur de requêtes de <productname>PostgreSQL</productname>
   puisse prendre des décisions en connaissance de cause, l'instruction
   <xref linkend="sql-analyze" endterm="sql-analyze-title"/> doit avoir été exécutée afin d'enregistrer 
   les statistiques de distribution des données dans la table.
   Si cela n'a pas été fait, (ou si la distribution statistique des
   données dans la table a changé de manière significative depuis
   la dernière exécution de la commande <command>ANALYZE</command>)
   les coûts estimés risquent de ne pas refléter les propriétés réelles de
   la requête. De ce fait, un plan de requête inférieur risque d'être choisi.
  </para>

  <para>
   L'optimiseur génétique de requêtes (<acronym>GEQO</acronym>) teste des
   plans d'exécution au hasard. Ainsi, quand le nombre de relations de jointures est supérieur
   <xref linkend="guc-geqo-threshold"/>, ce qui implique son utilisation, 
   le plan d'exécution risque d'être différent à chaque exécution
   de la requête.
  </para>

  <para>
   Pour mesurer le coût d'exécution du plan d'exécution, l'implémentation
   actuelle de <command>EXPLAIN ANALYZE</command> peut ajouter un délai
   considérable à l'exécution de la requête à cause du profilage. De ce fait,
   exécuter <command>EXPLAIN ANALYZE</command> sur une requête peut prendre
   bien plus de temps que d'exécuter la requête seule. Ce délai dépend
   de la nature de la requête.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Afficher le plan d'une requête simple sur une table d'une seule
   colonne de type <type>integer</type> et 10000 lignes&nbsp;:

<programlisting>EXPLAIN SELECT * FROM foo;

                       QUERY PLAN
---------------------------------------------------------
 Seq Scan on foo  (cost=0.00..155.00 rows=10000 width=4)
(1 row)
</programlisting>
  </para>

  <para>
   S'il existe un index et que la requête contient une condition
   <literal>WHERE</literal> indexable, <command>EXPLAIN</command> peut
   afficher un plan différent&nbsp;:

<programlisting>EXPLAIN SELECT * FROM foo WHERE i = 4;

                         QUERY PLAN
--------------------------------------------------------------
 Index Scan using fi on foo  (cost=0.00..5.98 rows=1 width=4)
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>

  <para>
   Exemple de plan de requête pour une requête utilisant une
   fonction d'agrégat&nbsp;:

<programlisting>EXPLAIN SELECT sum(i) FROM foo WHERE i &lt; 10;

                             QUERY PLAN
---------------------------------------------------------------------
 Aggregate  (cost=23.93..23.93 rows=1 width=4)
   -&gt;  Index Scan using fi on foo  (cost=0.00..23.92 rows=6 width=4)
         Index Cond: (i &lt; 10)
(3 rows)
</programlisting>
  </para>

  <para>
   Exemple d'utilisation de <command>EXPLAIN EXECUTE</command> pour
   afficher le plan d'exécution d'une requête préparée&nbsp;:

<programlisting>PREPARE query(int, int) AS SELECT sum(bar) FROM test
    WHERE id &gt; $1 AND id &lt; $2
    GROUP BY foo;

EXPLAIN ANALYZE EXECUTE query(100, 200);

                                                       QUERY PLAN
-------------------------------------------------------------------------------------
 HashAggregate  (cost=39.53..39.53 rows=1 width=8) (actual time=0.661..0.672 rows=7 loops=1)
   -&gt;  Index Scan using test_pkey on test  (cost=0.00..32.97 rows=1311 width=8) (actual time=0.050..0.395 rows=99 loops=1)
         Index Cond: ((id &gt; $1) AND (id &lt; $2))
 Total runtime: 0.851 ms
(4 rows)
</programlisting>
  </para>
  <para>
   Il est évident que les nombres présentés ici dépendent du contenu
   effectif des tables impliquées. 
   De plus, les nombres, et la stratégie sélectionnée elle-même,
   peuvent différer en fonction de la version de <productname>PostgreSQL</productname>
   du fait des améliorations apportées au planificateur.
   Il faut également savoir que la commande <command>ANALYZE</command> calcule les statistiques
   des données à partir d'extraits aléatoires&nbsp;; il est de ce fait
   possible que les coûts estimés soient modifiés après l'exécution
   de cette commande, alors même la distribution réelle des données
   dans la table n'a pas changé.
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   L'instruction <command>EXPLAIN</command> n'est pas définie dans le
   standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-analyze" endterm="sql-analyze-title"/></member>
  </simplelist>
 </refsect1>
</refentry>
