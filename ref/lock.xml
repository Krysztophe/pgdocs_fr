<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/lock.sgml,v 1.10 2005/09/15 07:03:27 guillaume Exp $
PostgreSQL documentation
-->
<!-- SAS : 20060804 -->

<refentry id="sql-lock">
 <refmeta>
  <refentrytitle id="sql-lock-title">LOCK</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>LOCK</refname>
  <refpurpose>verrouiller une table</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>LOCK [ TABLE ] <replaceable class="parameter">nom</replaceable> [, ...] [ IN <replaceable class="parameter">mode_verrou</replaceable> MODE ] [ NOWAIT ]

où <replaceable class="parameter">mode_verrou</replaceable> peut être&nbsp;:

    ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-lock">
   <primary>LOCK</primary>
  </indexterm>

  <para>
   <command>LOCK TABLE</command> prend un verrou de niveau table, attendant
   si nécessaire que tout verrou conflictuel soit relâché. Si 
   <literal>NOWAIT</literal> est spécifié, <command>LOCK TABLE</command>
   n'attend pas l'acquisition du verrou désiré&nbsp;: s'il ne peut pas être
   obtenu immédiatement, la commande est annulée et une erreur est émise. Une
   fois obtenu, le verrou est conservé jusqu'à la fin de la transaction en cours.
   (Il n'y a pas de commande <command>UNLOCK TABLE</command>&nbsp;; les verrous
   sont systématiquement relâchés à la fin de la transaction.)
  </para>

  <para>
   Lors de l'acquisition automatique de verrous pour les commandes qui
   référencent des tables, <productname>PostgreSQL</productname> utilise
   toujours le mode de verrou le moins restrictif possible. <command>LOCK
   TABLE</command> est utilisable lorsqu'il est nécessaire d'obtenir des
   verrous plus restrictifs.
  </para>
  <para>
  Soit, par exemple, une application qui exécute
   une transaction de niveau d'isolation &laquo;&nbsp;lecture des
   validés&nbsp;&raquo; (<foreignphrase>Read Committed</foreignphrase>). Pour
   s'assurer que les données de la table sont immuables pendant toute la durée
   de la transaction, un verrou <literal>SHARE</literal> de niveau table 
   peut être obtenu avant d'effectuer la requête. Cela empêche toute modification
   concurrente des données. Cela assure également que toute lecture intervenant
   ensuite sur la table accède à la même vue des données validées. En effet, un
   verrou <literal>SHARE</literal> entre en conflit avec le verrou
   <literal>ROW EXCLUSIVE</literal> pris par les modificateurs et l'instruction
   <command>LOCK TABLE <replaceable class="parameter">nom</replaceable> IN SHARE MODE</command>
   attend que tout détenteur concurrent de verrous de mode
   <literal>ROW EXCLUSIVE</literal> valide ou annule. De ce fait, une fois le verrou obtenu,
   il ne reste aucune écriture non validée en attente&nbsp;; de plus, aucune ne peut
   commencer tant que le verrou acquis n'est pas relâché.
  </para>

  <para>
   Pour obtenir un effet similaire lors de l'exécution d'une transaction de
   niveau d'isolation sérialisable, il est nécessaire d'exécuter l'instruction
   <command>LOCK TABLE</command> avant toute instruction
   <command>SELECT</command> ou de modification de données. La vue des données
   utilisée par une transaction sérialisable est figée au moment où débute la
   première instruction <command>SELECT</command> ou de modification des données.
   Un <command>LOCK TABLE</command> ultérieur empêche encore les écritures concurrentes
   &mdash; mais il n'assure pas que la transaction lit les dernières données validées.
  </para>
  
  <para>
   Si une telle transaction modifie les données de la table, 
   elle doit utiliser le mode de verrou <literal>SHARE ROW EXCLUSIVE</literal> au
   lieu du mode <literal>SHARE</literal>. Cela assure l'exécution d'une seule 
   transaction de ce type à la fois. Sans cela, une situation de verrou mort est
   possible&nbsp;: deux transactions peuvent acquérir le mode
   <literal>SHARE</literal> et être ensuite incapables d'acquérir aussi le mode
   <literal>ROW EXCLUSIVE</literal> pour réellement effectuer leurs mises à jour.
   (Les verrous d'une transaction ne sont jamais en conflit. Une
   transaction peut de ce fait acquérir le mode <literal>ROW EXCLUSIVE</literal>
   alors qu'elle détient le mode <literal>SHARE</literal>
   &mdash; mais pas si une autre transaction détient le
   mode <literal>SHARE</literal>.) Pour éviter les verrous bloquants, il est
   préférable que toutes les transactions qui acquièrent des verrous sur les
   mêmes objets le fassent dans le même ordre. De plus si de multiples modes
   de verrous sont impliqués pour un même objet, le verrou de mode le plus
   restrictif doit être acquis le premier.
  </para>

  <para>
   Plus d'informations sur les modes de verrou et les stratégies de verrouillage
   sont disponibles dans <xref linkend="explicit-locking"/>.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom d'une table à verrouiller (éventuellement qualifié du nom du
	  schéma).
     </para>

     <para>
      La commande <literal>LOCK a, b;</literal> est équivalente à <literal>LOCK a; LOCK
      b;</literal>. Les tables sont verrouillées une par une dans l'ordre
	  précisé par la commande <command>LOCK TABLE</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">modeverrou</replaceable></term>
    <listitem>
     <para>
      Le mode de verrou précise les verrous avec lesquels ce verrou entre en conflit.
      Les modes de verrou sont décrits dans <xref linkend="explicit-locking"/>.
     </para>

     <para>
      Si aucun mode de verrou n'est précisé,
	  <literal>ACCESS EXCLUSIVE</literal>, mode le plus restrictif, est utilisé.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOWAIT</literal></term>
    <listitem>
     <para>
      <command>LOCK TABLE</command> n'attend pas que les verrous
      conflictuels soient relâchés&nbsp;: si le verrou indiqué ne peut être
      acquis immédiatement sans attente, la transaction est annulée.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

   <para>
    <literal>LOCK TABLE ... IN ACCESS SHARE MODE</literal> requiert les droits
    <literal>SELECT</literal> sur la table cible. Toutes les autres formes de
    <command>LOCK</command> requièrent les droits <literal>UPDATE</literal> et/ou
    <literal>DELETE</literal>.
   </para>

   <para>
    <command>LOCK TABLE</command> n'est utile qu'à l'intérieur d'un bloc
	transactionnel (paire <command>BEGIN</command>/<command>COMMIT</command>),
	puisque le verrou est supprimé dès que la transaction se termine. Une commande
    <command>LOCK</command> à l'extérieur de tout bloc transactionnel constitue
    une transaction auto-contenue. Le verrou est alors supprimé aussitôt obtenu.
   </para>

  <para>
   <command>LOCK TABLE</command> ne concernent que les verrous de niveau table.
   Les noms de mode contenant <literal>ROW</literal> sont donc tous mal nommés. Ces
   noms de modes doivent généralement être compris comme indiquant l'intention de
   l'utilisateur d'acquérir des verrous de niveau ligne à l'intérieur de la
   table verrouillée. Le mode <literal>ROW EXCLUSIVE</literal> est également un verrou
   de table partageable. Tous les modes de verrou ont des
   sémantiques identiques en ce qui concerne <command>LOCK TABLE</command>&nbsp;;
   ils ne diffèrent que dans les règles de conflit entre les modes. Pour des
   informations sur la façon d'acquérir un vrai verrou de niveau ligne, voir
   <xref linkend="locking-rows"/> et
   <xref linkend="sql-for-update-share" endterm="sql-for-update-share-title"/>
   dans la documentation de référence de <command>SELECT</command>.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Exemples</title>

  <para>
   Obtenir un verrou <literal>SHARE</literal> sur une table avec clé primaire avant
   de réaliser des insertions dans une table disposant de la clé
   étrangère&nbsp;:

<programlisting>BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films 
    WHERE nom = 'Star Wars : Episode I - La menace fantôme';
-- Effectuer un ROLLBACK si aucun enregistrement n'est retourné
INSERT INTO commentaires_films VALUES 
    (_id_, 'SUPER ! Je l''attendais depuis si longtemps !');
COMMIT WORK;
</programlisting>
  </para>

  <para>
   Prendre un verrou <literal>SHARE ROW EXCLUSIVE</literal> sur une table avec clé
   primaire lors du début des opérations de suppression&nbsp;:

<programlisting>BEGIN WORK;
LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM commentaires_films WHERE id IN
    (SELECT id FROM films WHERE score &lt; 5);
DELETE FROM films WHERE score &lt; 5;
COMMIT WORK;
</programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>
	  
  <para>
   <command>LOCK TABLE</command> n'existe pas dans le standard SQL. &Agrave; la
   place, il utilise <command>SET TRANSACTION</command> pour spécifier les niveaux
   de concurrence entre transactions. <productname>PostgreSQL</productname> en
   dispose également&nbsp;; voir
   <xref linkend="sql-set-transaction" endterm="sql-set-transaction-title"/> pour les détails.
  </para>

  <para>
   &Agrave; l'exception des modes de verrous <literal>ACCESS SHARE</literal>,
   <literal>ACCESS EXCLUSIVE</literal> et <literal>SHARE UPDATE EXCLUSIVE</literal>,
   les modes de verrou <productname>PostgreSQL</productname> et la syntaxe
   <command>LOCK TABLE</command> sont compatibles avec ceux présents dans
   <productname>Oracle</productname>.
  </para>
 </refsect1>
</refentry>
