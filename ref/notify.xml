<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060707 : Relecture initiale -->

<refentry id="sql-notify">
 <refmeta>
  <refentrytitle id="sql-notify-title">NOTIFY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>NOTIFY</refname>
  <refpurpose>engendrer une notification</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>NOTIFY <replaceable class="parameter">nom</replaceable>        
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-notify">
   <primary>NOTIFY</primary>
  </indexterm>

  <para>
   La commande <command>NOTIFY</command> envoie une notification
   à chaque application cliente qui a exécuté précédemment la commande
   <command>LISTEN <replaceable class="parameter">nom</replaceable></command>
   dans la base de données courante pour le nom de notification indiqué.
  </para>

  <para>
   <command>NOTIFY</command> fournit une forme simple de signal ou de mécanisme
   de communication interprocessus pour tout ensemble de processus accédant à
   la même base de données <productname>PostgreSQL</productname>. Des mécanismes
   de plus haut niveau peuvent être construits en utilisant les tables de la base
   de données pour passer des données supplémentaires (au-delà du simple nom de
   notification) du notifieur aux écouteurs.
  </para>

  <para>
   L'information passée au client pour une notification inclut le
   nom de la notification et le <acronym>PID</acronym> du processus serveur de la session
   le notifiant. C'est au concepteur de la base de données de définir les noms
   de notification utilisés dans une base de données précise et la
   signification de chacun.
  </para>

  <para>
   Habituellement, le nom de notification correspond au nom d'une table
   dans la base de données. L'événement notify signifie
   essentiellement <quote>J'ai modifié cette table, jetez-y un &oelig;il pour
   vérifier ce qu'il y a de nouveau</quote>. Mais cette association n'est 
   pas contrôlée par les commandes <command>NOTIFY</command> et
   <command>LISTEN</command>. Un concepteur de bases de données
   peut, par exemple, utiliser plusieurs noms de notification différents pour signaler
   différentes sortes de modifications au sein d'une même table.
  </para>

  <para>
   Lorsque <command>NOTIFY</command> est utilisé pour signaler des
   modifications sur une table particulière, une technique de programmation
   utile est de placer le <command>NOTIFY</command> dans une règle 
   déclenchée par les mises à jour de la table. De cette façon, la notification
   est automatique lors d'une modification de la table et le programmeur
   de l'application ne peut accidentellement oublier de le faire.
  </para>

  <para>
   <command>NOTIFY</command> interagit fortement avec les transactions SQL.
   Primo, si un <command>NOTIFY</command> est exécuté
   à l'intérieur d'une transaction, les événements notify ne sont pas délivrés
   avant que la transaction ne soit validée, et à cette condition uniquement.
   En effet, si la transaction est annulée, les commandes qu'elle 
   contient n'ont aucun effet, y compris <command>NOTIFY</command>. 
   Cela peut toutefois s'avérer déconcertant pour quiconque s'attend à une
   délivrance immédiate des notifications.
  </para>
  <para>
   Secondo, si une session à l'écoute reçoit un signal de notification alors
   qu'une transaction y est active, la notification n'est pas délivrée au client
   connecté avant la fin de cette transaction (par validation ou annulation).
   Là encore, si une notification est délivrée à l'intérieur d'une transaction
   finalement annulée, on pourrait espérer annuler cette notification par
   quelque moyen &mdash; 
   mais le serveur ne peut pas <quote>reprendre</quote> une notification déjà
   envoyée au client. C'est pourquoi les notifications ne sont
   délivrés qu'entre les transactions. Il est, de ce fait, important que les
   applications qui utilisent <command>NOTIFY</command> pour l'envoi de signaux
   en temps réel conservent des transactions courtes.
  </para>

  <para>
   <command>NOTIFY</command> se comporte comme les signaux Unix sur un
   point important&nbsp;: si le même nom de notification est signalé
   successivement et rapidement plusieurs fois, les récepteurs peuvent ne
   recevoir qu'un unique événement de notification pour plusieurs exécutions de
   <command>NOTIFY</command>. Il est donc malhabile de dépendre du
   nombre de notifications reçues. À la place, <command>NOTIFY</command> peut
   être utilisé pour réveiller les applications qui doivent être averties d'un
   évènement et un objet de bases de données (tel une séquence) utilisé pour
   garder une trace de ce qui s'est passé ou du nombre de fois que cela s'est
   produit.
  </para>

  <para>
   Il est courant qu'un client qui exécute <command>NOTIFY</command>
   écoute lui-même des notifications de même nom. Dans ce cas, il récupère une
   notification, comme toutes les autres sessions en écoute.
   Suivant la logique de l'application, cela peut engendre un travail
   inutile, par exemple lire une table de la base de données pour trouver les
   mises à jour que cette session a elle-même écrites. Il est possible d'éviter
   ce travail supplémentaire en verifiant si le <acronym>PID</acronym> du processus
   serveur de la session notifiante (fourni dans le message d'événement de la
   notification) est le même que le <acronym>PID</acronym> de la session
   courante (disponible à partir de <application>libpq</application>).
   S'ils sont identiques, la notification est le retour du travail actuel et
   peut être ignorée. (En dépit de ce qui est dit dans le paragraphe qui précède,
   cette technique est sûre. <productname>PostgreSQL</productname> distingue les
   notifications propres des notifications en provenance d'autres
   sessions&nbsp;; il n'y a donc aucun risque de passer à côté d'une
   notification externe lorsque les notifications propres sont ignorées.)
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Nom de la notification à signaler (identifiant quelconque).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Configurer et exécuter une séquence listen/notify à partir de
   <application>psql</application>&nbsp;:

<programlisting>LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448.
</programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Il n'y a pas d'instruction <command>NOTIFY</command> dans le standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-listen" endterm="sql-listen-title"/></member>
   <member><xref linkend="sql-unlisten" endterm="sql-unlisten-title"/></member>
  </simplelist>
 </refsect1>
</refentry>
