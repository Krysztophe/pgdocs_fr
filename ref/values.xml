<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header$
PostgreSQL documentation
-->

<refentry id="sql-values">
 <refmeta>
  <refentrytitle id="sql-values-title">VALUES</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>VALUES</refname>
  <refpurpose>calcule un ensemble de lignes</refpurpose>
 </refnamediv>

 <indexterm zone="sql-values">
  <primary>VALUES</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
VALUES ( <replaceable class="parameter">expression</replaceable> [, ...] ) [, ...]
    [ ORDER BY <replaceable class="parameter">expression_de_tri</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operateur</replaceable> ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">nombre</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">debut</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>VALUES</command> calcule une valeur de ligne ou un ensemble de
   valeurs de lignes spécifiées par des expressions. C'est généralement
   utilisé pour générer une <quote>table statique</quote> à l'intérieur d'une
   commande plus large mais elle peut aussi être utilisée séparément.
  </para>

  <para>
   Quand plus d'une ligne est indiquée, toutes les lignes doivent avoir le même
   nombre d'éléments. Les types de données des colonnes de la table résultante
   sont déterminés en combinant les types explicites et les types inférés des
   expressions apparaissant dans cette colonne, en utilisant les mêmes règles
   que pour l'<literal>UNION</literal> (voir <xref linkend="typeconv-union-case"/>).
  </para>

  <para>
   À l'intérieur de grosses commandes, <command>VALUES</command> est autorisé
   au niveau de la syntaxe partout où la commande <command>SELECT</command>
   l'est. Comme la grammaire traite cette commande comme un
   <command>SELECT</command>, il est possible d'utiliser les clauses
   <literal>ORDER BY</literal>, <literal>LIMIT</literal> et
   <literal>OFFSET</literal> avec une commande <command>VALUES</command>.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
     <para>
      Une constante ou une expression à calculer et à insérer à l'emplacement
      indiqué dans la table résultante (ensemble de lignes). Dans une liste
      <command>VALUES</command> apparaissant en haut d'une commande
      <command>INSERT</command>, une
      <replaceable class="parameter">expression</replaceable> peut être remplacée
      par <literal>DEFAULT</literal> pour demander l'insertion de la valeur par
      défaut de la colonne de destination. <literal>DEFAULT</literal> ne peut
      pas être utilisé quand <command>VALUES</command> apparaît dans d'autres
      contextes.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression_de_tri</replaceable></term>
    <listitem>
     <para>
      Une expression ou un entier indiquant comment trier les lignes de
      résultat. Cette expression peut faire référence aux colonnes de
      <command>VALUES</command> en tant que <literal>column1</literal>,
      <literal>column2</literal>, etc. Pour plus de détails, voir
      <xref linkend="sql-orderby" endterm="sql-orderby-title"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operateur</replaceable></term>
    <listitem>
     <para>
      Un opérateur de tri. Pour plus de détails, voir
      <xref linkend="sql-orderby" endterm="sql-orderby-title"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nombre</replaceable></term>
    <listitem>
     <para>
      Le nombre maximum de lignes à renvoyer. Pour plus de détails, voir
      <xref linkend="sql-limit" endterm="sql-limit-title"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">debut</replaceable></term>
    <listitem>
     <para>
      Le nombre de lignes à échapper avant de commencer à renvoyer des lignes.
      Pour plus de détails,
      <xref linkend="sql-limit" endterm="sql-limit-title"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Évitez les listes <command>VALUES</command> comprenant un très grand nombre
   de lignes car vous pourriez rencontrer des problèmes comme un manque de
   mémoire et/ou des performances pauvres. Un <command>VALUES</command>
   apparaissant dans un <command>INSERT</command> est un cas spécial (parce que
   le type des colonnes est trouvé à partir de la table cible du
   <command>INSERT</command> et n'a donc pas besoin d'être deviné en parcourant
   la liste <command>VALUES</command>), du coup il peut gérer des listes plus
   importantes que dans d'autres contextes.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Une simple commande <command>VALUES</command>&nbsp;:

<programlisting>
VALUES (1, 'un'), (2, 'deux'), (3, 'trois');
</programlisting>

   Ceci renverra une table statique comprenant deux colonnes et trois lignes.
   En fait, c'est équivalent à&nbsp;:

<programlisting>
SELECT 1 AS column1, 'un' AS column2
UNION ALL
SELECT 2, 'deux'
UNION ALL
SELECT 3, 'trois';
</programlisting>

  </para>

  <para>
   Plus généralement, <command>VALUES</command> est utilisé dans une commande
   SQL plus importante. L'utilisation la plus fréquente est dans un
   <command>INSERT</command>&nbsp;:

<programlisting>
INSERT INTO films (code, titee, did, date_prod, genre)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drame');
</programlisting>
  </para>

  <para>
   Dans le contexte de la commande <command>INSERT</command>, les entrées
   d'une liste <command>VALUES</command> peuvent être
   <literal>DEFAULT</literal> pour indiquer que la valeur par défaut de la
   colonne ciblée doit être utilisée&nbsp;:

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comédie', '82 minutes'),
    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drame', DEFAULT);
</programlisting>
  </para>

  <para>
   <command>VALUES</command> peut aussi être utilisé là où un
   sous-<command>SELECT</command> peut être écrit, par exemple dans une clause
   <literal>FROM</literal>&nbsp;:

<programlisting>
SELECT f.*
  FROM films f, (VALUES('MGM', 'Horreur'), ('UA', 'Sci-Fi')) AS t (studio, genre)
  WHERE f.studio = t.studio AND f.genre = t.genre;

UPDATE employes SET salaire = salaire * v.augmentation
  FROM (VALUES(1, 200000, 1.2), (2, 400000, 1.4)) AS v (no_dep, cible, augmentation)
  WHERE employees.no_dep = v.no_dep AND employees.ventes &gt;= v.cible;
</programlisting>

   Notez qu'une clause <literal>AS</literal> est requise quand
   <command>VALUES</command> est utilisé dans une clause <literal>FROM</literal>,
   par exemple dans un <command>SELECT</command>. Il n'est pas nécessaire de
   spécifier les noms de toutes les colonnes dans une clause <literal>AS</literal>
   c'est une bonne pratique (les noms des colonnes par défaut pour
   <command>VALUES</command> sont <literal>column1</literal>,
   <literal>column2</literal>, etc dans <productname>PostgreSQL</productname>
   mais ces noms pourraient être différents dans d'autres SGBD).
  </para>

  <para>
   Quand <command>VALUES</command> est utilisé dans <command>INSERT</command>,
   les valeurs sont toutes automatiquement converties dans le type de données
   de la colonne destination correspondante. Quand elle est utilisée dans
   d'autres contextes, il pourrait être nécessaire de spécifier le bon type
   de données. Si les entrées sont toutes des constantes litérales entre
   guillemets, convertir la première est suffisante pour déterminer le type
   de toutes&nbsp;:

<programlisting>
SELECT * FROM machines
WHERE adresse_ip IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));
</programlisting>
  </para>

  <tip>
   <para>
    Pour de simples tests <literal>IN</literal>, il est préférable de se baser
    sur des listes de valeurs pour <literal>IN</literal> que d'écrire une
    requête <command>VALUES</command> comme indiquée ci-dessus. La méthode des
    listes de valeurs simples requiert moins d'écriture et est souvent plus
    efficace.
   </para>
  </tip>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>VALUES</command> est conforme au standard SQL, sauf en ce qui
   concerne les clauses <literal>LIMIT</literal> et <literal>OFFSET</literal>
   qui sont des extensions <productname>PostgreSQL</productname>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-insert" endterm="sql-insert-title"/></member>
   <member><xref linkend="sql-select" endterm="sql-select-title"/></member>
  </simplelist>
 </refsect1>
</refentry>
