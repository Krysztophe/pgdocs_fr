<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/func.sgml,v 1.9.2.7 2005/09/29 06:51:33 guillaume Exp $
PostgreSQL documentation
-->

 <chapter id="functions">
  <title>Fonctions et opérateurs</title>

  <indexterm zone="functions">
   <primary>fonction</primary>
  </indexterm>

  <indexterm zone="functions">
   <primary>opérateur</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname> fournit un grand nombre de fonctions
   et d'opérateurs pour les types de données intégrés. Les utilisateurs peuvent
   aussi définir leurs propres fonctions et opérateurs comme décrit dans
   <xref linkend="server-programming">. Les commandes <command>\df</command> et
   <command>\do</command> de <application>psql</application> sont utilisées
   pour afficher respectivement la liste de toutes les fonctions et de tous les
   opérateurs.
  </para>

  <para>
   Si la portabilité vous concerne, prenez note que la plupart des fonctions et
   opérateurs décrits dans ce chapitre, à l'exception des opérateurs
   arithmétiques et logiques les plus triviaux et quelques fonctions
   spécifiquement indiquées, ne font pas partie du standard
   <acronym>SQL</acronym>. Quelques-unes des fonctionnalités étendues sont
   présentes dans d'autres systèmes de gestion de bases de données
   <acronym>SQL</acronym> et dans la plupart des cas, ces fonctionnalités sont
   compatibles et cohérentes à de nombreuses implémentations.
  </para>


  <sect1 id="functions-logical">
   <title>Opérateurs logiques</title>

   <indexterm zone="functions-logical">
    <primary>opérateur</primary>
    <secondary>logique</secondary>
   </indexterm>

   <indexterm>
    <primary>booléen</primary>
    <secondary>opérateurs</secondary>
    <see>opérateurs, logique</see>
   </indexterm>

   <para>
    Voici la liste des opérateurs logiques habituels&nbsp;:

    <indexterm>
     <primary>AND (opérateur)</primary>
    </indexterm>

    <indexterm>
     <primary>OR (opérateur)</primary>
    </indexterm>

    <indexterm>
     <primary>NOT (opérateur)</primary>
    </indexterm>

    <indexterm>
     <primary>conjonction</primary>
    </indexterm>

    <indexterm>
     <primary>disjonction</primary>
    </indexterm>

    <indexterm>
     <primary>négation</primary>
    </indexterm>

    <simplelist>
     <member><literal>AND</literal></member>
     <member><literal>OR</literal></member>
     <member><literal>NOT</literal></member>
    </simplelist>

    <acronym>SQL</acronym> utilise une logique booléenne à trois valeurs et où
     la valeur NULL représente <quote>inconnu</quote>. Observez les tables de
     vérité suivantes&nbsp;:

    <informaltable>
     <tgroup cols="4">
      <thead>
       <row>
        <entry><replaceable>a</replaceable></entry>
        <entry><replaceable>b</replaceable></entry>
        <entry><replaceable>a</replaceable> AND
<replaceable>b</replaceable></entry>
        <entry><replaceable>a</replaceable> OR
<replaceable>b</replaceable></entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry>TRUE</entry>
        <entry>TRUE</entry>
        <entry>TRUE</entry>
        <entry>TRUE</entry>
       </row>

       <row>
        <entry>TRUE</entry>
        <entry>FALSE</entry>
        <entry>FALSE</entry>
        <entry>TRUE</entry>
       </row>

       <row>
        <entry>TRUE</entry>
        <entry>NULL</entry>
        <entry>NULL</entry>
        <entry>TRUE</entry>
       </row>

       <row>
        <entry>FALSE</entry>
        <entry>FALSE</entry>
        <entry>FALSE</entry>
        <entry>FALSE</entry>
       </row>

       <row>
        <entry>FALSE</entry>
        <entry>NULL</entry>
        <entry>FALSE</entry>
        <entry>NULL</entry>
       </row>

       <row>
        <entry>NULL</entry>
        <entry>NULL</entry>
        <entry>NULL</entry>
        <entry>NULL</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry><replaceable>a</replaceable></entry>
        <entry>NOT <replaceable>a</replaceable></entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry>TRUE</entry>
        <entry>FALSE</entry>
       </row>

       <row>
        <entry>FALSE</entry>
        <entry>TRUE</entry>
       </row>

       <row>
        <entry>NULL</entry>
        <entry>NULL</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>

   <para>
    Les opérateurs <literal>AND</literal> et <literal>OR</literal> sont
    commutatifs, c'est-à-dire que l'échange des opérandes gauche et
    droit n'affecte pas le résultat. Mais, voir <xref
    linkend="syntax-express-eval"> pour plus d'informations sur l'ordre
    d'évaluation des sous-expressions.
   </para>
  </sect1>

  <sect1 id="functions-comparison">
   <title>Opérateurs de comparaison</title>

   <indexterm zone="functions-comparison">
    <primary>comparaison</primary>
    <secondary>opérateurs</secondary>
   </indexterm>

   <para>
    Les opérateurs de comparaison habituels sont disponibles, comme l'indique
    <xref linkend="functions-comparison-table">.
   </para>

   <table id="functions-comparison-table">
    <title>Opérateurs de comparaison</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Opérateur</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry> <literal>&lt;</literal> </entry>
       <entry>inférieur à</entry>
      </row>

      <row>
       <entry> <literal>&gt;</literal> </entry>
       <entry>supérieur à</entry>
      </row>

      <row>
       <entry> <literal>&lt;=</literal> </entry>
       <entry>inférieur ou égal à</entry>
      </row>

      <row>
       <entry> <literal>&gt;=</literal> </entry>
       <entry>supérieur ou égal à</entry>
      </row>

      <row>
       <entry> <literal>=</literal> </entry>
       <entry>égal à</entry>
      </row>

      <row>
       <entry> <literal>&lt;&gt;</literal> ou <literal>!=</literal> </entry>
       <entry>différent de</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <note>
    <para>
     L'opérateur <literal>!=</literal> est converti en
     <literal>&lt;&gt;</literal> au moment de l'analyse. Il n'est pas possible
     d'implémenter les opérateurs <literal>!=</literal> et
     <literal>&lt;&gt;</literal> pour faire d'autres choses.
    </para>
   </note>

   <para>
    Les opérateurs de comparaison sont disponibles pour tous les types de
    données où cela a un sens. Tous les opérateurs de comparaison sont des
    opérateurs binaires renvoyant des valeurs du type <type>boolean</type>;
    des expressions comme <literal>1 &lt; 2 &lt; 3</literal> ne sont pas valides
    (car il n'existe pas d'opérateur <literal>&lt;</literal> pour comparer une
    valeur booléenne avec <literal>3</literal>).
   </para>

   <para>
    <indexterm>
     <primary>entre</primary>
    </indexterm>
    En plus des opérateurs de comparaison, la construction spéciale
    <token>BETWEEN</token> est disponible.
<indexterm><primary>BETWEEN</primary></indexterm>
<synopsis>
<replaceable>a</replaceable> BETWEEN <replaceable>x</replaceable> AND
<replaceable>y</replaceable>
</synopsis>
    est équivalent à
<synopsis>
<replaceable>a</replaceable> &gt;= <replaceable>x</replaceable> AND
<replaceable>a</replaceable> &lt;= <replaceable>y</replaceable>
</synopsis>
    De même,
<synopsis>
<replaceable>a</replaceable> NOT BETWEEN <replaceable>x</replaceable> AND
<replaceable>y</replaceable>
</synopsis>
    est équivalent à
<synopsis>
<replaceable>a</replaceable> &lt; <replaceable>x</replaceable> OR
<replaceable>a</replaceable> &gt; <replaceable>y</replaceable>
</synopsis>
    Il n'y a pas de différence entre les deux formes respectives si ce n'est
    les cycles <acronym>CPU</acronym> requis pour ré-écrire en interne la
    première sous la forme de la seconde.
   </para>

   <para>
    Pour vérifier si une valeur est NULL ou non, utilisez les constructions
<synopsis>
<replaceable>expression</replaceable> IS NULL
<replaceable>expression</replaceable> IS NOT NULL
</synopsis>
    ou la construction équivalente, non standard,
<synopsis>
<replaceable>expression</replaceable> ISNULL
<replaceable>expression</replaceable> NOTNULL
</synopsis>
    <indexterm><primary>valeur
NULL</primary><secondary>comparaison</secondary></indexterm>
   </para>

   <para>
    N'écrivez <emphasis>pas</emphasis>
    <literal><replaceable>expression</replaceable> = NULL</literal>
    parce que <literal>NULL</literal> n'est pas <quote>égal à</quote>
    <literal>NULL</literal>. (La valeur NULL représente une valeur inconnue,
    et il est impossible de dire si deux valeurs inconnues sont égales.)
   </para>

   <para>
    Quelques applications pourraient (de façon erroné) requérir que
    <literal><replaceable>expression</replaceable> = NULL</literal>
    renvoie true si <replaceable>expression</replaceable> s'évalue comme
    la valeur NULL. Pour supporter ces applications, l'option à l'exécution
    <varname>transform_null_equals</varname> peut être activée (c'est-à-dire
    <literal>SET transform_null_equals TO ON;</literal>).
    <productname>PostgreSQL</productname> convertira alors les clauses
    <literal>x = NULL</literal> en <literal>x IS NULL</literal>. C'était le
    comportement par défaut des versions 6.5 à 7.1.
   </para>

   <para>
    Les valeurs booléennes peuvent aussi être testées en utilisant les
    constructions
<synopsis>
<replaceable>expression</replaceable> IS TRUE
<replaceable>expression</replaceable> IS NOT TRUE
<replaceable>expression</replaceable> IS FALSE
<replaceable>expression</replaceable> IS NOT FALSE
<replaceable>expression</replaceable> IS UNKNOWN
<replaceable>expression</replaceable> IS NOT UNKNOWN
</synopsis>
    Elles sont similaires à <literal>IS NULL</literal> dans le fait qu'elles
    renverront toujours true ou false, jamais une valeur NULL, même quand
    l'opérande est NULL. Une entrée NULL est traitée comme la valeur logique
    <quote>inconnue</quote>.
   </para>
  </sect1>

  <sect1 id="functions-math">
   <title>Fonctions et opérateurs mathématiques</title>

   <para>
    Des opérateurs mathématiques sont fournis pour beaucoup de types
    <productname>PostgreSQL</productname>. Pour les types sans conventions
    mathématiques communes pour toutes les permutations possibles (c'est-à-dire
    les types dates/time), nous décrivons le comportement actuel dans les
    sections ci-dessous.
   </para>

   <para>
    <xref linkend="functions-math-op-table"> affiche les opérateurs
    mathématiques disponibles.
   </para>

   <table id="functions-math-op-table">
    <title>Opérateurs mathématiques</title>

    <tgroup cols="4">
     <thead>
      <row>
       <entry>Opérateur</entry>
       <entry>Description</entry>
       <entry>Exemple</entry>
       <entry>Résultat</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry> <literal>+</literal> </entry>
       <entry>addition</entry>
       <entry><literal>2 + 3</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
       <entry> <literal>-</literal> </entry>
       <entry>soustraction</entry>
       <entry><literal>2 - 3</literal></entry>
       <entry><literal>-1</literal></entry>
      </row>

      <row>
       <entry> <literal>*</literal> </entry>
       <entry>multiplication</entry>
       <entry><literal>2 * 3</literal></entry>
       <entry><literal>6</literal></entry>
      </row>

      <row>
       <entry> <literal>/</literal> </entry>
       <entry>division (la division entière tronque les résultats)</entry>
       <entry><literal>4 / 2</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

      <row>
       <entry> <literal>%</literal> </entry>
       <entry>modulo (reste)</entry>
       <entry><literal>5 % 4</literal></entry>
       <entry><literal>1</literal></entry>
      </row>

      <row>
       <entry> <literal>^</literal> </entry>
       <entry>exponentiel</entry>
       <entry><literal>2.0 ^ 3.0</literal></entry>
       <entry><literal>8</literal></entry>
      </row>

      <row>
       <entry> <literal>|/</literal> </entry>
       <entry>racine carrée</entry>
       <entry><literal>|/ 25.0</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
       <entry> <literal>||/</literal> </entry>
       <entry>racine cubique</entry>
       <entry><literal>||/ 27.0</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
       <entry> <literal>!</literal> </entry>
       <entry>factoriel</entry>
       <entry><literal>5 !</literal></entry>
       <entry><literal>120</literal></entry>
      </row>

      <row>
       <entry> <literal>!!</literal> </entry>
       <entry>factoriel (opérateur préfixe)</entry>
       <entry><literal>!! 5</literal></entry>
       <entry><literal>120</literal></entry>
      </row>

      <row>
       <entry> <literal>@</literal> </entry>
       <entry>valeur absolue</entry>
       <entry><literal>@ -5.0</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
       <entry> <literal>&amp;</literal> </entry>
       <entry>AND bit par bit</entry>
       <entry><literal>91 &amp; 15</literal></entry>
       <entry><literal>11</literal></entry>
      </row>

      <row>
       <entry> <literal>|</literal> </entry>
       <entry>OR bit par bit</entry>
       <entry><literal>32 | 3</literal></entry>
       <entry><literal>35</literal></entry>
      </row>

      <row>
       <entry> <literal>#</literal> </entry>
       <entry>XOR bit par bit</entry>
       <entry><literal>17 # 5</literal></entry>
       <entry><literal>20</literal></entry>
      </row>

      <row>
       <entry> <literal>~</literal> </entry>
       <entry>NOT bit par bit</entry>
       <entry><literal>~1</literal></entry>
       <entry><literal>-2</literal></entry>
      </row>

      <row>
       <entry> <literal>&lt;&lt;</literal> </entry>
       <entry>décalage gauche</entry>
       <entry><literal>1 &lt;&lt; 4</literal></entry>
       <entry><literal>16</literal></entry>
      </row>

      <row>
       <entry> <literal>&gt;&gt;</literal> </entry>
       <entry>décalage droit</entry>
       <entry><literal>8 &gt;&gt; 2</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
    Les opérateurs bit à bit sont aussi disponibles pour les types de chaînes
    de bit <type>bit</type> et <type>bit varying</type>, comme l'indique
    <xref linkend="functions-math-bit-table">.
    Les opérandes de chaînes de bits <literal>&amp;</literal>,
    <literal>|</literal> et <literal>#</literal> doivent être de même longueur. 
    Lors d'un décalage de bits, la longueur original de la chaîne est
    conservée, comme indiquée dans la table.
   </para>

    <table id="functions-math-bit-table">
     <title>Opérateurs bit à bit pour les chaînes de bit</title>

     <tgroup cols="2">
      <thead>
       <row>
        <entry>Exemple</entry>
        <entry>Résultat</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>B'10001' &amp; B'01101'</literal></entry>
        <entry><literal>00001</literal></entry>
       </row>
       <row>
        <entry><literal>B'10001' | B'01101'</literal></entry>
        <entry><literal>11101</literal></entry>
       </row>
       <row>
        <entry><literal>B'10001' # B'01101'</literal></entry>
        <entry><literal>11100</literal></entry>
       </row>
       <row>
        <entry><literal>~ B'10001'</literal></entry>
        <entry><literal>01110</literal></entry>
       </row>
       <row>
        <entry><literal>B'10001' &lt;&lt; 3</literal></entry>
        <entry><literal>01000</literal></entry>
       </row>
       <row>
        <entry><literal>B'10001' &gt;&gt; 2</literal></entry>
        <entry><literal>00100</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   <xref linkend="functions-math-func-table"> affiche les fonctions
   mathématiques disponibles. Dans la table, <literal>dp</literal>
   signifie <type>double precision</type>. Beaucoup de ces fonctions sont
   fournies dans de nombreuses formes composées de types d'argument différents.
   Sauf lorsque c'est indiqué, toute forme donnée d'une fonction renvoie le
   même type de données que son argument.
   Les fonctions utilisant des données de type <type>double
   precision</type> sont pour la plupart implémentées avec la bibliothèque C du
   système hôte&nbsp;; la précision et le comportement dans les cas
   particuliers peuvent varier suivant le système hôte.
  </para>

   <table id="functions-math-func-table">
    <title>Fonctions mathématiques</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Fonction</entry>
       <entry>Type renvoyé</entry>
       <entry>Description</entry>
       <entry>Exemple</entry>
       <entry>Résultat</entry>
      </row>
     </thead>

     <tbody>
      <row>
      
<entry><literal><function>abs</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>(identique à <replaceable>x</replaceable>)</entry>
       <entry>valeur absolue</entry>
       <entry><literal>abs(-17.4)</literal></entry>
       <entry><literal>17.4</literal></entry>
      </row>

      <row>
      
<entry><literal><function>cbrt</function>(<type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry>racine cubique</entry>
       <entry><literal>cbrt(27.0)</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
       <entry><literal><function>ceil</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>plus petit entier supérieur à l'argument</entry>
       <entry><literal>ceil(-42.8)</literal></entry>
       <entry><literal>-42</literal></entry>
      </row>

      <row>
      
<entry><literal><function>degrees</function>(<type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry>radians vers degrés</entry>
       <entry><literal>degrees(0.5)</literal></entry>
       <entry><literal>28.6478897565412</literal></entry>
      </row>

      <row>
       <entry><literal><function>exp</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>exponentiel</entry>
       <entry><literal>exp(1.0)</literal></entry>
       <entry><literal>2.71828182845905</literal></entry>
      </row>

      <row>
       <entry><literal><function>floor</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>plus grand entier inférieur à l'argument</entry>
       <entry><literal>floor(-42.8)</literal></entry>
       <entry><literal>-43</literal></entry>
      </row>

      <row>
       <entry><literal><function>ln</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>logarithme</entry>
       <entry><literal>ln(2.0)</literal></entry>
       <entry><literal>0.693147180559945</literal></entry>
      </row>

      <row>
       <entry><literal><function>log</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>logarithme base 10</entry>
       <entry><literal>log(100.0)</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

      <row>
       <entry><literal><function>log</function>(<parameter>b</parameter>
<type>numeric</type>,
        <parameter>x</parameter> <type>numeric</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry>logarithm en base <parameter>b</parameter></entry>
       <entry><literal>log(2.0, 64.0)</literal></entry>
       <entry><literal>6.0000000000</literal></entry>
      </row>

      <row>
       <entry><literal><function>mod</function>(<parameter>y</parameter>,
        <parameter>x</parameter>)</literal></entry>
       <entry>(identiques aux types des arguments)</entry>
       <entry>reste de
<parameter>y</parameter>/<parameter>x</parameter></entry>
       <entry><literal>mod(9,4)</literal></entry>
       <entry><literal>1</literal></entry>
      </row>

      <row>
       <entry><literal><function>pi</function>()</literal></entry>
       <entry><type>dp</type></entry>
       <entry>constante <quote>&pi;</quote></entry>
       <entry><literal>pi()</literal></entry>
       <entry><literal>3.14159265358979</literal></entry>
      </row>

      <row>
       <entry><literal><function>pow</function>(<parameter>a</parameter>
<type>dp</type>,
        <parameter>b</parameter> <type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry><parameter>a</parameter> élevé à la puissance
<parameter>b</parameter></entry>
       <entry><literal>pow(9.0, 3.0)</literal></entry>
       <entry><literal>729</literal></entry>
      </row>

      <row>
       <entry><literal><function>pow</function>(<parameter>a</parameter>
<type>numeric</type>,
        <parameter>b</parameter> <type>numeric</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry><parameter>a</parameter> élevé à la puissance
<parameter>b</parameter></entry>
       <entry><literal>pow(9.0, 3.0)</literal></entry>
       <entry><literal>729</literal></entry>
      </row>

      <row>
      
<entry><literal><function>radians</function>(<type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry>degrés vers radians</entry>
       <entry><literal>radians(45.0)</literal></entry>
       <entry><literal>0.785398163397448</literal></entry>
      </row>

      <row>
       <entry><literal><function>random</function>()</literal></entry>
       <entry><type>dp</type></entry>
       <entry>valeur au hasard entre 0.0 et 1.0</entry>
       <entry><literal>random()</literal></entry>
       <entry></entry>
      </row>

      <row>
       <entry><literal><function>round</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>arrondi à l'entier le plus proche</entry>
       <entry><literal>round(42.4)</literal></entry>
       <entry><literal>42</literal></entry>
      </row>

      <row>
       <entry><literal><function>round</function>(<parameter>v</parameter>
<type>numeric</type>, <parameter>s</parameter>
<type>integer</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry>arrondi pour <parameter>s</parameter> décimales</entry>
       <entry><literal>round(42.4382, 2)</literal></entry>
       <entry><literal>42.44</literal></entry>
      </row>

      <row>
      
<entry><literal><function>setseed</function>(<type>dp</type>)</literal></entry>
       <entry><type>int32</type></entry>
       <entry>initialise la recherche pour les appels
 à <literal>random()</literal></entry>
       <entry><literal>setseed(0.54823)</literal></entry>
       <entry><literal>1177314959</literal></entry>
      </row>

      <row>
       <entry><literal><function>sign</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>signe de l'argument (-1, 0, +1)</entry>
       <entry><literal>sign(-8.4)</literal></entry>
       <entry><literal>-1</literal></entry>
      </row>

      <row>
       <entry><literal><function>sqrt</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>racine carré</entry>
       <entry><literal>sqrt(2.0)</literal></entry>
       <entry><literal>1.4142135623731</literal></entry>
      </row>

      <row>
       <entry><literal><function>trunc</function>(<type>dp</type> ou
<type>numeric</type>)</literal></entry>
       <entry>(identique à l'argument)</entry>
       <entry>tronque vers zéro</entry>
       <entry><literal>trunc(42.8)</literal></entry>
       <entry><literal>42</literal></entry>
      </row>

      <row>
       <entry><literal><function>trunc</function>(<parameter>v</parameter>
<type>numeric</type>, <parameter>s</parameter>
<type>integer</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry>tronque sur <parameter>s</parameter> décimales</entry>
       <entry><literal>trunc(42.4382, 2)</literal></entry>
       <entry><literal>42.43</literal></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

  <para>
   Enfin, <xref linkend="functions-math-trig-table"> affiche les fonctions
   trigonométriques disponibles. Toutes les fonctions trigonométriques prennent
   des arguments et renvoient des valeurs de type <type>double precision</type>.
  </para>

   <table id="functions-math-trig-table">
    <title>Fonctions trigonométriques</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Fonction</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
      
<entry><literal><function>acos</function>(<replaceable>x</replaceable>)</literal
></entry>
       <entry>cosinus inversé</entry>
      </row>

      <row>
      
<entry><literal><function>asin</function>(<replaceable>x</replaceable>)</literal
></entry>
       <entry>sinus inverse</entry>
      </row>

      <row>
      
<entry><literal><function>atan</function>(<replaceable>x</replaceable>)</literal
></entry>
       <entry>tangente inverse</entry>
      </row>

      <row>
       <entry><literal><function>atan2</function>(<replaceable>x</replaceable>,
        <replaceable>y</replaceable>)</literal></entry>
       <entry>tangent inverse de
<literal><replaceable>x</replaceable>/
<replaceable>y</replaceable></literal></entry>
      </row>

      <row>
      
<entry><literal><function>cos</function>(<replaceable>x</replaceable>)</literal>
</entry>
       <entry>cosinus</entry>
      </row>

      <row>
      
<entry><literal><function>cot</function>(<replaceable>x</replaceable>)</literal>
</entry>
       <entry>cotangente</entry>
      </row>

      <row>
      
<entry><literal><function>sin</function>(<replaceable>x</replaceable>)</literal>
</entry>
       <entry>sinus</entry>
      </row>

      <row>
      
<entry><literal><function>tan</function>(<replaceable>x</replaceable>)</literal>
</entry>
       <entry>tangente</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect1>


  <sect1 id="functions-string">
   <title>Fonctions et opérateurs de chaînes</title>

   <para>
    Cette section décrit les fonctions et opérateurs pour examiner et manipuler
    des valeurs de type chaîne de caractères. Dans ce contexte, les chaînes
    incluent les valeurs des types <type>character</type>, <type>character
    varying</type> et <type>text</type>. Sauf cas contraire précisé, toutes les
    fonctions listées ci-dessous fonctionnent sur tous ces types mais faites
    attention des effets potentiels du remplissage automatique lors de
    l'utilisation du type <type>character</type>. Généralement, les fonctions
    décrites ici fonctionnent aussi sur les données d'autres types en
    convertissant au préalable la donnée en une représentation de type chaîne.
    Quelques fonctions existent aussi nativement pour le type chaînes bit à
    bit.
   </para>

   <para>
    <acronym>SQL</acronym> définit quelques fonctions de type chaîne avec une
    syntaxe particulière où certains mots clés sont utilisés à la place de
    virgule pour séparer les arguments. Des détails sont disponibles dans
    <xref linkend="functions-string-sql">. Ces fonctions sont aussi
    implémentées en utilisant la syntaxe rationnelle pour l'appel de fonctions.
    (Voir <xref linkend="functions-string-other">.)
   </para>

   <table id="functions-string-sql">
    <title>Fonctions et opérateurs <acronym>SQL</acronym> pour le type
chaîne</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Fonction</entry>
       <entry>Type renvoyé</entry>
       <entry>Description</entry>
       <entry>Exemple</entry>
       <entry>Résultat</entry>  
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><parameter>string</parameter> <literal>||</literal>
        <parameter>string</parameter></literal></entry>
       <entry> <type>text</type> </entry>
       <entry>
        Concaténation de chaîne
        <indexterm>
         <primary>chaîne de caractères</primary>
         <secondary>concaténation</secondary>
        </indexterm>
       </entry>
       <entry><literal>'Post' || 'greSQL'</literal></entry>
       <entry><literal>PostgreSQL</literal></entry>
      </row>

      <row>
      
<entry><literal><function>bit_length</function>
(<parameter>string</parameter>)</literal></entry>
       <entry><type>integer</type></entry>
       <entry>Nombre de bits dans une chaîne</entry>
       <entry><literal>bit_length('jose')</literal></entry>
       <entry><literal>32</literal></entry>
      </row>

      <row>
      
<entry><literal><function>char_length</function>
(<parameter>string</parameter>)</literal> ou
<literal><function>character_length</function>
(<parameter>string</parameter>)</literal></entry>
       <entry><type>integer</type></entry>
       <entry>
        Nombre de caractères dans une chaîne
        <indexterm>
         <primary>chaîne de caractères</primary>
         <secondary>longueur</secondary>
        </indexterm>
        <indexterm>
         <primary>longueur</primary>
         <secondary sortas="character string">d'une chaîne de
         caractères</secondary>
         <see>chaîne de caractères, longueur</see>
        </indexterm>
       </entry>
       <entry><literal>char_length('jose')</literal></entry>
       <entry><literal>4</literal></entry>
      </row>

      <row>
      
<entry><literal><function>convert</function>(<parameter>string</parameter>
       using <parameter>nom_conversion</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Modifie le codage en utilisant le nom de conversion cité. Les
        conversions peuvent être définies par <command>CREATE
        CONVERSION</command>. De même, il existe quelques noms de conversion
        pré-définis. Voir <xref linkend="conversion-names"> pour les noms de
        conversion disponibles.
       </entry>
       <entry><literal>convert('PostgreSQL' using
iso_8859_1_to_utf_8)</literal></entry>
       <entry><literal>'PostgreSQL'</literal> in Unicode (UTF-8)
encoding</entry>
      </row>

      <row>
      
<entry><literal><function>lower</function>
(<parameter>string</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Convertit une chaîne en minuscule</entry>
       <entry><literal>lower('TOM')</literal></entry>
       <entry><literal>tom</literal></entry>
      </row>

      <row>
      
<entry><literal><function>octet_length</function>(<parameter>string</parameter>)
</literal></entry>
       <entry><type>integer</type></entry>
       <entry>Nombre d'octets dans une chaîne</entry>
       <entry><literal>octet_length('jose')</literal></entry>
       <entry><literal>4</literal></entry>
      </row>

      <row>
      
<entry><literal><function>overlay</function>(<parameter>string</parameter>
placing <parameter>string</parameter> from <type>integer</type> <optional>for
<type>integer</type></optional>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Remplace la sous-chaîne
        <indexterm>
         <primary>overlay</primary>
        </indexterm>
       </entry>
       <entry><literal>overlay('Txxxxas' placing 'hom' from 2 for
4)</literal></entry>
       <entry><literal>Thomas</literal></entry>
      </row>

      <row>
      
<entry><literal><function>position</function>(<parameter>substring</parameter>
in <parameter>string</parameter>)</literal></entry>
       <entry><type>integer</type></entry>
       <entry>Emplacement des sous-chaînes spécifiées</entry>
       <entry><literal>position('om' in 'Thomas')</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
      
<entry><literal><function>substring</function>(<parameter>string</parameter>
<optional>from <type>integer</type></optional> <optional>for
<type>integer</type></optional>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Extrait une sous-chaîne
        <indexterm>
         <primary>sous-chaîne</primary>
        </indexterm>
       </entry>
       <entry><literal>substring('Thomas' from 2 for 3)</literal></entry>
       <entry><literal>hom</literal></entry>
      </row>

      <row>
      
<entry><literal><function>substring</function>(<parameter>string</parameter>
from <replaceable>modele</replaceable>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Extrait une sous-chaîne correspondant à l'expression rationnelle POSIX
        <indexterm>
         <primary>sous-chaîne</primary>
        </indexterm>
       </entry>
       <entry><literal>substring('Thomas' from '...$')</literal></entry>
       <entry><literal>mas</literal></entry>
      </row>

      <row>
      
<entry><literal><function>substring</function>(<parameter>string</parameter>
from <replaceable>pattern</replaceable> for
<replaceable>escape</replaceable>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Extrait une sous-chaîne correspondant à l'expression rationnelle
        <acronym>SQL</acronym>
        <indexterm>
         <primary>sous-chaîne</primary>
        </indexterm>
       </entry>
       <entry><literal>substring('Thomas' from '%#"o_a#"_' for
'#')</literal></entry>
       <entry><literal>oma</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>trim</function>(<optional>leading | trailing |
both</optional>
        <optional><parameter>caractères</parameter></optional> from
        <parameter>chaîne</parameter>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Supprime la plus grande chaîne contenant seulement les
        <parameter>caractères</parameter> (un espace par défaut) à partir du
        début, de la fin ou des deux extrémités (respectivement start, end,
        both) de la <parameter>chaîne</parameter>.
       </entry>
       <entry><literal>trim(both 'x' from 'xTomxx')</literal></entry>
       <entry><literal>Tom</literal></entry>
      </row>

      <row>
      
<entry><literal><function>upper</function>
(<parameter>string</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Convertit une chaîne en majuscule</entry>
       <entry><literal>upper('tom')</literal></entry>
       <entry><literal>TOM</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    D'autres fonctions de manipulation de chaînes sont disponibles et listées
    dans <xref linkend="functions-string-other">. Certaines d'entre elles sont
    utilisées en interne pour implémenter les fonctions de chaîne répondant au
    standard <acronym>SQL</acronym> listées dans <xref
    linkend="functions-string-sql">.
   </para>

   <table id="functions-string-other">
    <title>Autres fonctions de chaîne</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Fonction</entry>
       <entry>Type renvoyé</entry>
       <entry>Description</entry>
       <entry>Exemple</entry>
       <entry>Résultat</entry>
      </row>
     </thead>

     <tbody>
      <row>
      
<entry><literal><function>ascii</function>(<type>text</type>)</literal></entry>
       <entry>integer</entry>
       <entry>Code <acronym>ASCII</acronym> du premier caractère de
        l'argument</entry>
       <entry><literal>ascii('x')</literal></entry>
       <entry><literal>120</literal></entry>
      </row>

      <row>
       <entry><literal><function>btrim</function>(<parameter>chaîne</parameter>
<type>text</type>, <parameter>characaractères</parameter>
<type>text</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Supprime la chaîne la plus longue consistant seulement de caractères 
        compris dans <parameter>caractères</parameter> entre le début et la fin
        de <parameter>string</parameter>.
       </entry>
       <entry><literal>btrim('xyxtrimyyx', 'xy')</literal></entry>
       <entry><literal>trim</literal></entry>
      </row>

      <row>
      
<entry><literal><function>chr</function>(<type>integer</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Caractère correspondant au code <acronym>ASCII</acronym>
        donné</entry>
       <entry><literal>chr(65)</literal></entry>
       <entry><literal>A</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>convert</function>(<parameter>chaîne</parameter>
        <type>text</type>,
        <optional><parameter>codage_source</parameter>
<type>name</type>,</optional>
        <parameter>codage_destination</parameter> <type>name</type>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Convertit une chaîne dans le codage
        <parameter>codage_destination</parameter>. Le codage initial est
        spécifié par <parameter>codage_source</parameter>. Si
        <parameter>codage_source</parameter> est omis, le codage de la base de
        données est pris en compte.
       </entry>
       <entry><literal>convert( 'texte_en_unicode', 'UNICODE',
'LATIN1')</literal></entry>
       <entry><literal>texte_en_unicode</literal> représenté dans le codage ISO
        8859-1</entry>
      </row>

      <row>
       <entry>
        <literal><function>decode</function>(<parameter>chaîne</parameter>
<type>text</type>,
        <parameter>type</parameter> <type>text</type>)</literal>
       </entry>
       <entry><type>bytea</type></entry>
       <entry>
        Décode les données binaires à partir de <parameter>chaîne</parameter>
        codées auparavant avec <function>encode</function>. Le type de paramètre est le
        même que <function>encode</function>.
       </entry>
       <entry><literal>decode('MTIzAAE=', 'base64')</literal></entry>
       <entry><literal>123\000\001</literal></entry>
      </row>       

      <row>
       <entry>
        <literal><function>encode</function>(<parameter>données</parameter>
<type>bytea</type>,
        <parameter>type</parameter> <type>text</type>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Code les données binaires en une représentation en
        <acronym>ASCII</acronym> uniquement. Les types supportés sont&nbsp;:
        <literal>base64</literal>, <literal>hex</literal>, <literal>escape</literal>.
       </entry>
       <entry><literal>encode( '123\\000\\001', 'base64')</literal></entry>
       <entry><literal>MTIzAAE=</literal></entry>
      </row>       

      <row>
      
<entry><literal><function>initcap</function>(<type>text</type>)</literal></entry
>
       <entry><type>text</type></entry>
       <entry>Convertit la première lettre de chaque mot (séparé par des
        espaces blancs) en majuscule</entry>
       <entry><literal>initcap('bonjour thomas')</literal></entry>
       <entry><literal>Bonjour Thomas</literal></entry>
      </row>

      <row>
      
<entry><literal><function>length</function>
(<parameter>chaîne</parameter>)</literal></entry>
       <entry><type>integer</type></entry>
       <entry>
        Nombre de caractères dans la chaîne
        <indexterm>
         <primary>chaîne de caractère</primary>
         <secondary>longueur</secondary>
        </indexterm>
        <indexterm>
         <primary>longueur</primary>
         <secondary sortas="character string">d'une chaîne de
           caractère</secondary>
         <see>chaîne de caractère, longueur</see>
        </indexterm>
       </entry>
       <entry><literal>length('jose')</literal></entry>
       <entry><literal>4</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>lpad</function>(<parameter>chaîne</parameter>
<type>text</type>,
        <parameter>longueur</parameter> <type>integer</type>
        <optional>, <parameter>remplissage</parameter>
<type>text</type></optional>)</literal>
       </entry>
       <entry>text</entry>
       <entry>
        Remplit <parameter>chaîne</parameter> pour avoir une chaîne de longueur
        <parameter>longueur</parameter> en ajoutant les caractères
        <parameter>remplissage</parameter> (un espace par défaut). Si
        <parameter>chaîne</parameter> a un taille supérieure à
        <parameter>longueur</parameter>, alors elle est tronquée (sur la
        droite).
       </entry>
       <entry><literal>lpad('hi', 5, 'xy')</literal></entry>
       <entry><literal>xyxhi</literal></entry>
      </row>

      <row>
       <entry><literal><function>ltrim</function>(<parameter>chaîne</parameter>
<type>text</type>, <parameter>caractères</parameter>
<type>text</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Supprime la chaîne la plus longue contenant seulement les caractères de
        <parameter>characters</parameter> à partir du début de la chaîne.
       </entry>
       <entry><literal>ltrim('zzzytrim', 'xyz')</literal></entry>
       <entry><literal>trim</literal></entry>
      </row>

      <row>
       <entry><literal><function>md5</function>(<parameter>string</parameter>
<type>text</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Calcule la clé MD5 d'une chaîne donnée, renvoyant le résultat en
        hexadécimal.
       </entry>
       <entry><literal>md5('abc')</literal></entry>
       <entry><literal>900150983cd24fb0 d6963f7d28e17f72</literal></entry>
      </row>

      <row>
      
<entry><literal><function>pg_client_encoding</function>()</literal></entry>
       <entry><type>name</type></entry>
       <entry>
        Nom du codage client actuel
       </entry>
       <entry><literal>pg_client_encoding()</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
      </row>

      <row>
      
<entry><literal><function>quote_ident</function>(<parameter>chaîne</parameter>
text)</literal><indexterm><primary>quote_ident</primary></indexterm></entry>
       <entry><type>text</type></entry>
       <entry>Renvoit la chaîne entre guillemets à utiliser comme identifiant
        dans une chaîne d'instructions <acronym>SQL</acronym>. Les guillemets
        sont seulement ajoutés si nécessaire (c'est-à-dire si la chaîne
        contient des caractères non identifiants). Les guillemets faisant
        partie de la chaîne sont doublés.
       </entry>
       <entry><literal>quote_ident('Foo')</literal></entry>
       <entry><literal>"Foo"</literal></entry>
      </row>

      <row>
      
<entry><literal><function>quote_literal</function>(<parameter>string</parameter>
text)</literal><indexterm><primary>quote_literal</></></entry>
       <entry><type>text</type></entry>
       <entry>Renvoit la chaîne correctement entre guillemets pour être
        utilisée comme une chaîne littérale dans une chaîne d'instructions
        <acronym>SQL</acronym>. Les guillemets compris dans la chaîne et les
        anti-slash sont correctement doublés.
       </entry>
       <entry><literal>quote_literal( 'O\'Reilly')</literal></entry>
       <entry><literal>'O''Reilly'</literal></entry>
      </row>

      <row>
       <entry><literal><function>repeat</function>(<type>text</type>,
<type>integer</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Repère le texte un certain nombre de fois</entry>
       <entry><literal>repeat('Pg', 4)</literal></entry>
       <entry><literal>PgPgPgPg</literal></entry>
      </row>

      <row>
      
<entry><literal><function>replace</function>(<parameter>chaîne</parameter>
<type>text</type>,
       <parameter>àpartirde</parameter> <type>text</type>,
       <parameter>vers</parameter> <type>text</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Remplace dans <parameter>chaîne</parameter> toutes les
        occurrences de la sous-chaîne <parameter>àpartirde</parameter> avec la
        sous-chaîne <parameter>vers</parameter>.
       </entry>
       <entry><literal>replace( 'abcdefabcdef', 'cd', 'XX')</literal></entry>
       <entry><literal>abXXefabXXef</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>rpad</function>(<parameter>chaîne</parameter>
<type>text</type>,
        <parameter>longueur</parameter> <type>integer</type>
        <optional>, <parameter>remplissage</parameter>
<type>text</type></optional>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Remplit <parameter>chaîne</parameter> sur une longueur de
        <parameter>longueur</parameter> caractères en ajoutant les caractères
        <parameter>remplissage</parameter> (un espace par défaut). Si la
        <parameter>chaîne</parameter> a une taille supérieure à
        <parameter>longueur</parameter>, elle est tronquée.
       </entry>
       <entry><literal>rpad('hi', 5, 'xy')</literal></entry>
       <entry><literal>hixyx</literal></entry>
      </row>

      <row>
       <entry><literal><function>rtrim</function>(<parameter>chaîne</parameter>
        text, <parameter>caractères</parameter> text)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Supprime la chaîne la plus longue contenant uniquement les
        caractères provenant de <parameter>characters</parameter> depuis la fin
        de la chaîne.
       </entry>
       <entry><literal>rtrim('trimxxxx', 'x')</literal></entry>
       <entry><literal>trim</literal></entry>
      </row>

      <row>
      
<entry><literal><function>split_part</function>(<parameter>chaîne</parameter>
<type>text</type>,
       <parameter>délimiteur</parameter> <type>text</type>,
       <parameter>champ</parameter> <type>integer</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Divise <parameter>chaîne</parameter> par rapport au
        <parameter>délimiteur</parameter> et renvoie le champ donné (en
        comptant à partir de 1)
       </entry>
       <entry><literal>split_part( 'abc~@~def~@~ghi', '~@~',
2)</literal></entry>
       <entry><literal>def</literal></entry>
      </row>

      <row>
      
<entry><literal><function>strpos</function>(<parameter>chaîne</parameter>,
<parameter>sous-chaîne</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Emplacement de la sous-chaîne spécifiée (identique à
        <literal>position(<parameter>sous-chaîne</parameter> in
         <parameter>sous-chaîne</parameter>)</literal>, mais notez l'ordre
         inverse des arguments)
       </entry>
       <entry><literal>strpos('high', 'ig')</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

      <row>
      
<entry><literal><function>substr</function>(<parameter>chaîne</parameter>,
<parameter>from</parameter> <optional>,
<parameter>nombre</parameter></optional>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Extrait la sous-chaîne (identique à
        <literal>substring(<parameter>chaîne</parameter> from
<parameter>àpartirde</parameter> for <parameter>nombre</parameter>)</literal>)
       </entry>
       <entry><literal>substr('alphabet', 3, 2)</literal></entry>
       <entry><literal>ph</literal></entry>
      </row>

      <row>
       <entry><literal><function>to_ascii</function>(<type>text</type>
        <optional>,
<parameter>codage</parameter></optional>)</literal></entry>
       <entry><type>text</type></entry>

       <entry>Convertit le texte en <acronym>ASCII</acronym> à partir de
        n'importe quelle autre forme de codage
       <footnote>
        <para>
         La fonction <function>to_ascii</function> supporte la conversion de
         <literal>LATIN1</>, <literal>LATIN2</> et <literal>WIN1250</>
         uniquement.
        </para>
       </footnote>
       </entry>

       <entry><literal>to_ascii('Karel')</literal></entry>
       <entry><literal>Karel</literal></entry>
      </row>

      <row>
       <entry><literal><function>to_hex</function>(<parameter>nombre</parameter>
<type>integer</type>
       ou <type>bigint</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Convertit <parameter>nombre</parameter> dans sa représentation
        hexadécimale équivalente
       </entry>
       <entry><literal>to_hex(2147483647)</literal></entry>
       <entry><literal>7fffffff</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>translate</function>(<parameter>chaîne</parameter>
        <type>text</type>,
        <parameter>àpartirde</parameter> <type>text</type>,
        <parameter>vers</parameter> <type>text</type>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>Tout caractère dans <parameter>chaîne</parameter> qui correspond
        à un caractère dans l'ensemble <parameter>àpartirde</parameter> est
        remplacé par le caractère correspondant dans l'ensemble
        <parameter>vers</parameter>.
       </entry>
       <entry><literal>translate('12345', '14', 'ax')</literal></entry>
       <entry><literal>a23x5</literal></entry>
      </row>       
      
     </tbody>
    </tgroup>
   </table>


   <table id="conversion-names">
    <title>Conversions intégrés</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nom de la conversion
        <footnote>
         <para>
          Les noms des conversions suivent un schéma de nommage standard&nbsp;:
          le nom officiel de la source de codage avec tous les caractères non
          alpha-numériques remplacés par des tirets bas suivis d'un
          <literal>_to_</literal> suivi par le nom de destination du
          codage après avoir suivi le même traitement que le nom de la source.
          Du coup, les noms pourraient dévier de noms de codage personnalisés.
         </para>
        </footnote>
       </entry>
       <entry>Codage source</entry>
       <entry>Codage destination</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>ascii_to_mic</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>ascii_to_utf_8</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>big5_to_euc_tw</literal></entry>
       <entry><literal>BIG5</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
      </row>

      <row>
       <entry><literal>big5_to_mic</literal></entry>
       <entry><literal>BIG5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>big5_to_utf_8</literal></entry>
       <entry><literal>BIG5</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>euc_cn_to_mic</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_cn_to_utf_8</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jp_to_mic</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jp_to_sjis</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
       <entry><literal>SJIS</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jp_to_utf_8</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>euc_kr_to_mic</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_kr_to_utf_8</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>euc_tw_to_big5</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
       <entry><literal>BIG5</literal></entry>
      </row>

      <row>
       <entry><literal>euc_tw_to_mic</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_tw_to_utf_8</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>gb18030_to_utf_8</literal></entry>
       <entry><literal>GB18030</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>gbk_to_utf_8</literal></entry>
       <entry><literal>GBK</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_10_to_utf_8</literal></entry>
       <entry><literal>LATIN6</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_13_to_utf_8</literal></entry>
       <entry><literal>LATIN7</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_14_to_utf_8</literal></entry>
       <entry><literal>LATIN8</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_15_to_utf_8</literal></entry>
       <entry><literal>LATIN9</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_16_to_utf_8</literal></entry>
       <entry><literal>LATIN10</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_1_to_mic</literal></entry>
       <entry><literal>LATIN1</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_1_to_utf_8</literal></entry>
       <entry><literal>LATIN1</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_2_to_mic</literal></entry>
       <entry><literal>LATIN2</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_2_to_utf_8</literal></entry>
       <entry><literal>LATIN2</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_2_to_windows_1250</literal></entry>
       <entry><literal>LATIN2</literal></entry>
       <entry><literal>WIN1250</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_3_to_mic</literal></entry>
       <entry><literal>LATIN3</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_3_to_utf_8</literal></entry>
       <entry><literal>LATIN3</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_4_to_mic</literal></entry>
       <entry><literal>LATIN4</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_4_to_utf_8</literal></entry>
       <entry><literal>LATIN4</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_koi8_r</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_mic</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_utf_8</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_windows_1251</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>WIN</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_windows_866</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>ALT</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_6_to_utf_8</literal></entry>
       <entry><literal>ISO_8859_6</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_7_to_utf_8</literal></entry>
       <entry><literal>ISO_8859_7</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_8_to_utf_8</literal></entry>
       <entry><literal>ISO_8859_8</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_9_to_utf_8</literal></entry>
       <entry><literal>LATIN5</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>johab_to_utf_8</literal></entry>
       <entry><literal>JOHAB</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_iso_8859_5</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_mic</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_utf_8</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_windows_1251</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>WIN</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_windows_866</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>ALT</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_ascii</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_big5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>BIG5</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_cn</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_jp</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_kr</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_tw</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_1</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN1</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_2</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN2</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_3</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN3</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_4</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN4</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_koi8_r</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_sjis</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>SJIS</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_windows_1250</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>WIN1250</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_windows_1251</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>WIN</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_windows_866</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>ALT</literal></entry>
      </row>

      <row>
       <entry><literal>sjis_to_euc_jp</literal></entry>
       <entry><literal>SJIS</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
      </row>

      <row>
       <entry><literal>sjis_to_mic</literal></entry>
       <entry><literal>SJIS</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>sjis_to_utf_8</literal></entry>
       <entry><literal>SJIS</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>tcvn_to_utf_8</literal></entry>
       <entry><literal>TCVN</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>uhc_to_utf_8</literal></entry>
       <entry><literal>UHC</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_ascii</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_big5</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>BIG5</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_euc_cn</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_euc_jp</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_euc_kr</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_euc_tw</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_gb18030</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>GB18030</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_gbk</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>GBK</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_1</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN1</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_10</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN6</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_13</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN7</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_14</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN8</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_15</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN9</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_16</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN10</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_2</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN2</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_3</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN3</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_4</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN4</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_5</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_6</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>ISO_8859_6</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_7</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>ISO_8859_7</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_8</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>ISO_8859_8</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_iso_8859_9</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>LATIN5</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_johab</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>JOHAB</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_koi8_r</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_sjis</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>SJIS</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_tcvn</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>TCVN</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_uhc</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>UHC</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_windows_1250</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>WIN1250</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_windows_1251</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>WIN</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_windows_1256</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>WIN1256</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_windows_866</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>ALT</literal></entry>
      </row>

      <row>
       <entry><literal>utf_8_to_windows_874</literal></entry>
       <entry><literal>UNICODE</literal></entry>
       <entry><literal>WIN874</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1250_to_iso_8859_2</literal></entry>
       <entry><literal>WIN1250</literal></entry>
       <entry><literal>LATIN2</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1250_to_mic</literal></entry>
       <entry><literal>WIN1250</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1250_to_utf_8</literal></entry>
       <entry><literal>WIN1250</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_iso_8859_5</literal></entry>
       <entry><literal>WIN</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_koi8_r</literal></entry>
       <entry><literal>WIN</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_mic</literal></entry>
       <entry><literal>WIN</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_utf_8</literal></entry>
       <entry><literal>WIN</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_windows_866</literal></entry>
       <entry><literal>WIN</literal></entry>
       <entry><literal>ALT</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1256_to_utf_8</literal></entry>
       <entry><literal>WIN1256</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_iso_8859_5</literal></entry>
       <entry><literal>ALT</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_koi8_r</literal></entry>
       <entry><literal>ALT</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_mic</literal></entry>
       <entry><literal>ALT</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_utf_8</literal></entry>
       <entry><literal>ALT</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_windows_1251</literal></entry>
       <entry><literal>ALT</literal></entry>
       <entry><literal>WIN</literal></entry>
      </row>

      <row>
       <entry><literal>windows_874_to_utf_8</literal></entry>
       <entry><literal>WIN874</literal></entry>
       <entry><literal>UNICODE</literal></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

  </sect1>


  <sect1 id="functions-binarystring">
   <title>Fonctions et opérateurs de chaînes binaires</title>

   <indexterm zone="functions-binarystring">
    <primary>données binaires</primary>
    <secondary>fonctions</secondary>
   </indexterm>

   <para>
    Cette section décrit les fonctions et opérateurs pour examiner et manipuler
    des valeurs de type <type>bytea</type>.
   </para>

   <para>
    <acronym>SQL</acronym> définit quelques fonctions de chaînes avec une 
    syntaxe spéciale où certains mots clés, plutôt que des virgules, sont
    utilisés pour séparés les mots clés. Les détails font partie de
    <xref linkend="functions-binarystring-sql">. Quelques fonctions sont aussi
    implémentées en utilisant la syntaxe habituelle pour l'appel de fonction.
    (Voir <xref linkend="functions-binarystring-other">.)
   </para>

   <table id="functions-binarystring-sql">
    <title>Fonctions et opérateurs <acronym>SQL</acronym> pour les chaînes
binaires</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Fonction</entry>
       <entry>Type renvoyé</entry>
       <entry>Description</entry>
       <entry>Exemple</entry>
       <entry>Résultat</entry>  
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><parameter>chaîne</parameter> <literal>||</literal>
        <parameter>chaîne</parameter></literal></entry>
       <entry> <type>bytea</type> </entry>
       <entry>
        Concaténation de chaîne
        <indexterm>
         <primary>chaîne binaire</primary>
         <secondary>concaténation</secondary>
        </indexterm>
       </entry>
       <entry><literal>'\\\\Post'::bytea ||
'\\047gres\\000'::bytea</literal></entry>
       <entry><literal>\\Post'gres\000</literal></entry>
      </row>

      <row>
      
<entry><literal><function>octet_length</function>(<parameter>chaîne</parameter>)
</literal></entry>
       <entry><type>integer</type></entry>
       <entry>Nombre d'octets dans une chaîne binaire</entry>
       <entry><literal>octet_length( 'jo\\000se'::bytea)</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
      
<entry><literal><function>position</function>(<parameter>sous-chaîne</parameter>
in <parameter>chaîne</parameter>)</literal></entry>
       <entry><type>integer</type></entry>
       <entry>Emplacement de la sous-chaîne indiquée</entry>
      <entry><literal>position('\\000om'::bytea in
'Th\\000omas'::bytea)</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
      
<entry><literal><function>substring</function>(<parameter>chaîne</parameter>
<optional>from <type>integer</type></optional> <optional>for
<type>integer</type></optional>)</literal></entry>
       <entry><type>bytea</type></entry>
       <entry>
        Extrait la sous-chaîne
        <indexterm>
         <primary>sous-chaîne</primary>
        </indexterm>
       </entry>
       <entry><literal>substring('Th\\000omas'::bytea from 2 for
3)</literal></entry>
       <entry><literal>h\000o</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>trim</function>(<optional>both</optional>
        <parameter>octets</parameter> from
        <parameter>chaînes</parameter>)</literal>
       </entry>
       <entry><type>bytea</type></entry>
       <entry>
        Supprime la plus longue chaîne contenant seulement les octets dans
        <parameter>octets</parameter> au début et à la fin de
        <parameter>chaîne</parameter>
       </entry>
       <entry><literal>trim('\\000'::bytea from
'\\000Tom\\000'::bytea)</literal></entry>
       <entry><literal>Tom</literal></entry>
      </row>

      <row>
       <entry><function>get_byte</function>(<parameter>chaîne</parameter>,
<parameter>décalage</parameter>)</entry>
       <entry><type>integer</type></entry>
       <entry>
        Extrait un octet de la chaîne.
        <indexterm>
         <primary>get_byte</primary>
        </indexterm>
       </entry>
       <entry><literal>get_byte('Th\\000omas'::bytea, 4)</literal></entry>
       <entry><literal>109</literal></entry>
      </row>

      <row>
       <entry><function>set_byte</function>(<parameter>chaîne</parameter>,
       <parameter>décalage</parameter>, <parameter>nouvelle_valeur</>)</entry>
       <entry><type>bytea</type></entry>
       <entry>
        Enregistre un octet dans la chaîne.
        <indexterm>
         <primary>set_byte</primary>
        </indexterm>
       </entry>
       <entry><literal>set_byte('Th\\000omas'::bytea, 4, 64)</literal></entry>
       <entry><literal>Th\000o@as</literal></entry>
      </row>

      <row>
       <entry><function>get_bit</function>(<parameter>chaîne</parameter>,
<parameter>décalage</parameter>)</entry>
       <entry><type>integer</type></entry>
       <entry>
        Extrait un bit de la chaîne.
        <indexterm>
         <primary>get_bit</primary>
        </indexterm>
       </entry>
       <entry><literal>get_bit('Th\\000omas'::bytea, 45)</literal></entry>
       <entry><literal>1</literal></entry>
      </row>

      <row>
       <entry><function>set_bit</function>(<parameter>chaîne</parameter>,
       <parameter>décalage</parameter>, <parameter>nouvelle_valeur</>)</entry>
       <entry><type>bytea</type></entry>
       <entry>
        Enregistre un bit dans la chaîne.
        <indexterm>
         <primary>set_bit</primary>
        </indexterm>
       </entry>
       <entry><literal>set_bit('Th\\000omas'::bytea, 45, 0)</literal></entry>
       <entry><literal>Th\000omAs</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    Les fonctions de manipulations supplémentaires de chaînes binaires sont
    disponibles et sont listées dans <xref
    linkend="functions-binarystring-other">. Certaines sont utilisées en interne
    pour implémenter les fonctions de chaînes suivant le standard
    <acronym>SQL</acronym> listées dans <xref
    linkend="functions-binarystring-sql">.
   </para>

   <table id="functions-binarystring-other">
    <title>Autres fonctions sur les chaînes binaires</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Fonction</entry>
       <entry>Type retourné</entry>
       <entry>Description</entry>
       <entry>Exemple</entry>
       <entry>Résultat</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>btrim</function>(<parameter>chaîne</parameter>
        <type>bytea</type> <parameter>octets</parameter>
<type>bytea</type>)</literal></entry>
       <entry><type>bytea</type></entry>
       <entry>
        Supprime la plus longue chaîne consistant seulement des octets de
        <parameter>octets</parameter> à partir du début et de la fin de
        <parameter>chaîne</parameter>.
      </entry>
      <entry><literal>btrim('\\000trim\\000'::bytea,
'\\000'::bytea)</literal></entry>
      <entry><literal>trim</literal></entry>
     </row>

     <row>
     
<entry><literal><function>length</function>
(<parameter>chaîne</parameter>)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       Longueur de la chaîne binaire
       <indexterm>
        <primary>chaîne binaire</primary>
	<secondary>longueur</secondary>
       </indexterm>
       <indexterm>
        <primary>longueur</primary>
	<secondary sortas="binary string">d'une chaîne binaire</secondary>
	<see>chaîne binaire, longueur</see>
       </indexterm>
      </entry>
      <entry><literal>length('jo\\000se'::bytea)</literal></entry>
      <entry><literal>5</literal></entry>
     </row>

     <row>
      <entry>
       <literal><function>decode</function>(<parameter>chaîne</parameter>
<type>text</type>,
              <parameter>type</parameter> <type>text</type>)</literal>
      </entry>
      <entry><type>bytea</type></entry>
      <entry>
       Décode la chaîne binaire à partir de <parameter>chaîne</parameter>
       auparavant codé avec <literal>encode</>. Le type de paramètre est
       identique à celui d'<literal>encode</>.
      </entry>
      <entry><literal>decode('123\\000456', 'escape')</literal></entry>
      <entry><literal>123\000456</literal></entry>
     </row>       

     <row>
      <entry>
       <literal><function>encode</function>(<parameter>chaîne</parameter>
<type>bytea</type>,
              <parameter>type</parameter> <type>text</type>)</literal>
      </entry>
      <entry><type>text</type></entry>
      <entry>
       Code la chaîne binaire en une représentation en <acronym>ASCII</acronym>
       uniquement. Les types supportés sont&nbsp;: <literal>base64</>,
       <literal>hex</>, <literal>escape</>.
      </entry>
      <entry><literal>encode('123\\000456'::bytea, 'escape')</literal></entry>
      <entry><literal>123\000456</literal></entry>
     </row>       

    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="functions-matching">
  <title>Correspondance de modèles</title>

  <indexterm zone="functions-matching">
   <primary>correspondance de modèles</primary>
  </indexterm>

   <para>
    Il existe trois différents approches aux correspondances de modèles fournies
    par <productname>PostgreSQL</productname>:  l'opérateur
    <acronym>SQL</acronym> traditionnel
    <function>LIKE</function>, le plus récent <function>SIMILAR TO</function> de
    <acronym>SQL99</acronym> et les expressions rationnelles du type
    <acronym>POSIX</acronym>. De plus, une fonction de correspondance de
    modèles, <function>substring</function>, est disponible. Elle utilise soit
    le style <acronym>SQL99</acronym> soit le style POSIX des expressions
    rationnelles.
   </para>

   <tip>
    <para>
     Si vous avez besoin des correspondances de modèles qui vont au delà de
     ça, considérez l'écriture d'une fonction en Perl ou Tcl.
    </para>
   </tip>

  <sect2 id="functions-like">
   <title><function>LIKE</function></title>

   <indexterm zone="functions-like">
    <primary>LIKE</primary>
   </indexterm>

<synopsis>
<replaceable>chaîne</replaceable> LIKE <replaceable>modèle</replaceable>
<optional>ESCAPE <replaceable>caractère d'échappement</replaceable></optional>
<replaceable>chaîne</replaceable> NOT LIKE <replaceable>modèle</replaceable>
<optional>ESCAPE <replaceable>caractère d'échappement</replaceable></optional>
</synopsis>

    <para>
     Chaque <replaceable>modèle</replaceable> définit un ensemble de chaîne.
     L'expression <function>LIKE</function> renvoie true si la
     <replaceable>chaîne</replaceable> est contenu dans l'ensemble de chaînes
     représenté par le <replaceable>modèle</replaceable>. (Comme attendu,
     l'expression <function>NOT LIKE</function> renvoie false si
     <function>LIKE</function> renvoie true et vice versa. Une expression
     équivalente est <literal>NOT (<replaceable>chaîne</replaceable> LIKE
      <replaceable>modèle</replaceable>)</literal>.)
    </para>

    <para>
     Si le <replaceable>modèle</replaceable> ne contient pas de signe de
     pourcentage ou de tirets bas, alors le modèle représente seulement la
     chaîne elle-même&nbsp;; dans ce cas, <function>LIKE</function> agit
     exactement comme l'opérateur d'égalité. Un tiret bas (<literal>_</literal>)
     dans <replaceable>modèle</replaceable> correspond à un seul
     caractère&nbsp;; un signe de pourcentage (<literal>%</literal>) correspond
     à toutes les chaînes de zéro à plus de caractères.
    </para>

   <para>
    Quelques exemples&nbsp;:
<programlisting>
'abc' LIKE 'abc'    <lineannotation>true</lineannotation>
'abc' LIKE 'a%'     <lineannotation>true</lineannotation>
'abc' LIKE '_b_'    <lineannotation>true</lineannotation>
'abc' LIKE 'c'      <lineannotation>false</lineannotation>
</programlisting>
   </para>
   
   <para>
    Le modèle <function>LIKE</function> correspond toujours à la chaîne
    entière. Pour faire correspondre un modèle à l'intérieur d'une chaîne, le
    modèle doit donc commencer et finir avec un signe de pourcentage.
   </para>

   <para>
    Pour faire correspondre un vrai tiret bas ou un vrai signe de pourcentage
    sans qu'ils remplacent d'autres caractères, le caractère correspondant dans
    <replaceable>modèle</replaceable> doit être précédé du caractère
    d'échappement. Par défaut, il s'agit de l'anti-slash mais un autre
    caractère peut être sélectionné en utilisant la clause
    <literal>ESCAPE</literal>. Pour correspondre au caractère d'échappement
    lui-même, écrivez deux fois ce caractère.
   </para>

   <para>
    Notez que l'anti-slash a déjà une signification particulière dans les
    chaînes littérales, donc écrite une constante du modèle avec un anti-slash
    signifie écrire quatre anti-slash dans l'instruction. Vous pouvez éviter
    ceci en sélectionnant un autre caractère d'échappement avec
    <literal>ESCAPE</literal>&nbsp;; ensuite un anti-slash n'est plus spécial
    dans un <function>LIKE</function>. (Mais il est toujours spécial dans
    l'analyseur de chaînes littérales, donc vous aurez besoin des deux.)
   </para>

   <para>
    Il est aussi possible de ne sélectionner aucun caractère d'échappement en
    écrivant <literal>ESCAPE ''</literal>. Ceci désactive complètement le
    mécanisme d'échappement, ce qui rend impossible la désactivation de la
    signification particulière du tiret bas et du signe de pourcentage dans le
    modèle.
   </para>

   <para>
    Le mot clé <token>ILIKE</token> est utilisé à la place de
    <token>LIKE</token> pour faire des correspondances sans tenir compte de la
    casse mais en tenant compte de la locale active. Ceci ne fait pas partie du
    standard <acronym>SQL</acronym> mais est une extension
<productname>PostgreSQL</productname>.
   </para>

   <para>
    L'opérateur <literal>~~</literal> est équivalent à
    <function>LIKE</function> alors que <literal>~~*</literal> correspond à
    <function>ILIKE</function>. Il existe aussi les opérateurs
    <literal>!~~</literal> et <literal>!~~*</literal> représentant
    respectivement <function>NOT LIKE</function> et <function>NOT
    ILIKE</function>. Tous ces opérateurs sont spécifiques à
    <productname>PostgreSQL</productname>.
   </para>
  </sect2>


  <sect2 id="functions-sql99-regexp">
   <title>Expressions rationnelles <function>SIMILAR TO</function> et
<acronym>SQL99</acronym></title>

   <indexterm zone="functions-sql99-regexp">
    <primary>expression rationnelle</primary>
    <!-- <seealso>pattern matching</seealso> breaks index build -->
   </indexterm>

   <indexterm>
    <primary>SIMILAR TO</primary>
   </indexterm>

   <indexterm>
    <primary>sous-chaîne</primary>
   </indexterm>

<synopsis>
<replaceable>chaîne</replaceable> SIMILAR TO <replaceable>modèle</replaceable>
<optional>ESCAPE <replaceable>caractère d'échappement</replaceable></optional>
<replaceable>chaîne</replaceable> NOT SIMILAR TO
<replaceable>modèle</replaceable> <optional>ESCAPE
<replaceable>caractère d'échappement</replaceable></optional>
</synopsis>

    <para>
     L'opérateur <function>SIMILAR TO</function> renvoie true ou false
     suivant le fait que son modèle corresponde ou non à la chaîne donnée.
     C'est identique à <function>LIKE</function> sauf qu'il interprète le
     modèle en utilisant la définition <acronym>SQL99</acronym> d'une
     expression rationnelle. Les expressions rationnelles
     <acronym>SQL99</acronym> sont un curieux mélange de la notation
     <function>LIKE</function> et de la notation habituelle des
     expressions rationnelles.
    </para>

    <para>
     Comme <function>LIKE</function>, l'opérateur <function>SIMILAR
     TO</function> réussit uniquement si son modèle correspond à la chaîne
     entière&nbsp;; ceci ne ressemble pas aux pratiques habituelles des
     expressions rationnelles où le modèle peut se situer n'importe où dans la
     chaîne. Ainsi comme <function>LIKE</function>, <function>SIMILAR
     TO</function> utilise <literal>_</> et <literal>%</> comme caractères
     joker dénotant respectivement un caractère seul et toute chaîne (ils sont
     comparables à <literal>.</> and <literal>.*</> dans les expressions
     compatibles POSIX).
    </para>

    <para>
     En plus de ces fonctionnalités empruntées à <function>LIKE</function>,
     <function>SIMILAR TO</function> supporte trois méta-caractères de
     correspondance de modèle empruntés aux expressions rationnelles de
     POSIX&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       <literal>|</literal> dénote le contraire (une des deux alternatives).
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>*</literal> dénote la répétition des précédents éléments, entre
       zéro et un nombre illimité de fois.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>+</literal> dénote la répétition des précédents éléments, entre
       une et un nombre illimité de fois.
      </para>
     </listitem>
     <listitem>
      <para>
       Parenthèses <literal>()</literal> peuvent être utilisées pour grouper des
       éléments en un seul élément logique.
      </para>
     </listitem>
     <listitem>
      <para>
       Une expression entre crochets <literal>[...]</literal> spécifie une
       classe de caractères, comme dans les expressions rationnelles POSIX.
      </para>
     </listitem>
    </itemizedlist>

     Notez que les répétitions (<literal>?</> and <literal>{...}</>) ne sont
     pas permises bien qu'elles existent en POSIX. De même, le point
     (<literal>.</literal>) n'est pas un méta-caractère.
    </para>

    <para>
     Comme avec <function>LIKE</>, un anti-slash désactive la signification
     spéciale de tous les méta-caractères&nbsp;; un autre caractère
     d'échappement peut être spécifié avec <literal>ESCAPE</>.
    </para>

   <para>
    Quelques exemples&nbsp;:
<programlisting>
'abc' SIMILAR TO 'abc'      <lineannotation>true</lineannotation>
'abc' SIMILAR TO 'a'        <lineannotation>false</lineannotation>
'abc' SIMILAR TO '%(b|d)%'  <lineannotation>true</lineannotation>
'abc' SIMILAR TO '(b|c)%'   <lineannotation>false</lineannotation>
</programlisting>
   </para>

    <para>
     La fonction <function>substring</function> avec trois paramètres,
     <function>substring(<parameter>chaîne</parameter> from
     <replaceable>modèle</replaceable> for
     <replaceable>caractère d'échappement</replaceable>)</function>, fournit une
     extraction qu'une sous-chaîne correspondant à un
     modèle d'expression rationnelle <acronym>SQL99</acronym>. Comme avec
     <literal>SIMILAR TO</literal>, le modèle spécifié doit correspondre à l'entière
     chaîne de données, sinon la fonction échouera et renverra NULL. Pour
     indiquer la partie du modèle qui devrait être renvoyée en cas de succès,
     le modèle doit contenir deux occurrences du caractères d'échappement suivi
     d'un guillemet double (<literal>"</literal>). Le texte correspondant à la portion
     du modèle entre ces deux marqueurs est renvoyé.
    </para>

   <para>
    Quelques exemples&nbsp;:
<programlisting>
substring('foobar' from '%#"o_b#"%' for '#')  
<lineannotation>oob</lineannotation>
substring('foobar' from '#"o_b#"%' for '#')   
<lineannotation>NULL</lineannotation>
</programlisting>
   </para>
  </sect2>

  <sect2 id="functions-posix-regexp">
   <title>Expressions rationnelles <acronym>POSIX</acronym></title>

   <indexterm zone="functions-posix-regexp">
    <primary>expression rationnelle</primary>
    <seealso>correspondance de modèle</seealso>
   </indexterm>

   <para>
    <xref linkend="functions-posix-table"> liste les opérateurs disponibles
    pour la correspondance de modèles en utilisant les expressions rationnelles
    POSIX.
   </para>

   <table id="functions-posix-table">
    <title>Opérateurs de correspondance des expressions rationnelles</title>

    <tgroup cols="3">
     <thead>
      <row>
       <entry>Opérateur</entry>
       <entry>Description</entry>
       <entry>Exemple</entry>
      </row>
     </thead>

      <tbody>
       <row>
        <entry> <literal>~</literal> </entry>
        <entry>Correspond à l'expression rationnelle, en tenant compte
         de la casse</entry>
        <entry><literal>'thomas' ~ '.*thomas.*'</literal></entry>
       </row>

       <row>
        <entry> <literal>~*</literal> </entry>
        <entry>Correspond à l'expression rationnelle, sans tenir compte
         de la casse</entry>
        <entry><literal>'thomas' ~* '.*Thomas.*'</literal></entry>
       </row>

       <row>
        <entry> <literal>!~</literal> </entry>
        <entry>Ne correspond pas à l'expression rationnelle, en tenant compte
         de la casse</entry>
        <entry><literal>'thomas' !~ '.*Thomas.*'</literal></entry>
       </row>

       <row>
        <entry> <literal>!~*</literal> </entry>
        <entry>Ne correspond pas à l'expression rationnelle, sans tenir compte
         de la casse</entry>
        <entry><literal>'thomas' !~* '.*vadim.*'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <para>
     Les expressions rationnelles <acronym>POSIX</acronym> fournissent un moyen
     plus puissant pour la correspondance de modèles par rapport aux opérateurs
     <function>LIKE</function> et <function>SIMILAR TO</>. Beaucoup d'outils
     Unix comme <command>egrep</command>, <command>sed</command> ou
     <command>awk</command> utilise un langage de correspondance de modèles
     similaire à celui décrit ici.
    </para>

    <para>
     Une expression rationnelle est une séquence de caractères qui est une
     définition abrégée d'un ensemble de chaînes (un <firstterm>ensemble
     rationnel</firstterm>). Une chaîne est dite correspondante à une
     expression rationnelle si elle est membre de l'ensemble rationnel décrit
     par l'expression rationnelle. Comme avec <function>LIKE</function>, les
     caractères modèles correspondent exactement aux caractères de chaîne sauf
     s'ils représentent des caractères spéciaux dans le langage des expressions
     rationnelles mais les expressions rationnelles utilisant des caractères
     spéciaux différents de ceux de <function>LIKE</function>. Contrairement
     aux modèles pour <function>LIKE</function>, une expression rationnelle est
     autorisée à correspondre quelque part dans la chaîne, sauf si l'expression
     rationnelle est explicitement ancrée au début ou à la fin de la chaîne.
    </para>

   <para>
    Quelques exemples&nbsp;:
<programlisting>
'abc' ~ 'abc'    <lineannotation>true</lineannotation>
'abc' ~ '^a'     <lineannotation>true</lineannotation>
'abc' ~ '(b|d)'  <lineannotation>true</lineannotation>
'abc' ~ '^(b|c)' <lineannotation>false</lineannotation>
</programlisting>
   </para>

    <para>
     La fonction <function>substring</function> avec deux paramètres,
     <function>substring(<parameter>chaîne</parameter> from
     <replaceable>modèle</replaceable>)</function>, fournit une extraction
     d'une sous-chaîne correspondant à un modèle d'expression rationnelle
     POSIX. Il renvoie NULL s'il n'y a pas de correspondance et la portion
     de texte correspondant au modèle dans le cas contraire. Mais si le modèle
     contient des parenthèses, la portion de texte ayant correspondu à la
     première sous-expression entre parenthèses (la première dont la parenthèse
     gauche apparaît) est renvoyée. Vous pouvez toujours placer ces parenthèses
     entre l'expression complète si vous voulez utiliser des parenthèses à
     l'intérieur sans déclencher cette exception. Voir aussi les parenthèses
sans capture décrites plus bas.
    </para>

   <para>
    Quelques exemples&nbsp;:
<programlisting>
substring('foobar' from 'o.b')     <lineannotation>oob</lineannotation>
substring('foobar' from 'o(.)b')   <lineannotation>o</lineannotation>
</programlisting>
   </para>

   <para>
    Les expressions rationnelles de <productname>PostgreSQL</productname> sont
    implémentées en utilisant un paquetage écrit par Henry Spencer. La plupart
    des descriptions d'expressions rationnelles ci-dessous sont copiés
    directement de sa page man.
   </para>

<!-- derived from the re_syntax.n man page -->

   <sect3 id="posix-syntax-details">
    <title>Détails des expressions rationnelles</title>

   <para>
    Les expressions rationnelles (<acronym>RE</acronym>s), ainsi qu'elles sont
    définies dans <acronym>POSIX</acronym> 1003.2, viennent en deux
    formats&nbsp;: les <acronym>ER</acronym> <firstterm>étendues</> ou
    <acronym>ERE</> (en gros celles de <command>egrep</command>) et les
    <acronym>ER</acronym> <firstterm>basiques</> ou <acronym>ERB</>
    (principalement celles d'<command>ed</command>).
    <productname>PostgreSQL</productname> supporte les deux formes et
    implémente aussi quelques extensions ne faisant pas partie du standard
    POSIX mais devenant malgré tout de plus en plus populaire à cause de leur
    disponibilité dans les langages de programmation tels que Perl et Tcl.
    Les <acronym>ER</acronym> utilisant ces extensions non POSIX sont appelées
    des <acronym>ER</acronym> <firstterm>avancées</> ou des <acronym>ARE</>
    dans cette documentation. Les ARE sont un surensemble exact des ERE alors
    que les ERB ont des incompatibilités de notation (sauf parler du fait
    qu'elles sont bien plus limitées). Nous décrivons tout d'abord les formats
    ARE et ERE, notant les fonctionnalités qui s'appliquent seulement aux
    ARE et puis nous décrivons la différence avec les ERB.
   </para>

   <note>
    <para>
     La forme des expressions rationnelles acceptées par
     <productname>PostgreSQL</productname> peut être choisie en initialisant le paramètres
     à l'exécution <varname>regex_flavor</varname> (décrit dans <xref
     linkend="runtime-config">). La configuration habituelle est
     <literal>advanced</literal> (NdT&nbsp;: pour avancées) mais il est possible de
     sélectionner <literal>extended</literal> (pour étendues) avec un maximum de
     compatibilité avec les versions antérieures à la 7.4 de
     <productname>PostgreSQL</productname>.
    </para>
   </note>

   <para>
    Une expression rationnelle est définie par une ou plusieurs branches
    <firstterm>branches</firstterm> séparées par des caractères
    <literal>|</literal>. Elle établit une correspondance avec tout ce qui
    correspond à une des branches.
   </para>

   <para>
    Une branche contient des <firstterm>atomes quantifiés</> ou des
    <firstterm>contraintes</>, concaténés. Elle établit une correspondance
    pour le premier suivie d'une correspondance pour le second, etc&nbsp;; une
    branche vide établit une correspondance avec une chaîne vide.
   </para>

   <para>
    Un atome quantifié est un <firstterm>atome</firstterm> suivi le cas échéant d'un
    seul <firstterm>quantificateur</firstterm>. Sans quantificateur, il établit une
    correspondance avec l'atome. Avec un quantificateur, il peut établir autant de
    correspondances avec l'atome que possible. Un <firstterm>atome</firstterm>
    peut être toute possibilité montrée dans <xref linkend="posix-atoms-table">.
    Les quantifieurs possibles et leurs significations sont disponibles dans
    <xref linkend="posix-quantifiers-table">.
   </para>

   <para>
    Une <firstterm>contrainte</> correspond à une chaîne vide mais correspond
    seulement si des conditions spécifiques sont rencontrées. Une contrainte
    peut être utilisée sauf qu'elle ne peut pas être suivie d'un quantificateur.
    Les contraintes simples sont affichées dans <xref
    linkend="posix-constraints-table">&nbsp;; quelques contraintes
    supplémentaires sont décrites après.
   </para>


   <table id="posix-atoms-table">
    <title>Atomes d'expressions rationnelles</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Atome</entry>
       <entry>Description</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>(</literal><replaceable>re</replaceable><literal>)</literal> </entry>
       <entry> (où <replaceable>re</> est toute expression rationnelle)
        établie une correspondance avec <replaceable>re</>, la
        correspondance étant conservée pour un rapport possible</entry>
       </row>

       <row>
       <entry> <literal>(?:</><replaceable>re</><literal>)</> </entry>
       <entry> comme ci-dessus mais la correspondance n'est pas conservée
       (un ensemble de parenthèses <quote>sans capture</>)
       (seulement ARE) </entry>
       </row>

       <row>
       <entry> <literal>.</> </entry>
       <entry> correpond à tout caractère seul </entry>
       </row>

       <row>
       <entry> <literal>[</literal><replaceable>caractères</replaceable><literal>]</literal> </entry>
       <entry> une <firstterm>expression entre crochets</firstterm>, correspondant à
        n'importe lequel des <replaceable>caractères</replaceable> (voir
       <xref linkend="posix-bracket-expressions"> pour plus de détails) </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>k</replaceable> </entry>
       <entry> (où <replaceable>k</replaceable> est tout sauf un caractère alpha-numérique)
       établit une correspondance avec un caractère ordinaire,
       c'est-à-dire <literal>\\</literal> correspond à un caractère anti-slash </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>c</replaceable> </entry>
       <entry> où <replaceable>c</replaceable> est un caractère alphanumérique
       (probablement suivi d'autres caractères)
       est un <firstterm>échappement</firstterm>, voir <xref
       linkend="posix-escape-sequences">
       (ARE seulement&nbsp;; pour les ERE et ERB, ceci correspond à
       <replaceable>c</replaceable>) </entry>
       </row>

       <row>
       <entry> <literal>{</literal> </entry>
       <entry> lorsqu'il est suivi d'un caractère autre qu'un chiffre, établit
       une correspondance avec l'accolade ouvrante <literal>{</literal>&nbsp;; si elle
       est suivie d'un chiffre, c'est le début d'une
       <replaceable>limite</replaceable> (voir ci-dessous) </entry>
       </row>

       <row>
       <entry> <replaceable>x</> </entry>
       <entry> où <replaceable>x</> est un simple caractère sans signification
       et correspondant donc à ce caractère </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Une ER pourrait ne pas terminer avec <literal>\</literal>.
   </para>

   <note>
    <para>
     Rappelez-vous que l'anti-slash (<literal>\</literal>) a déjà une
     signification particulière dans les chaînes littérales
     <productname>PostgreSQL</productname>. Pour écrire un modèle constant contenant un
     anti-slash, vous devez écrire deux anti-slashs dans l'instruction.
    </para>
   </note>

   <table id="posix-quantifiers-table">
    <title>Quantifiant d'expressions rationnelles</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Quantifiant</entry>
       <entry>Correspondance</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>*</literal> </entry>
       <entry> une séquence de 0 ou plus correspondance de l'atome </entry>
       </row>

       <row>
       <entry> <literal>+</literal> </entry>
       <entry> une séquence de 1 ou plus correspondance de l'atome </entry>
       </row>

       <row>
       <entry> <literal>?</literal> </entry>
       <entry> une séquence 0 ou 1 correspondance de l'atome </entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>}</literal> </entry>
       <entry> une séquence d'exactement <replaceable>m</replaceable> correspondance de l'atome
</entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>,}</literal> </entry>
       <entry> une séquence de <replaceable>m</replaceable> ou plus correspondance de l'atome
</entry>
       </row>

       <row>
       <entry>
       <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal>
</entry>
       <entry> une séquence de <replaceable>m</replaceable> à <replaceable>n</replaceable>
       (inclus) correspondance de l'atome&nbsp;; <replaceable>m</replaceable> ne doit pas
       être supérieur à <replaceable>n</replaceable> </entry>
       </row>

       <row>
       <entry> <literal>*?</> </entry>
       <entry> version non gourmande de <literal>*</literal> </entry>
       </row>

       <row>
       <entry> <literal>+?</> </entry>
       <entry> version non gourmande de <literal>+</literal> </entry>
       </row>

       <row>
       <entry> <literal>??</literal> </entry>
       <entry> version non gourmande de <literal>?</literal> </entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>}?</literal> </entry>
       <entry> version non gourmande de <literal>{</literal><replaceable>m</replaceable><literal>}</literal>
</entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>,}?</literal> </entry>
       <entry> version non gourmande de
<literal>{</literal><replaceable>m</replaceable><literal>,}</literal> </entry>
       </row>

       <row>
       <entry>
      
<literal>{</><replaceable>m</><literal>,</><replaceable>n</><literal>}?</>
</entry>
       <entry> version non gourmande de
<literal>{</><replaceable>m</><literal>,</><replaceable>n</><literal>}</>
</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Les formes utilisant <literal>{</literal><replaceable>...</replaceable><literal>}</literal>
    sont connus comme des <firstterm>limite</firstterm>s.
    Les nombres <replaceable>m</replaceable> et <replaceable>n</replaceable> à l'intérieur d'une limite
    sont des entiers décimaux non signés avec des droits allant de 0 à 255 inclus.
   </para>

    <para>
     Les quantifiants <firstterm>non gourmands</firstterm> (disponibles uniquement avec les ERA)
     correspondent aux même possibilités que leur équivalent normal (<firstterm>gourmand</firstterm>)
     mais préfèrent le plus petit nombre plutôt que le plus grand nombre de correspondance.
     Voir <xref linkend="posix-matching-rules"> pour plus de détails.
   </para>

   <note>
    <para>
     Un quantifiant ne peut pas immédiatement suivre un autre quantifiant.
     Un quantifiant ne peut pas commencer une expression ou une sous-expression
     ou suivre <literal>^</literal> ou <literal>|</literal>.
    </para>
   </note>

   <table id="posix-constraints-table">
    <title>Contraintes des expressions rationnelles</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Contrainte</entry>
       <entry>Description</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>^</> </entry>
       <entry> correspond au début d'une chaîne </entry>
       </row>

       <row>
       <entry> <literal>$</> </entry>
       <entry> correspond à la fin d'une chaîne </entry>
       </row>

       <row>
       <entry> <literal>(?=</><replaceable>re</><literal>)</> </entry>
       <entry> <firstterm>positive lookahead</> correspond à tout point où une
       sous-chaîne correspondant à <replaceable>re</> commence
       (uniquement pour les ERA) </entry>
       </row>

       <row>
       <entry> <literal>(?!</><replaceable>re</><literal>)</> </entry>
       <entry> <firstterm>negative lookahead</> correspond à tout point où aucune
       sous-chaîne correspondant à <replaceable>re</> commence
       (uniquement pour les ERA) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Les contraintes <quote>lookahead</quote> ne doivent pas contenir de
    <firstterm>références arrières</> (voir <xref linkend="posix-escape-sequences">),
    et toutes les parenthèses contenues sont considérées comme non capturantes.
   </para>
   </sect3>

   <sect3 id="posix-bracket-expressions">
    <title>Expressions avec crochets</title>

   <para>
    Une <firstterm>expression entre crochets</firstterm> est une liste de
    caractères contenus dans <literal>[]</literal>. Cela correspond normalement
    à tout caractère de la liste (mais voir plus bas). Si la liste commence avec
    <literal>^</literal>, cela correspond à tout caractère <emphasis>non</emphasis>
    compris dans la liste. Si deux caractères de la liste sont séparés par un
    tiret (<literal>-</literal>), c'est un raccourci pour tous les caractères
    compris entre ces deux, c'est-à-dire qu'en <acronym>ASCII</acronym>,
    <literal>[0-9]</literal> correspond à tout chiffre. Il est illégal
    d'avoir deux séquences partageant la même fin, par exemple 
    <literal>a-c-e</literal>. Ces séquences dépendent grandement de la façon
    dont elles sont créées, donc les programmes portables devraient éviter leur
    utilisation.
   </para>

   <para>
    Pour inclure un littéral <literal>]</literal> dans la liste, faites en
    sorte qu'il soit le premier caractère (suivant un possible
    <literal>^</literal>). Pour inclure un littéral <literal>-</literal>,
    faites en sorte qu'il soit le premier ou le dernier caractère, ou qu'il
    soit dans le deuxième point final d'une séquence. Pour utiliser un littéral
    <literal>-</literal> comme premier point final d'une séquence, englobez-le
    dans <literal>[.</literal> et <literal>.]</literal> pour en faire un
    élément de cohésion (voir ci-dessous). Avec l'exception de ces caractères,
    quelques combinaisons utilisant <literal>[</literal> (voir les
    paragraphes suivants) et les échappements (uniquement pour les ERA), tous
    les autres caractères spéciaux perdent leur signification spéciale à
    l'intérieur d'une expression entre crochets. En particulier,
    <literal>\</literal> n'est pas spécial lorsqu'il suit les règles des ERE ou
    des ERB bien qu'il soit spécial (en tant qu'introduction d'un échappement)
    dans les ERA.
   </para>

   <para>
    À l'intérieur d'une expression entre crochets, un élément liant (un
    caractère, une séquence de caractères multiples qui se suivent comme s'il
    n'y avait qu'un seul caractère, ou le nom d'une séquence liée) englobé dans
    <literal>[.</literal> et <literal>.]</literal> correspond à une séquence de
    caractères de cet élément liant. La séquence est un simple élément de la
    liste de l'expression entre crochets. Une expression entre crochets
    contenant un élément liant avec plusieurs caractères peut donc correspondre
    à plus d'un caractère, c'est-à-dire que si la séquence liante inclut un 
    élément liant <literal>ch</literal>, alors la ER
    <literal>[[.ch.]]*c</literal> établit une correspondance avec les cinq
    premiers caractères de <literal>chchcc</literal>.
   </para>

   <note>
    <para>
     <productname>PostgreSQL</productname> n'a pas d'éléments multi-caractères qui se
     suivent. Cette information décrit les comportements futurs possibles.
    </para>
   </note>

   <para>
    À l'intérieur d'une expression entre crochets, un élément liant
    englobé dans <literal>[=</literal> et <literal>=]</literal> est une classe
    d'équivalence, correspondant aux séquences de caractères de tous les
    éléments liant équivalent à celui-là, lui-même étant compris. (S'il
    n'existe pas d'éléments liants correspondants, le traitement est comme si
    les délimiteurs englobant étaient <literal>[.</literal> et
    <literal>.]</literal>.) Par exemple, si <literal>o</literal> et
    <literal>^</literal> sont les membres d'une classe d'équivalence, alors
    <literal>[[=o=]]</literal>, <literal>[[=^=]]</literal> et
    <literal>[o^]</literal> sont tous synonymes. Une classe d'équivalence
    ne peut pas être le point final d'une séquence.
   </para>

   <para>
    À l'intérieur d'une expression entre crochets, le nom d'une classe de
    caractères englobé dans <literal>[:</literal> et <literal>:]</literal>
    correspond à la liste de tous les caractères appartenant à cette classe.
    Les noms de classes de caractères standards sont <literal>alnum</literal>,
    <literal>alpha</literal>, <literal>blank</literal>,
    <literal>cntrl</literal>, <literal>digit</literal>,
    <literal>graph</literal>, <literal>lower</literal>,
    <literal>print</literal>, <literal>punct</literal>,
    <literal>space</literal>, <literal>upper</literal>,
    <literal>xdigit</literal>. Ils correspondent aux classes de caractère
    définies dans
   
<citerefentry><refentrytitle>ctype</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
    Une locale pourrait en fournir d'autres. Une classe de caractères pourrait
    ne pas être utilisée comme point final d'une séquence.
   </para>

   <para>
    Il existe deux cas spéciaux d'expressions entre crochets&nbsp;: les
    expressions entre crochets <literal>[[:&lt;:]]</literal> et
    <literal>[[:&gt;:]]</literal> sont contraintes, correspondant à des chaînes
    vides respectivement au début et à la fin d'un mot. Un mot est défini comme
    une séquence de caractères qui n'est ni précédée ni suivie de caractères.
    Un caractère de mot est un caractère <literal>alnum</literal> (comme défini par
<citerefentry><refentrytitle>ctype</refentrytitle><manvolnum>3</manvolnum></citerefentry>)
    ou un tiret bas. C'est une extension, compatible avec mais non spécifiée 
    dans <acronym>POSIX</acronym> 1003.2, et devrait être utilisé avec
    précaution dans les logiciels conçus pour être portables sur d'autres
    systèmes. Les échappements de contraintes décrites ci-dessous sont
    généralement préférables (elles ne sont pas plus standard mais elles sont
    certainement plus simple à saisir).
   </para>
   </sect3>

   <sect3 id="posix-escape-sequences">
    <title>Échappement d'expressions rationnelles</title>

   <para>
    Les <firstterm>échappements</firstterm> sont des séquences spéciales commençant avec
    <literal>\</literal> et suivies d'un caractère alphanumérique. Les échappements
    viennent en plusieurs variétés&nbsp;: entrée de caractère, raccourci de
    classe et références. Un <literal>\</literal> suivi d'un caractère alphanumérique
    mais ne constituant pas un échappement valide est illégal dans une ERA.
    Pour les ERE, il n'y pas d'échappement&nbsp;: en dehors d'une expression
    entre crochets, un <literal>\</literal> suivi d'un caractère alphanumérique
    signifie simplement ce caractère (ordinaire) et, à l'intérieur d'une
    expression entre crochets, <literal>\</literal> est un caractère ordinaire.
    (ce dernier est la vraie incompatibilité entre les ERE et les ERA.)
   </para>

   <para>
    Les <firstterm>échappements d'entrée de caractère</firstterm> existent pour faciliter
    la spécification de caractères non affichables ou indésirables pour toute
    autre raison dans les ER. Ils sont disponibles dans <xref
    linkend="posix-character-entry-escapes-table">.
   </para>

   <para>
    Les <firstterm>échappements de raccourci de classe</firstterm> fournissent des
    raccourcis pour des classes de caractères communément utilisées. Ils sont
    disponibles dans <xref linkend="posix-class-shorthand-escapes-table">.
   </para>

   <para>
    Un <firstterm>échappement à contrainte</firstterm> est une contrainte, correspondant
    à la chaîne vide si les conditions spécifiques sont rencontrées, écrite
    avec un échappement. Ils sont disponibles dans <xref
    linkend="posix-constraint-escapes-table">.
   </para>

   <para>
    Une <firstterm>référence</firstterm> (<literal>\</literal><replaceable>n</replaceable>) correspond à
    la même chaîne que la sous-expression précédente entre parenthèses
    spécifiée par le nombre <replaceable>n</replaceable> (voir <xref
    linkend="posix-constraint-backref-table">). Par exemple,
    <literal>([bc])\1</literal> correspond à <literal>bb</literal> ou <literal>cc</literal>
    mais ni <literal>bc</literal> ni <literal>cb</literal>. La sous-expression doit
    complètement précédée la référence dans la ER. Les sous-expressions sont
    numérotées dans l'ordre des parenthèses ouvrantes. Les parenthèses non
    capturantes ne définissent pas de sous-expressions.
   </para>

   <note>
    <para>
     Gardez à l'esprit qu'un symbole d'échappement <literal>\</literal> devra être
     doublé si vous souhaitez le saisir comme une chaîne SQL constante.
    </para>
   </note>

   <table id="posix-character-entry-escapes-table">
    <title>Échappements d'entrée de caractère des expressions
rationnelles</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Échappement</entry>
       <entry>Description</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\a</literal> </entry>
       <entry> caractère alerte (sonnerie), comme en C </entry>
       </row>

       <row>
       <entry> <literal>\b</literal> </entry>
       <entry> effacement, comme en C </entry>
       </row>

       <row>
       <entry> <literal>\B</literal> </entry>
       <entry> synonyme de <literal>\</literal> pour aider à la réduction des doubles
       anti-slashs </entry>
       </row>

       <row>
       <entry> <literal>\c</literal><replaceable>X</replaceable> </entry>
       <entry> (où <replaceable>X</replaceable> est un caractère quelconque) le caractère
       dont les 5 bits de poids faible sont les mêmes que ceux de 
       <replaceable>X</replaceable> et dont tous les autres bits sont à zéro </entry>
       </row>

       <row>
       <entry> <literal>\e</literal> </entry>
       <entry> le caractère dont le nom de séquence liante est
       <literal>ESC</literal> ou, en dehors de ça, le caractère de valeur octale
       033 </entry>
       </row>

       <row>
       <entry> <literal>\f</> </entry>
       <entry> retour chariot, comme en C </entry>
       </row>

       <row>
       <entry> <literal>\n</> </entry>
       <entry> retour à la ligne, comme en C </entry>
       </row>

       <row>
       <entry> <literal>\r</> </entry>
       <entry> retour à la ligne, comme en C </entry>
       </row>

       <row>
       <entry> <literal>\t</> </entry>
       <entry> tabulation horizontale, comme en C </entry>
       </row>

       <row>
       <entry> <literal>\u</><replaceable>wxyz</> </entry>
       <entry> (où <replaceable>wxyz</> est exactement quatre chiffres
       hexadécimaux) le caractère Unicode <literal>U+</><replaceable>wxyz</>
       dans l'ordre des octets locaux </entry>
       </row>

       <row>
       <entry> <literal>\U</><replaceable>stuvwxyz</> </entry>
       <entry> (où <replaceable>stuvwxyz</> représentent exactement huit
       chiffres héxadécimaux) réservé pour une extension Unicode vers le 32
       bits, un peu hypothétique
       </entry> 
       </row>

       <row>
       <entry> <literal>\v</> </entry>
       <entry> tabulation verticale, comme en C </entry>
       </row>

       <row>
       <entry> <literal>\x</><replaceable>hhh</> </entry>
       <entry> (où <replaceable>hhh</> est toute séquence de chiffres
       héxadécimaux) le caractère dont la valeur hexadécimale est
       <literal>0x</><replaceable>hhh</>
       (un simple caractère, peu importe le nombre de chiffres hexadécimaux
       utilisés)
       </entry>
       </row>

       <row>
       <entry> <literal>\0</> </entry>
       <entry> le caractère dont la valeur est <literal>0</> </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>xy</replaceable> </entry>
       <entry> (où <replaceable>xy</replaceable> représente exactement deux chiffres
       octaux et qui n'est pas une <firstterm>référence</firstterm>)
       le caractère dont la valeur octale est
       <literal>0</literal><replaceable>xy</replaceable> </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>xyz</replaceable> </entry>
       <entry> (où <replaceable>xyz</replaceable> représente exactement trois chiffres
       octaux et qui n'est pas une <firstterm>référence</firstterm>)
       le caractère dont la valeur octale est
       <literal>0</literal><replaceable>xyz</replaceable> </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Les chiffres hexadécimaux sont <literal>0</literal>-<literal>9</literal>,
    <literal>a</literal>-<literal>f</literal> et <literal>A</literal>-<literal>F</literal>.
    Les chiffres octaux sont <literal>0</literal>-<literal>7</literal>.
   </para>

   <para>
    Les échappements d'entrée de caractère sont toujours pris comme
    des caractères ordinaires. Par exemple, <literal>\135</literal> est <literal>]</literal>
    en ASCII mais <literal>\135</literal> ne termine pas une expression entre crochets.
   </para>

   <table id="posix-class-shorthand-escapes-table">
    <title>Échappement de raccourcis de classe des expressions
rationnelles</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Échappement</entry>
       <entry>Description</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\d</> </entry>
       <entry> <literal>[[:digit:]]</> </entry>
       </row>

       <row>
       <entry> <literal>\s</> </entry>
       <entry> <literal>[[:space:]]</> </entry>
       </row>

       <row>
       <entry> <literal>\w</> </entry>
       <entry> <literal>[[:alnum:]_]</>
       (notez que le tiret bas est inclus) </entry>
       </row>

       <row>
       <entry> <literal>\D</> </entry>
       <entry> <literal>[^[:digit:]]</> </entry>
       </row>

       <row>
       <entry> <literal>\S</> </entry>
       <entry> <literal>[^[:space:]]</> </entry>
       </row>

       <row>
       <entry> <literal>\W</> </entry>
       <entry> <literal>[^[:alnum:]_]</>
       (notez que le tiret bas est inclus) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    À l'intérieur d'expressions entre crochets, <literal>\d</>, <literal>\s</>,
    et <literal>\w</> perdent leur crochet externe, et <literal>\D</>,
    <literal>\S</> et <literal>\W</> sont illégales.
    (Donc, par exemple, <literal>[a-c\d]</> est équivalent à
    <literal>[a-c[:digit:]]</>.
    De plus, <literal>[a-c\D]</>, qui est équivalent à
    <literal>[a-c^[:digit:]]</>, est illégal.)
   </para>

   <table id="posix-constraint-escapes-table">
    <title>Échappements de contraintes des expressions rationnelles</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Échappement</entry>
       <entry>Description</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\A</> </entry>
       <entry> correspond seulement au début de la chaîne
       (voir <xref linkend="posix-matching-rules"> pour comprendre comment ceci
       diffère de <literal>^</>) </entry>
       </row>

       <row>
       <entry> <literal>\m</> </entry>
       <entry> correspond seulement au début d'un mot </entry>
       </row>

       <row>
       <entry> <literal>\M</> </entry>
       <entry> correspond seulement à la fin d'un mot </entry>
       </row>

       <row>
       <entry> <literal>\y</> </entry>
       <entry> correspond seulement au début ou à la fin d'un mot </entry>
       </row>

       <row>
       <entry> <literal>\Y</> </entry>
       <entry> correspond seulement à un point qui n'est ni le début ni la fin
       d'un mot </entry>
       </row>

       <row>
       <entry> <literal>\Z</literal> </entry>
       <entry> correspond seulement à la fin d'une chaîne
       (voir <xref linkend="posix-matching-rules"> pour comprendre comment ceci
       diffère de <literal>$</literal>) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Un mot est défini suivant la spécification de <literal>[[:&lt;:]]</> et
    <literal>[[:&gt;:]]</> ci-dessus. Les contraintes d'échappements sont
    illégales à l'intérieur d'expressions entre crochets.
   </para>

   <table id="posix-constraint-backref-table">
    <title>Références dans les expressions rationnelles</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Échappement</entry>
       <entry>Description</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\</literal><replaceable>m</replaceable> </entry>
       <entry> (où <replaceable>m</replaceable> est un chiffre différent de zéro)
       une référence de la <replaceable>m</replaceable>ème sous-expression </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>mnn</replaceable> </entry>
       <entry> (où <replaceable>m</replaceable> est un chiffre différent de zéro et
       <replaceable>nn</replaceable> quelques chiffres supplémentaires et la valeur
       décimale <replaceable>mnn</replaceable> n'est pas plus grande que le nombre de
       parenthèses fermantes capturantes vues jusqu'à maintenant) une référence 
       de la <replaceable>mnn</replaceable>ème sous-expression </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <note>
    <para>
     Il existe une ambiguïté historique inhérente entre les échappements
     d'entrée de caractères en octal et les référencées, ambiguïté résolue par
     des heuristiques, comme montré ci-dessus. Un zéro en début indique
     toujours un échappement octal. Un seul caractère différent de zéro et
     suivi d'un autre caractère est toujours pris comme une référence. Une
     séquence à plusieurs chiffres ne commençant pas avec un zéro est pris comme
     une référence si une sous-expression convenable (c'est-à-dire que le
     nombre fait partie des numéros de référence). Dans le cas contraire, il
     est pris pour un nombre octal.
    </para>
   </note>
   </sect3>

   <sect3 id="posix-metasyntax">
    <title>Métasyntaxe des expressions rationnelles</title>

   <para>
    En plus de la syntaxe principale décrite ci-dessus, il existe quelques
    formes spéciales et autres possibilités syntaxiques disponibles.
   </para>

   <para>
    Normalement, la recette de ER en cours d'utilisation est déterminé par
    <varname>regex_flavor</varname>. Néanmoins, cela peut être surchargé par un préfixe
    <firstterm>directeur</firstterm>. Si un ER, quelque soit son type, commence
    avec <literal>***:</literal>, le reste de l'ER est considéré comme une ERA.
    Si un ER, quelque soit son type, commence avec <literal>***=</literal>, le reste
    de l'ER est considéré comme une chaîne littérale, tous les caractères étant
    donc considérés ordinaires.
   </para>

   <para>
    Une ERA pourrait commencer avec des <firstterm>options intégrées</>&nbsp;:
    une séquence <literal>(?</><replaceable>xyz</><literal>)</>
    (où <replaceable>xyz</> correspond à un ou plusieurs caractères
    alphabêtiques) spécifie les options affectant le reste de l'ER. Ces options
    surchargent toutes options précédemment déterminées (incluant le type de
    l'ER et la sensibilité à la casse). Les lettres d'options disponibles sont 
    indiquées dans <xref linkend="posix-embedded-options-table">.
   </para>

   <table id="posix-embedded-options-table">
    <title>Lettres d'option intégré à une ERA</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Option</entry>
       <entry>Description</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>b</> </entry>
       <entry> le reste de l'ER est une ERB </entry>
       </row>

       <row>
       <entry> <literal>c</> </entry>
       <entry> activation de la sensibilité à la casse (surcharge l'opérateur
       type) </entry>
       </row>

       <row>
       <entry> <literal>e</> </entry>
       <entry> le reste de l'ER est une ERE </entry>
       </row>

       <row>
       <entry> <literal>i</> </entry>
       <entry> désactivation de la sensibilité à la casse (voir
       <xref linkend="posix-matching-rules">) (surcharge l'opérateur
       type)</entry>
       </row>

       <row>
       <entry> <literal>m</> </entry>
       <entry> synonyme historique pour <literal>n</> </entry>
       </row>

       <row>
       <entry> <literal>n</> </entry>
       <entry> activation de la sensibilité aux nouvelles
       lignes (voir <xref linkend="posix-matching-rules">) </entry>
       </row>

       <row>
       <entry> <literal>p</> </entry>
       <entry> activation partielle de la sensibilité aux nouvelles lignes (voir
       <xref linkend="posix-matching-rules">) </entry>
       </row>

       <row>
       <entry> <literal>q</> </entry>
       <entry> le reste de l'ER est une chaîne littérale (<quote>entre
       guillemets</>), composé uniquement de caractères ordinaires </entry>
       </row>

       <row>
       <entry> <literal>s</> </entry>
       <entry> désactivation de la sensibilité aux nouvelles lignes (par défaut)
       </entry>
       </row>

       <row>
       <entry> <literal>t</> </entry>
       <entry> syntaxe légère (par défaut&nbsp;; voir ci-dessous) </entry>
       </row>

       <row>
       <entry> <literal>w</> </entry>
       <entry> désactivation de la sensibilité aux nouvelles lignes
       (<quote>étrange</>) correspondantes
       (voir <xref linkend="posix-matching-rules">) </entry>
       </row>

       <row>
       <entry> <literal>x</> </entry>
       <entry> syntaxe étendue (voir ci-dessous) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Les options intégrées prennent effet au <literal>)</>
    terminant la séquence. Elles sont disponibles seulement au début d'une ERA
    et pourraient ne plus être utilisées ensuite à l'intérieur de celle-ci.
   </para>

   <para>
    En plus de la syntaxe habituelle d'une ER (<firstterm>légère</>), dans
    laquelle tous les caractères ont une signification, il existe une syntaxe
    <firstterm>étendue</firstterm>, disponible en signifiant l'option intégrée
    <literal>x</literal>. Avec la syntaxe étendue, les caractères d'espace blanc d'une
    ER sont ignorés comme le sont tous les caractères entre un <literal>#</literal> et
    la nouvelle ligne suivante (ou la fin de l'ER). Ceci permet le commentaire
    d'une ER complexe. Il existe trois exceptions à cette règle de base&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       un caractère espace blanc <literal>#</literal> suivi d'un <literal>\</literal> est
       retenu
      </para>
     </listitem>
     <listitem>
      <para>
       un caractère espace blanc  <literal>#</literal> à l'intérieur d'une expression
       entre crochets est retenu
      </para>
     </listitem>
     <listitem>
      <para>
       un espace blanc et des commentaires sont illégaux à l'intérieur de
       symboles multi-caractères, comme les ERA <literal>(?:</literal> ou les ERB
       <literal>\(</literal>
      </para>
     </listitem>
    </itemizedlist>

    Les caractères d'espace blanc en syntaxe étendue sont
    l'espace, la tabulation, le retour chariot et tout caractère
    appartenant à la classe de caractère <replaceable>space</replaceable>.
   </para>

   <para>
    Enfin, dans une ARE, à l'extérieur des expressions entre crochets, la
    séquence <literal>(?#</literal><replaceable>ttt</replaceable><literal>)</literal>
    (où <replaceable>ttt</replaceable> est tout texte ne contenant pas <literal>)</literal>) est
    un commentaire totalement ignoré. De nouveau, cela n'est pas permis entre
    les caractères des symboles multi-caractères comme <literal>(?:</literal>. De tels
    commentaires sont plus un artéfact historique qu'une fonctionnalité utile et
    leur utilisation est obsolète&nbsp;; utilisez plutôt la syntaxe étendue.
   </para>

   <para>
    <emphasis>Aucune</emphasis> de ces extensions métasyntaxe n'est disponible si un
    directeur initial <literal>***=</literal> a spécifié que la saisie de
    l'utilisateur doit être traité comme une chaîne littérale plutôt que comme
    une ER.
   </para>
   </sect3>

   <sect3 id="posix-matching-rules">
    <title>Règles de correspondance des expressions rationnelles</title>

   <para>
    Dans l'hypothèse qu'une ER pourrait correspondre à plus d'une sous-chaîne
    d'une chaîne donnée, l'ER correspond à la première. De même, dans
    l'hypothèse que l'ER pourrait correspondre à plus d'une sous-chaîne
    commençant au même endroit, le choix est déterminé par sa
    <firstterm>préférence</firstterm>&nbsp;: soit la plus longue chaîne, soit la plus
    courte.
   </para>

   <para>
    La plupart des atomes et toutes les contraintes n'ont pas de préférence.
    Une ER entre parenthèses a la même préférence (y compris un manque de
    préférence) que l'ER. Un atome quantifié avec un quantificateur
    <literal>{</literal><replaceable>m</replaceable><literal>}</literal> ou
    <literal>{</literal><replaceable>m</replaceable><literal>}?</literal> a la même préférence (y
    compris un manque de préférence) que l'atome lui-même. Un atome quantifié
    avec d'autres quantifieurs standards (incluant
    <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal>
    avec <replaceable>m</replaceable> égal à <replaceable>n</replaceable>) préfère la correspondance
    la plus longue. Un atome quantifié avec d'autres quantifieurs (incluant
    <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}?</literal>
    avec <replaceable>m</> égal à <replaceable>n</>) préfère la correspondance
    la plus courte. Une branche a la même préférence que son premier atome
    quantifié qui a une préférence. Une ER constitué de deux branches ou plus
    connecté avec l'opérateur <literal>|</literal> préfère la correspondance la plus
    longue.
   </para>

   <para>
    Sujet aux contraintes imposées par les règles de correspondance de
    l'ER complète, les sous-expressions correspondent aussi aux sous-chaînes
    les plus longues ou les plus courtes, en se basant sur leurs préférences,
    avec des sous-expressions commençant en premier dans l'ER prenant l'avantage
    sur ceux commençant après. Notez que les sous-expressions externes ont la
    priorité par rapport aux composants.
   </para>

   <para>
    Les quantifieurs <literal>{1,1}</literal> et <literal>{1,1}?</literal> peuvent être
    utilisés pour forcer la préférence la plus longue ou la plus courte,
    respectivement, sur une sous-expression ou sur l'ER complète.
   </para>

   <para>
    Les longueurs de correspondance sont mesurés en caractères, et non pas en
    éléments liants. Une chaîne vide est considérée comme plus grande que pas
    de correspondance du tout. Par exemple&nbsp;:
    <literal>bb*</literal> correspond aux trois caractères du milieu de
    <literal>abbbc</literal>&nbsp;;
    <literal>(week|wee)(night|knights)</literal> correspond aux dix caractères de
    <literal>weeknights</literal>&nbsp;;
    lorsque <literal>(.*).*</literal> correspond à <literal>abc</literal>, la
    sous-expression entre parenthèses correspond aux trois caractères&nbsp;; et
    quand <literal>(a*)*</literal> correspond à <literal>bc</literal>, à la fois l'ER et la
    sous-expression entre parenthèses correspondent à une chaîne vide.
   </para>

   <para>
    Si la correspondance ne tient pas compte de la casse, l'effet revient à ce
    que toutes les distinctions de casse aient disparu de l'alphabet. Quand un
    caractère alphabétique, existant en plusieurs cas, apparaît comme un
    caractère ordinaire en dehors d'une expression entre crochets, il est
    effectivement transformé en une expression entre crochets contenant les deux
    cas, c'est-à-dire que <literal>x</literal> devient <literal>[xX]</literal>. Quand il
    apparaît dans une expression entre crochets, toutes les transformations de
    casse sont ajoutées à l'expression entre crochets, c'est-à-dire que
    <literal>[x]</literal> devient <literal>[xX]</literal> et que
    <literal>[^x]</literal> devient <literal>[^xX]</literal>.
   </para>

   <para>
    Si la sensibilité aux retours chariots est spécifiée, <literal>.</literal> et les
    expressions entre crochets utilisant ne correspondront jamais au caractère de
    retour à la ligne (de façon à ce que les correspondances ne croisent jamais
    les retours chariots sauf si l'ER arrange ceci explicitement),
    et <literal>^</literal> et <literal>$</literal> correspondront à la chaîne vide
    respectivement après et avant un retour chariot, en plus de correspondre
    respectivement au début et à la fin de la chaîne. Mais les échappements ERA 
    <literal>\A</literal> and <literal>\Z</literal> continuent de correspondre
    <emphasis>seulement</emphasis> au début et à la fin de la chaîne.
   </para>

   <para>
    Si la sensibilité partielle aux retours chariot est spécifiée, ceci affecte
    <literal>.</literal> et les expressions entre crochets comme avec la sensibilité
    aux retours chariot mais sans <literal>^</literal> et <literal>$</literal>.
   </para>

   <para>
    Si la sensibilité partielle inverse aux retours chariot est spécifiée, ceci
    affecte <literal>^</literal> et <literal>$</literal> comme avec la sensibilité
    aux retours chariot mais sans  <literal>.</literal> et les sous-expressions. Ceci
    n'est pas très utile mais est fournie pour des raisons de symétrie.
   </para>
   </sect3>

   <sect3 id="posix-limits-compatibility">
    <title>Limites et compatibilité</title>

   <para>
    Aucune limite particulière n'est imposée sur la longueur des ER dans cette
    implémentation. Néanmoins, les programmes souhaitant être particulièrement
    portables ne devraient pas employer d'ER de plus de 256 octets car
    l'implémentation POSIX peut refuser d'accepter de telles ER.
   </para>

   <para>
    La seule fonctionnalité des ERA, incompatible avec les ERE POSIX, est que
    <literal>\</literal> ne perd pas sa signification spéciale à l'intérieur des
    expressions entre crochets. Toutes les autres fonctionnalités ERA utilisent
    une syntaxe qui est illégale ou a des effets indéfinis ou non spécifiés
    dans les ERE POSIX&nbsp;; la syntaxe <literal>***</literal> des directeurs est en
    dehors de la syntaxe POSIX pour les ERB et les ERE.
   </para>

   <para>
    Un grand nombre des extensions ERA sont empruntées de Perl mais certaines
    ont été modifiées pour les nettoyer et quelques extensions Perl ne sont pas
    présentes. Les incompatibilités incluent <literal>\b</>, <literal>\B</>,
    le manque de traitement spécial pour le retour à la ligne en fin de chaîne,
    l'ajout d'expressions entre crochets aux expressions affectées par les
    correspondance avec retour à la ligne, les restrictions sur les parenthèses
    et les références dans les contraintes, et la correspondance  des chaînes
    suivant leur taille (au lieu de la première rencontrée).
   </para>

   <para>
    Deux incompatibilités importantes existent entre les syntaxes ERA et ERE
    reconnues par les pré-versions 7.4 de <productname>PostgreSQL</productname>:

    <itemizedlist>
     <listitem>
      <para>
       Dans les ERA, <literal>\</literal> suivi d'un caractère alphanumérique est soit
       un échappement soit une erreur alors que dans les versions précédentes,
       c'était simplement un autre moyen d'écrire un caractère alphanumérique.
       Ceci ne devrait pas poser trop de problèmes car il n'existe aucune raison
       pour écrire une telle séquence dans les versions précédentes.
      </para>
     </listitem>
     <listitem>
      <para>
       Dans les ERA, <literal>\</literal> reste un caractère spécial y compris à
       l'intérieur de <literal>[]</literal>, donc un <literal>\</literal> littéral à
       l'intérieur d'une expression entre crochets doit être écrit
       <literal>\\</literal>.
      </para>
     </listitem>
    </itemizedlist>

    Alors que ces différences ne devraient pas poser problèmes pour la plupart
    des applications, vous pouvez les éviter si nécessaire en initialisant
    <varname>regex_flavor</varname> à <literal>extended</literal>.
   </para>
   </sect3>

   <sect3 id="posix-basic-regexes">
    <title>Expressions rationnelles basiques</title>

   <para>
    Les ERB diffèrent des ERE sur plusieurs aspects.
    <literal>|</literal>, <literal>+</literal> et <literal>?</literal> sont des caractères
    ordinaires et il n'existe pas d'équivalent pour leur fonctionnalité. Les
    délimiteurs sont <literal>\{</literal> et <literal>\}</literal>, avec <literal>{</literal> et
    <literal>}</literal> étant eux-même des caractères ordinaires. Les parenthèses
    pour les sous-expressions imbriquées sont <literal>\(</literal> et <literal>\)</literal>,
    avec <literal>(</literal> et <literal>)</literal> étant eux-mêmes des caractères
    ordinaires. <literal>^</> est un caractère ordinaire sauf au début d'une ER
    ou au début d'une sous-expression entre parenthèses,
    <literal>$</literal> est un caractère ordinaire sauf à la fin d'une ER
    ou à la fin d'une sous-expression entre parenthèses et
    <literal>*</literal> est un caractère ordinaire s'il apparaît au début d'une ER ou
    au début d'une sous-expression entre parenthèses (après un possible
    <literal>^</literal>). Enfin, les références à un seul chiffre sont disponibles, et
    <literal>\&lt;</literal> et <literal>\&gt;</literal> sont des synonymes pour
    respectivement <literal>[[:&lt;:]]</literal> et <literal>[[:&gt;:]]</literal>&nbsp;;
    aucun autre échappement n'est disponible.
   </para>
   </sect3>

<!-- end re_syntax.n man page -->

  </sect2>
 </sect1>


  <sect1 id="functions-formatting">
   <title>Fonctions de formatage des types de données</title>

   <indexterm zone="functions-formatting">
    <primary>formatage</primary>
   </indexterm>

   <indexterm zone="functions-formatting">
    <primary>to_char</primary>
   </indexterm>

   <para>
    Les fonctions de formatage de <productname>PostgreSQL</productname>
    fournissent un ensemble d'outils puissants pour convertir différent types de
    données (date/heure, entier, nombre à virgule flottante, numérique) en des
    chaînes formatées et pour convertir des chaînes formatées en des types de
    données spécifiques. <xref linkend="functions-formatting-table"> les listes.
    Ces fonctions suivent toutes une convention d'appels commune&nbsp;: le
    premier argument est la valeur à formater et le second argument est un
    modèle définissant le format de sortie ou d'entrée.
   </para>

    <table id="functions-formatting-table">
     <title>Fonctions de formatage</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Fonction</entry>
	<entry>Type en retour</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal><function>to_char</function>(<type>timestamp</type>,
<type>text</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>convertit un champ date/heure (timestamp) en une chaîne</entry>
	<entry><literal>to_char(current_timestamp, 'HH12:MI:SS')</literal></entry>
       </row>
       <row>
	<entry><literal><function>to_char</function>(<type>interval</type>,
<type>text</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>convertit un champ de type interval en une chaîne</entry>
	<entry><literal>to_char(interval '15h&nbsp;2m&nbsp;12s',
'HH24:MI:SS')</literal></entry>
       </row>
       <row>
	<entry><literal><function>to_char</function>(<type>int</type>,
<type>text</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>convertit un champ de type integer en une chaîne</entry>
	<entry><literal>to_char(125, '999')</literal></entry>
       </row>
       <row>
	<entry><literal><function>to_char</function>(<type>double precision</type>,
        <type>text</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>convertit un champ de type real/double precision en une
          chaîne</entry>
	<entry><literal>to_char(125.8::real, '999D9')</literal></entry>
       </row>
       <row>
	<entry><literal><function>to_char</function>(<type>numeric</type>,
<type>text</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>convertit un champ de type numeric en une chaîne</entry>
	<entry><literal>to_char(-125.8, '999D99S')</literal></entry>
       </row>
       <row>
	<entry><literal><function>to_date</function>(<type>text</type>,
<type>text</type>)</literal></entry>
	<entry><type>date</type></entry>
	<entry>convertit une chaîne en date</entry>
	<entry><literal>to_date('05&nbsp;Dec&nbsp;2000',
'DD&nbsp;Mon&nbsp;YYYY')</literal></entry>
       </row>
       <row>
	<entry><literal><function>to_timestamp</function>(<type>text</type>,
<type>text</type>)</literal></entry>
	<entry><type>timestamp</type></entry>
	<entry>convertit une chaîne string en un champ de type timestamp</entry>
	<entry><literal>to_timestamp('05&nbsp;Dec&nbsp;2000',
'DD&nbsp;Mon&nbsp;YYYY')</literal></entry>
       </row>
       <row>
	<entry><literal><function>to_number</function>(<type>text</type>,
<type>text</type>)</literal></entry>
	<entry><type>numeric</type></entry>
	<entry>convertit une chaîne en champ de type numeric</entry>
	<entry><literal>to_number('12,454.8-', '99G999D9S')</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Attention&nbsp;:
<literal><function>to_char</function>(<type>interval</type>,
<type>text</type>)</literal> 
    est obsolète et ne devrait plus être utilisé dans du code nouvellement
    écrit. Elle sera supprimée dans la prochaine version.
   </para>

   <para>
    Dans une chaîne modèle en sortie (for <function>to_char</function>), certains
    modèles sont reconnus et remplacés avec les données proprement formatées à
    partir de la valeur à formater. Tout texte qui n'est pas un modèle est
    copié sans modification. De même, sur une chaîne modèle en entrée (pour tout
    sauf <function>to_char</function>), les modèles identifient les parties de la
    chaîne en entrée à récupérer et les valeurs à trouver.
   </para>

  <para>
   <xref linkend="functions-formatting-datetime-table"> affiche les modèles
   disponibles pour formater les valeurs de types date et heure.
  </para>

    <table id="functions-formatting-datetime-table">
     <title>Modèles pour le formatage de champs de type date/heure</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Modèle</entry>
	<entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal>HH</literal></entry>
	<entry>heure du jour (01-12)</entry>
       </row>
       <row>
	<entry><literal>HH12</literal></entry>
	<entry>heure du jour (01-12)</entry>
       </row>       
       <row>
	<entry><literal>HH24</literal></entry>
	<entry>heure du jour (00-23)</entry>
       </row>       
       <row>
	<entry><literal>MI</literal></entry>
	<entry>minute (00-59)</entry>
       </row>   
       <row>
	<entry><literal>SS</literal></entry>
	<entry>seconde (00-59)</entry>
       </row>
       <row>
	<entry><literal>MS</literal></entry>
	<entry>milliseconde (000-999)</entry>
       </row>
       <row>
	<entry><literal>US</literal></entry>
	<entry>microseconde (000000-999999)</entry>
       </row>
       <row>
	<entry><literal>SSSS</literal></entry>
	<entry>secondes passées depuis minuit (0-86399)</entry>
       </row>
       <row>
	<entry><literal>AM</literal> ou <literal>A.M.</literal> ou
	<literal>PM</literal> ou <literal>P.M.</literal></entry>
	<entry>indicateur du méridien (en majuscule)</entry>
       </row>
       <row>
	<entry><literal>am</literal> ou <literal>a.m.</literal> ou
	<literal>pm</literal> ou <literal>p.m.</literal></entry>
	<entry>indicateur du méridien (en minuscule)</entry>
       </row>
       <row>
	<entry><literal>Y,YYY</literal></entry>
	<entry>année (4 chiffres et plus) avec virgule</entry>
       </row>
       <row>
	<entry><literal>YYYY</literal></entry>
	<entry>year (quatre chiffres et plus)</entry>
       </row>
       <row>
	<entry><literal>YYY</literal></entry>
	<entry>les trois derniers chiffres de l'année</entry>
       </row>
       <row>
	<entry><literal>YY</literal></entry>
	<entry>les deux derniers chiffres de l'année</entry>
       </row>
       <row>
	<entry><literal>Y</literal></entry>
	<entry>le dernier chiffre de l'année</entry>
       </row>
       <row>
	<entry><literal>BC</literal> ou <literal>B.C.</literal> ou
	<literal>AD</literal> ou <literal>A.D.</literal></entry>
	<entry>indicateur de l'ère (majuscule)</entry>
       </row>
       <row>
	<entry><literal>bc</literal> ou <literal>b.c.</literal> ou
	<literal>ad</literal> ou <literal>a.d.</literal></entry>
	<entry>indicateur de l'ère (minuscule)</entry>
       </row>
       <row>
	<entry><literal>MONTH</literal></entry>
	<entry>nom complet du mois en majuscule (espaces ajoutés pour arriver à
         neuf caractères)</entry>
       </row>
       <row>
	<entry><literal>Month</literal></entry>
	<entry>nom complet du mois (espaces ajoutés pour arriver à
         neuf caractères)</entry>
       </row>
       <row>
	<entry><literal>month</literal></entry>
	<entry>nom complet du mois en minuscule (espaces ajoutés pour arriver à
         neuf caractères)</entry>
       </row>
       <row>
	<entry><literal>MON</literal></entry>
	<entry>abréviation du nom du mois en majuscule (trois
         caractères)</entry>
       </row>
       <row>
	<entry><literal>Mon</literal></entry>
	<entry>abréviation du nom du mois (trois caractères)</entry>
       </row>
       <row>
	<entry><literal>mon</literal></entry>
	<entry>abréviation du nom du mois en minuscule (trois
         caractères)</entry>
       </row>
       <row>
	<entry><literal>MM</literal></entry>
	<entry>numéro du mois (01-12)</entry>
       </row>
       <row>
	<entry><literal>DAY</literal></entry>
	<entry>nom complet du jour en majuscule (espaces ajoutés pour
         arriver à neuf caractères)</entry>
       </row>
       <row>
	<entry><literal>Day</literal></entry>
	<entry>nom complet du jour (espaces ajoutés pour
         arriver à neuf caractères)</entry>
       </row>
       <row>
	<entry><literal>day</literal></entry>
	<entry>nom complet du jour en minuscule (espaces ajoutés pour
         arriver à neuf caractères)</entry>
       </row>
       <row>
	<entry><literal>DY</literal></entry>
	<entry>abréviation du nom du jour en majuscule (3 caractères)</entry>
       </row>
       <row>
	<entry><literal>Dy</literal></entry>
	<entry>abréviation du nom du jour (3 caractères)</entry>
       </row>
       <row>
	<entry><literal>dy</literal></entry>
	<entry>abréviation du nom du jour en minuscule (3 caractères)</entry>
       </row>
       <row>
	<entry><literal>DDD</literal></entry>
	<entry>jour de l'année (001-366)</entry>
       </row>
       <row>
	<entry><literal>DD</literal></entry>
	<entry>jour du mois (01-31)</entry>
       </row>
       <row>
	<entry><literal>D</literal></entry>
	<entry>jour de la semaine (de 1 à 7, dimanche étant le 1)</entry>
       </row>
       <row>
	<entry><literal>W</literal></entry>
	<entry>numéro de semaine du mois (de 1 à 5) (la première semaine
         commence le premier jour du mois.)</entry>
       </row> 
       <row>
	<entry><literal>WW</literal></entry>
	<entry>numéro de semaine dans l'année (de 1 à 53) (la première semaine
         commence le premier jour de l'année.)</entry>
       </row>
       <row>
	<entry><literal>IW</literal></entry>
	<entry>numéro de semaine ISO de l'année (le premier jeudi de la
nouvelle année correspond à la semaine 1.)</entry>
       </row>
       <row>
	<entry><literal>CC</literal></entry>
	<entry>siècle (2 chiffres)</entry>
       </row>
       <row>
	<entry><literal>J</literal></entry>
	<entry>Julian Day (nombre de jours depuis le 1er janvier 4712 avant
         JC)</entry>
       </row>
       <row>
	<entry><literal>Q</literal></entry>
	<entry>trimestre</entry>
       </row>
       <row>
	<entry><literal>RM</literal></entry>
	<entry>mois en nombre romain (I-XII&nbsp;; I étant janvier) (en
         majuscule)</entry>
       </row>
       <row>
	<entry><literal>rm</literal></entry>
	<entry>mois en nombre romain (i-xii; i étant janvier) (en
         minuscule)</entry>
       </row>
       <row>
	<entry><literal>TZ</literal></entry>
	<entry>nom du fuseau horaire (en majuscule)</entry>
       </row>
       <row>
	<entry><literal>tz</literal></entry>
	<entry>nom du fuseau horaire (en minuscule)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Certains modificateurs peuvent être appliqués à tout modèle pour changer
    leur comportement. Par exemple, <literal>FMMonth</literal>
    est le modèle <literal>Month</literal> avec le modificateur
    <literal>FM</literal>.
    <xref linkend="functions-formatting-datetimemod-table"> affiche les
    modificateurs de modèles pour le formatage des dates/heures.
   </para>

    <table id="functions-formatting-datetimemod-table">
     <title>Modificateurs de modèles pour le formatage des dates/heures</title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>Modificateur</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>préfixe <literal>FM</literal></entry>
	<entry>mode remplissage (supprime les espaces et les zéros)</entry>
	<entry><literal>FMMonth</literal></entry>
       </row>
       <row>
	<entry>suffixe <literal>TH</literal></entry>
	<entry>suffixe du nombre ordinal en majuscule</entry>
	<entry><literal>DDTH</literal></entry>
       </row>	
       <row>
	<entry>suffixe <literal>th</literal></entry>
	<entry>suffixe du nombre ordinal en minuscule</entry>
	<entry><literal>DDth</literal></entry>
       </row>
       <row>
	<entry>préfixe <literal>FX</literal></entry>
	<entry>option global de format fixé (voir les notes
         d'utilisation)</entry>
	<entry><literal>FX&nbsp;Month&nbsp;DD&nbsp;Day</literal></entry>
       </row>	
       <row>
	<entry>suffixe <literal>SP</literal></entry>
	<entry>mode épeler (pas encore implémenté)</entry>
	<entry><literal>DDSP</literal></entry>
       </row>       
      </tbody>
     </tgroup>
    </table>

   <para>
    Notes d'utilisation pour le formatage date/heure&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       <literal>FM</literal> supprime les zéro au début et les espaces en
       fin qui, autrement aurait été ajouté pour que la sortie du modèle soit de
       taille fixe.
      </para>
     </listitem>

     <listitem>
      <para>
       <function>to_timestamp</function> et <function>to_date</function>
       passent les espaces blancs multiples de la chaîne en entrée si l'option
       <literal>FX</literal> n'est pas utilisée. <literal>FX</literal> doit
       être spécifié et être le premier élément du modèle. Par exemple,
       <literal>to_timestamp('2000&nbsp;&nbsp;&nbsp;&nbsp;JUN', 'YYYY
MON')</literal> est correct mais
       <literal>to_timestamp('2000&nbsp;&nbsp;&nbsp;&nbsp;JUN', 'FXYYYY
MON')</literal> renvoie une erreur car <function>to_timestamp</function>
       n'attend qu'un seul espace.
      </para>
     </listitem>

     <listitem>
      <para>
       Le texte ordinaire est autorisé dans les modèles
       <function>to_char</function> et sera remis en sortie de façon littérale.
       Vous pouvez placez une sous-chaîne entre des guillemets doubles pour
       forcer son interprétation en tant que texte littéral même s'il contient
       des mots clés de modèles. Par exemple, dans
       <literal>'"Hello Year "YYYY'</literal>, les caractères
       <literal>YYYY</literal> seront remplacés par l'année mais le seul
       <literal>Y</literal> du mot <literal>Year</literal> ne le sera pas.
      </para>
     </listitem>

     <listitem>
      <para>
       Si vous voulez avoir un guillemet double dans la sortie, vous devez le
       précéder d'un anti-slash, par exemple <literal>'\\"YYYY
       Month\\"'</literal>. <!-- "" font-lock sanity :-) -->
       (Deux anti-slashs sont nécessaire parce qu'un seul anti-slash a
       déjà une signification spéciale dans une chaîne.)
      </para>
     </listitem>

     <listitem>
      <para>
       La conversion <literal>YYYY</literal> d'une chaîne vers un champ de type
       <type>timestamp</type> ou <type>date</type> a une restriction dans le
       cas où vous utilisez une année avec plus de quatre chiffres. Vous devez
       utiliser des caractères non numériques ou un modèle après
       <literal>YYYY</literal>, sinon l'année sera toujours interprétée sur
       quatre chiffres. Par exemple, pour l'année 20000)&nbsp;:
       <literal>to_date('200001131', 'YYYYMMDD')</literal> sera interprété
       comme une année à quatre chiffres&nbsp;; utilisez à la place un
       séparateur non décimal après l'année comme
       <literal>to_date('20000-1131', 'YYYY-MMDD')</literal> ou
       <literal>to_date('20000Nov31', 'YYYYMonDD')</literal>.
      </para>
     </listitem>

     <listitem>
      <para>
       Les valeurs en millisecondes (<literal>MS</literal>) et microsecondes
       (<literal>US</literal>) dans une conversion d'une chaîne vers un champ
       de type <type>timestamp</type> sont utilisées comme faisant partie de la
       fraction décimale des secondes. Par exemple,
       <literal>to_timestamp('12:3', 'SS:MS')</literal> n'est pas trois
       millisecondes mais 300 car la conversion le compte comme 12 + 0,3
       secondes. Ceci signifie que le format <literal>SS:MS</literal>, les
       valeurs d'entrées <literal>12:3</literal>, <literal>12:30</literal> et
       <literal>12:300</literal> spécifient le même nombre de millisecondes.
       Pour obtenir trois millisecondes, vous devez utiliser
       <literal>12:003</literal> car la conversion compte avec
       12 + 0,003 = 12,003 secondes.
      </para>

      <para>
       Voici un exemple encore plus complexe&nbsp;: 
       <literal>to_timestamp('15:12:02.020.001230', 'HH:MI:SS.MS.US')</literal>
       représente 15 heures, 12 minutes et 2 secondes + 20 millisecondes +
       1230 microsecondes = 2,021230 secondes. 
      </para>
     </listitem>
    </itemizedlist>
   </para>

  <para>
   <xref linkend="functions-formatting-numeric-table"> affiche les modèles
   disponibles pour le formatage des valeurs numériques.
  </para>

    <table id="functions-formatting-numeric-table">
     <title>Modèles pour le formatage de valeurs numériques</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Modèle</entry>
	<entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal>9</literal></entry>
	<entry>valeur avec le nombre spécifié de chiffres</entry>
       </row>
       <row>
	<entry><literal>0</literal></entry>
	<entry>valeur avec des zéros de remplissage</entry>
       </row>
       <row>
	<entry><literal>.</literal> (point)</entry>
	<entry>point décimal</entry>
       </row>       
       <row>
	<entry><literal>,</literal> (virgule)</entry>
	<entry>séparateur de groupe (milliers)</entry>
       </row>
       <row>
	<entry><literal>PR</literal></entry>
	<entry>valeur négative entre crochets</entry>
       </row>
       <row>
	<entry><literal>S</literal></entry>
	<entry>signe accroché au nombre (utilise la locale)</entry>
       </row>
       <row>
	<entry><literal>L</literal></entry>
	<entry>symbole monétaire (utilise la locale)</entry>
       </row>
       <row>
	<entry><literal>D</literal></entry>
	<entry>point décimale (utilise la locale)</entry>
       </row>
       <row>
	<entry><literal>G</literal></entry>
	<entry>séparateur de groupe (utilise la locale)</entry>
       </row>
       <row>
	<entry><literal>MI</literal></entry>
	<entry>signe moins dans la position spécifiée (si le nombre est
         inférieur à 0)</entry>
       </row>
       <row>
	<entry><literal>PL</literal></entry>
	<entry>signe plus dans la position spécifiée (si le nombre est
         supérieur à 0)</entry>
       </row>
       <row>
	<entry><literal>SG</literal></entry>
	<entry>signe plus/moins dans la position spécifiée</entry>
       </row>
       <row>
	<entry><literal>RN</literal></entry>
	<entry>numéro romain (entrée entre 1 et 3999)</entry>
       </row>
       <row>
	<entry><literal>TH</literal> ou <literal>th</literal></entry>
	<entry>suffixe du nombre ordinal</entry>
       </row>
       <row>
	<entry><literal>V</literal></entry>
	<entry>décalage d'un nombre spécifié de chiffres (voir les
         notes)</entry>
       </row>
       <row>
	<entry><literal>EEEE</literal></entry>
	<entry>notation scientifique (pas encore implémentée)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Notes d'utilisation pour le formatage des nombres&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       Un signe formaté en utilisant <literal>SG</literal>,
       <literal>PL</literal> ou <literal>MI</literal> n'est pas ancré au
       nombre&nbsp;; par exemple, <literal>to_char(-12, 'S9999')</literal>
       produit <literal>'&nbsp;&nbsp;-12'</literal> mais
       <literal>to_char(-12, 'MI9999')</literal> produit
       <literal>'-&nbsp;&nbsp;12'</literal>. L'implémentation Oracle n'autorise
       pas l'utilisation de <literal>MI</literal> devant <literal>9</literal>,
       mais requiert plutôt que <literal>9</literal> précède
       <literal>MI</literal>.
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>9</literal> résulté en une valeur avec le même nombre de
       chiffre. Si un chiffre n'est pas disponible, il est remplacé par un
       espace.
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>TH</literal> ne convertit pas les valeurs inférieures à zéro et
       ne convertit pas les nombres à fraction.
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>PL</literal>, <literal>SG</literal>, et
       <literal>TH</literal> sont des extensions
       <productname>PostgreSQL</productname>.
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>V</literal> multiplie effectivement les valeurs en entrée par
       <literal>10^<replaceable>n</replaceable></literal>, où
       <replaceable>n</replaceable> est le nombre de chiffres suivant
       <literal>V</literal>. <function>to_char</function> ne supporte pas
       l'utilisation de <literal>V</literal> combiné avec un point décimal.
       (donc <literal>99.9V99</literal> n'est pas autorisé.)
      </para>
     </listitem>
    </itemizedlist>
   </para>   

  <para>
   <xref linkend="functions-formatting-examples-table"> affiche quelques
   exemples de l'utilisation de la fonction <function>to_char</function>.
  </para>

    <table id="functions-formatting-examples-table">
     <title>Exemples avec <function>to_char</function></title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Expression</entry>
	<entry>Résultat</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>to_char(current_timestamp,
'Day,&nbsp;DD&nbsp;&nbsp;HH12:MI:SS')</literal></entry>
       
<entry><literal>'Tuesday&nbsp;&nbsp;,&nbsp;06&nbsp;&nbsp;05:39:18'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(current_timestamp,
'FMDay,&nbsp;FMDD&nbsp;&nbsp;HH12:MI:SS')</literal></entry>
        <entry><literal>'Tuesday,&nbsp;6&nbsp;&nbsp;05:39:18'</literal></entry>
       </row>          
       <row>
        <entry><literal>to_char(-0.1, '99.99')</literal></entry>
        <entry><literal>'&nbsp;&nbsp;-.10'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(-0.1, 'FM9.99')</literal></entry>
        <entry><literal>'-.1'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(0.1, '0.9')</literal></entry>
        <entry><literal>'&nbsp;0.1'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12, '9990999.9')</literal></entry>
        <entry><literal>'&nbsp;&nbsp;&nbsp;&nbsp;0012.0'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12, 'FM9990999.9')</literal></entry>
        <entry><literal>'0012.'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485, '999')</literal></entry>
        <entry><literal>'&nbsp;485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(-485, '999')</literal></entry>
        <entry><literal>'-485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485, '9&nbsp;9&nbsp;9')</literal></entry>
        <entry><literal>'&nbsp;4&nbsp;8&nbsp;5'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(1485, '9,999')</literal></entry>
        <entry><literal>'&nbsp;1,485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(1485, '9G999')</literal></entry>
        <entry><literal>'&nbsp;1&nbsp;485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, '999.999')</literal></entry>
        <entry><literal>'&nbsp;148.500'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, 'FM999.999')</literal></entry>
        <entry><literal>'148.5'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, 'FM999.990')</literal></entry>
        <entry><literal>'148.500'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, '999D999')</literal></entry>
        <entry><literal>'&nbsp;148,500'</literal></entry>	 
       </row>
       <row>
        <entry><literal>to_char(3148.5, '9G999D999')</literal></entry>
        <entry><literal>'&nbsp;3&nbsp;148,500'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(-485, '999S')</literal></entry>
        <entry><literal>'485-'</literal></entry>
       </row>
       <row>		
        <entry><literal>to_char(-485, '999MI')</literal></entry>
        <entry><literal>'485-'</literal></entry>	
       </row>
       <row>
        <entry><literal>to_char(485, '999MI')</literal></entry>
        <entry><literal>'485&nbsp;'</literal></entry>		
       </row>
       <row>
        <entry><literal>to_char(485, 'FM999MI')</literal></entry>
        <entry><literal>'485'</literal></entry>		
       </row>
       <row>
        <entry><literal>to_char(485, 'PL999')</literal></entry>
        <entry><literal>'+485'</literal></entry>	
       </row>
       <row>		
        <entry><literal>to_char(485, 'SG999')</literal></entry>
        <entry><literal>'+485'</literal></entry>	
       </row>
       <row>
        <entry><literal>to_char(-485, 'SG999')</literal></entry>
        <entry><literal>'-485'</literal></entry>	
       </row>
       <row>
        <entry><literal>to_char(-485, '9SG99')</literal></entry>
        <entry><literal>'4-85'</literal></entry>	
       </row>
       <row>
        <entry><literal>to_char(-485, '999PR')</literal></entry>
        <entry><literal>'&lt;485&gt;'</literal></entry>		
       </row>
       <row>
        <entry><literal>to_char(485, 'L999')</literal></entry>
        <entry><literal>'DM&nbsp;485</literal></entry>	 
       </row>
       <row>
        <entry><literal>to_char(485, 'RN')</literal></entry>		
       
<entry><literal>'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDLXXXV'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485, 'FMRN')</literal></entry>	
        <entry><literal>'CDLXXXV'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(5.2, 'FMRN')</literal></entry>
        <entry><literal>'V'</literal></entry>		
       </row>
       <row>
        <entry><literal>to_char(482, '999th')</literal></entry>
        <entry><literal>'&nbsp;482nd'</literal></entry>				
       </row>
       <row>
        <entry><literal>to_char(485, '"Good&nbsp;number:"999')</literal></entry>
        <entry><literal>'Good&nbsp;number:&nbsp;485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485.8,
'"Pre:"999"&nbsp;Post:"&nbsp;.999')</literal></entry>
        <entry><literal>'Pre:&nbsp;485&nbsp;Post:&nbsp;.800'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12, '99V999')</literal></entry>		
        <entry><literal>'&nbsp;12000'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12.4, '99V999')</literal></entry>
        <entry><literal>'&nbsp;12400'</literal></entry>
       </row>
       <row>		
        <entry><literal>to_char(12.45, '99V9')</literal></entry>
        <entry><literal>'&nbsp;125'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>


  <sect1 id="functions-datetime">
   <title>Fonctions et opérateurs pour date/heure</title>

  <para>
   <xref linkend="functions-datetime-table"> affiche les fonctions disponibles
   pour le traitement des valeurs date et heure avec des détails apparaissant
   dans les sous-sections suivantes. <xref
   linkend="operators-datetime-table"> illustre les comportements des
   opérateurs d'arithmétique basique (<literal>+</literal>,
   <literal>*</literal>, etc.).  Pour les fonctions de formatage, référez-vous à
   <xref linkend="functions-formatting">. Vous devriez être familier avec les
   informations de base sur les types de données date/heure d'après <xref
   linkend="datatype-datetime">.
  </para>

  <para>
   Toutes les fonctions et opérateurs décrit ci-dessous acceptant une entrée de
   type <type>time</type> ou <type>timestamp</type> viennent en deux
   variantes&nbsp;: une prenant <type>time with time zone</type> ou
   <type>timestamp with time zone</type> et une autre prenant <type>time without
   time zone</type> ou <type>timestamp without time zone</type>. Pour faire
   bref, ces variantes ne sont pas affichées séparément.
  </para>

    <table id="operators-datetime-table">
     <title>Opérateurs date/heure</title>

     <tgroup cols="3">
      <thead>
       <row>
        <entry>Opérateur</entry>
        <entry>Exemple</entry>
        <entry>Résultat</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>date '2001-09-28' + integer '7'</literal></entry>
        <entry><literal>date '2001-10-05'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>date '2001-09-28' + interval '1 hour'</literal></entry>
        <entry><literal>timestamp '2001-09-28 01:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>date '2001-09-28' + time '03:00'</literal></entry>
        <entry><literal>timestamp '2001-09-28 03:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>time '03:00' + date '2001-09-28'</literal></entry>
        <entry><literal>timestamp '2001-09-28 03:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>interval '1 day' + interval '1 hour'</literal></entry>
        <entry><literal>interval '1 day 01:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>timestamp '2001-09-28 01:00' + interval '23
hours'</literal></entry>
        <entry><literal>timestamp '2001-09-29 00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>time '01:00' + interval '3 hours'</literal></entry>
        <entry><literal>time '04:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>interval '3 hours' + time '01:00'</literal></entry>
        <entry><literal>time '04:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>- interval '23 hours'</literal></entry>
        <entry><literal>interval '-23:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>date '2001-10-01' - date '2001-09-28'</literal></entry>
        <entry><literal>integer '3'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>date '2001-10-01' - integer '7'</literal></entry>
        <entry><literal>date '2001-09-24'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>date '2001-09-28' - interval '1 hour'</literal></entry>
        <entry><literal>timestamp '2001-09-27 23:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>time '05:00' - time '03:00'</literal></entry>
        <entry><literal>interval '02:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>time '05:00' - interval '2 hours'</literal></entry>
        <entry><literal>time '03:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>timestamp '2001-09-28 23:00' - interval '23
hours'</literal></entry>
        <entry><literal>timestamp '2001-09-28 00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>interval '1 day' - interval '1 hour'</literal></entry>
        <entry><literal>interval '23:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>interval '2 hours' - time '05:00'</literal></entry>
        <entry><literal>time '03:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>timestamp '2001-09-29 03:00' - timestamp '2001-09-27
12:00'</literal></entry>
        <entry><literal>interval '1 day 15:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>*</literal> </entry>
        <entry><literal>double precision '3.5' * interval '1
hour'</literal></entry>
        <entry><literal>interval '03:30'</literal></entry>
       </row>

       <row>
        <entry> <literal>*</literal> </entry>
        <entry><literal>interval '1 hour' * double precision
'3.5'</literal></entry>
        <entry><literal>interval '03:30'</literal></entry>
       </row>

       <row>
        <entry> <literal>/</literal> </entry>
        <entry><literal>interval '1 hour' / double precision
'1.5'</literal></entry>
        <entry><literal>interval '00:40'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <table id="functions-datetime-table">
     <title>Fonctions date/heure</title>
     <tgroup cols="5">
      <thead>
       <row>
	<entry>Fonction</entry>
	<entry>Code de retour</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
	<entry>Résultat</entry>
       </row>
      </thead>

      <tbody>
       <row>
	<entry><literal><function>age</function>(<type>timestamp</type>)</literal></entry>
	<entry><type>interval</type></entry>
	<entry>Soustraction à partir d'aujourd'hui</entry>
	<entry><literal>age(timestamp '1957-06-13')</literal></entry>
	<entry><literal>43 years 8 mons 3 days</literal></entry>
       </row>

       <row>
	<entry><literal><function>age</function>(<type>timestamp</type>,
<type>timestamp</type>)</literal></entry>
	<entry><type>interval</type></entry>
	<entry>Arguments de soustraction</entry>
	<entry><literal>age('2001-04-10', timestamp '1957-06-13')</literal></entry>
	<entry><literal>43 years 9 mons 27 days</literal></entry>
       </row>

       <row>
	<entry><literal><function>current_date</function></literal></entry>
	<entry><type>date</type></entry>
	<entry>Date d'aujourd'hui&nbsp;; voir <xref
         linkend="functions-datetime-current">
	</entry>
	<entry></entry>
	<entry></entry>
       </row>

       <row>
        <entry><literal><function>current_time</function></literal></entry>
        <entry><type>time with time zone</type></entry>
        <entry>Heure du jour&nbsp;; voir <xref
         linkend="functions-datetime-current">
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
	<entry><literal><function>current_timestamp</function></literal></entry>
	<entry><type>timestamp with time zone</type></entry>
	<entry>Date et heure du jour&nbsp;; voir <xref
         linkend="functions-datetime-current">
	</entry>
	<entry></entry>
	<entry></entry>
       </row>

       <row>
	<entry><literal><function>date_part</function>(<type>text</type>,
<type>timestamp</type>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>Obtenir un sous-champ (équivalent à
	 <function>extract</function>)&nbsp;; voir <xref
         linkend="functions-datetime-extract">
        </entry>
	<entry><literal>date_part('hour', timestamp '2001-02-16
20:38:40')</literal></entry>
	<entry><literal>20</literal></entry>
       </row>

       <row>
	<entry><literal><function>date_part</function>(<type>text</type>,
<type>interval</type>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>Obtenir un sous-champ (équivalent à
	 <function>extract</function>)&nbsp;; voir <xref
         linkend="functions-datetime-extract">
        </entry>
	<entry><literal>date_part('month', interval '2 years 3
months')</literal></entry>
	<entry><literal>3</literal></entry>
       </row>

       <row>
	<entry><literal><function>date_trunc</function>(<type>text</type>,
<type>timestamp</type>)</literal></entry>
	<entry><type>timestamp</type></entry>
	<entry>Tronquer jusqu'à la précision spécifiée&nbsp;; voir aussi <xref
         linkend="functions-datetime-trunc">
        </entry>
	<entry><literal>date_trunc('hour', timestamp '2001-02-16
20:38:40')</literal></entry>
	<entry><literal>2001-02-16 20:00:00</literal></entry>
       </row>

       <row>
	<entry><literal><function>extract</function>(<parameter>field</parameter> from
         <type>timestamp</type>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>Obtenir un sous-champ&nbsp;; voir <xref
         linkend="functions-datetime-extract">
        </entry>
	<entry><literal>extract(hour from timestamp '2001-02-16
20:38:40')</literal></entry>
	<entry><literal>20</literal></entry>
       </row>

       <row>
	<entry><literal><function>extract</function>(<parameter>field</parameter> from
         <type>interval</type>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>Obtenir un sous-champ&nbsp;; voir <xref
         linkend="functions-datetime-extract">
        </entry>
	<entry><literal>extract(month from interval '2 years 3
months')</literal></entry>
	<entry><literal>3</literal></entry>
       </row>

       <row>
	<entry><literal><function>isfinite</function>(<type>timestamp</type>)</literal>
</entry>
	<entry><type>boolean</type></entry>
	<entry>Test d'un type time stamp fini (différent de l'infini)</entry>
	<entry><literal>isfinite(timestamp '2001-02-16 21:28:30')</literal></entry>
	<entry><literal>true</literal></entry>
       </row>

       <row>
	<entry><literal><function>isfinite</function>(<type>interval</type>)</literal></entry>
	<entry><type>boolean</type></entry>
	<entry>Test d'un intervalle fini</entry>
	<entry><literal>isfinite(interval '4 hours')</literal></entry>
	<entry><literal>true</literal></entry>
       </row>

       <row>
        <entry><literal><function>localtime</function></literal></entry>
        <entry><type>time</type></entry>
        <entry>Heure du jour&nbsp;; voir <xref
         linkend="functions-datetime-current">
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>localtimestamp</function></literal></entry>
        <entry><type>timestamp</type></entry>
        <entry>Date et heure&nbsp;; voir <xref
         linkend="functions-datetime-current">
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
	<entry><literal><function>now</function>()</literal></entry>
	<entry><type>timestamp with time zone</type></entry>
	<entry>Date et heure courante (équivalent à
	 <function>current_timestamp</function>)&nbsp;; voir <xref
         linkend="functions-datetime-current">
	</entry>
	<entry></entry>
	<entry></entry>
       </row>

       <row>
	<entry><literal><function>timeofday()</function></literal></entry>
	<entry><type>text</type></entry>
	<entry>Date et heure courante&nbsp;; voir <xref
         linkend="functions-datetime-current">
	</entry>
	<entry></entry>
	<entry></entry>
       </row>

      </tbody>
     </tgroup>
    </table>

   <para>
    En plus de ces fonctions, l'opérateur SQL <literal>OVERLAPS</literal> est
    supporté&nbsp;:
<synopsis>
( <replaceable>début1</replaceable>, <replaceable>fin1</replaceable> ) OVERLAPS
( <replaceable>début2</replaceable>, <replaceable>fin2</replaceable> )
( <replaceable>début1</replaceable>, <replaceable>longueur1</replaceable> )
OVERLAPS ( <replaceable>début2</replaceable>,
<replaceable>longueur2</replaceable>
)
</synopsis>
    Cette expression renvoie vrai (true) lorsque les deux périodes de temps 
    (définies par leur point final) se surchargent, et faux dans le cas
    contraire. Les points finaux peuvent être spécifiés comme des pairs de
    dates, d'heures ou de timestamps&nbsp;; ou comme une date, une heure ou un
    timestamp suivi d'un intervalle.
   </para>

<screen>
SELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<lineannotation>Résultat :
</lineannotation><computeroutput>true</computeroutput>
SELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<lineannotation>Résultat :
</lineannotation><computeroutput>false</computeroutput>
</screen>

  <sect2 id="functions-datetime-extract">
   <title><function>EXTRACT</function>, <function>date_part</function></title>

<synopsis>
EXTRACT (<replaceable>champ</replaceable> FROM
<replaceable>source</replaceable>)
</synopsis>

   <para>
    La fonction <function>extract</function> récupère des sous-champs de valeurs
    date/heure, tels que l'année ou l'heure.
    <replaceable>source</replaceable> est une expression de valeur qui évalue
    vers le type <type>timestamp</type> ou <type>interval</type>.
    (Les expressions de type <type>date</type> ou <type>time</type> seront
    converties en <type>timestamp</type> et peuvent aussi être utilisées.) 
    <replaceable>champ</replaceable> est un identifiant ou une chaîne qui
    sélectionne le champ à extraire de la valeur source. La fonction
    <function>extract</function> renvoie des valeurs de type
    <type>double precision</type>. Ce qui suit est une liste de noms de champs
    valides&nbsp;:

    <!-- alphabetical -->
    <variablelist>
     <varlistentry>
      <term><literal>century</literal></term>
      <listitem>
       <para>
        L'année divisée par 100
       </para>

<screen>
SELECT EXTRACT(CENTURY FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>20</computeroutput>
</screen>

       <para>
        Notez que le résultat du champ century (siècle) est simplement le champ
        year (année) divisé par 100 et non pas la définition
        conventionnelle qui place la plupart des années 1900 dans le 20è siècle.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>day</literal></term>
      <listitem>
       <para>
        Le champ jour (du mois) : de 1 à 31
       </para>

<screen>
SELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat: </lineannotation><computeroutput>16</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>decade</literal></term>
      <listitem>
       <para>
        Le champ année divisée par 10
       </para>

<screen>
SELECT EXTRACT(DECADE FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>200</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>dow</literal></term>
      <listitem>
       <para>
        Le jour de la semaine (de 0 à 6&nbsp;; dimanche étant le 0)
        (uniquement pour les valeurs de type <type>timestamp</type>)
       </para>

<screen>
SELECT EXTRACT(DOW FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>5</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>doy</literal></term>
      <listitem>
       <para>
        Le jour de l'année (de 1 à 365/366) (uniquement
        pour les valeurs <type>timestamp</type>)
       </para>

<screen>
SELECT EXTRACT(DOY FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>47</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>epoch</literal></term>
      <listitem>
       <para>
        Pour les valeurs de type <type>date</type> et <type>timestamp</type>,
        le nombre de secondes depuis le 1er janvier 1970 (exactement depuis le
        1970-01-01 00:00:00-00 (peut être négatif)&nbsp;; pour les valeurs de
        type <type>interval</type>, le nombre total de secondes dans
        l'intervalle
       </para>

<screen>
SELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-08');
<lineannotation>Résultat :
</lineannotation><computeroutput>982384720</computeroutput>

SELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');
<lineannotation>Résultat :
</lineannotation><computeroutput>442800</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>hour</literal></term>
      <listitem>
       <para>
        Le champ heure (0 - 23)
       </para>

<screen>
SELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>20</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>microseconds</literal></term>
      <listitem>
       <para>
        Le champ secondes, incluant la partie décimale, multiplié par
        1&nbsp;000&nbsp;000. Notez que ceci inclut les secondes complètes.
       </para>

<screen>
SELECT EXTRACT(MICROSECONDS FROM TIME '17:12:28.5');
<lineannotation>Résultat :
</lineannotation><computeroutput>28500000</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>millennium</literal></term>
      <listitem>
       <para>
        L'année divisée par 1000
       </para>

<screen>
SELECT EXTRACT(MILLENNIUM FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>2</computeroutput>
</screen>

       <para>
        Notez que le résultat du champ millennium est simplement le champ year
        divisé par 1000 et non pas la définition conventionelle qui place les
        années 1900 dans le second millénaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>milliseconds</literal></term>
      <listitem>
       <para>
        Le champ secondes, incluant la partie décimale, multiplié par 1000.
        Notez que ceci inclut les secondes complètes.
       </para>

<screen>
SELECT EXTRACT(MILLISECONDS FROM TIME '17:12:28.5');
<lineannotation>Résultat :
</lineannotation><computeroutput>28500</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>minute</literal></term>
      <listitem>
       <para>
        Le champ minutes (0 - 59)
       </para>

<screen>
SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>38</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>month</literal></term>
      <listitem>
       <para>
        Pour les valeurs de type <type>timestamp</type>, le numéro du mois dans
        l'année (de 1 à 12)&nbsp;; pour les valeurs de type
        <type>interval</type>, le nombre de mois, modulo 12 (0 - 11)
       </para>

<screen>
SELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>2</computeroutput>

SELECT EXTRACT(MONTH FROM INTERVAL '2 years 3 months');
<lineannotation>Résultat : </lineannotation><computeroutput>3</computeroutput>

SELECT EXTRACT(MONTH FROM INTERVAL '2 years 13 months');
<lineannotation>Résultat : </lineannotation><computeroutput>1</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>quarter</literal></term>
      <listitem>
       <para>
        Le trimestre (1 - 4) dont le jour fait partie (uniquement pour les
        valeurs de type <type>timestamp</type>)
       </para>

<screen>
SELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>1</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>second</literal></term>
      <listitem>
       <para>
        Le champs secondes, incluant la partie décimale (0 -
        59<footnote><simpara>60 si les secondes «leap» sont implémentées par
        le système d'exploitation</simpara></footnote>)
       </para>

<screen>
SELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>40</computeroutput>

SELECT EXTRACT(SECOND FROM TIME '17:12:28.5');
<lineannotation>Résultat :
</lineannotation><computeroutput>28.5</computeroutput>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>timezone</literal></term>
      <listitem>
       <para>
        Le décalage du fuseau horaire depuis UTC, mesuré en secondes. Les
        valeurs positives correspondent aux fuseaux horaires à l'est d'UTC, les 
        valeurs négatives à l'ouest d'UTC.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>timezone_hour</literal></term>
      <listitem>
       <para>
        Le composant heure du décalage de la zone horaire
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>timezone_minute</literal></term>
      <listitem>
       <para>
        Le composant minute du décalage de la zone horaire
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>week</literal></term>
      <listitem>
       <para>
        Le numéro de la semaine dans l'année, auquel appartient le jour. Par
        définition (<acronym>ISO</acronym> 8601), la première semaine d'une
        année contient le 4 janvier de cette année.  (La semaine avec l'
        <acronym>ISO</acronym>-8601 commence un lundi.) Autrement dit, le
        premier jeudi d'une année se trouve dans la première semaine de cette
        année. (uniquement pour les valeurs de type <type>timestamp</type>)
       </para>

<screen>
SELECT EXTRACT(WEEK FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>7</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>year</literal></term>
      <listitem>
       <para>
        Le champ année
       </para>

<screen>
SELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat :
</lineannotation><computeroutput>2001</computeroutput>
</screen>
      </listitem>
     </varlistentry>

    </variablelist>

   </para>

   <para>
    La fonction <function>extract</function> a pour but principal l'exécution
    de calcul. Pour le formatage des valeurs date/heure en affichage, voir <xref
    linkend="functions-formatting">.
   </para>

   <para>
    La fonction <function>date_part</function> est modelé sur l'équivalent
    traditionnel <productname>Ingres</productname> de la fonction
    <function>extract</function> du standard <acronym>SQL</acronym>&nbsp;:
<synopsis>
date_part('<replaceable>champ</replaceable>', <replaceable>source</replaceable>)
</synopsis>
    Notez, ici, que le paramètre <replaceable>champ</replaceable> doit être une
    valeur de type chaîne et non pas un nom. Les noms de champ valide pour
    <function>date_part</function> sont les mêmes que pour
    <function>extract</function>.
   </para>

<screen>
SELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>16</computeroutput>

SELECT date_part('hour', INTERVAL '4 hours 3 minutes');
<lineannotation>Résultat : </lineannotation><computeroutput>4</computeroutput>
</screen>

  </sect2>

  <sect2 id="functions-datetime-trunc">
   <title><function>date_trunc</function></title>

   <para>
    La fonction <function>date_trunc</function> est conceptuellement similaire
    à la fonction <function>trunc</function> pour les nombres.
   </para>

   <para>
<synopsis>
date_trunc('<replaceable>champ</replaceable>',
<replaceable>source</replaceable>)
</synopsis>
    <replaceable>source</replaceable> une expression de valeur de type
    <type>timestamp</type> ou <type>interval</>.
    (Les valeurs de type <type>date</type> et
    <type>time</type> sont converties automatiquement en
    respectivement <type>timestamp</type> ou
    <type>interval</>.)
    <replaceable>champ</replaceable> indique la précision pour tronquer
    la valeur en entrée. La valeur de retour est de type
    <type>timestamp</type> ou <type>interval</> avec tous les champs qui
    sont moins signifiants que l'ensemble sélectionné de zéro (ou pour la date
    et le mois).
   </para>

   <para>
    Les valeurs valides pour <replaceable>champ</replaceable> sont&nbsp;:
    <simplelist>
     <member><literal>microseconds</literal></member>
     <member><literal>milliseconds</literal></member>
     <member><literal>second</literal></member>
     <member><literal>minute</literal></member>
     <member><literal>hour</literal></member>
     <member><literal>day</literal></member>
     <member><literal>month</literal></member>
     <member><literal>year</literal></member>
     <member><literal>decade</literal></member>
     <member><literal>century</literal></member>
     <member><literal>millennium</literal></member>
    </simplelist>
   </para>

   <para>
    Exemples&nbsp;:
<screen>
SELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>2001-02-16
20:00:00</computeroutput>

SELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Résultat : </lineannotation><computeroutput>2001-01-01
00:00:00</computeroutput>
</screen>
   </para>
  </sect2>

  <sect2 id="functions-datetime-zoneconvert">
   <title><literal>AT TIME ZONE</literal></title>

   <indexterm>
    <primary>fuseau horaire</primary>
    <secondary>conversion</secondary>
   </indexterm>

   <para>
    La construction <literal>AT TIME ZONE</literal> permet les conversions
    du type <quote>time stamps</quote> vers les différents fuseaux horaires. 
    <xref linkend="functions-datetime-zoneconvert-table"> affiche ses variantes.
   </para>

    <table id="functions-datetime-zoneconvert-table">
     <title>Variantes <literal>AT TIME ZONE</literal></title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>Expression</entry>
	<entry>Type de retour</entry>
	<entry>Description</entry>
       </row>
      </thead>

      <tbody>
       <row>
	<entry>
	 <literal><type>timestamp without time zone</type> AT TIME ZONE
<replaceable>zone</></literal>
	</entry>
	<entry><type>timestamp with time zone</type></entry>
	<entry>Convertit l'heure locale avec une zone horaire donnée
          vers l'UTC</entry>
       </row>

       <row>
	<entry>
	 <literal><type>timestamp with time zone</type> AT TIME ZONE
<replaceable>zone</></literal>
	</entry>
	<entry><type>timestamp without time zone</type></entry>
	<entry>Convertit la zone horaire UTC vers l'heure avec la zone horaire
          donnée</entry>
       </row>

       <row>
	<entry>
	 <literal><type>time with time zone</type> AT TIME ZONE
<replaceable>zone</></literal>
	</entry>
	<entry><type>time with time zone</type></entry>
	<entry>Convertit l'heure locale pour les différentes zones
          horaires</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Dans ces expressions, le fuseau horaire désiré <replaceable>zone</replaceable> peut
    être spécifié soit comme une chaîne texte (par
    exemple,<literal>'PST'</literal>) ou comme un intervalle (c'est-à-dire
    <literal>INTERVAL '-08:00'</literal>).
   </para>

   <para>
    Exemples (supposant que la zone horaire locale est
    <literal>PST8PDT</>)&nbsp;:
<screen>
SELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'MST';
<lineannotation>Résultat : </lineannotation><computeroutput>2001-02-16
19:38:40-08</computeroutput>

SELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'MST';
<lineannotation>Résultat : </lineannotation><computeroutput>2001-02-16
18:38:40</computeroutput>
</screen>
    Le premier exemple prend un <quote>zone-less time stamp</quote> et
    l'interprète comme heure MST (UTC-7) pour produire un <quote>time
    stamp</quote> UTC, qui effectue une rotation vers PST (UTC-8) pour
    l'affichage. Le deuxième exemple prend un type <quote>time stamp</quote>
    spécifié en EST (UTC-5) et le convertit en l'heure locale en MST (UTC-7).
   </para>

   <para>
    La fonction <literal><function>timezone</function>(<replaceable>zone</>,
    <replaceable>timestamp</>)</literal> est équivalente pour la structure
    conforme au SQL <literal><replaceable>timestamp</> AT TIME ZONE
    <replaceable>zone</></literal>. 
   </para>
  </sect2>

  <sect2 id="functions-datetime-current">
   <title>Date/Heure courante</title>

   <indexterm>
    <primary>date</primary>
    <secondary>actuelle</secondary>
   </indexterm>

   <indexterm>
    <primary>time</primary>
    <secondary>actuelle</secondary>
   </indexterm>

   <para>
    Les fonctions suivantes sont disponibles pour obtenir la date courante et/ou
    l'heure&nbsp;:
<synopsis>
CURRENT_DATE
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_TIME ( <replaceable>precision</replaceable> )
CURRENT_TIMESTAMP ( <replaceable>precision</replaceable> )
LOCALTIME
LOCALTIMESTAMP
LOCALTIME ( <replaceable>precision</replaceable> )
LOCALTIMESTAMP ( <replaceable>precision</replaceable> )
</synopsis>
    </para>

    <para>
     <function>CURRENT_TIME</function> et
     <function>CURRENT_TIMESTAMP</function> délivrent les valeurs avec
     indication du fuseau horaire&nbsp;;
     <function>LOCALTIME</function> et
     <function>LOCALTIMESTAMP</function> délivrent les valeurs avec
     indication du fuseau horaire.
    </para>

    <para>
     <function>CURRENT_TIME</function>,
     <function>CURRENT_TIMESTAMP</function>,
     <function>LOCALTIME</function>, et
     <function>LOCALTIMESTAMP</function>
     peuvent se voir attribuer de façon optionnelle le paramètre de précision,
     qui cause l'arrondissement du résultat  pour le nombre de chiffres de
     fraction dans le champ des secondes. Sans le paramètre de précision, le
     résultat est donné avec la précision complète.
    </para>

    <note>
     <para>
      Avant <productname>PostgreSQL</productname> 7.2, les paramètres de
      précision n'existaient pas et le résultat était toujours donné en
      secondes entières.
     </para>
    </note>

   <para>
    Quelques exemples&nbsp;:
<screen>
SELECT CURRENT_TIME;
<lineannotation>Résultat :
</lineannotation><computeroutput>14:39:53.662522-05</computeroutput>

SELECT CURRENT_DATE;
<lineannotation>Résultat :
</lineannotation><computeroutput>2001-12-23</computeroutput>

SELECT CURRENT_TIMESTAMP;
<lineannotation>Résultat : </lineannotation><computeroutput>2001-12-23
14:39:53.662522-05</computeroutput>

SELECT CURRENT_TIMESTAMP(2);
<lineannotation>Résultat : </lineannotation><computeroutput>2001-12-23
14:39:53.66-05</computeroutput>

SELECT LOCALTIMESTAMP;
<lineannotation>Résultat : </lineannotation><computeroutput>2001-12-23
14:39:53.662522</computeroutput>
</screen>
   </para>

   <para>
    La fonction <function>now()</function> est l'équivalent traditionnel
    <productname>PostgreSQL</productname> de
    <function>CURRENT_TIMESTAMP</function>.
   </para>

   <para>
    Il existe aussi la fonction <function>timeofday()</function> qui, pour des
    raisons historiques, renvoie une chaîne de type <type>text</type> plutôt
    qu'une valeur de type <type>timestamp</type>&nbsp;:
<screen>
SELECT timeofday();
<lineannotation>Résultat : </lineannotation><computeroutput>Sat Feb 17
19:07:32.000126 2001 EST</computeroutput>
</screen>
   </para>

   <para>
    Il est important de savoir que
    <function>CURRENT_TIMESTAMP</function> et les fonctions relatives renvoient
    l'heure de début de la transaction courante&nbsp;; leurs valeurs ne
    changent pas lors de la transaction. Ceci est considérée comme une
    fonctionnalité&nbsp;: le but est de permettre à une transaction seule
    d'avoir une notion consistante de l'heure <quote>courante</quote>, donc les
    modifications multiples à l'intérieur de la même transaction partagent la
    même heure. <function>timeofday()</function> renvoie l'heure de l'horloge
    et change lors des transactions.
   </para>

   <note>
    <para>
     D'autres systèmes de bases de données pourraient mettre à jour ces valeurs
     plus fréquemment.
    </para>
   </note>

   <para>
    Tous les types de données date/heure acceptent aussi la valeur littérale 
    spéciale <literal>now</literal> pour spécifier la date et l'heure actuelle.
    Du coup, les trois suivants renvoient aussi le même résultat&nbsp;:
<programlisting>
SELECT CURRENT_TIMESTAMP;
SELECT now();
SELECT TIMESTAMP 'now';
</programlisting>
   </para>

    <note>
     <para>
      Vous ne voulez pas utiliser la troisième forme lors de la spécification 
      de la clause <literal>DEFAULT</> pour la création d'une table. Le système
      convertira <literal>now</literal> vers une valeur de type
      <type>timestamp</type> dès que la constante est analysée, de façon à ce
      que la valeur par défaut soit nécessaire, l'heure de la création de la
      table serait utilisée&nbsp;! Les deux premières formes ne seront pas
      évaluées jusqu'à ce que la valeur par défaut soit utilisée car ce sont
      des appels de fonctions. Donc, ils donneront le comportement désiré
      d'avoir la valeur par défaut au moment de l'insertion de la ligne.
     </para>
    </note>
  </sect2>
 </sect1>

  
 <sect1 id="functions-geometry">
  <title>Fonctions et opérateurs géométriques</title>

   <para>
    Les types géométriques <type>point</type>, <type>box</type>,
    <type>lseg</type>, <type>line</type>, <type>path</type>,
    <type>polygon</type> et <type>circle</type> ont un large ensemble de
    support natif des fonctions et opérateurs natifs, affichés dans <xref
    linkend="functions-geometry-op-table">, <xref
    linkend="functions-geometry-func-table"> et <xref
    linkend="functions-geometry-conv-table">.
   </para>

   <table id="functions-geometry-op-table">
     <title>Opérateurs géométriques</title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>Opérateur</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> <literal>+</literal> </entry>
	<entry>Translation</entry>
	<entry><literal>box '((0,0),(1,1))' + point '(2.0,0)'</literal></entry>
       </row>
       <row>
	<entry> <literal>-</literal> </entry>
	<entry>Translation</entry>
	<entry><literal>box '((0,0),(1,1))' - point '(2.0,0)'</literal></entry>
       </row>
       <row>
	<entry> <literal>*</literal> </entry>
	<entry>Échelle/rotation</entry>
	<entry><literal>box '((0,0),(1,1))' * point '(2.0,0)'</literal></entry>
       </row>
       <row>
	<entry> <literal>/</literal> </entry>
	<entry>Échelle/rotation</entry>
	<entry><literal>box '((0,0),(2,2))' / point '(2.0,0)'</literal></entry>
       </row>
       <row>
	<entry> <literal>#</literal> </entry>
	<entry>Point ou boîte d'intersection</entry>
	<entry><literal>'((1,-1),(-1,1))' # '((1,1),(-1,-1))'</literal></entry>
       </row>
       <row>
	<entry> <literal>#</literal> </entry>
	<entry>Nombre de points dans le chemin ou le polygone</entry>
	<entry><literal># '((1,0),(0,1),(-1,0))'</literal></entry>
       </row>
       <row>
	<entry> <literal>@-@</literal> </entry>
	<entry>Longueur ou circonférence</entry>
	<entry><literal>@-@ path '((0,0),(1,0))'</literal></entry>
       </row>
       <row>
	<entry> <literal>@@</literal> </entry>
	<entry>Centre</entry>
	<entry><literal>@@ circle '((0,0),10)'</literal></entry>
       </row>
       <row>
	<entry> <literal>##</literal> </entry>
	<entry>Point le plus proche entre le premier et le second
          opérande</entry>
	<entry><literal>point '(0,0)' ## lseg '((2,0),(0,2))'</literal></entry>
       </row>
       <row>
	<entry> <literal>&lt;-&gt;</literal> </entry>
	<entry>Distance entre</entry>
	<entry><literal>circle '((0,0),1)' &lt;-&gt; circle
'((5,0),1)'</literal></entry>
       </row>
       <row>
	<entry> <literal>&amp;&amp;</literal> </entry>
	<entry>Surcharge&nbsp;?</entry>
	<entry><literal>box '((0,0),(1,1))' &amp;&amp; box
'((0,0),(2,2))'</literal></entry>
       </row>
       <row>
	<entry> <literal>&amp;&lt;</literal> </entry>
	<entry>Surcharge ou à gauche de&nbsp;?</entry>
	<entry><literal>box '((0,0),(1,1))' &amp;&lt; box
'((0,0),(2,2))'</literal></entry>
       </row>
       <row>
	<entry> <literal>&amp;&gt;</literal> </entry>
	<entry>Surcharge ou à droite de&nbsp;?</entry>
	<entry><literal>box '((0,0),(3,3))' &amp;&gt; box
'((0,0),(2,2))'</literal></entry>
       </row>
       <row>
	<entry> <literal>&lt;&lt;</literal> </entry>
	<entry>À gauche de&nbsp;?</entry>
	<entry><literal>circle '((0,0),1)' &lt;&lt; circle
'((5,0),1)'</literal></entry>
       </row>
       <row>
	<entry> <literal>&gt;&gt;</literal> </entry>
	<entry>À droite de&nbsp;?</entry>
	<entry><literal>circle '((5,0),1)' &gt;&gt; circle
'((0,0),1)'</literal></entry>
       </row>
       <row>
	<entry> <literal>&lt;^</literal> </entry>
	<entry>En dessous de&nbsp;?</entry>
	<entry><literal>circle '((0,0),1)' &lt;^ circle '((0,5),1)'</literal></entry>
       </row>
       <row>
	<entry> <literal>&gt;^</literal> </entry>
	<entry>Au dessus de&nbsp;?</entry>
	<entry><literal>circle '((0,5),1)' >^ circle '((0,0),1)'</literal></entry>
       </row>
       <row>
	<entry> <literal>?#</literal> </entry>
	<entry>Intersection&nbsp;?</entry>
	<entry><literal>lseg '((-1,0),(1,0))' ?# box
'((-2,-2),(2,2))'</literal></entry>
       </row>
       <row>
	<entry> <literal>?-</literal> </entry>
	<entry>Horizontal&nbsp;?</entry>
	<entry><literal>?- lseg '((-1,0),(1,0))'</literal></entry>
       </row>
       <row>
	<entry> <literal>?-</literal> </entry>
	<entry>Sont-ils alignés horizontalement&nbsp;?</entry>
	<entry><literal>point '(1,0)' ?- point '(0,0)'</literal></entry>
       </row>
       <row>
	<entry> <literal>?|</literal> </entry>
	<entry>Vertical&nbsp;?</entry>
	<entry><literal>?| lseg '((-1,0),(1,0))'</literal></entry>
       </row>
       <row>
	<entry> <literal>?|</literal> </entry>
	<entry>Sont-ils verticalement alignés&nbsp;?</entry>
	<entry><literal>point '(0,1)' ?| point '(0,0)'</literal></entry>
       </row>
       <row>
	<entry> <literal>?-|</literal> </entry>
	<entry>Perpendiculaire&nbsp;?</entry>
	<entry><literal>lseg '((0,0),(0,1))' ?-| lseg '((0,0),(1,0))'</literal></entry>
       </row>
       <row>
	<entry> <literal>?||</literal> </entry>
	<entry>Parallèle&nbsp;?</entry>
	<entry><literal>lseg '((-1,0),(1,0))' ?|| lseg
'((-1,2),(1,2))'</literal></entry>
       </row>
       <row>
	<entry> <literal>~</literal> </entry>
	<entry>Contient&nbsp;?</entry>
	<entry><literal>circle '((0,0),2)' ~ point '(1,1)'</literal></entry>
       </row>
       <row>
	<entry> <literal>@</literal> </entry>
	<entry>Contenu ou contenant&nbsp;?</entry>
	<entry><literal>point '(1,1)' @ circle '((0,0),2)'</literal></entry>
       </row>
       <row>
	<entry> <literal>~=</literal> </entry>
	<entry>Identique à&nbsp;?</entry>
	<entry><literal>polygon '((0,0),(1,1))' ~= polygon
'((1,1),(0,0))'</literal></entry>
       </row>
      </tbody>
     </tgroup>
   </table>


   <table id="functions-geometry-func-table">
     <title>Fonctions géométriques</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Fonction</entry>
	<entry>Type de retour</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal><function>area</function>
	(<replaceable>object</>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>aire</entry>
	<entry><literal>area(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>box_intersect</function>(<type>box</>,
<type>box</>)</literal></entry>
	<entry><type>box</type></entry>
	<entry>boîte d'intersection</entry>
	<entry><literal>box_intersect(box '((0,0),(1,1))',box
'((0.5,0.5),(2,2))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>center</function>
	(<replaceable>object</>)</literal></entry>
	<entry><type>point</type></entry>
	<entry>centre</entry>
	<entry><literal>center(box '((0,0),(1,2))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>diameter</function>(<type>circle</>)</literal></entry
>
	<entry><type>double precision</type></entry>
	<entry>diamètre d'un cercle</entry>
	<entry><literal>diameter(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>height</function>(<type>box</>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>taille verticale d'une boîte</entry>
	<entry><literal>height(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>isclosed</function>(<type>path</>)</literal></entry>
	<entry><type>boolean</type></entry>
	<entry>un chemin fermé&nbsp;?</entry>
	<entry><literal>isclosed(path '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>isopen</function>(<type>path</>)</literal></entry>
	<entry><type>boolean</type></entry>
	<entry>un chemin ouvert&nbsp;?</entry>
	<entry><literal>isopen(path '[(0,0),(1,1),(2,0)]')</literal></entry>
       </row>
       <row>
	<entry><literal><function>length</function>(<replaceable>object</>)</literal></
entry>
	<entry><type>double precision</type></entry>
	<entry>longueur</entry>
	<entry><literal>length(path '((-1,0),(1,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>npoints</function>(<type>path</>)</literal></entry>
	<entry><type>integer</type></entry>
	<entry>nombre de points</entry>
	<entry><literal>npoints(path '[(0,0),(1,1),(2,0)]')</literal></entry>
       </row>
       <row>
	<entry><literal><function>npoints</function>(<type>polygon</>)</literal></entry
>
	<entry><type>integer</type></entry>
	<entry>nombre de points</entry>
	<entry><literal>npoints(polygon '((1,1),(0,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>pclose</function>(<type>path</>)</literal></entry>
	<entry><type>path</type></entry>
	<entry>convertit un chemin en chemin fermé</entry>
	<entry><literal>popen(path '[(0,0),(1,1),(2,0)]')</literal></entry>
       </row>
<![IGNORE[
<!-- Not defined by this name. Implements the intersection opérateur '#' -->
       <row>
	<entry><literal><function>point</function>(<type>lseg</>,
<type>lseg</>)</literal></entry>
	<entry><type>point</type></entry>
	<entry>intersection</entry>
	<entry><literal>point(lseg '((-1,0),(1,0))',lseg
'((-2,-2),(2,2))')</literal></entry>
       </row>
]]>
       <row>
	<entry><literal><function>popen</function>(<type>path</>)</literal></entry>
	<entry><type>path</type></entry>
	<entry>convertit un chemin en chemin ouvert</entry>
	<entry><literal>popen(path '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>radius</function>(<type>circle</type>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>radius d'un cercle</entry>
	<entry><literal>radius(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>width</function>(<type>box</>)</literal></entry>
	<entry><type>double precision</type></entry>
	<entry>taille horizontale d'une boîte</entry>
	<entry><literal>width(box '((0,0),(1,1))')</literal></entry>
       </row>
      </tbody>
     </tgroup>
   </table>


   <table id="functions-geometry-conv-table">
     <title>Fonctions de conversion d'un type géométrique</title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Fonction</entry>
	<entry>Type de retour</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal><function>box</function>(<type>circle</type>)</literal></entry>
	<entry><type>box</type></entry>
	<entry>cercle vers boîte</entry>
	<entry><literal>box(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>box</function>(<type>point</type>,
<type>point</type>)</literal></entry>
	<entry><type>box</type></entry>
	<entry>points vers boîte</entry>
	<entry><literal>box(point '(0,0)', point '(1,1)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>box</function>(<type>polygon</type>)</literal></entry
>
	<entry><type>box</type></entry>
	<entry>polygone vers boîte</entry>
	<entry><literal>box(polygon '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>circle</function>(<type>box</type>)</literal></entry>
	<entry><type>circle</type></entry>
	<entry>boîte vers cercle</entry>
	<entry><literal>circle(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>circle</function>(<type>point</type>, <type>double
precision</type>)</literal></entry>
	<entry><type>circle</type></entry>
	<entry>point et radius vers cercle</entry>
	<entry><literal>circle(point '(0,0)', 2.0)</literal></entry>
       </row>
       <row>
	<entry><literal><function>lseg</function>(<type>box</type>)</literal></entry>
	<entry><type>lseg</type></entry>
	<entry>diagonale d'une boîte vers un segment de ligne</entry>
	<entry><literal>lseg(box '((-1,0),(1,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>lseg</function>(<type>point</type>,
<type>point</type>)</literal></entry>
	<entry><type>lseg</type></entry>
	<entry>points vers un segment de ligne</entry>
	<entry><literal>lseg(point '(-1,0)', point '(1,0)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>path</function>(<type>polygon</type>)</literal></entry>
	<entry><type>point</type></entry>
	<entry>polygone vers chemin</entry>
	<entry><literal>path(polygon '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>point</function>(<type>circle</type>)</literal></entry>
	<entry><type>point</type></entry>
	<entry>centre d'un cercle</entry>
	<entry><literal>point(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>point</function>(<type>lseg</type>,
<type>lseg</type>)</literal></entry>
	<entry><type>point</type></entry>
	<entry>intersection</entry>
	<entry><literal>point(lseg '((-1,0),(1,0))', lseg
'((-2,-2),(2,2))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>point</function>(<type>polygon</type>)</literal></entry>
	<entry><type>point</type></entry>
	<entry>centre d'un polygone</entry>
	<entry><literal>point(polygon '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>polygon</function>(<type>box</type>)</literal></entry
>
	<entry><type>polygon</type></entry>
	<entry>boîte vers polygone à quatre points</entry>
	<entry><literal>polygon(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
	<entry><literal><function>polygon</function>(<type>circle</type>)</literal></entry>
	<entry><type>polygon</type></entry>
	<entry>cercle vers polygone à 12 points</entry>
	<entry><literal>polygon(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>polygon</function>(<replaceable
class="parameter">npts</replaceable>, <type>circle</type>)</literal></entry>
	<entry><type>polygon</type></entry>
	<entry>cercle vers polygone <replaceable
        class="parameter">npts</replaceable>-point</entry>
	<entry><literal>polygon(12, circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
	<entry><literal><function>polygon</function>(<type>path</type>)</literal></entry>
	<entry><type>polygon</type></entry>
	<entry>chemin vers polygone</entry>
	<entry><literal>polygon(path '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
      </tbody>
     </tgroup>
   </table>

    <para>
     Il est possible d'accéder aux deux numéros composant d'un <type>point</>
     comme si c'était un tableau avec les index 0 et 1. Par exemple, si
     <literal>t.p</> est une colonne de type <type>point</>, alors
     <literal>SELECT p[0] FROM t</> récupère les coordonnées X et
     <literal>UPDATE t SET p[1] = ...</> modifie les coordonnées Y. De la même
     façon, une valeur de type <type>box</> ou <type>lseg</> pourrait être
     traitée comme un tableau de deux valeurs de type <type>point</>.
    </para>

  </sect1>


 <sect1 id="functions-net">
  <title>Fonctions pour le type des adresses réseau</title>

  <para>
   <xref linkend="cidr-inet-operators-table"> affiche les opérateurs
   disponibles pour les types <type>cidr</type> et <type>inet</type>. Les
   opérateurs de tests <literal>&lt;&lt;</literal>,
   <literal>&lt;&lt;=</literal>, <literal>&gt;&gt;</literal> et
   <literal>&gt;&gt;=</literal> d'inclusion du sous-réseau. Ils considèrent
   seulement les parties réseau des deux adresses, ignorant toute la partie
   hôte et déterminent si une partie réseau est identique à un sous-réseau ou à
   un autre.
  </para>

    <table id="cidr-inet-operators-table">
     <title>Opérateurs <type>cidr</type> et <type>inet</type></title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>Opérateur</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> <literal>&lt;</literal> </entry>
	<entry>est plus petit que</entry>
	<entry><literal>inet '192.168.1.5' &lt; inet '192.168.1.6'</literal></entry>
       </row>
       <row>
	<entry> <literal>&lt;=</literal> </entry>
	<entry>est plus petit que ou égal à</entry>
	<entry><literal>inet '192.168.1.5' &lt;= inet '192.168.1.5'</literal></entry>
       </row>
       <row>
	<entry> <literal>=</literal> </entry>
	<entry>est égal à</entry>
	<entry><literal>inet '192.168.1.5' = inet '192.168.1.5'</literal></entry>
       </row>
       <row>
	<entry> <literal>&gt;=</literal> </entry>
	<entry>est plus grand ou égal à</entry>
	<entry><literal>inet '192.168.1.5' &gt;= inet '192.168.1.5'</literal></entry>
       </row>
       <row>
	<entry> <literal>&gt;</literal> </entry>
	<entry>est plus grand que</entry>
	<entry><literal>inet '192.168.1.5' &gt; inet '192.168.1.4'</literal></entry>
       </row>
       <row>
	<entry> <literal>&lt;&gt;</literal> </entry>
	<entry>n'est pas égal à</entry>
	<entry><literal>inet '192.168.1.5' &lt;&gt; inet
'192.168.1.4'</literal></entry>
       </row>
       <row>
	<entry> <literal>&lt;&lt;</literal> </entry>
	<entry>est contenu dans</entry>
	<entry><literal>inet '192.168.1.5' &lt;&lt; inet
'192.168.1/24'</literal></entry>
       </row>
       <row>
	<entry> <literal>&lt;&lt;=</literal> </entry>
	<entry>est contenu dans ou égal à</entry>
	<entry><literal>inet '192.168.1/24' &lt;&lt;= inet
'192.168.1/24'</literal></entry>
       </row>
       <row>
	<entry> <literal>&gt;&gt;</literal> </entry>
	<entry>contient</entry>
	<entry><literal>inet'192.168.1/24' &gt;&gt; inet
'192.168.1.5'</literal></entry>
       </row>
       <row>
	<entry> <literal>&gt;&gt;=</literal> </entry>
	<entry>contient ou est égal à</entry>
	<entry><literal>inet '192.168.1/24' &gt;&gt;= inet
'192.168.1/24'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   <xref linkend="cidr-inet-functions-table"> affiche les fonctions
   disponibles, utilisables avec les types <type>cidr</type> et
   <type>inet</type>. Les fonctions <function>host</function>,
   <function>text</function> et <function>abbrev</function> ont principalement
   pour but d'offrir des formatages d'affichage alternatifs. Vous pouvez
   convertir une valeur de type texte vers un type <type>inet</type> en utilisant la
   syntaxe de conversion normale&nbsp;:
   <literal>inet(<replaceable>expression</replaceable>)</literal> ou
   <literal><replaceable>colname</replaceable>::inet</literal>.
  </para>

    <table id="cidr-inet-functions-table">
     <title>Fonctions <type>cidr</type> et <type>inet</type></title>
     <tgroup cols="5">
      <thead>
       <row>
	<entry>Fonction</entry>
	<entry>Type de retour</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
	<entry>Résultat</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal><function>broadcast</function>(<type>inet</type>)</literal></entry>
	<entry><type>inet</type></entry>
	<entry>adresse de broadcast pour le réseau</entry>
	<entry><literal>broadcast('192.168.1.5/24')</literal></entry>
	<entry><literal>192.168.1.255/24</literal></entry>
       </row>
       <row>
	<entry><literal><function>host</function>(<type>inet</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>extraction de l'adresse IP comme du texte</entry>
	<entry><literal>host('192.168.1.5/24')</literal></entry>
	<entry><literal>192.168.1.5</literal></entry>
       </row>
       <row>
	<entry><literal><function>masklen</function>(<type>inet</type>)</literal></entry>
	<entry><type>integer</type></entry>
	<entry>extraction de la longueur du masque réseau</entry>
	<entry><literal>masklen('192.168.1.5/24')</literal></entry>
	<entry><literal>24</literal></entry>
       </row>
       <row>
	<entry><literal><function>set_masklen</function>(<type>inet</type>,
<type>integer</type>)</literal></entry>
	<entry><type>inet</type></entry>
	<entry>initialise la longueur du masque réseau pour une valeur de type
          <type>inet</type></entry>
	<entry><literal>set_masklen('192.168.1.5/24', 16)</literal></entry>
	<entry><literal>192.168.1.5/16</literal></entry>
       </row>
       <row>
	<entry><literal><function>netmask</function>(<type>inet</type>)</literal></entry>
	<entry><type>inet</type></entry>
	<entry>construction du masque réseau</entry>
	<entry><literal>netmask('192.168.1.5/24')</literal></entry>
	<entry><literal>255.255.255.0</literal></entry>
       </row>
       <row>
	<entry><literal><function>hostmask</function>(<type>inet</type>)</literal></entry>
	<entry><type>inet</type></entry>
	<entry>construction du masque de l'hôte pour le réseau</entry>
	<entry><literal>hostmask('192.168.23.20/30')</literal></entry>
	<entry><literal>0.0.0.3</literal></entry>
       </row>
       <row>
	<entry><literal><function>network</function>(<type>inet</type>)</literal></entry>
	<entry><type>cidr</type></entry>
	<entry>extraction de la partie réseau de l'adresse</entry>
	<entry><literal>network('192.168.1.5/24')</literal></entry>
	<entry><literal>192.168.1.0/24</literal></entry>
       </row>
       <row>
	<entry><literal><function>text</function>(<type>inet</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>extraction de l'adresse IP et de la longueur du masque
          réseau comme texte</entry>
	<entry><literal>text(inet '192.168.1.5')</literal></entry>
	<entry><literal>192.168.1.5/32</literal></entry>
       </row>
       <row>
	<entry><literal><function>abbrev</function>(<type>inet</type>)</literal></entry>
	<entry><type>text</type></entry>
	<entry>format d'affichage raccourci comme texte</entry>
	<entry><literal>abbrev(cidr '10.1.0.0/16')</literal></entry>
	<entry><literal>10.1/16</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   <xref linkend="macaddr-functions-table"> affiche les fonctions disponibles,
   à utiliser avec le type <type>macaddr</type>. La fonction
   <literal><function>trunc</function>(<type>macaddr</type>)</literal> renvoie
   une adresse MAC avec les trois derniers octets initialisés à zéro. Ceci peut
   être utilisé pour associer le préfixe restant avec un manufacturier. Le
   répertoire <filename>contrib/mac</filename> dans la distribution source
   contient quelques outils pour créer et maintenir une table d'association.
  </para>

    <table id="macaddr-functions-table">
     <title>Fonctions <type>macaddr</type></title>
     <tgroup cols="5">
      <thead>
       <row>
	<entry>Fonction</entry>
	<entry>Type de retour</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
	<entry>Résultat</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><literal><function>trunc</function>(<type>macaddr</type>)</literal></entry>
	<entry><type>macaddr</type></entry>
	<entry>initialiser les trois octets à zéro</entry>
	<entry><literal>trunc(macaddr '12:34:56:78:90:ab')</literal></entry>
	<entry><literal>12:34:56:00:00:00</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Le type <type>macaddr</type> supporte aussi les opérateurs relationnels
    standards (<literal>&gt;</literal>, <literal>&lt;=</literal>, etc.) dans un
    ordre lexicographique.
   </para>

  </sect1>


 <sect1 id="functions-sequence">
  <title>Fonctions de manipulation de séquence</title>

  <indexterm>
   <primary>séquence</primary>
  </indexterm>
  <indexterm>
   <primary>nextval</primary>
  </indexterm>
  <indexterm>
   <primary>currval</primary>
  </indexterm>
  <indexterm>
   <primary>setval</primary>
  </indexterm>

  <para>
   Cette section décrit les fonctions de <productname>PostgreSQL</productname>
   pour opérer sur les <firstterm>objets de séquence</firstterm>. Les objets de
   séquence (aussi appelés des générateurs de séquence ou simplement des
   séquences) sont des tables spéciales à ligne seule créées avec la commande
   <command>CREATE SEQUENCE</command>. Un objet séquence est habituellement
   utilisé pour générer des identifiants uniques pour les lignes d'une table. 
   Les fonctions de séquence, listées dans <xref
   linkend="functions-sequence-table">, fournissent des méthodes simples et
   sains avec des utilisateurs multiples pour obtenir des valeurs de séquences
   successives à partir de l'objet séquence.
  </para>

   <table id="functions-sequence-table">
    <title>Fonctions séquence</title>
    <tgroup cols="3">
     <thead>
      <row>
        <entry>Fonction</entry>
        <entry>Type de retour</entry>
        <entry>Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
	<entry><literal><function>nextval</function>(<type>text</type>)</literal></entry>
	<entry><type>bigint</type></entry>
	<entry>Avance la séquence et renvoie la nouvelle valeur</entry>
      </row>
      <row>
	<entry><literal><function>currval</function>(<type>text</type>)</literal></entry>
	<entry><type>bigint</type></entry>
	<entry>Valeur de retour obtenu le plus récemment avec
          <function>nextval</function></entry>
      </row>
      <row>
	<entry><literal><function>setval</function>(<type>text</type>,
<type>bigint</type>)</literal></entry>
	<entry><type>bigint</type></entry>
	<entry>Initialise la valeur courante de la séquence</entry>
      </row>
      <row>
	<entry><literal><function>setval</function>(<type>text</type>,
<type>bigint</type>, <type>boolean</type>)</literal></entry>
	<entry><type>bigint</type></entry>
	<entry>Initialise la valeur courante de la séquence et le drapeau
          <literal>is_called</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   Pour des raisons largement historiques, la séquence à utiliser sur l'appel de
   la fonction séquence est spécifiée par un argument de type texte. Pour
   achever quelques compatibilité avec la gestion de noms
   <acronym>SQL</acronym> ordinaires, les fonctions séquence convertissent leur
   arguments en minuscule sauf si la chaîne est entre des guillemets doubles.
   Donc,
<programlisting>
nextval('foo')      <lineannotation>opère sur la séquence
<literal>foo</literal></>
nextval('FOO')      <lineannotation>opère sur la séquence
<literal>foo</literal></>
nextval('"Foo"')    <lineannotation>opère sur la séquence
<literal>Foo</literal></>
</programlisting>
   Le nom de la séquence peut être qualifié avec le schéma si nécessaire&nbsp;:
<programlisting>
nextval('mon_schema.foo')     <lineannotation>opère sur
<literal>mon_schema.foo</literal></>
nextval('"mon_schema".foo')   <lineannotation>identique à
ci-dessus</lineannotation>
nextval('foo')              <lineannotation>cherche dans le chemin de recherche
pour <literal>foo</literal></>
</programlisting>
   Bien sûr, l'argument texte peut être le résultat d'une expression, pas
   seulement un simple littéral, qui est utile occasionellement.
  </para>

  <para>
   Les fonctions séquence disponibles sont&nbsp;:

    <variablelist>
     <varlistentry>
      <term><function>nextval</function></term>
      <listitem>
       <para>
        Avance l'objet séquence à sa prochaine valeur et renvoie cette valeur.
        Ceci se fait de façon atomique&nbsp;: même si les sessions multiples
        exécutent <function>nextval</function> de façon concurrente, chacun va
        recevoir proprement une valeur de séquence distincte.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><function>currval</function></term>
      <listitem>
       <para>
        Renvoit la valeur la plus récemment obtenue par
        <function>nextval</function> pour cette séquence dans la session
        actuelle. (Une erreur est rapportée si <function>nextval</function> n'a
        jamais été appelé pour cette séquence dans cette session.) Notez que,
        parce qu'il renvoie une valeur locale à la session, il donne une
        réponse prévisible même si les autres sessions exécutent
        <function>nextval</function> entre temps.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><function>setval</function></term>
      <listitem>
       <para>
        Réinitialise la valeur du compteur de l'objet séquence. La forme avec
        deux paramètres initialise le champ <literal>last_value</literal> de la
        séquence à la valeur spécifiée et initialise le champ
        <literal>is_called</literal> à <literal>true</literal>, signifiant que
        le prochain <function>nextval</function> avancera la séquence avant de
        renvoyer une valeur. Dans la forme à trois paramètres,
        <literal>is_called</literal> pourrait être initialisé soit à
        <literal>true</literal> soit à <literal>false</literal>. S'il est
        initialisé à <literal>false</literal>, le prochain
        <function>nextval</function> retournera exactement la valeur spécifiée
        et l'avancement de la séquence commence avec le
        <function>nextval</function> suivant. Par exemple,

<screen>
SELECT setval('foo', 42);           <lineannotation>Next <function>nextval</>
renverra 43</lineannotation>
SELECT setval('foo', 42, true);     <lineannotation>Identique à
ci-dessus</lineannotation>
SELECT setval('foo', 42, false);    <lineannotation>Next <function>nextval</>
renverra 42</lineannotation>
</screen>

        Le résultat renvoyé par <function>setval</function> est juste la valeur
        du second argument.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
  </para>

  <important>
   <para>
    Pour éviter le blocage des transactions concurrentes qui obtiennent des
    nombres de la même séquence, une opération <function>nextval</function>
    n'est jamais annulée&nbsp;; c'est-à-dire qu'une fois que la valeur a été
    récupérée, elle est considérée utilisée, même si la transaction qui annule
    le <function>nextval</function> après. Ceci signifie que les transactions
    annulées pourraient laisser des <quote>trous</quote> inutilisés dans la
    séquence des valeurs assignées. Les opérations <function>setval</function>
    ne sont jamais annulées.
   </para>
  </important>

  <para>
   Si un objet séquence a été créé avec les paramètres par défaut, les
   appels à <function>nextval</function> sur celui-ci renverront les valeurs
   successives à partir de 1. D'autres comportements peuvent être obtenus en
   utilisant des paramètres spéciaux de la commande <xref
   linkend="SQL-CREATESEQUENCE">&nbsp;; voir la page de référence de la commande
   pour plus d'informations.
  </para>

 </sect1>


 <sect1 id="functions-conditional">
  <title>Expressions conditionnelles</title>

  <indexterm>
   <primary>CASE</primary>
  </indexterm>

  <indexterm>
   <primary>expression conditionnelle</primary>
  </indexterm>

  <para>
   Cette section décrit les expressions conditionnelles respectant le standard
   <acronym>SQL</acronym> disponibles avec
   <productname>PostgreSQL</productname>.
  </para>

  <tip>
   <para>
    Si vos besoins dépassent les possibilités des expressions conditionnelles,
    vous devez considérer l'écriture d'une procédure stockée dans un langage de
    programmation plus expressif.
   </para>
  </tip>

  <sect2>
   <title><literal>CASE</literal></title>

  <para>
   L'expression <acronym>SQL</acronym> <token>CASE</token> est une expression
   conditionnelle générique, similaire aux instructions if/else statements des
   autres langages&nbsp;:

<synopsis>
CASE WHEN <replaceable>condition</replaceable> THEN
<replaceable>résultat</replaceable>
     <optional>WHEN ...</optional>
     <optional>ELSE <replaceable>résultat</replaceable></optional>
END
</synopsis>

   Les clauses <token>CASE</token> peuvent être utilisées partout où une
   expression est valide. <replaceable>condition</replaceable> est une
   expression qui renvoie un résultat <type>boolean</type>. Si le résultat est
   vrai, alors la valeur de l'expression <token>CASE</token> est le
   <replaceable>résultat</replaceable> qui suit la condition. Si le résultat
   est faux, toute clause <token>WHEN</token> suivante est recherchée de la même
   façon. Si la <replaceable>condition</replaceable> <token>WHEN</token> est
   vraie, alors la valeur de l'expression est le
   <replaceable>résultat</replaceable> de la clause <token>ELSE</token>. Si la
   clause <token>ELSE</token> est omise et qu'aucune condition ne correspond,
   alors le résultat est nul.
  </para>

   <para>
    Un exemple&nbsp;:
<screen>
SELECT * FROM test;

 a
---
 1
 2
 3


SELECT a,
       CASE WHEN a=1 THEN 'un'
            WHEN a=2 THEN 'deux'
            ELSE 'autres'
       END
    FROM test;

 a | case
---+-------
 1 | un
 2 | deux
 3 | autres
</screen>
   </para>

  <para>
   Les types de données de toutes les expressions
   <replaceable>résultat</replaceable> doivent être convertibles dans un même
   type de sortie. Voir <xref linkend="typeconv-union-case"> pour plus de
   détails.
  </para>

  <para>
   La <quote>simple</quote> expression <token>CASE</token> suivante est une
   variante spécialisée de la forme générale ci-dessus&nbsp;:

<synopsis>
CASE <replaceable>expression</replaceable>
    WHEN <replaceable>valeur</replaceable> THEN
    <replaceable>résultat</replaceable>
    <optional>WHEN ...</optional>
    <optional>ELSE <replaceable>résultat</replaceable></optional>
END
</synopsis>

   L'<replaceable>expression</replaceable> est calculée et comparée à toutes
   les spécifications de <replaceable>valeur</replaceable> des clauses
   <token>WHEN</token> jusqu'à en trouver une. Si aucune ne correspond, le
   <replaceable>résultat</replaceable> dans la clause
   <token>ELSE</token> (ou une valeur nulle) est renvoyée. Ceci est similaire
   à l'instruction <function>switch</function> en C.
  </para>

   <para>
    L'exemple ci-dessus peut être réécrit en utilisant la syntaxe
    <token>CASE</token> simple&nbsp;:
<screen>
SELECT a,
       CASE a WHEN 1 THEN 'un'
              WHEN 2 THEN 'deux'
              ELSE 'autres'
       END
    FROM test;

 a | case
---+-------
 1 | un
 2 | deux
 3 | autres
</screen>
   </para>

   <para>
    Une expression <token>CASE</token> n'évalue pas les sous-expressions qui
    ne sont pas nécessaires pour déterminer le résultat. Par exemple, voici une
    façon possible d'éviter une division par zéro&nbsp;:
<programlisting>
SELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false END;
</programlisting>
   </para>
  </sect2>

  <sect2>
   <title><literal>COALESCE</></title>

  <indexterm>
   <primary>COALESCE</primary>
  </indexterm>

<synopsis>
<function>COALESCE</function>(<replaceable>valeur</replaceable> <optional>,
...</optional>)
</synopsis>

  <para>
   La fonction <function>COALESCE</function> renvoie le premier de ces
   arguments qui n'est pas nul. Une valeur nulle est renvoyée seulement si tous
   les arguments sont nuls. Ceci est souvent utile pour substituer une valeur
   par défaut pour les valeurs nulles lorsque la donnée est récupérée pour
   affichage. Par exemple&nbsp;:
<programlisting>
SELECT COALESCE(description, short_description, '(none)') ...
</programlisting>
  </para>

   <para>
    Comme une expression <token>CASE</token>, <function>COALESCE</function>
    n'évaluera pas les arguments non nécessaires à la détermination du
    résultat&nbsp;; c'est-à-dire que tous les arguments à la droite du premier
    argument non nul ne sont pas évalués.
   </para>
  </sect2>

  <sect2>
   <title><literal>NULLIF</></title>

  <indexterm>
   <primary>nullif</primary>
  </indexterm>

<synopsis>
<function>NULLIF</function>(<replaceable>valeur1</replaceable>,
<replaceable>valeur2</replaceable>)
</synopsis>

  <para>
   La fonction <function>NULLIF</function> renvoie une valeur nulle si et
   seulement si <replaceable>valeur1</replaceable> et
   <replaceable>valeur2</replaceable> sont égales. Sinon, il renvoie
   <replaceable>valeur1</replaceable>. Ceci est réalisé pour disposer de
   l'opération inverse de l'exemple de <function>COALESCE</function> donné
   ci-dessus&nbsp;:
<programlisting>
SELECT NULLIF(value, '(none)') ...
</programlisting>
  </para>

  </sect2>

 </sect1>


 <sect1 id="functions-misc">
  <title>Fonctions diverses</title>

  <para>
   <xref linkend="functions-misc-session-table"> affiche plusieurs fonctions
   qui extrait des informations de la session et du système.
  </para>

   <table id="functions-misc-session-table">
    <title>Fonctions d'informations sur la session</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nom</entry>
       <entry>Type de retour</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><function>current_database()</function></entry>
       <entry><type>name</type></entry>
       <entry>nom de la base de données actuelle</entry>
      </row>

      <row>
       <entry><function>current_schema()</function></entry>
       <entry><type>name</type></entry>
       <entry>nom du schéma actuel</entry>
      </row>

      <row>
       <entry><function>current_schemas(boolean)</function></entry>
       <entry><type>name[]</type></entry>
       <entry>noms des schémas dans le chemin de recherche des schémas, incluant
        de façon optionnelle les schémas implicites</entry>
      </row>

      <row>
       <entry><function>current_user</function></entry>
       <entry><type>name</type></entry>
       <entry>nom de l'utilisateur du contexte d'exécution actuel</entry>
      </row>

      <row>
       <entry><function>session_user</function></entry>
       <entry><type>name</type></entry>
       <entry>nom de l'utilisateur de la session</entry>
      </row>

      <row>
       <entry><function>user</function></entry>
       <entry><type>name</type></entry>
       <entry>équivalent à <function>current_user</function></entry>
      </row>

      <row>
       <entry><function>version()</function></entry>
       <entry><type>text</type></entry>
       <entry>information sur la version de PostgreSQL</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm zone="functions-misc">
    <primary>utilisateur</primary>
    <secondary>courant</secondary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>schéma</primary>
    <secondary>courant</secondary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>chemin de recherche</primary>
    <secondary>courant</secondary>
   </indexterm>

   <para>
    <function>session_user</function> est l'utilisateur qui a initié la
    connexion à la base de données&nbsp;; il est fixe pour la durée de la
    connexion. <function>current_user</function> est l'identifiant de
    l'utilisateur qui est applicable pour la vérification des droits.
    Habituellement, il est identique à l'utilisateur de la session mais il
    change lors de l'exécution des fonctions avec l'attribut <literal>SECURITY
    DEFINER</literal>. Dans le vocable Unix, l'utilisateur de la session est
    l'<quote>utilisateur réel</quote> et l'utilisateur courant est
    l'<quote>utilisateur effectif</quote>.
   </para>

   <note>
    <para>
     <function>current_user</function>, <function>session_user</function> et
     <function>user</function> ont un statut syntaxique spécial en
     <acronym>SQL</acronym>&nbsp;: ils doivent être appelés sans parenthèses.
    </para>
   </note>

   <para>
    <function>current_schema</function> renvoie le nom du schéma qui est au
    début du chemin de recherche ou une valeur nulle si le chemin de recherche
    est vide. C'est le schéma qui sera utilisé pour toutes les tables ou tous
    les autres objets nommés qui sont créés sans spécification du schéma cible.
    <function>current_schemas(boolean)</function> renvoie un tableau des noms
    de tous les schémas présents dans le chemin de recherche. L'option booléenne
    détermine si les schémas systèmes sont inclus implicitement ou non dans le
    chemin de recherche renvoyé, par exemple pour <literal>pg_catalog</literal>.
   </para>

   <note>
    <para>
     Le chemin de recherche pourrait être modifié pendant l'exécution. La
     commande est&nbsp;:
<programlisting>
SET search_path TO <replaceable>schéma1</replaceable> <optional>, <replaceable>schéma2</replaceable>,
...</optional>
</programlisting>
    </para>
   </note>

   <indexterm zone="functions-misc">
    <primary>version</primary>
   </indexterm>

   <para>
    <function>version()</function> renvoie une chaîne décrivant la version du
    serveur <productname>PostgreSQL</productname>.
   </para>

  <para>
   <xref linkend="functions-misc-set-table"> affiche les fonctions disponibles
   pour lancer des requêtes et modifier les paramètres de configuration à
   l'exécution.
  </para>

   <table id="functions-misc-set-table">
    <title>Fonctions de configuration</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nom</entry>
       <entry>Type de retour</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
       
<literal><function>current_setting</function>
(<parameter>nom_paramètre</parameter>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>valeur actuelle du paramétrage</entry>
      </row>
      <row>
       <entry>
        <literal><function>set_config(<parameter>nom_paramètre</parameter>,
                             <parameter>nouvelle_valeur</parameter>,
                            
<parameter>est_local</parameter>)</function></literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>initialise le paramètre et renvoie la nouvelle valeur</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm zone="functions-misc">
    <primary>SET</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>SHOW</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>configuration</primary>
    <secondary sortas="server">du serveur</secondary>
    <tertiary>fonctions</tertiary>
   </indexterm>

   <para>
    La fonction <function>current_setting</function> renvoie la valeur courante
    du paramètre <parameter>nom_paramètre</parameter>. Cela correspond à la
    commande <acronym>SQL</acronym> <command>SHOW</command>. Un exemple&nbsp;:
<programlisting>
SELECT current_setting('datestyle');

 current_setting
-----------------
 ISO, MDY
(1 row)
</programlisting>
   </para>

   <para>
    <function>set_config</function> configure le paramètre
    <parameter>nom_paramètre</parameter> avec
    <parameter>nouvelle valeur</parameter>. Si
    <parameter>est_local</parameter> est <literal>true</literal>, la nouvelle
    valeur est seulement appliquée à la transaction actuelle. Si vous voulez que
    la nouvelle valeur s'applique pour la session courante, utilisez
    <literal>false</literal> à la place. Cette fonction correspond à la commande
    SQL <command>SET</command>. Un exemple&nbsp;:
<programlisting>
SELECT set_config('log_statement_stats', 'off', false);

 set_config
------------
 off
(1 row)
</programlisting>
   </para>

  <indexterm>
   <primary>privilège</primary>
   <secondary>requête</secondary>
  </indexterm>

  <para>
   <xref linkend="functions-misc-access-table"> liste les fonctions qui
   permettent à l'utilisateur de connaître les privilèges d'accès aux objets.
   Voir <xref linkend="ddl-priv"> pour plus d'informations sur les
   privilèges.
  </para>

   <table id="functions-misc-access-table">
    <title>Fonctions de récupèration des privilèges d'accès</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nom</entry>
       <entry>Type de retour</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
      
<entry><literal><function>has_table_privilege</function>
(<parameter>utilisateur</parameter>,
                                  <parameter>table</parameter>,
                                  <parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur dispose de ce privilège sur cette
         table</entry>
      </row>
      <row>
      
<entry><literal><function>has_table_privilege</function>
(<parameter>table</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur courant dispose de ce privilège sur cette
         table</entry>
      </row>
      <row>
      
<entry><literal><function>has_database_privilege</function>
(<parameter>utilisateur</parameter>,
<parameter>base_de_données</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur dispose de ce privilège sur cette
         base de données</entry>
      </row>
      <row>
      
<entry><literal><function>has_database_privilege</function>
(<parameter>base_de_données</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur courant dispose de ce privilège sur cette
         base de données</entry>
      </row>
      <row>
      
<entry><literal><function>has_function_privilege</function>
(<parameter>utilisateur</parameter>,
<parameter>fonction</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur dispose de ce privilège sur cette
         fonction</entry>
      </row>
      <row>
      
<entry><literal><function>has_function_privilege</function>
(<parameter>fonction</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur courant dispose de ce privilège sur cette
         fonction</entry>
      </row>
      <row>
      
<entry><literal><function>has_language_privilege</function>
(<parameter>utilisateur</parameter>,
<parameter>langage</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur dispose de ce privilège sur ce
         langage</entry>
      </row>
      <row>
      
<entry><literal><function>has_language_privilege</function>
(<parameter>langage</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur courant dispose de ce privilège sur ce
         langage</entry>
      </row>
      <row>
      
<entry><literal><function>has_schema_privilege</function>
(<parameter>utilisateur</parameter>,
<parameter>schéma</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur dispose de ce privilège sur ce
         schéma</entry>
      </row>
      <row>
      
<entry><literal><function>has_schema_privilege</function>
(<parameter>schéma</parameter>,
<parameter>privilège</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>est-ce que l'utilisateur dispose de ce privilège sur ce
         schéma</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm zone="functions-misc">
    <primary>has_table_privilege</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>has_database_privilege</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>has_function_privilege</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>has_language_privilege</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>has_schema_privilege</primary>
   </indexterm>

   <para>
    <function>has_table_privilege</function> vérifie qu'un utilisateur peut
    accéder à une table d'une façon particulière. L'utilisateur peut être
    spécifié par son nom ou par son identifiant
    (<literal>pg_user.usesysid</literal>). Si cet argument est omis, la fonction
    utilise <function>current_user</function>. La table peut être spécifiée par
    son nom ou par son OID. (Du coup, il existe six variantes de
    <function>has_table_privilege</function>, qui sont distinguables par leur
    nom et par le type de leurs arguments.)  Lors de la spécification par nom,
    celui-ci peut être détaillé avec le nom du schéma si nécessaire. Le type de
    privilège d'accès désiré est spécifié par une chaîne qui doit correspondre à
    une des valeurs suivantes&nbsp;: <literal>SELECT</literal>,
    <literal>INSERT</literal>, <literal>UPDATE</literal>,
    <literal>DELETE</literal>, <literal>RULE</literal>,
    <literal>REFERENCES</literal> ou <literal>TRIGGER</literal>. (Néanmoins, la
    casse de la chaîne n'a pas d'importance.)
    Voici un exemple&nbsp;:
<programlisting>
SELECT has_table_privilege('mon_schema.mytable', 'select');
</programlisting>
   </para>

   <para>
    <function>has_database_privilege</function> vérifie si un utilisateur peut
    accéder à une base de données d'une façon particulière. Les possibilités sur
    les arguments sont analogues à celles de la fonction
    <function>has_table_privilege</function>. Les types de privilèges d'accès
    désirés ont les valeurs suivantes&nbsp;:
    <literal>CREATE</literal>,
    <literal>TEMPORARY</literal> ou
    <literal>TEMP</literal> (qui est équivalent à
    <literal>TEMPORARY</literal>).
   </para>

   <para>
    <function>has_function_privilege</function> vérifie si un utilisateur peut
    accéder à une fonction d'une façon particulière. Les possibilités sur
    les arguments sont analogues à celles de la fonction
    <function>has_table_privilege</function>. Lors de la spécification d'une
    fonction avec une chaîne de texte plutôt que son OID, l'entrée permise est
    la même que pour le type de données <type>regprocedure</>. Le type de
    privilège d'accès désiré doit être <literal>EXECUTE</literal>.
   </para>

   <para>
    <function>has_language_privilege</function> vérifie si un utilisateur peut
    accéder à un langage procédural d'une façon particulière. Les possibilités
    pour les arguments sont analogues à ceux de
    <function>has_table_privilege</function>. Le type de privilège d'accès
    désiré doit être <literal>USAGE</literal>.
   </para>

   <para>
    <function>has_schema_privilege</function> vérifie si un utilisateur peut
    accéder à un schéma d'une façon particulière. Les possibilités pour ses
    arguments sont analogues à celles de la fonction
    <function>has_table_privilege</function>. Le type de privilège d'accès
    désiré doit être parmi <literal>CREATE</literal> et
    <literal>USAGE</literal>.
   </para>

  <para>
   Pour évaluer si un utilisateur détient une option
   <quote>grant</quote> sur le privilège, ajoutez <literal> WITH GRANT
   OPTION</literal> avec la clé de privilège&nbsp;; par exemple
   <literal>'UPDATE WITH GRANT OPTION'</literal>.
  </para>

  <para>
   <xref linkend="functions-misc-schema-table"> affiche les fonctions qui
   déterminent si un certain objet est <firstterm>visible</firstterm> dans le chemin de
   recherche de schémas actuel. Une table est dite visible si son schéma est
   dans le chemin de recherche et qu'aucune table du même nom apparaît plus tôt
   dans le chemin de recherche. C'est équivalent à l'instruction dont la table
   peut être référencée par nom sans qualification explicite de schéma. Par
   exemple, pour lister les noms de toutes les tables visibles&nbsp;:
<programlisting>
SELECT relname FROM pg_class WHERE pg_table_is_visible(oid);
</programlisting>
  </para>

   <table id="functions-misc-schema-table">
    <title>Fonctions d'information de visibilité dans le schéma</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nom</entry>
       <entry>Type de retour</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
      
<entry><literal><function>pg_table_is_visible</function>
(<parameter>oid_table</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>la table est-elle visible dans le chemin de recherche</entry>
      </row>
      <row>
      
<entry><literal><function>pg_type_is_visible</function>
(<parameter>oid_type</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>le type (ou domaine) est-il visible dans le chemin de
recherche</entry>
      </row>
      <row>
      
<entry><literal><function>pg_function_is_visible</function>
(<parameter>oid_fonction</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>la fonction est-elle visible dans le chemin de recherche</entry>
      </row>
      <row>
      
<entry><literal><function>pg_opérateur_is_visible</function>
(<parameter>oid_opérateur</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>l'opérateur est-il visible dans le chemin de recherche</entry>
      </row>
      <row>
      
<entry><literal><function>pg_opclass_is_visible</function>
(<parameter>oid_opclass</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>la classe d'opérateur est-elle visible dans le chemin de
         recherche</entry>
      </row>
      <row>
      
<entry><literal><function>pg_conversion_is_visible</function>
(<parameter>oid_conversion</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>la conversion est-elle visible dans le chemin de recherche</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm zone="functions-misc">
    <primary>pg_table_is_visible</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>pg_type_is_visible</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>pg_function_is_visible</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>pg_opérateur_is_visible</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>pg_opclass_is_visible</primary>
   </indexterm>
   <indexterm zone="functions-misc">
    <primary>pg_conversion_is_visible</primary>
   </indexterm>

   <para>
   <function>pg_table_is_visible</function> effectue une vérification pour les
   tables (ou vues ou tout autre type d'entrée dans <literal>pg_class</literal>).
   <function>pg_type_is_visible</function>,
   <function>pg_function_is_visible</function>,
   <function>pg_opérateur_is_visible</function>,
   <function>pg_opclass_is_visible</function> et
   <function>pg_conversion_is_visible</function> réalisent respectivement les
   mêmes sortes de vérification de visibilité pour les types (et domaines),
   fonctions, opérateurs, classes d'opérateur et conversions. Pour les
   fonctions et opérateurs, un objet dans le chemin de recherche est visible si
   aucun objet du même nom <emphasis>et des même types de données pour les
   arguments</emphasis> plus tôt dans le chemin. Pour les classes d'opérateurs, à la
   fois les noms et les méthodes d'accès aux index associés sont considérés.
   </para>

   <para>
    Toutes les fonctions requièrent les OID des objets pour identifier l'objet
    à vérifier. Si vous voulez tester un objet par son nom, il est mieux
    d'utiliser les types d'alias d'OID (<type>regclass</type>, <type>regtype</type>,
    <type>regprocedure</type> ou <type>regopérateur</type>), par exemple
<programlisting>
SELECT pg_type_is_visible('mon_schema.widget'::regtype);
</programlisting>
    Notez que cela n'aurait pas de sens de tester un nom non qualifié de cette
    façon --- si le nom est reconnu, il doit être visible.
   </para>

   <indexterm zone="functions-misc">
    <primary>pg_get_viewdef</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>pg_get_ruledef</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>pg_get_indexdef</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>pg_get_triggerdef</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>pg_get_constraintdef</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>pg_get_expr</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>pg_get_userbyid</primary>
   </indexterm>

  <para>
   <xref linkend="functions-misc-catalog-table"> liste des fonctions qui
   extraient des informations des catalogues système.
   <function>pg_get_viewdef</function>,
   <function>pg_get_ruledef</function>,
   <function>pg_get_indexdef</function>,
   <function>pg_get_triggerdef</function> et
   <function>pg_get_constraintdef</function> reconstruisent respectivement la
   commande de création d'une vue, d'une règle, d'un index, d'un déclencheur ou
   d'une contrainte. (Notez qu'il s'agit d'une reconstruction décompilée, pas du
   texte original de la commande.) La plupart de ces commandes viennent en deux
   variantes dont une qui peut optionnellement <quote>afficher joliment</quote> le
   résultat. Le joli format est plus lisible mais le format par défaut a plus de
   chances d'être interprété de la même façon par les future versions de
   <productname>PostgreSQL</productname>&nbsp;; évitez l'utilisation du joli affichage dans
   des buts de sauvegarde. Passer <literal>faux</literal> au paramètre d'affichage
   amélioré renvoie le même résultat que la variante sans paramètre.
   <function>pg_get_expr</function> décompile la forme interne d'une expression 
   individuelle telle que la valeur par défaut d'une colonne. Cela peut être
   utile lors de l'examen du contenu du catalogue système.
   <function>pg_get_userbyid</function> extrait un nom d'utilisateur suivant son
   numéro d'identifiant.
  </para>

   <table id="functions-misc-catalog-table">
    <title>Fonctions d'informations sur le catalogue système</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nom</entry>
       <entry>Type de retour</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
      
<entry><literal><function>pg_get_viewdef</function>
(<parameter>nom_vue</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE VIEW</> d'une vue
        (<emphasis>obsolète</emphasis>)</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_viewdef</function>
(<parameter>nom_vue</parameter>, <parameter>joli_affichage</>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE VIEW</> d'une vue
(<emphasis>obsolète</emphasis>)</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_viewdef</function>
(<parameter>oid_vue</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE VIEW</> d'une vue</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_viewdef</function>
(<parameter>oid_vue</parameter>, <parameter>joli_affichage</>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE VIEW</> d'une vue</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_ruledef</function>
(<parameter>oid_règle</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE RULE</> d'une règle</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_ruledef</function>
(<parameter>oid_règle</parameter>,
<parameter>joli_affichage</>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE RULE</> d'une règle</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_indexdef</function>
(<parameter>oid_index</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE INDEX</> d'un index</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_indexdef</function>
(<parameter>oid_index</parameter>, <parameter>no_colonne</>,
<parameter>joli_affichage</>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE INDEX</> d'un index ou la
       définition d'une seule colonne de l'index si
       <parameter>no_colonne</> est différent de zéro</entry>
      </row>
      <row>
      
<entry><function>pg_get_triggerdef</function>
(<parameter>oid_déclencheur</parameter>)</entry>
       <entry><type>text</type></entry>
       <entry>récupère la commande <command>CREATE [ CONSTRAINT ] TRIGGER</>
        d'un déclencheur</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_constraintdef</function>
(<parameter>oid_contrainte</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la définition d'une contrainte</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_constraintdef</function>
(<parameter>oid_contrainte</parameter>,
<parameter>joli_affichage</>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>récupère la définition d'une contrainte</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_expr</function>
(<parameter>expression</parameter
>, <parameter>oid_relation</>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>décompile la forme interne d'une expression, en supposant que
        toute variable réfère à la relation indiquée dans le second
        paramètre</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_expr</function>
(<parameter>expression</parameter>, <parameter>oid_relation</>,
<parameter>joli_affichage</>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>décompile la forme interne d'une expression, en supposant que
        toute variable réfère à la relation indiquée dans le second
        paramètre</entry>
      </row>
      <row>
      
<entry><literal><function>pg_get_userbyid</function>
(<parameter>id_utilisateur</parameter>)</literal></entry>
       <entry><type>name</type></entry>
       <entry>obtient le nom de l'utilisateur avec l'identifiant donné</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm zone="functions-misc">
    <primary>obj_description</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>col_description</primary>
   </indexterm>

   <indexterm zone="functions-misc">
    <primary>commentaire</primary>
    <secondary sortas="database objects">sur les objets de la base
     de données</secondary>
   </indexterm>

   <para>
    La fonction affichée dans <xref
    linkend="functions-misc-comment-table"> extrait les commentaires stockés
    précédemment avec la commande <command>COMMENT</command>. Une valeur nulle
    est renvoyée si aucun commentaire n'est trouvé avec les paramètres
    spécifiés.
   </para>

   <table id="functions-misc-comment-table">
    <title>Fonctions d'informations sur les commentaires</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nom</entry> 
       <entry>Type de retour</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
      
<entry><literal><function>obj_description</function>
(<parameter>objet</parameter>,
<parameter>nom_catalogue</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>obtenir un commentaire sur une base de données</entry>
      </row>
      <row>
      
<entry><literal><function>obj_description</function>
(<parameter>oid_objet</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>obtenir un commentaire sur une base de données
         (<emphasis>obsolète</emphasis>)</entry>
      </row>
      <row>
      
<entry><literal><function>col_description</function>
(<parameter>oid_table</parameter>,
<parameter>no_colonne</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>obtenir un commentaire sur la colonne d'une table</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    La forme à deux paramètres d'<function>obj_description</function> renvoie
    le commentaire d'un objet de la base de données suivant son OID et le nom du
    catalogue système le contenant. Par exemple,
    <literal>obj_description(123456,'pg_class')</literal> retrouvera le
    commentaire de la table d'OID 123456. La forme à un paramètre requiert
    seulement l'OID de l'objet. Elle est maintenant obsolète car il n'y a pas de
    garantie que les OID soient uniques avec différents catalogues
    système&nbsp;; du coup, un mauvais commentaire pourrait être renvoyé.
   </para>

   <para>
    <function>col_description</function> renvoie le commentaire d'une colonne
    de table, spécifié par l'OID de la table et le numéro de la colonne.
    <function>obj_description</function> ne peut pas être utilisé pour les
    colonnes de table car les colonnes n'ont pas leur propre OID.
   </para>

  </sect1>

 <sect1 id="functions-array">
  <title>Fonctions et opérateurs sur les tableaux</title>

  <para>
   <xref linkend="array-operators-table"> affiche les opérateurs disponibles
   pour les types <type>array</type>.
  </para>

    <table id="array-operators-table">
     <title>Opérateurs <type>array</type></title>
     <tgroup cols="4">
      <thead>
       <row>
	<entry>Opérateur</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
	<entry>Résultat</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry> <literal>=</literal> </entry>
	<entry>égal à</entry>
	<entry><literal>ARRAY[1.1,2.1,3.1]::int[] = ARRAY[1,2,3]</literal></entry>
	<entry><literal>t</literal></entry>
       </row>

       <row>
	<entry> <literal>&lt;&gt;</literal> </entry>
	<entry>différent de</entry>
	<entry><literal>ARRAY[1,2,3] &lt;&gt; ARRAY[1,2,4]</literal></entry>
	<entry><literal>t</literal></entry>
       </row>

       <row>
	<entry> <literal>&lt;</literal> </entry>
	<entry>inférieur à</entry>
	<entry><literal>ARRAY[1,2,3] &lt; ARRAY[1,2,4]</literal></entry>
	<entry><literal>t</literal></entry>
       </row>

       <row>
	<entry> <literal>&gt;</literal> </entry>
	<entry>supérieur à</entry>
	<entry><literal>ARRAY[1,4,3] &gt; ARRAY[1,2,4]</literal></entry>
	<entry><literal>t</literal></entry>
       </row>

       <row>
	<entry> <literal>&lt;=</literal> </entry>
	<entry>inférieur ou égal à</entry>
	<entry><literal>ARRAY[1,2,3] &lt;= ARRAY[1,2,3]</literal></entry>
	<entry><literal>t</literal></entry>
       </row>

       <row>
	<entry> <literal>&gt;=</literal> </entry>
	<entry>supérieur ou égal à</entry>
	<entry><literal>ARRAY[1,4,3] &gt;= ARRAY[1,4,3]</literal></entry>
	<entry><literal>t</literal></entry>
       </row>

       <row>
	<entry> <literal>||</literal> </entry>
	<entry>concaténation de tableaux</entry>
	<entry><literal>ARRAY[1,2,3] || ARRAY[4,5,6]</literal></entry>
	<entry><literal>{1,2,3,4,5,6}</literal></entry>
       </row>

       <row>
	<entry> <literal>||</literal> </entry>
	<entry>concaténation de tableaux</entry>
	<entry><literal>ARRAY[1,2,3] || ARRAY[[4,5,6],[7,8,9]]</literal></entry>
	<entry><literal>{{1,2,3},{4,5,6},{7,8,9}}</literal></entry>
       </row>

       <row>
	<entry> <literal>||</literal> </entry>
	<entry>concaténation d'un élément avec un tableau</entry>
	<entry><literal>3 || ARRAY[4,5,6]</literal></entry>
	<entry><literal>{3,4,5,6}</literal></entry>
       </row>

       <row>
	<entry> <literal>||</literal> </entry>
	<entry>concaténation d'un tableau avec un élément</entry>
	<entry><literal>ARRAY[4,5,6] || 7</literal></entry>
	<entry><literal>{4,5,6,7}</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   Voir <xref linkend="arrays"> pour plus de détails sur le comportement des
   opérateurs.
  </para>

  <para>
   <xref linkend="array-functions-table"> affiche les fonctions disponibles
   à l'utilisation avec des types tableaux. Voir <xref
   linkend="arrays"> pour plus de discussion et d'exemples d'utilisation de ces
   fonctions.
  </para>

    <table id="array-functions-table">
     <title>Fonctions sur <type>array</type></title>
     <tgroup cols="5">
      <thead>
       <row>
	<entry>Fonction</entry>
	<entry>Type de retour</entry>
	<entry>Description</entry>
	<entry>Exemple</entry>
	<entry>Résultat</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>
     <literal>
      <function>array_cat</function>
      (<type>anyarray</type>, <type>anyarray</type>)
     </literal>
    </entry>
	<entry><type>anyarray</type></entry>
	<entry>concatène deux tableaux, renvoyant <literal>NULL</literal> si les
         deux entrées sont <literal>NULL</literal></entry>
	<entry><literal>array_cat(ARRAY[1,2,3], ARRAY[4,5])</literal></entry>
	<entry><literal>{1,2,3,4,5}</literal></entry>
       </row>
       <row>
	<entry>
     <literal>
      <function>array_append</function>
      (<type>anyarray</type>, <type>anyelement</type>)
     </literal>
    </entry>
	<entry><type>anyarray</type></entry>
	<entry>ajoute un élément à la fin d'un tableau, renvoyant
     <literal>NULL</literal> dans le cas d'une entrée
     <literal>NULL</literal></entry>
	<entry><literal>array_append(ARRAY[1,2], 3)</literal></entry>
	<entry><literal>{1,2,3}</literal></entry>
       </row>
       <row>
	<entry>
     <literal>
      <function>array_prepend</function>
      (<type>anyelement</type>, <type>anyarray</type>)
     </literal>
    </entry>
	<entry><type>anyarray</type></entry>
	<entry>ajoute un élément au début d'un tableau, renvoyant
     <literal>NULL</literal> dans le cas d'une entrée
     <literal>NULL</literal></entry>
	<entry><literal>array_prepend(1, ARRAY[2,3])</literal></entry>
	<entry><literal>{1,2,3}</literal></entry>
       </row>
       <row>
	<entry>
     <literal>
      <function>array_dims</function>
      (<type>anyarray</type>)
     </literal>
    </entry>
	<entry><type>text</type></entry>
	<entry>renvoie une représentation textuelle des dimensions inférieure et
         supérieure d'un tableau et générant une erreur pour les entrées
         <literal>NULL</literal></entry>
	<entry><literal>array_dims(array[[1,2,3], [4,5,6]])</literal></entry>
	<entry><literal>[1:2][1:3]</literal></entry>
       </row>
       <row>
	<entry>
     <literal>
      <function>array_lower</function>
      (<type>anyarray</type>, <type>integer</type>)
     </literal>
    </entry>
	<entry><type>integer</type></entry>
	<entry>renvoie la dimension inférieure du tableau donné et renvoyant
     <literal>NULL</literal> pour des entrées <literal>NULL</literal></entry>
	<entry><literal>array_lower(array_prepend(0, ARRAY[1,2,3]),
1)</literal></entry>
	<entry><literal>0</literal></entry>
       </row>
       <row>
	<entry>
     <literal>
      <function>array_upper</function>
      (<type>anyarray</type>, <type>integer</type>)
     </literal>
    </entry>
	<entry><type>integer</type></entry>
	<entry>renvoie la dimension supérieure du tableau donné et renvoyant
     <literal>NULL</literal> pour les entrées <literal>NULL</literal></entry>
	<entry><literal>array_upper(ARRAY[1,2,3,4], 1)</literal></entry>
	<entry><literal>4</literal></entry>
       </row>
       <row>
	<entry>
     <literal>
      <function>array_to_string</function>
      (<type>anyarray</type>, <type>text</type>)
     </literal>
    </entry>
	<entry><type>text</type></entry>
	<entry>concatène des éléments de tableau en utilisant le délimiteur
         fourni, et renvoyant <literal>NULL</literal> pour les entrées
         <literal>NULL</literal></entry>
	<entry><literal>array_to_string(array[1, 2, 3], '~^~')</literal></entry>
	<entry><literal>1~^~2~^~3</literal></entry>
       </row>
       <row>
	<entry>
     <literal>
      <function>string_to_array</function>
      (<type>text</type>, <type>text</type>)
     </literal>
    </entry>
	<entry><type>text[]</type></entry>
	<entry>divise une chaîne en tableau d'éléments utilisant le délimiteur
         fourni, et renvoyant <literal>NULL</literal> sur des entrées
         <literal>NULL</literal></entry>
	<entry><literal>string_to_array( 'xx~^~yy~^~zz',
'~^~')</literal></entry>
	<entry><literal>{xx,yy,zz}</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  </sect1>

 <sect1 id="functions-aggregate">
  <title>Fonctions d'agrégat</title>

  <indexterm zone="functions-aggregate">
   <primary>fonction d'agrégat</primary>
   <secondary>intégrée</secondary>
  </indexterm>

  <para>
   Les <firstterm>fonctions d'agrégat</firstterm> calculent une seule
valeur résultant d'un ensemble de valeurs en entrée. <xref
   linkend="functions-aggregate-table"> affiche les fonctions d'agrégat
   intégrées. Les considérations spéciales sur la syntaxe des fonctions
   d'agrégat sont expliquées dans <xref linkend="syntax-aggregates">.
   Consultez <xref linkend="tutorial-agg"> pour un supplément d'informations
   introductives.
  </para>

  <table id="functions-aggregate-table">
   <title>Fonctions d'agrégat</title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Type d'argument</entry>
      <entry>Type de retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry>
       <indexterm>
        <primary>average</primary>
       </indexterm>
       <function>avg(<replaceable
class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>integer</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type>, <type>numeric</type> ou <type>interval</type>
      </entry>
      <entry>
       <type>numeric</type> pour tout argument de type entier,
       <type>double precision</type> pour tout argument en virgule flottante,
       sinon identique au type de données de l'argument
      </entry>
      <entry>la moyenne (au sens arithmétique) de toutes les valeurs en
       entrée</entry>
     </row>

     <row>
      <entry><function>count(*)</function></entry>
      <entry></entry>
      <entry><type>bigint</type></entry>
      <entry>nombre de valeurs en entrée</entry>
     </row>

     <row>
      <entry><function>count(<replaceable
class="parameter">expression</replaceable>)</function></entry>
      <entry>tout type</entry>
      <entry><type>bigint</type></entry>
      <entry>
       nombre de valeurs en entrée pour lesquelles l'<replaceable
       class="parameter">expression</replaceable> n'est pas nulle
      </entry>
     </row>

     <row>
      <entry><function>max(<replaceable
class="parameter">expression</replaceable>)</function></entry>
      <entry>tout type numeric, string ou date/time</entry>
      <entry>identique au type en argument</entry>
      <entry>
       valeur maximale de l'<replaceable
       class="parameter">expression</replaceable> pour toutes les valeurs en
       entrée
      </entry>
     </row>

     <row>
      <entry><function>min(<replaceable
class="parameter">expression</replaceable>)</function></entry>
      <entry>tout type numeric, string ou date/time</entry>
      <entry>identique au type en argument</entry>
      <entry>
       valeur minimale de l'<replaceable
       class="parameter">expression</replaceable> pour toutes les valeurs en
       entrée
      </entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>déviation standard</primary>
       </indexterm>
       <function>stddev(<replaceable
class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>integer</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type> ou <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> pour les arguments en virgule flottante,
       sinon <type>numeric</type>
      </entry>
      <entry>deviation standard des valeurs en entrée</entry>
     </row>

     <row>
      <entry><function>sum(<replaceable
class="parameter">expression</replaceable>)</function></entry>
      <entry>
       <type>smallint</type>, <type>integer</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type>, <type>numeric</type> ou
       <type>interval</type>
      </entry>
      <entry>
       <type>bigint</type> pour les arguments de type <type>smallint</type> ou
       <type>integer</type>, <type>numeric</type> pour les arguments de type
       <type>bigint</type>, <type>double precision</type>
       pour les arguments en virgule flottante, sinon identique au type de
       données de l'argument
      </entry>
      <entry>somme de l'<replaceable class="parameter">expression</replaceable>
       pour toutes les valeurs en entrée</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>variance</primary>
       </indexterm>
       <function>variance</function>(<replaceable
class="parameter">expression</replaceable>)
      </entry>
      <entry>
       <type>smallint</type>, <type>integer</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type> ou <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> pour les arguments en virgule flottante,
       sinon <type>numeric</type>
      </entry>
      <entry>simple variance des valeurs en entrée (carré de la
       déviation)</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   Il devrait être noté qu'en dehors de <function>count</function>, ces
   fonctions renvoient une valeur nulle si aucune ligne n'est sélectionnée. En
   particulier, une somme (<function>sum</function>) sur aucune ligne renvoie
   NULL et non pas zéro. La fonction <function>coalesce</function> pourrait
   être utilisée pour substituer des zéros aux valeurs nulles quand cela est
   nécessaire.
  </para>

  <note>
   <para>
    Les utilisateurs habitués à travailler avec d'autres systèmes de gestion de
    bases de données SQL pourraient être surpris par les caractéristiques de
    performances de certains fonctions d'agrégat avec
    <productname>PostgreSQL</productname> lorsque l'agrégat est appliqué à la
    table entière (autrement dit, pas de clause <literal>WHERE</literal>). En
    particulier, une requête identique à
<programlisting>
SELECT min(col) FROM matable;
</programlisting>
    sera exécuté par <productname>PostgreSQL</productname> en utilisant un
    parcours séquentiel de la table entière. D'autres systèmes de bases de
    données pourraient optimiser de telles requêtes en utilisant un index sur la
    colonne si celui-ci est disponible. De même, les fonctions d'agrégat
    <function>max()</function> et <function>count()</function> requièrent
    toujours un parcours séquentiel si elles s'appliquent à la table entière
    avec <productname>PostgreSQL</productname>.
   </para>

   <para>
    <productname>PostgreSQL</productname> ne peut pas implémenter facilement
    cette optimisation parce qu'elle autorise aussi les requêtes d'agrégat
    définies par l'utilisateur. Comme <function>min()</function>,
    <function>max()</function> et <function>count()</function> sont définies en
    utilisant l'API générique des fonctions d'agrégat,  rien n'est prévu
    pour les cas spéciaux lors de l'exécution de ces fonctions sous certaines
    circonstances.
   </para>

   <para>
    Heureusement, il existe un contournement simple de
    <function>min()</function> et <function>max()</function>. la requête
    montrée ci-dessous est équivalent à la requête ci-dessus, si ce n'est
    qu'elle prend avantage de l'index B-tree s'il existe sur cette colonne.
<programlisting>
SELECT col FROM matable ORDER BY col ASC LIMIT 1;
</programlisting>
    Une requête similaire (obtenue en substituant <literal>DESC</literal>
    avec <literal>ASC</literal> dans la requête ci-dessus) peut être utilisé à
    la place de <function>max()</function>).
   </para>

   <para>
    Malheureusement, il n'existe pas de requête triviale similaire pouvant
    être utilisée pour améliorer les performances de
    <function>count()</function> si cela s'applique à la table entière.
   </para>
  </note>

 </sect1>


 <sect1 id="functions-subquery">
  <title>Expressions de sous-expressions</title>

  <indexterm>
   <primary>EXISTS</primary>
  </indexterm>

  <indexterm>
   <primary>IN</primary>
  </indexterm>

  <indexterm>
   <primary>NOT IN</primary>
  </indexterm>

  <indexterm>
   <primary>ANY</primary>
  </indexterm>

  <indexterm>
   <primary>ALL</primary>
  </indexterm>

  <indexterm>
   <primary>SOME</primary>
  </indexterm>

  <indexterm>
   <primary>sous-requête</primary>
  </indexterm>

  <para>
   Cette section décrit les expressions de sous-requêtes compatibles
   <acronym>SQL</acronym> et disponibles avec
   <productname>PostgreSQL</productname>. Toutes les formes d'expressions
   documentées dans cette section renvoient des résultats booléens (true/false).
  </para>

  <sect2>
   <title><literal>EXISTS</literal></title>

<synopsis>
EXISTS ( <replaceable>sous-requête</replaceable> )
</synopsis>

  <para>
   L'argument d'<token>EXISTS</token> est une instruction <command>SELECT</command>
   arbitraire ou une <firstterm>sous-requête</firstterm>. La sous-requête est
   évaluée pour déterminer si elle renvoie des lignes. Si elle en renvoie au
   moins une, le résultat d'<token>EXISTS</token> est vrai
   (<quote>true</quote>)&nbsp;; si elle n'en renvoie aucune, le résultat
   d'<token>EXISTS</token> est faux (<quote>false</quote>).
  </para>

  <para>
   La sous-requête peut faire référence à des variables de la requête
   englobante qui agiront comme des constantes lors d'une évaluation de la
   sous-requête.
  </para>

  <para>
   La sous-requête sera exécutée suffisamment pour déterminer si une ligne est 
   renvoyée, donc pas obligatoirement complètement. Il est déconseillé d'écrire
   une sous-requête qu a des effets de bord (tel que l'appel de fonctions de
   séquence)&nbsp;; que l'effet de bord se fasse ou non serait difficile à
   prédire.
  </para>

  <para>
   Comme le résultat dépend seulement du fait que des lignes sont renvoyées
   et, donc, que le contenu des lignes importe peu, la liste de sortie de la
   sous-requête est normalement inintéressant. Une convention de codage commune
   est l'écriture de tous les tests <literal>EXISTS</literal> dans la forme
   <literal>EXISTS(SELECT 1 WHERE ...)</literal>. Néanmoins, il y a des
   exceptions à cette règle, exceptions comme des sous-requêtes
   utilisant <token>INTERSECT</token>.
  </para>

  <para>
   Ce simple exemple ressemble à une jointure interne sur <literal>col2</literal>
   mais il produit au plus une ligne en sortie pour chaque ligne de
   <literal>tab1</literal> même s'il y a plusieurs correspondances parmi les lignes de
   <literal>tab2</literal>&nbsp;:
<screen>
SELECT col1 FROM tab1
    WHERE EXISTS(SELECT 1 FROM tab2 WHERE col2 = tab1.col2);
</screen>
  </para>
  </sect2>

  <sect2>
   <title><literal>IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> IN
(<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit est une sous-expression entre parenthèses qui retournera qu'une
   seule ligne. L'expression gauche est évaluée et comparée à chaque ligne du
   résultat de la sous-requête. Le résultat de <token>IN</token> est vrai
   (<quote>true</quote>) si une ligne équivalente de la sous-requête est trouvée. Le
   résultat est faux (<quote>false</quote>) si aucune ligne correspondante n'est
   trouvée (ceci incluant le cas spécial où la sous-requête ne renvoie aucune
   ligne).
  </para>

  <para>
   Notez que si l'expression gauche est nulle ou s'il n'existe pas de
   correspondance avec les valeurs du côté droit et qu'au moins une ligne du
   côté droit est nulle, le résultat de la construction <token>IN</token> sera
   nul, et non pas faux. Ceci est en accord avec les règles normales du SQL pour
   les combinaisons booléennes des valeurs nulles.
  </para>

  <para>
   Comme avec <token>EXISTS</token>, il n'est pas conseillé d'assumer que la
   sous-requête sera évaluée complètement.
  </para>

<synopsis>
(<replaceable>expression</replaceable> <optional>,
<replaceable>expression</replaceable> ...</optional>) IN
(<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit de la forme <token>IN</token> est une sous-requête entre
   parenthèses qui doit renvoyer exactement autant de colonnes qu'il n'y a
   d'expressions dans le côté gauche. Les expressions côté gauche sont évaluées
   et comparées ligne par ligne au résultat de la sous-requête. Le résultat de
   <token>IN</token> est vrai (<quote>true</quote>) si une ligne équivalente
   de la sous-requête est trouvée. Le résultat est faux (<quote>false</quote>) si
   aucune ligne correspondante n'est trouvée (ceci incluant le cas spécial où
   la sous-requête ne renvoie aucune ligne).
  </para>

  <para>
   Comme d'habitude, les valeurs nulles dans les lignes sont combinées suivant
les règles habituelles des expressions booléennes SQL. Deux lignes sont
considérées égales si leurs membres correspondants sont non nuls et égaux&nbsp;;
les lignes diffèrent si le contenu de leurs membres sont non nuls et
différents&nbsp;; sinon le résultat de la comparaison de la ligne est inconnu,
donc nul. Si tous les lignes résultantes sont soit différentes soit nulles,
avec au moins une nulle, alors le résultat de <token>IN</token> est nul.
  </para>
  </sect2>

  <sect2>
   <title><literal>NOT IN </literal></title>

<synopsis>
<replaceable>expression</replaceable> NOT IN
(<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit est une sous-requête entre parenthèses qui doit renvoyer une 
   colonne exactement. L'expression gauche est évaluée et comparée à chaque
   ligne du résultat de la sous-requête. Le résultat de <token>NOT IN</token>
   est vrai (<quote>true</quote>) si seules des lignes différentes de la sous-requête
   sont trouvées (ceci incluant le cas spécial où la sous-requête ne renvoie
   aucune ligne). Le résultat est faux (<quote>false</quote>) si une ligne égale est
   trouvée.
  </para>

  <para>
   Notez que si l'expression gauche renvoie un résultat nul ou s'il n'existe
   pas de valeurs du côté droit égales et qu'au moins une ligne du côté droit
   renvoie nul, le résultat de la construction <token>NOT IN</token> sera nul,
   et non pas vrai. Ceci est en accord avec les règles standards du SQL pour les
   combinaisons booléennes de valeurs nulles.
  </para>

  <para>
   Comme avec <token>EXISTS</token>, il n'est pas conseillé d'assumer que la
   sous-requête sera évaluée complètement.
  </para>

<synopsis>
(<replaceable>expression</replaceable> <optional>,
<replaceable>expression</replaceable> ...</optional>) NOT IN
(<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit de cette forme de <token>NOT IN</token> est une sous-requête
   entre parenthèses qui doit renvoyer exactement autant de colonnes qu'il n'y a
   d'expressions dans la liste gauche. Les expressions du côté gauche sont
   évaluées et comparées ligne par ligne à chaque ligne du résultat de la
   sous-requête. Le résultat de <token>NOT IN</token> est vrai (<quote>true</quote>)
   si seules des lignes différentes de la sous-requête sont trouvées (ceci
   inclut le cas spécial où la sous-requête ne renvoie aucune ligne). Le
   résultat est faux (<quote>false</quote>) si aucune ligne égale n'est trouvée.
  </para>

  <para>
   Comme d'habitude, les valeurs nulles de la ligne sont combinées suivant les
règles standards du SQL sur les expressions booléennes. Deux lignes sont
considérées égales si tous leurs membres correspondant sont non nuls et
égaux&nbsp;; les lignes sont différentes si un des membres correspondants est
non nul et différent&nbsp;; sinon le résultat de cette comparaison de ligne est
inconnu (nul). Si tous les résultats ligne sont soit différents soit nuls, avec
au moins un nul, alors le résultat de <token>NOT IN</token> est nul.
  </para>
  </sect2>

  <sect2>
   <title><literal>ANY</literal>/<literal>SOME</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>opérateur</replaceable> ANY
(<replaceable>sous-requête</replaceable>)
<replaceable>expression</replaceable> <replaceable>opérateur</replaceable> SOME
(<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit est une sous-requête entre parenthèse qui ne doit retourner
   qu'une seule colonne. L'expression du côté gauche est évaluée et comparée à
   chaque ligne de la sous-requête en utilisant
   l'<replaceable>opérateur</replaceable> indiqué et rendant un résultat
   booléen. Le résultat de <token>ANY</token> est vrai (<quote>true</quote>) si un
   résultat vrai est obtenu. Le résultat est faux (<quote>false</quote>) si aucun
   résultat vrai n'est trouvée (ceci incluant le cas spécial où la requête ne
   renvoie aucune ligne).
  </para>

  <para>
   <token>SOME</token> est un synonyme de <token>ANY</token>.
   <token>IN</token> est équivalent à <literal>= ANY</literal>.
  </para>

  <para>
   Notez que sans succès et avec au moins une ligne nulle du côté droit pour le
   résultat de l'opérateur, le résultat de la construction <token>ANY</token>
   sera nul et non pas faux. Ceci est en accord avec les règles standards SQL
   pour les combinaisons booléenne de valeurs nulles.
  </para>

  <para>
   Comme avec <token>EXISTS</token>, il n'est pas conseillé d'assumer que la
   sous-requête sera évaluée complètement.
  </para>

<synopsis>
(<replaceable>expression</replaceable> <optional>,
<replaceable>expression</replaceable> ...</optional>) <replaceable>opérateur</>
ANY (<replaceable>sous-requête</replaceable>)
(<replaceable>expression</replaceable> <optional>,
<replaceable>expression</replaceable> ...</optional>) <replaceable>opérateur</>
SOME (<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit de cette forme <token>ANY</token> est une sous-requête entre
   parenthèses, qui doit renvoyer exactement autant de colonnes qu'il n'y a
   d'expressions dans la liste gauche. Les expressions du côté gauche sont
   évaluées et comparées ligne par ligne à chaque ligne du résultat de la
   sous-requête en utilisant l'<replaceable>opérateur</replaceable> donné.
   Actuellement, seuls les opérateurs <literal>=</literal> et
   <literal>&lt;&gt;</literal> sont permis dans les constructions de ligne
   <token>ANY</token>. Le résultat de <token>ANY</token> est vrai
   (<quote>true</quote>) si une ligne est trouvée. Le résultat est faux
   (<quote>false</quote>) si aucune ligne n'est trouvée (ceci incluant le cas spécial
   où la sous-requête ne renverrait aucune ligne).
  </para>

  <para>
   Comme d'habitude, les valeurs nulles dans les lignes sont combinées avec les
   règles standards des expressions booléennes en SQL. Deux lignes sont
   considérées égales si tous les membres correspondants sont non nuls et
   égaux&nbsp;; les lignes sont différentes si un des membres est non nul et
   différent&nbsp;; sinon le résultat de cette comparaison de lignes est
   inconnu (donc nul). S'il y a au moins une ligne nulle, alors le résultat de
   <token>ANY</token> ne peut pas être faux (false)&nbsp;; il sera vrai (true)
   ou nul. 
  </para>
  </sect2>

  <sect2>
   <title><literal>ALL</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>opérateur</replaceable> ALL
(<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit est une sous-requête entre parenthèses qui ne doit renvoyer
   qu'une seule colonne. L'expression gauche est évaluée et comparée à chaque
   ligne du résultat de la sous-requête en utilisant
   l'<replaceable>opérateur</replaceable> qui doit renvoyer un résultat booléen.
   Le résultat de <token>ALL</token> est vrai (<quote>true</quote>) si toutes les
   lignes renvoient true (ceci incluant le cas spécial où la sous-requête ne
   renvoie aucune ligne). Le résultat est faux (<quote>false</quote>) si un résultat
   faux est découvert.
  </para>

  <para>
   <token>NOT IN</token> est équivalent à <literal>&lt;&gt; ALL</literal>.
  </para>

  <para>
   Notez que s'il n'y a aucun échec mais qu'au moins une ligne du côté droit
   renvoie une valeur nulle sur le résultat de l'opérateur, le résultat de la
   construction <token>ALL</token> sera nul et non pas vrai. Ceci est en accord
   avec les règles standards du SQL pour les combinaisons booléennes de valeurs
   nulles.
  </para>

  <para>
   Comme avec <token>EXISTS</token>, il est déconseillé d'assumer que la
   sous-requête sera évaluée complètement.
  </para>

<synopsis>
(<replaceable>expression</replaceable> <optional>,
<replaceable>expression</replaceable> ...</optional>)
<replaceable>opérateur</replaceable> ALL
(<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté droit de cette forme <token>ALL</token> est une sous-requête entre
   parenthèses qui doit renvoyer exactement le même nombre de colonnes qu'il y a
   d'expressions dans la liste gauche. Les expressions du côté gauche sont
   évaluées et comparées ligne par ligne à chaque ligne du résultat de la
   sous-requête en utilisant l'<replaceable>opérateur</replaceable> donné.
   Actuellement, seuls les opérateurs <literal>=</literal> et
   <literal>&lt;&gt;</literal> sont autorisées dans les requêtes de ligne
   <token>ALL</token>. Le résultat de <token>ALL</token> est <quote>true</quote> si
   toutes les lignes de la sous-requête sont respectivement égales ou
   différentes (ceci incluant le cas spécial où la sous-requête ne renvoie
   aucune ligne). Le résultat est faux (<quote>false</quote>) si une ligne se trouve
   être respectivement différente ou égale.
  </para>

  <para>
   Comme d'habitude, les valeurs nulles des lignes sont combinées avec les
   règles standards des expressions booléennes en SQL. Deux lignes sont
   considérées égales si tous les membres correspondants sont non nuls et
   égaux&nbsp;; les lignes sont différentes si un membre est non nul ou
   différent&nbsp;; sinon le résultat de la comparaison de cette ligne est
   inconnue (nul). S'il y a au moins une ligne résultat nulle, alors le résultat
   de <token>ALL</token> ne peut pas être vrai (true)&nbsp;; il sera faux
   (false) ou nul. 
  </para>
  </sect2>

  <sect2>
   <title>Comparaison de lignes complètes</title>

   <indexterm>
    <primary>comparaison</primary>
    <secondary>de lignes</secondary>
   </indexterm>

<synopsis>
(<replaceable>expression</replaceable> <optional>,
<replaceable>expression</replaceable> ...</optional>)
<replaceable>opérateur</replaceable> (<replaceable>sous-requête</replaceable>)
</synopsis>

  <para>
   Le côté gauche est une liste d'expressions scalaires. Le côté droit est une
   sous-requête entre parenthèses qui doit renvoyer exactement autant de
   colonnes qu'il n'y a d'expressions su le côté gauche. De plus, la
   sous-requête ne peut pas renvoyer plus d'une ligne. (S'il ne renvoie aucune
   ligne, le résultat est pris comme s'il était nul.) Le côté gauche est évalué
   et comparé avec la ligne du résultat de la sous-requête. Actuellement, seuls
   les opérateurs <literal>=</literal> et <literal>&lt;&gt;</literal> sont
   autorisés dans les comparaisons de lignes. Le résultat est vrai
   (<quote>true</quote>) si les deux lignes sont respectivement égales ou
   différentes.
  </para>

  <para>
   Comme d'habitude, les valeurs nulles des lignes sont combinées avec les
   règles standards des expressions booléennes SQL. Deux lignes sont considérées
   égales si tous les membres correspondants sont non nuls et égaux&nbsp;; les
   lignes sont différentes si un membre correspondant est non nul et
   différent&nbsp;; sinon le résultat de la comparaison de la ligne est
   inconnu (nul).
  </para>
  </sect2>
 </sect1>


 <sect1 id="functions-comparisons">
  <title>Comparaisons de lignes et de tableaux</title>

  <indexterm>
   <primary>in</primary>
  </indexterm>

  <indexterm>
   <primary>not in</primary>
  </indexterm>

  <indexterm>
   <primary>any</primary>
  </indexterm>

  <indexterm>
   <primary>all</primary>
  </indexterm>

  <indexterm>
   <primary>some</primary>
  </indexterm>

  <para>
   Cette section décrit plusieurs constructions spécialisées pour les
   comparaisons multiples entre des groupes de valeurs. Ces formes sont
   syntaxiquement en relation avec les formes de sous-requêtes de la section
   précédente mais n'impliquent pas de sous-requêtes. Ces formes impliquant des
   sous-expressions de tableaux sont des extensions de
   <productname>PostgreSQL</productname>&nbsp;; le reste est compatible avec
   <acronym>SQL</acronym>. Toutes les formes d'expression documentées dans cette
   section renvoient des résultats booléens (true/false).
  </para>

  <sect2>
   <title><literal>IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> IN
(<replaceable>valeur</replaceable><optional>, ...</optional>)
</synopsis>

  <para>
   Le côté droit est une liste entre parenthèses d'expressions scalaires. Le
   résultat est vrai (<quote>true</quote>) si le côté gauche de l'expression est égal
   à une des expressions du côté droit. C'est une notation raccourci de

<synopsis>
<replaceable>expression</replaceable> = <replaceable>value1</replaceable>
OR
<replaceable>expression</replaceable> = <replaceable>value2</replaceable>
OR
...
</synopsis>
  </para>

  <para>
   Notez que si l'expression du côté gauche renvoie nul ou s'il n'y a pas
   de valeurs du côté droit égales et qu'au moins une des expressions du côté
   droit renvoie la valeur nulle, le résultat de la construction
   <token>IN</token> sera nul et non pas faux. Ceci est en accord avec les
   règles standards SQL pour les combinaisons booléennes de valeurs nulles.
  </para>
  </sect2>

  <sect2>
   <title><literal>NOT IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> NOT IN
(<replaceable>valeur</replaceable><optional>, ...</optional>)
</synopsis>

  <para>
   Le côté droit est une liste entre parenthèses d'expressions scalaires. Le
   résultat est vrai (<quote>true</quote>) si l'expression du côté gauche  est
   différent de toutes les expressions du côté droit. Ceci est une notation
   raccourci pour

<synopsis>
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value1</replaceable>
AND
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value2</replaceable>
AND
...
</synopsis>
  </para>

  <para>
   Notez que si l'expression du côté gauche renvoie une valeur nulle ou s'il
   existe des valeurs différentes du côté droit et qu'au moins une expression
   du côté droit renvoie la valeur nulle, le résultat de la construction
   <token>NOT IN</token> sera nul et non pas vrai. Ceci est en accord avec les
   règles standards du SQL pour les combinaisons booléennes des valeurs nulles.
  </para>

  <tip>
  <para>
   <literal>x NOT IN y</literal> est équivalent à <literal>NOT (x IN
   y)</literal> dans tout les cas. Néanmoins, les valeurs nulles ont plus de
   chances de survenir pour le novice avec l'utilisation de <token>NOT
   IN</token> qu'en utilisant <token>IN</token>. Il est préférable d'exprimer
   votre condition de façon positive si possible.
  </para>
  </tip>
  </sect2>

  <sect2>
   <title><literal>ANY</literal>/<literal>SOME</literal> (array)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>opérateur</replaceable> ANY
(<replaceable>expression tableau</replaceable>)
<replaceable>expression</replaceable> <replaceable>opérateur</replaceable> SOME
(<replaceable>expression tableau</replaceable>)
</synopsis>

  <para>
   Le côté droit est une expression entre parenthèses qui doit renvoyer une
valeur de type array. L'expression du côté gauche est évaluée et comparée à
chaque élément du tableau en utilisant l'<replaceable>opérateur</replaceable>
donné et qui doit renvoyer un résultat booléen. Le résultat de
<token>ANY</token> est vrai (<quote>true</quote>) si un résultat vrai est obtenu. Le
résultat est faux (<quote>false</quote>) si aucun résultat vrai n'est trouvé
(ceci incluant le cas spécial où le tableau a zéro élément).
  </para>

  <para>
   <token>SOME</token> est un synonyme pour <token>ANY</token>.
  </para>
  </sect2>

  <sect2>
   <title><literal>ALL</literal> (array)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>opérateur</replaceable> ALL
(<replaceable>expression tableau</replaceable>)
</synopsis>

  <para>
   Le côté droit est une expression entre parenthèses qui doit renvoyer une
valeur de type tableau. L'expression du côté gauche est évaluée et comparée à
chaque élément du tableau en utilisant l'<replaceable>opérateur</replaceable>
donné qui doit renvoyer un résultat booléen. Le résultat de <token>ALL</token>
est vrai (<quote>true</quote>) si toutes les comparaisons renvoient vrai (ceci incl
ut le cas spécial où le tableau a zéro élément). Le résultat est faux
(<quote>false</quote> si un résultat faux est trouvé.
  </para>
  </sect2>

  <sect2>
   <title>Comparaison sur des lignes complètes</title>

<synopsis>
(<replaceable>expression</replaceable> <optional>,
<replaceable>expression</replaceable> ...</optional>)
<replaceable>opérateur</replaceable> (<replaceable>expression</replaceable>
<optional>, <replaceable>expression</replaceable> ...</optional>)
</synopsis>

  <para>
   Chaque côté est une liste d'expressions scalaires&nbsp;; les deux listes
   doivent être de la même taille. Chaque côté est évaluée et ils sont comparés
   ligne par ligne. Actuellement, seuls les opérateurs <literal>=</literal> et
   <literal>&lt;&gt;</literal> sont autorisés dans les comparaisons de ligne. Le
   résultat est vrai (<quote>true</quote>) si les deux lignes sont respectivement
   égales ou différentes.
  </para>

  <para>
   Comme d'habitude, les valeurs nulles des lignes sont combinées avec les règ
   les standards des expressions booléennes SQL. Les deux lignes sont
   considérées égales si leur membres correspondants sont non nul et
   égaux&nbsp;; les lignes sont différentes si un des membres correspondants est
   non nul et différent&nbsp;; sinon le résultat de la comparaison de ligne est
   inconnu (nul).
  </para>
  </sect2>
 </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
