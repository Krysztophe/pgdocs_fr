<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/install-win32.sgml,v 1.7 2005/09/15 07:03:18 guillaume Exp $
-->

<chapter id="install-win32">
 <title>Installation sur <productname>Windows</productname>du client
  uniquement</title>

 <indexterm>
  <primary>installation</primary>
  <secondary>sur Windows</secondary>
 </indexterm>

 <para>
  Bien qu'une installation complète de <productname>PostgreSQL</productname>
  peut seulement être construit avec <productname>MinGW</productname> ou
  <productname>Cygwin</productname>, la bibliothèque cliente en C 
  (<application>libpq</application>) ainsi que le terminal interactif 
  (<application>psql</application>) peuvent être compilés en utilisant
  d'autres outils Windows. Les fichiers makefile sont inclus dans la
  distribution source pour <productname>Microsoft Visual C++</productname> et 
  <productname>Borland C++</productname>. Il doit être possible de compiler
  les bibliothèques manuellement dans d'autres configurations.
 </para>

 <tip>
  <para>
   Utiliser <productname>Microsoft Visual C++</productname> ou 
   <productname>Borland C++</productname> est la solution préférée. Si vous
   utilisez un de ces ensembles d'outils, référez-vous au <xref
   linkend="installation">.
  </para>
 </tip>

 <para>
  Pour compiler tous les utilitaires disponibles pour 
  <productname>Windows</productname> en utilisant <productname>Microsoft Visual
  C++</productname>, placez-vous dans le répertoire <filename>src</filename> et
  saisissez la commande&nbsp;:
<screen>
<userinput>nmake /f win32.mak</userinput>
</screen>
   Cette action ne peut être accomplie que si vous avez 
   <productname>Visual C++</productname> dans la variable d'environnement path.
 </para>

 <para>
  Pour tout construire en utilisant <productname>Borland
  C++</productname>, placez-vous dans le répertoire <filename>src</filename> et
  saisissez la commande&nbsp;:
<screen>
<userinput>make -N -DCFG=Release /f bcc32.mak</userinput>
</screen>
 </para>

 <para>
  Les fichiers suivants seront produits&nbsp;:

  <variablelist>
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.dll</filename></term>
    <listitem>
     <para>
      La bibliothèque dynamique d'interface client
     </para>
    </listitem>
   </varlistentry>
  
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpqdll.lib</filename></term>
    <listitem>
     <para>
      La bibliothéque d'import nécessaire pour lier vos programmes à 
      <filename>libpq.dll</filename>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.lib</filename></term>
    <listitem>
     <para>
       La version statique de la bibliothèque d'interface client
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>bin\psql\Release\psql.exe</filename></term>
    <listitem>
     <para>
      Le terminal interactif de <productname>PostgreSQL</productname>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>

 <para>
  Le seul fichier devant réellement être installé est la bibliothèque dynamique
  <filename>libpq.dll</filename>. Ce fichier doit être placé dans la plupart des
  cas dans le répertoire <filename>WINNT\SYSTEM32</filename> (ou dans 
  <filename>WINDOWS\SYSTEM</filename> sur des systèmes Windows 95/98/ME). Si le
  fichier est installé par le biais d'un programme d'installation, il doit être
  installé avec un contrôle de version utilisant la ressource 
  <symbol>VERSIONINFO</symbol> incluse dans le fichier, afin d'assurer qu'une 
  nouvelle version de la bibliothèque ne sera pas écrasée.
 </para>

 <para>
  Si vous envisagez d'effectuer le développement d'une application utilisant 
  <application>libpq</application> sur cette machine, vous devrez ajouter les
  sous-répertoires <filename>src\include</filename> et 
  <filename>src\interfaces\libpq</filename> de l'ensemble des source dans le
  chemin des fichiers d'inclusion de votre compilateur.
 </para>

 <para>
  Afin d'utiliser la bibliothèque, vous devrez ajouter 
  <filename>libpqdll.lib</filename> dans votre projet. (Dans Visual C++,
  vous n'aurez qu'à cliquer avec le bouton droit sur le projet et choisir 
  de l'ajouter.).
 </para>

 <para>
  Des outils de développement libres provenant de <productname>Microsoft</productname>
  peuvent être téléchargés à partir de
  <ulink url="http://msdn.microsoft.com/visualc/vctoolkit2003/"></>.
  Vous aurez aussi besoin de <filename>MSVCRT.lib</> provenant de la plateforme
  SDK (<ulink url="http://www.microsoft.com/msdownload/platformsdk/sdkupdate/"></>).
  Vous pouvez aussi télécharger l'ensemble <application>.NET</> à partir de
  <ulink url="http://msdn.microsoft.com/netframework/downloads/updates/default.aspx"></>.
  Une fois installé, les binaires doivent être dans le chemin des applications
  et vous pourriez avoir besoin d'ajouter un <literal>/lib:&lt;libpath&gt;</>
  pour pointer vers <filename>MSVCRT.lib</>. Des outils de compilation libre pour
  <productname>Borland C++</productname> peuvent être téléchargés à partir de
  <ulink url="http://www.borland.com/products/downloads/download_cbuilder.html#"></>,
  et nécessitent une configuration similaire.
 </para>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
