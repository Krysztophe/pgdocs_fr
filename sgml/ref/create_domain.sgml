<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/ref/create_domain.sgml,v 1.10 2005/07/15 06:14:31 guillaume Exp $
PostgreSQL documentation
-->

<refentry id="SQL-CREATEDOMAIN">
 <refmeta>
  <refentrytitle id="sql-createdomain-title">CREATE DOMAIN</refentrytitle>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE DOMAIN</refname>
  <refpurpose>définit un nouveau domaine</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createdomain">
  <primary>CREATE DOMAIN</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE DOMAIN <replaceable class="parameter">nom</replaceable> [AS] <replaceable
class="parameter">type_donnee</replaceable>
    [ DEFAULT <replaceable>expression</> ]
    [ <replaceable class="PARAMETER">contrainte</replaceable> [ ... ] ]

où <replaceable class="PARAMETER">contrainte</replaceable> est&nbsp;:

[ CONSTRAINT <replaceable class="PARAMETER">nom_contrainte</replaceable> ]
{ NOT NULL | NULL | CHECK (<replaceable class="PARAMETER">expression</replaceable>) }
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE DOMAIN</command> crée un nouveau domaine de données.
   L'utilisateur définissant un domaine devient son propriétaire.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple, <literal>CREATE DOMAIN
   monschema.mondomaine ...</>), alors le domaine est créé dans le schéma
   spécifié. Sinon, il est créé dans le schéma actuel. Le nom du domaine doit
   être unique parmi les types et domaines existant dans son schéma.
  </para>

  <para>
   Les domaines sont utiles pour faire une abstraction des champs communs 
   entre deux tables en un seul emplacement. Par exemple, une colonne d'adresse
   de courrier électronique utilisé dans plusieurs tables, toutes avec les mêmes
   propriétés. Définissez un domaine et utilisez-le plutôt que de configurer les
   contraintes de chaque table individuellement.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">nom</replaceable></term>
      <listitem>
       <para>
	Le nom d'un domaine à créer (pouvant être qualifié du nom du schéma).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">type_donnees</replaceable></term>
      <listitem>
       <para>
        Le type de données sous-jacent du domaine. Il peut contenir des
        spécifications de tableau.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DEFAULT <replaceable>expression</replaceable></literal></term>

      <listitem>
       <para>
        La clause <literal>DEFAULT</> définit une valeur par défaut pour les
        colonnes d'un type de données domaine. La valeur correspond à toute
        expression de variable (mais les sous-requêtes ne sont pas autorisées).
        Le type de données de l'expression par défaut doit correspondre au type
        de données du domaine. Si la valeur par défaut n'est pas indiquée, alors
        il s'agit de la valeur NULL.
       </para>

       <para>
        L'expression par défaut sera utilisée dans toute opération
        d'insertion qui ne spécifierait pas de valeur pour cette colonne. Si une
        valeur par défaut est définie pour une colonne particulière, elle
        surcharge toute valeur par défaut associée avec le domaine. En retour,
        la valeur par défaut surcharge tout valeur par défaut associée avec le
        type de données sous-jacent.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONSTRAINT <replaceable
       class="PARAMETER">nom_contrainte</replaceable></literal></term>
      <listitem>
       <para>
        Un nom optionnel pour une contrainte. Si non spécifiée, le système en
        génère un.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NOT NULL</></term>
      <listitem>
       <para>
        Les valeurs de ce domaine n'ont pas le droit d'être NULL.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULL</></term>
      <listitem>
       <para>
        Les valeurs de ce domaine peuvent être NULL. C'est la valeur par défaut.
       </para>

       <para>
        Cette clause a seulement pour but la compatibilité avec les bases de
        données SQL non standard. Son utilisation n'est pas encouragée dans les
        nouvelles applications.
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>CHECK (<replaceable class="PARAMETER">expression</replaceable>)</literal></term>
    <listitem>
     <para>
      Les clauses <literal>CHECK</> spécifient des contraintes d'intégrité ou
      des tests que les valeurs du domaine doivent satisfaire. Chaque
      contrainte doit être une expression produisant un résultat booléen. Elle
      devrait utiliser le nom <literal>VALUE</> pour se référer à la valeur en
      cours de tests.
     </para>

     <para>
      Actuellement, les expressions <literal>CHECK</literal> ne peuvent ni
      contenir de sous-requêtes ni se référer à des variables autres que
      <literal>VALUE</>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Cet exemple crée le type de données <type>code_postal_us</type>, puis
   l'utilise dans la définition d'une table. Un test d'expression rationnelle
   est utilisé pour vérifier que la valeur ressemble à un code postal US valide.

<programlisting>
CREATE DOMAIN code_postal_us AS TEXT
CHECK(
   VALUE ~ '^\\d{5}$'
OR VALUE ~ '^\\d{5}-\\d{4}$'
);

CREATE TABLE courrier_us (
  id_adresse SERIAL NOT NULL PRIMARY KEY
, rue1 TEXT NOT NULL
, rue2 TEXT
, rue3 TEXT
, ville TEXT NOT NULL
, code_postal code_postal_us NOT NULL
);
</programlisting>
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATEDOMAIN-compatibility">
  <title>Compatibilité</title>

  <para>
   La commande <command>CREATE DOMAIN</command> est conforme au standard SQL.
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATEDOMAIN-see-also">
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterdomain"
    endterm="sql-alterdomain-title"></member>
   <member><xref linkend="sql-dropdomain"
    endterm="sql-dropdomain-title"></member>
  </simplelist>
 </refsect1>

</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
