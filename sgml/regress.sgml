<!-- $Header: /var/lib/cvs/pgsql-fr/sgml/regress.sgml,v 1.7 2005/07/15 06:14:27 guillaume Exp $ -->

 <chapter id="regress">
  <title id="regress-title">Tests de régression</title>

  <indexterm zone="regress">
   <primary>tests de régression</primary>
  </indexterm>

  <indexterm zone="regress">
   <primary>test</primary>
  </indexterm>

  <para>
   Les tests de régression composent un ensemble exhaustif de tests pour
   l'implémentation SQL dans <productname>PostgreSQL</productname>. Ils testent
   les opérations SQL standards ainsi que les fonctionnalités étendues de
   <productname>PostgreSQL</productname>.
  </para>

  <sect1 id="regress-run">
   <title>Lancer les tests</title>

  <para>
   Les tests de régression peuvent être lancés sur un serveur déjà installé et
   fonctionnel ou en utilisant une installation temporaire à l'intérieur du
   répertoire de construction. Ils peuvent, de plus, être lancés en mode
   <quote>parallèle</quote> ou en mode <quote>séquentiel</quote>. Le mode
   séquentiel lance les scripts de test en série, tandis que le mode
   parallèle lance plusieurs processus serveurs pour parallèliser l'exécution des
   groupes de tests. Les tests parallèles permettent de s'assurer du
   bon fonctionnement des communications interprocessus et du verrouillage.
   Pour des raisons historiques, les tests séquentiels sont habituellement lancés
   sur une installation existante, et la méthode parallèle préférentiellement
   sur une installation temporaire, mais il n'y a aucune raison technique à cela.
  </para>

  <para>
   Pour lancer les tests de régression après la construction mais avant l'installation,
   il suffit de saisir
<screen>
gmake check
</screen>
   dans le répertoire de premier niveau. (On peut aussi se placer dans le répertoire
   <filename>src/test/regress</filename> et y lancer la commande.) En premier lieu
   seront construits différents fichiers auxiliaires, tels des exemples de
   fonctions de déclencheurs utilisateur, puis le script de pilotage des tests
   sera lancé. Au final, la sortie devrait ressembler à quelque chose comme
<screen>
<computeroutput>
======================
 All 96 tests passed.
======================
</computeroutput>
</screen>
   ou une note indiquant l'échec des tests.  Voir <xref
   linkend="regress-evaluation"> avant de supposer qu'un <quote>échec</quote>
   représente un problème sérieux.
  </para>

   <para>
    Comme cette méthode de tests fonctionne sur un serveur temporaire, elle 
    ne fonctionnera pas en tant qu'utilisateur root (car le serveur refusera de
    se lancer en tant qu'utilisateur root) Si vous avez lancé la construction en
    tant que root, vous n'avez pas besoin de tout recommencer. À la place,
    rendez le répertoire des tests de régression modifiable par un autre
    utilisateur, devenez cet utilisateur et relancez les tests. Par exemple
<screen>
<prompt>root# </prompt><userinput>chmod -R a+w src/test/regress</userinput>
<prompt>root# </prompt><userinput>chmod -R a+w contrib/spi</userinput>
<prompt>root# </prompt><userinput>su - joeuser</userinput>
<prompt>joeuser$ </prompt><userinput>cd <replaceable>répertoire
construction haut niveau</></userinput>
<prompt>joeuser$ </prompt><userinput>gmake check</userinput>
</screen>
    (Le seul <quote>risque de sécurité</quote> possible ici est que les
    autres utilisateurs pourraient modifier les résultats des tests de
    régression dans votre dos. Utilisez le bon sens pour gérer les droits des
    utilisateurs.)
   </para>
   <para>
    Autrement, lancez les tests après l'installation.
   </para>

   <para>
    Si vous avez configuré <productname>PostgreSQL</productname> pour qu'il
    s'installe dans un emplacement où existe déjà une ancienne installation de
    <productname>PostgreSQL</productname> et que vous lancez <literal>gmake
    check</> avant d'installer la nouvelle version, vous pourriez trouver que
    les tests échouent parce que les nouveaux programmes essaient d'utiliser les
    bibliothèques partagées déjà installées. (Les symptômes typiques sont des
    plaintes concernant des symboles non définis.) Si vous souhaitez lancer les
    tests avant d'écraser l'ancienne installation, vous devrez construire avec
    <literal>configure --disable-rpath</>. Néanmoins, il n'est pas recommandé
    d'utiliser cette option pour l'installation finale.
   </para>

   <para>
    Les tests de régression en parallèle lancent quelques processus avec
    votre utilisateur. Actuellement, le nombre maximum est de vingt scripts de
    tests en parallèle, ce qui signifie 60 processus&nbsp;: il existe un
    processus serveur, un <application>psql</> et habituellement un processus
    parent pour le <application>psql</> de chaque script de tests. Si votre
    système force une limite par utilisateur sur le nombre de processus,
    assurez-vous que cette limite est d'au moins 65, sinon vous pourriez obtenir
    des échecs hasardeux dans les tests en parallèle. Si vous ne pouvez pas
    augmenter cette limite, vous pouvez diminuer le degré de parallélisme en
    initialisant le paramètre <literal>MAX_CONNECTIONS</>. Par
exemple,
<screen>
gmake MAX_CONNECTIONS=10 check
</screen>
    ne lance pas plus de dix tests en même temps.
   </para>

   <para>
    Sur certains systèmes, le shell par défaut compatible Bourne
    (<filename>/bin/sh</filename>) a du mal à gérer autant de processus fils
    en parallèle. Cela pourrait causer des blocages ou des échecs dans les
    tests en parallèle. Dans de tels cas, spécifiez un shell compatible Bourne
    différent sur la liste de commande, par exemple&nbsp;:
<screen>
gmake SHELL=/bin/ksh check
</screen>
    Si aucun shell ne le permet, vous pouvez contourner le problème en diminuant
    le nombre de connexions comme indiqué ci-dessus.
   </para>

  <para>
   Pour lancer les tests après l'installation<![%standalone-ignore;[ (voir <xref
   linkend="installation">)]]>, initialisez un espace de données et lancez le
   serveur <![%standalone-ignore;[comme expliqué dans <xref
   linkend="runtime">,]]> puis lancez
<screen>
gmake installcheck
</screen>
ou pour un test parallèle
<screen>
gmake installcheck-parallel
</screen>
   Les tests s'attendront à contacter le serveur sur l'hôte local et avec le
   numéro de port par défaut, sauf en cas d'indication contraire avec les
   variables d'environnement <envar>PGHOST</envar> et <envar>PGPORT</envar>.
  </para>
  </sect1>

  <sect1 id="regress-evaluation">
   <title>Évaluation des tests</title> 

   <para>
    Il arrive parfois qu'une instance de <productname>PostgreSQL</productname>,
    correctement installée et entièrement fonctionnelle, puisse
    <quote>échouer</quote> à certains tests de régression, du fait de
    spécificités de la plateforme. Ces spécificités peuvent, par exemple, être
    la représentation des nombres à virgules flottantes ou le support des fuseaux
    horaires. Les tests sont, à ce jour, évalués en utilisant une simple comparaison
    <command>diff</command> avec les sorties engendrées sur un système de
    référence. Les résultats sont donc sensibles à de petites différences
    système. Lorsqu'un test est annoncé <quote>échoué</quote>, il faudra
    examiner les différences entre les résultats attendus et obtenus&nbsp;; il est
    probable que les différences ne soient pas significatives.
    Néanmoins, tout est fait pour maintenir des fichiers de références précises
    et actualisées pour toutes les plateformes supportées avec un soucis constant
    de réussite des tests.
   </para>

   <para>
    Les sorties actuelles des tests de régression sont stockées dans les fichiers du
    répertoire <filename>src/test/regress/results</filename>. Chaque fichier de
    sortie est comparé (<command>diff</command>) aux sorties de référence stockées
    dans le répertoire <filename>src/test/regress/expected</filename>. Les
    différences sont stockées dans le fichier
    <filename>src/test/regress/regression.diffs</filename>.
    La <command>diff</command> peut également être lancée par l'utilisateur.
   </para>

   <sect2>
    <title>Différences dans les messages d'erreurs</title>
      
    <para>
     Certains des tests de régression impliquent des valeurs en
     entrée intentionnellement invalides. Les messages d'erreur peuvent
     provenir soit du code de <productname>PostgreSQL</productname> soit des
     routines système de la plateforme hôte. Dans ce dernier cas, les messages
     pourraient varier entre plateformes mais devraient toujours refléter des
     informations similaires. Ces différences dans les messages résulteront dans
     un test de régression <quote>échoué</quote> qui pourrait être validé après
     vérification.
    </para>
   </sect2>
    
   <sect2>
    <title>Différences au niveau des locales</title>

    <para>
     Si vous lancez des tests sur un serveur déjà installé mais initialisé avec
     une locale autre que C, alors il pourrait y avoir des différences dans les
     ordres de tris. La suite de tests de régression est initialisée pour gérer
     ce problème en fournissant des fichiers de résultats alternatifs qui
     ensemble gèrent un grand nombre de locales. Par exemple, pour le test
     <literal>char</literal>, le fichier <filename>char.out</filename> attendu
     gère les locales <literal>C</> et <literal>POSIX</>, et le fichier
     <filename>char_1.out</filename> gère beaucoup d'autres locales. Le pilote
     des tests de régression choisira automatiquement le meilleur fichier lors
     de la vérification et pour la calcul des différences d'échecs. (Ceci
     signifie que les tests de régression ne peuvent pas détecter si les
     résultats sont appropriés pour la locale configurée. Ils vont simplement
     récupérer le fichier résultat qui fonctionne le mieux.)
    </para>

    <para>
     Si, pour une quelconque raison, les fichiers attendus ne couvrent pas
     certaines locales, vous pouvez ajouter un nouveau fichier. Le schéma de
     nommage est
     <literal><replaceable>nom_test</>_<replaceable>chiffre</>.out</>. Le
     chiffre n'a en fait pas de signification. Rappelez-vous que le pilote des
     tests de régression considérera tous les fichiers comme étant des résultats
     de tests valides. Si les résultats de tests sont spécifiques à une
     plateforme, la technique décrite dans <xref linkend="regress-platform">
     devrait être utilisée à la place.
    </para>
   </sect2>
    
   <sect2>
    <title>Différences au niveau des dates/heures</title>

    <para>
     Quelques requêtes des tests d'<filename>horologie</filename> échoueront si
     vous lancez les tests un jour de changement de heure ou le lendemain de ce
     jour. Ces requêtes s'attendent à ce que les intervalles entre minuit hier,
     minuit aujourd'hui et minuit demain soient exactement 24 heures -- ce qui
     est faux lorsqu'un changement d'heure intervient.
    </para>

    <note>
     <para>
      Comme les règles de changement d'heure des USA sont utilisées, ce
      problème arrive toujours le premier dimanche d'avril, le dernier dimanche
      d'octobre et les lundis suivants quelque soit le changement d'heure
      effectif où vous vivez. Notez aussi que le problème apparaît ou disparaît
      à minuit, UTC-7 ou UTC-8, pas à un minuit chez vous. Donc, l'échec
      pourrait arriver plus tard le dimanche ou persister jusqu'au mardi suivant
      l'endroit où vous vivez.
     </para>
    </note>

    <para>
     La plupart des résultats date/heure sont dépendants de l'environnement
     de zone horaire. Les fichiers de référence sont générés pour la zone
     horaire <literal>PST8PDT</literal> (Berkeley, Californie), et il y aura
     des échecs apparents si les tests ne sont pas lancés avec ce paramétrage de
     fuseau horaire. Le pilote des tests de régression initialise la variable
     d'environnement <envar>PGTZ</envar> à <literal>PST8PDT</literal> ce qui
     nous assure normalement de bons résultats.
    </para>
   </sect2>
    
   <sect2>
    <title>Différences sur les nombres à virgules flottantes</title>
      
    <para>
     Quelques tests impliquent des calculs sur des nombres flottants à 64 bits
     (<type>double precision</type>) à partir de colonnes de tables. Des
     différences dans les résultats appliquant des fonctions mathématiques à des
     colonnes <type>double precision</type> ont été observées. Les tests de
     <literal>float8</> et <literal>geometry</> sont particulièrement sensibles
     aux différences entre plateformes, voire aux différentes options
     d'optimisation des compilateurs. L'&oelig;il humain
     est nécessaire pour déterminer la véritable signification de ces différences,
     habituellement situées après la dixième décimale.
    </para>

    <para>
     Certains systèmes affichent moins zéro comme <literal>-0</> alors que
     d'autres affichent seulement <literal>0</>.
    </para>

    <para>
     Certains systèmes signalent les erreurs des fonctions <function>pow()</function> et
     <function>exp()</function> différemment du mécanisme attendu par le
     code de <productname>PostgreSQL</productname>.
    </para>
   </sect2>

   <sect2>
    <title>Différences dans le tri des lignes</title>
      
    <para>
     Des différences peuvent apparaître entre l'ordre d'affichage des lignes
     et celui du fichier de référence. Dans la plupart des cas, il ne s'agit pas
     vraiment d'un bogue. La plupart des scripts de tests de régression ne sont pas assez
     stricts pour utiliser un <literal>ORDER BY</> sur chaque
     <literal>SELECT</>. De ce fait, l'ordre des lignes n'est pas forcément
     défini suivant la spécification SQL exacte. En pratique, les mêmes requêtes
     étant exécutées sur les mêmes données avec le même logiciel, le même tri des
     résultats est généralement obtenu sur toutes les plateformes et
     le manque d'<literal>ORDER BY</> ne pose pas de problème. Il se peut toutefois
     que quelques requêtes affichent des différences de tri entre plateformes.
     (Ces différences peuvent aussi être la conséquence d'une locale différente de C.)
    </para>

    <para>
     Ainsi, il n'y a pas lieu de s'inquiéter d'une différence de tri, sauf si la
     requête possède un <literal>ORDER BY</> que le résultat ne respecte pas.
     Il est alors intéressant de faire remonter cette information,
     afin qu'un <literal>ORDER BY</> soit ajouté à cette requête pour éliminer les faux
     <quote>échecs</quote> dans les versions suivantes.
    </para>

    <para>
     Si toutes les requêtes ne sont pas ordonnées, c'est simplement parce
     que cela rendrait les tests de régression moins utiles. En effet, ils
     tendraient à exercer des plans de requêtes produisant des résultats
     ordonnés excluant ainsi les autres types de plans.
    </para>
   </sect2>

   <sect2>
    <title>Le test <quote>random</quote></title>
      
    <para>
     Le script de tests <literal>random</literal> a pour but de produire
     des résultats aléatoires. Dans de rares cas, ceci fait échouer random
     aux tests de régression. Saisir
<programlisting>
diff results/random.out expected/random.out
</programlisting>
ne devrait produire au plus que quelques lignes différentes. Cela est normal
     et ne devient préoccupant que si les tests random échouent en permanence
     lors de tests répétés
    </para>
   </sect2>
  </sect1>

<!-- We might want to move the following section into the developer's guide. -->
  <sect1 id="regress-platform">
   <title>Fichiers de comparaison spécifiques à la plateforme</title>

   <para>
    Comme certains des tests produisent de façon inhérente des
    résultats spécifiques à la plateforme, nous avons fourni un moyen de fournir
    des fichiers de comparaison de résultats spécifiques à la plateforme.
    Fréquemment, la même variation s'applique entre plusieurs plateformes&nbsp;;
    plutôt que de fournir un fichier de comparaison séparé pour chaque
    plateforme, il existe un fichier de correspondance définissant les fichiers
    de comparaison à utiliser. Donc, pour éliminer les <quote>échecs</quote> dûs
    à des tests bogués pour une plateforme particulière, vous devez choisir ou
    créer un fichier de résultat variant puis ajouter une ligne dans le fichier
    de correspondance, à savoir <filename>src/test/regress/resultmap</filename>.
   </para>

   <para>
    Chaque ligne du fichier de correspondance est de la forme
<synopsis>
nomtest/modeleplateform=fichiercomparaison
</synopsis>
    Le nom de tests est juste le nom du module de tests de régression
    particulier. Le modèle de plateforme est un modèle dans le style des outils
    Unix <command>expr</> (c'est-à-dire une expression rationnelle avec une
    ancre implicite <literal>^</literal> au début). Il est testé avec le nom de
    plateforme affiche par <command>config.guess</command> suivi par
    <literal>:gcc</literal> ou <literal>:cc</literal>, suivant que vous utilisez
    un compilateur GNU ou le compilateur de base de votre système (sur les
    systèmes où il y a une différence). Le nom du fichier de comparaison est le
    nom du fichier de comparaison substitué.
   </para>

   <para>
    Par exemple&nbsp;: certains systèmes interprètent les très petites valeurs
    en virgule flottante comme zéro, plutôt que de rapporter une erreur. Ceci
    fait quelques petites différences dans le test de régression
    <filename>float8</>. Du coup, nous fournissons un fichier de comparaison
    variable, <filename>float8-small-is-zero.out</filename>, qui inclut les
    résultats attendus sur ces systèmes. Pour faire taire les messages
    d'<quote>échec</quote> erronés sur les plateformes
    <systemitem>OpenBSD</systemitem>, <filename>resultmap</filename> inclut
<programlisting>
float8/i.86-.*-openbsd=float8-small-is-zero
</programlisting>
    qui se déclenche sur toute machine où la sortie de
    <command>config.guess</command> correspond à
    <literal>i.86-.*-openbsd</literal>. D'autres lignes dans
    <filename>resultmap</> sélectionnent le fichier de comparaison variable pour
    les autres plateformes si c'est approprié.
   </para>
   
  </sect1>
  
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
