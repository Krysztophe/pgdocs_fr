<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
$Header: /var/lib/cvs/pgsql-fr/sgml/start.sgml,v 1.13 2005/10/02 12:42:21 guillaume Exp $
-->

 <chapter id="tutorial-start">
  <title>Démarrage</title>

  <sect1 id="tutorial-install">
   <title>Installation</title>

   <para>
    Bien sûr, avant de pouvoir utiliser <productname>PostgreSQL</productname>,
    vous devez l'installer. Il est possible que
    <productname>PostgreSQL</productname> soit déjà installé dans
    votre environnement, soit parce qu'il est inclus dans votre
    distribution, soit parce que votre administrateur système s'en est chargé.
    Dans ce cas, vous devriez obtenir les informations nécessaires pour accéder
    à <productname>PostgreSQL</productname> dans la documentation de votre
    distribution ou de la part de votre administrateur.
   </para>

   <para>
    Si vous n'êtes pas sûr que <productname>PostgreSQL</productname>
    soit déjà disponible ou que vous puissiez l'utiliser pour vos tests,
    vous avez la possibilité de l'installer vous-même. Le faire n'est
    pas difficile et peut être un bon exercice.
    <productname>PostgreSQL</productname> peut être installé par
    n'importe quel utilisateur sans droit particulier, aucun accès
    super-utilisateur (<systemitem>root</systemitem>) n'est requis.
   </para>

   <para>
    Si vous installez <productname>PostgreSQL</productname>
    vous-même, référez-vous au <xref linkend="installation"/>
    pour les instructions sur l'installation, puis revenez à ce guide
    quand l'installation est terminée.  Nous vous conseillons de
    suivre attentivement la section sur la configuration des
    variables d'environnement appropriées.
   </para>

   <para>
    Si votre administrateur n'a pas fait une installation par défaut,
    vous pouvez avoir à effectuer un paramétrage supplémentaire. Par exemple,
    si le serveur de bases de données est une machine distante, vous
    aurez besoin de configurer la variable d'environnement
    <envar>PGHOST</envar> avec le nom du serveur de bases de données.
    Il sera aussi peut-être nécessaire de configurer la variable d'environnement
    <envar>PGPORT</envar>. La démarche est la suivante&nbsp;: si vous essayez
    de démarrer un programme et qu'il se plaint de ne pas pouvoir se
    connecter à la base de données, vous devez consulter votre
    administrateur ou, si c'est vous, la documentation pour être sûr
    que votre environnement est correctement paramétré.  Si vous
    n'avez pas compris le paragraphe précédent, lisez donc la
    prochaine section.
   </para>
  </sect1>


  <sect1 id="tutorial-arch">
   <title>Concepts architecturaux de base</title>

   <para>
    Avant de continuer, vous devez connaître les bases de
    l'architecture système de <productname>PostgreSQL</productname>.
    Comprendre comment les parties de
    <productname>PostgreSQL</productname> interagissent entre elles rendra ce
    chapitre un peu plus clair.
   </para>

   <para>
    Dans le jargon des bases de données,
    <productname>PostgreSQL</productname> utilise un modèle
    client/serveur. Une session <productname>PostgreSQL</productname>
    est le résultat de la coopération des processus (programmes)
    suivants&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       Un processus serveur, qui gère les fichiers de la base de
       données, accepte les connexions à la base de la part des
       applications clientes et effectue sur la base les actions
       des clients.  Le programme serveur est appelé
       <filename>postmaster</filename>.
       <indexterm><primary>postmaster</primary></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
       L'application cliente des utilisateurs qui veulent effectuer
       des opérations sur la base de données.  Les applications
       clientes peuvent être de nature très différentes&nbsp;: un client
       peut être un outil texte, une application graphique, un
       serveur web qui accède à la base de données pour afficher des
       pages web ou un outil spécialisé dans la maintenance de bases
       de données.  Certaines applications clientes sont fournies
       avec <productname>PostgreSQL</productname>&nbsp;; la plupart sont
       développées par les utilisateurs.
      </para>
     </listitem>

    </itemizedlist>
   </para>

   <para>
    Comme souvent avec les applications client/serveur, le client
    et le serveur peuvent être sur des hôtes différents.  Dans ce cas,
    ils communiquent à travers une connexion réseau TCP/IP.  Vous
    devez garder cela à l'esprit car les fichiers qui sont 
    accessibles sur la machine cliente peuvent ne pas l'être (ou
    l'être seulement en utilisant des noms de fichiers différents) sur
    la machine exécutant le serveur de bases de données.
   </para>

   <para>
    Le serveur <productname>PostgreSQL</productname> peut traiter de
    multiples connexions simultanées depuis les clients.  Dans ce but,
    il démarre (<quote>fork</quote>) un nouveau processus pour chaque
    connexion. À ce moment, le client et le nouveau processus serveur
    communiquent sans intervention de la part du processus
    <filename>postmaster</filename> original.  Ainsi, le
    <filename>postmaster</filename> s'exécute toujours, attendant de
    nouvelles connexions clientes, tandis que le client et les
    processus serveurs associés vont et viennent (bien sûr, tout ceci est
    invisible pour l'utilisateur&nbsp;; nous le mentionnons ici
    seulement par exhaustivité).
   </para>
  </sect1>


  <sect1 id="tutorial-createdb">
   <title>Création d'une base de données</title>

   <indexterm zone="tutorial-createdb">
    <primary>base de données</primary>
    <secondary>création</secondary>
   </indexterm>

   <indexterm zone="tutorial-createdb">
    <primary>createdb</primary>
   </indexterm>

   <para>
    Le premier test pour voir si vous pouvez accéder au serveur de
    bases de données consiste à essayer de créer une base.  Un
    serveur <productname>PostgreSQL</productname> peut gérer
    plusieurs bases de données.  Généralement, une base de données
    distincte est utilisée pour chaque projet ou pour chaque
    utilisateur.
   </para>

   <para>
    Il est possible que votre administrateur ait déjà créé une base
    pour vous.  Il devrait vous avoir dit quel est le nom
    de celle-ci.  Dans ce cas, vous pouvez omettre cette étape et aller
    directement à la prochaine section.
   </para>

   <para>
    Pour créer une nouvelle base, nommée <literal>ma_base</literal> dans cet
    exemple, utilisez la commande suivante&nbsp;:
<screen><prompt>$</prompt> <userinput>createdb ma_base</userinput></screen>
    Cela devrait renvoyer la réponse&nbsp;:
<screen>CREATE DATABASE</screen>
    Si oui, cette étape est réussie et vous pouvez sauter le reste de
    cette section.
   </para>

   <para>
    Si vous voyez un message similaire à&nbsp;:
<screen>createdb: command not found</screen>
    alors <productname>PostgreSQL</productname> n'a pas été installé
    correctement.  Soit il n'a pas été installé du tout, soit le
    chemin n'a pas été configuré correctement.  Essayez d'appeler
    la commande avec le chemin absolu&nbsp;:
<screen><prompt>$</prompt> <userinput>/usr/local/pgsql/bin/createdb ma_base</userinput></screen>
    Le chemin sur votre serveur peut être différent. Contactez votre
    administrateur ou vérifiez dans les instructions d'installation pour
    corriger la situation.
   </para>

   <para>
    Voici une autre réponse possible&nbsp;:
<screen>createdb: could not connect to database postgres: could not connect to server:
No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/tmp/.s.PGSQL.5432"?</screen>
    Cela signifie que le serveur n'était pas démarré, ou qu'il
    n'était pas démarré où <command>createdb</command> l'attendait.
    Une fois encore, vérifiez les instructions d'installation ou
    consultez votre administrateur.
   </para>

   <para>
    Voici une autre réponse possible&nbsp;:
<screen>createdb: could not connect to database postgres: FATAL:  user "joe" does not exist</screen>
    où votre nom de connexion est mentionné. Ceci survient si l'administrateur
    n'a pas créé de compte utilisateur <productname>PostgreSQL</productname> pour vous
    (les comptes utilisateurs <productname>PostgreSQL</productname> sont distincts de ceux
    du système d'exploitation). Si vous êtes l'administrateur, la lecture du <xref
    linkend="user-manag"/> vous expliquera comment créer de tels comptes. Vous
    aurez besoin de devenir l'utilisateur du système d'exploitation sous lequel
    <productname>PostgreSQL</productname> a été installé (généralement
    <literal>postgres</literal>) pour créer le compte du premier utilisateur. Cela
    pourrait aussi signifier que vous avez un nom d'utilisateur
    <productname>PostgreSQL</productname> qui est différent de celui de votre compte
    utilisateur du système d'exploitation&nbsp;; dans ce cas, vous avez besoin
    d'utiliser l'option <option>-U</option> ou de configurer la variable
    d'environnement <envar>PGUSER</envar> pour spécifier votre nom d'utilisateur
    <productname>PostgreSQL</productname>.
   </para>

   <para>
    Si vous n'avez pas les droits requis pour créer une base, vous
    verrez le message suivant&nbsp;:
<screen>createdb: database creation failed: ERROR:  permission denied to create database</screen>
    Tous les utilisateurs n'ont pas l'autorisation de créer de
    nouvelles bases de données.  Si
    <productname>PostgreSQL</productname> refuse de créer des bases
    pour vous, alors l'administrateur a besoin de vous accorder ce
    droit. Consultez votre administrateur si cela
    arrive.  Si vous avez installé vous-même
    <productname>PostgreSQL</productname>, alors vous devez ouvrir
    une session sous le compte utilisateur que vous avez utilisé pour
    démarrer le serveur.

    <footnote>
     <para>
      Explications de pourquoi ceci fonctionne&nbsp;:
      les noms d'utilisateurs de <productname>PostgreSQL</productname>
      sont différents des comptes utilisateurs du système
      d'exploitation.  Quand vous vous connectez à une base de
      données, vous pouvez choisir le nom d'utilisateur
      <productname>PostgreSQL</productname> que vous utilisez&nbsp;; si vous
      ne spécifiez rien, cela sera par défaut le même nom que votre
      compte système courant.  Ce qui se passe, c'est qu'il y toujours
      un compte utilisateur
      <productname>PostgreSQL</productname> qui aura le même nom que
      l'utilisateur du système d'exploitation qui a démarré le
      serveur, et cet utilisateur aura toujours le droit de créer
      des bases.  Au lieu de vous connecter en tant que cet
      utilisateur, vous pouvez spécifier partout l'option
      <option>-U</option> pour sélectionner un nom d'utilisateur
      <productname>PostgreSQL</productname> sous lequel vous
      connecter.
     </para>
    </footnote>
   </para>

   <para>
    Vous pouvez aussi créer des bases de données avec d'autres noms.
    <productname>PostgreSQL</productname> vous permet de créer un
    nombre quelconque de bases sur un site donné.  Le nom des bases
    doit avoir comme premier caractère un caractère alphabétique et
    est limité à 63 caractères de longueur.  Un choix pratique est de
    créer une base avec le même nom que votre nom d'utilisateur
    courant.  Beaucoup d'outils utilisent ce nom comme nom par défaut
    pour la base&nbsp;; cela permet de gagner du temps en saisie. Pour
    créer cette base, tapez simplement&nbsp;:
<screen><prompt>$</prompt> <userinput>createdb</userinput></screen>
   </para>

   <para>
    Si vous ne voulez plus utiliser votre base, vous pouvez la supprimer.
    Par exemple, si vous êtes le propriétaire (créateur) de la base
    <literal>ma_base</literal>, vous pouvez la détruire en utilisant la
    commande suivante&nbsp;:
<screen><prompt>$</prompt> <userinput>dropdb ma_base</userinput></screen>
    (Pour cette commande, le nom de la base n'est pas par défaut le
    nom du compte utilisateur. Vous devez toujours en spécifier un.)
    Cette action supprime physiquement tous les fichiers associés avec
    la base de données et elle ne peut pas être annulée, donc cela
    doit se faire avec beaucoup de prévoyance.
   </para>

   <para>
    Plus d'informations sur <command>createdb</command> et
    <command>dropdb</command> peuvent être trouvées respectivement
    dans <xref linkend="app-createdb"/> et <xref linkend="app-dropdb"/>.
   </para>
  </sect1>


  <sect1 id="tutorial-accessdb">
   <title>Accéder à une base</title>

   <indexterm zone="tutorial-accessdb">
    <primary>psql</primary>
   </indexterm>

   <para>
    Une fois que vous avez créé la base, vous pouvez y accéder&nbsp;:

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
       Démarrez le programme en ligne de commande de
       <productname>PostgreSQL</productname>, appelé
       <application><firstterm>psql</firstterm></application>, qui vous permet
       de saisir, d'éditer et d'exécuter de manière interactive les
       commandes <acronym>SQL</acronym>.
      </para>
     </listitem>

     <listitem>
      <para>
       Utilisez un outil existant avec une interface graphique comme
       <application>PgAccess</application> ou une suite bureautique
       avec un support <acronym>ODBC</acronym> pour créer et manipuler
       une base.  Ces possibilités ne sont pas couvertes dans ce
       tutoriel.
      </para>
     </listitem>

     <listitem>
      <para>
       Écrivez une application personnalisée en utilisant un des
       nombreux langages disponibles.  Ces possibilités sont
       davantage examinées dans la <xref linkend="client-interfaces"/>.
      </para>
     </listitem>
    </itemizedlist>

    Vous voulez probablement lancer <command>psql</command> pour
    essayer les exemples de ce tutoriel.  Pour cela, saisissez
    la commande suivante&nbsp;:
<screen><prompt>$</prompt> <userinput>psql ma_base</userinput></screen>
    Si vous n'indiquez pas le nom de la base, alors elle utilisera par
    défaut le nom de votre compte utilisateur.  Vous avez déjà
    découvert ce schéma dans la section précédente.
   </para>

   <para>
    Dans <command>psql</command>, vous serez accueilli avec le message
    suivant&nbsp;:
<screen>Welcome to psql &version;, the PostgreSQL interactive terminal.
 
Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit
 
ma_base=&gt;</screen>
    <indexterm><primary>super-utilisateur</primary></indexterm>
    La dernière ligne peut aussi être&nbsp;:
<screen>ma_base=#</screen>
    Cela veut dire que vous êtes le super-utilisateur de la base de
    données ce qui est souvent le cas si vous avez installé
    <productname>PostgreSQL</productname> vous-même. Être
    super-utilisateur signifie que vous n'êtes pas sujet aux contrôles
    d'accès.  Concernant ce tutoriel, cela n'a pas d'importance.
   </para>

   <para>
    Si vous rencontrez des problèmes en exécutant
    <command>psql</command>, alors retournez à la section précédente.
    Le diagnostique de <command>psql</command> et de
    <command>createdb</command> sont semblables. Si le dernier
    fonctionnait, alors le premier devrait fonctionner également.
   </para>

   <para>
    La dernière ligne affichée par <command>psql</command> est
    l'invite. Cela indique que <command>psql</command> est à
    l'écoute et que vous pouvez saisir des requêtes
    <acronym>SQL</acronym> dans l'espace de travail maintenu par
    <command>psql</command>.  Essayez ces commandes&nbsp;:
    <indexterm><primary>version</primary></indexterm>
<screen><prompt>ma_base=&gt;</prompt> <userinput>SELECT version();</userinput>
                            version
----------------------------------------------------------------
 PostgreSQL &version; on i586-pc-linux-gnu, compiled by GCC 2.96
(1 row)

<prompt>ma_base=&gt;</prompt> <userinput>SELECT current_date;</userinput>
    date
------------
 2002-08-31
(1 row)

<prompt>ma_base=&gt;</prompt> <userinput>SELECT 2 + 2;</userinput>
 ?column?
----------
        4
(1 row)</screen>
   </para>

   <para>
    Le programme <command>psql</command> dispose d'un certain nombre de
    commandes internes qui ne sont pas des commandes SQL.  Elles
    commencent avec le caractère barre oblique inverse,
    <quote><literal>\</literal></quote>.  Certaines de ces
    commandes sont listées dans le message de bienvenue.  Par exemple,
    vous pouvez obtenir de l'aide sur la syntaxe de nombreuses
    commandes <acronym>SQL</acronym> de
    <productname>PostgreSQL</productname> en tapant&nbsp;:
<screen><prompt>ma_base=&gt;</prompt> <userinput>\h</userinput></screen>
   </para>

   <para>
    Pour sortir de <command>psql</command>, saisissez
<screen><prompt>ma_base=&gt;</prompt> <userinput>\q</userinput></screen>
    et <command>psql</command> se terminera et vous ramènera à votre
    shell. Pour plus de commandes internes, tapez
    <literal>\?</literal> à l'invite de <command>psql</command>. Les
    possibilités complètes de <command>psql</command> sont documentées
    dans <xref linkend="app-psql"/>.  Si <productname>PostgreSQL</productname> est
    installé correctement, vous pouvez aussi taper
    <literal>man psql</literal> à l'invite du shell système pour voir
    la documentation. Dans ce tutoriel, nous ne verrons pas ces
    caractéristiques explicitement mais vous pouvez les utiliser
    vous-même quand bon vous semblera.
   </para>

  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
